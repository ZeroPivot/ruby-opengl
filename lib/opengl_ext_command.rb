# opengl-bindings
# * http://rubygems.org/gems/opengl-bindings
# * http://github.com/vaiorabbit/ruby-opengl
#
# [NOTICE] This is an automatically generated file.

require 'fiddle'

module GLExt

  def self.define_ext_command_GL_3DFX_multisample
  end # self.define_ext_command_GL_3DFX_multisample

  def self.get_ext_command_GL_3DFX_multisample
    [
    ]
  end # self.get_ext_command_GL_3DFX_multisample


  def self.define_ext_command_GL_3DFX_tbuffer
    GL::GL_FUNCTION_SYMBOLS << :TbufferMask3DFX
    GL::GL_FUNCTIONS_ARGS_MAP[:TbufferMask3DFX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TbufferMask3DFX] = Fiddle::TYPE_VOID
    GL.bind_command(:TbufferMask3DFX)
    GL.module_eval(<<-SRC)
      def self.TbufferMask3DFX(_mask_)
        GL_FUNCTIONS_MAP[:TbufferMask3DFX].call(_mask_)
      end
    SRC
  end # self.define_ext_command_GL_3DFX_tbuffer

  def self.get_ext_command_GL_3DFX_tbuffer
    [
      'TbufferMask3DFX',
    ]
  end # self.get_ext_command_GL_3DFX_tbuffer


  def self.define_ext_command_GL_3DFX_texture_compression_FXT1
  end # self.define_ext_command_GL_3DFX_texture_compression_FXT1

  def self.get_ext_command_GL_3DFX_texture_compression_FXT1
    [
    ]
  end # self.get_ext_command_GL_3DFX_texture_compression_FXT1


  def self.define_ext_command_GL_AMD_blend_minmax_factor
  end # self.define_ext_command_GL_AMD_blend_minmax_factor

  def self.get_ext_command_GL_AMD_blend_minmax_factor
    [
    ]
  end # self.get_ext_command_GL_AMD_blend_minmax_factor


  def self.define_ext_command_GL_AMD_conservative_depth
  end # self.define_ext_command_GL_AMD_conservative_depth

  def self.get_ext_command_GL_AMD_conservative_depth
    [
    ]
  end # self.get_ext_command_GL_AMD_conservative_depth


  def self.define_ext_command_GL_AMD_debug_output
    GL::GL_FUNCTION_SYMBOLS << :DebugMessageEnableAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageEnableAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageEnableAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageEnableAMD)
    GL.module_eval(<<-SRC)
      def self.DebugMessageEnableAMD(_category_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:DebugMessageEnableAMD].call(_category_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageInsertAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageInsertAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageInsertAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageInsertAMD)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsertAMD(_category_, _severity_, _id_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:DebugMessageInsertAMD].call(_category_, _severity_, _id_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageCallbackAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageCallbackAMD] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageCallbackAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageCallbackAMD)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallbackAMD(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:DebugMessageCallbackAMD].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDebugMessageLogAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDebugMessageLogAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDebugMessageLogAMD] = -Fiddle::TYPE_INT
    GL.bind_command(:GetDebugMessageLogAMD)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLogAMD(_count_, _bufSize_, _categories_, _severities_, _ids_, _lengths_, _message_)
        GL_FUNCTIONS_MAP[:GetDebugMessageLogAMD].call(_count_, _bufSize_, _categories_, _severities_, _ids_, _lengths_, _message_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_debug_output

  def self.get_ext_command_GL_AMD_debug_output
    [
      'DebugMessageEnableAMD',
      'DebugMessageInsertAMD',
      'DebugMessageCallbackAMD',
      'GetDebugMessageLogAMD',
    ]
  end # self.get_ext_command_GL_AMD_debug_output


  def self.define_ext_command_GL_AMD_depth_clamp_separate
  end # self.define_ext_command_GL_AMD_depth_clamp_separate

  def self.get_ext_command_GL_AMD_depth_clamp_separate
    [
    ]
  end # self.get_ext_command_GL_AMD_depth_clamp_separate


  def self.define_ext_command_GL_AMD_draw_buffers_blend
    GL::GL_FUNCTION_SYMBOLS << :BlendFuncIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendFuncIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendFuncIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendFuncIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendFuncIndexedAMD(_buf_, _src_, _dst_)
        GL_FUNCTIONS_MAP[:BlendFuncIndexedAMD].call(_buf_, _src_, _dst_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendFuncSeparateIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendFuncSeparateIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendFuncSeparateIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendFuncSeparateIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateIndexedAMD(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
        GL_FUNCTIONS_MAP[:BlendFuncSeparateIndexedAMD].call(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendEquationIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquationIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquationIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquationIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendEquationIndexedAMD(_buf_, _mode_)
        GL_FUNCTIONS_MAP[:BlendEquationIndexedAMD].call(_buf_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendEquationSeparateIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquationSeparateIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquationSeparateIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquationSeparateIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendEquationSeparateIndexedAMD(_buf_, _modeRGB_, _modeAlpha_)
        GL_FUNCTIONS_MAP[:BlendEquationSeparateIndexedAMD].call(_buf_, _modeRGB_, _modeAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_draw_buffers_blend

  def self.get_ext_command_GL_AMD_draw_buffers_blend
    [
      'BlendFuncIndexedAMD',
      'BlendFuncSeparateIndexedAMD',
      'BlendEquationIndexedAMD',
      'BlendEquationSeparateIndexedAMD',
    ]
  end # self.get_ext_command_GL_AMD_draw_buffers_blend


  def self.define_ext_command_GL_AMD_framebuffer_multisample_advanced
    GL::GL_FUNCTION_SYMBOLS << :RenderbufferStorageMultisampleAdvancedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderbufferStorageMultisampleAdvancedAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderbufferStorageMultisampleAdvancedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderbufferStorageMultisampleAdvancedAMD)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisampleAdvancedAMD(_target_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:RenderbufferStorageMultisampleAdvancedAMD].call(_target_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedRenderbufferStorageMultisampleAdvancedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedRenderbufferStorageMultisampleAdvancedAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedRenderbufferStorageMultisampleAdvancedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedRenderbufferStorageMultisampleAdvancedAMD)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisampleAdvancedAMD(_renderbuffer_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:NamedRenderbufferStorageMultisampleAdvancedAMD].call(_renderbuffer_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_framebuffer_multisample_advanced

  def self.get_ext_command_GL_AMD_framebuffer_multisample_advanced
    [
      'RenderbufferStorageMultisampleAdvancedAMD',
      'NamedRenderbufferStorageMultisampleAdvancedAMD',
    ]
  end # self.get_ext_command_GL_AMD_framebuffer_multisample_advanced


  def self.define_ext_command_GL_AMD_framebuffer_sample_positions
    GL::GL_FUNCTION_SYMBOLS << :FramebufferSamplePositionsfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferSamplePositionsfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferSamplePositionsfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferSamplePositionsfvAMD)
    GL.module_eval(<<-SRC)
      def self.FramebufferSamplePositionsfvAMD(_target_, _numsamples_, _pixelindex_, _values_)
        GL_FUNCTIONS_MAP[:FramebufferSamplePositionsfvAMD].call(_target_, _numsamples_, _pixelindex_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferSamplePositionsfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferSamplePositionsfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferSamplePositionsfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferSamplePositionsfvAMD)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferSamplePositionsfvAMD(_framebuffer_, _numsamples_, _pixelindex_, _values_)
        GL_FUNCTIONS_MAP[:NamedFramebufferSamplePositionsfvAMD].call(_framebuffer_, _numsamples_, _pixelindex_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFramebufferParameterfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFramebufferParameterfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFramebufferParameterfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFramebufferParameterfvAMD)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameterfvAMD(_target_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
        GL_FUNCTIONS_MAP[:GetFramebufferParameterfvAMD].call(_target_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedFramebufferParameterfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedFramebufferParameterfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedFramebufferParameterfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedFramebufferParameterfvAMD)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferParameterfvAMD(_framebuffer_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
        GL_FUNCTIONS_MAP[:GetNamedFramebufferParameterfvAMD].call(_framebuffer_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_framebuffer_sample_positions

  def self.get_ext_command_GL_AMD_framebuffer_sample_positions
    [
      'FramebufferSamplePositionsfvAMD',
      'NamedFramebufferSamplePositionsfvAMD',
      'GetFramebufferParameterfvAMD',
      'GetNamedFramebufferParameterfvAMD',
    ]
  end # self.get_ext_command_GL_AMD_framebuffer_sample_positions


  def self.define_ext_command_GL_AMD_gcn_shader
  end # self.define_ext_command_GL_AMD_gcn_shader

  def self.get_ext_command_GL_AMD_gcn_shader
    [
    ]
  end # self.get_ext_command_GL_AMD_gcn_shader


  def self.define_ext_command_GL_AMD_gpu_shader_half_float
  end # self.define_ext_command_GL_AMD_gpu_shader_half_float

  def self.get_ext_command_GL_AMD_gpu_shader_half_float
    [
    ]
  end # self.get_ext_command_GL_AMD_gpu_shader_half_float


  def self.define_ext_command_GL_AMD_gpu_shader_int16
  end # self.define_ext_command_GL_AMD_gpu_shader_int16

  def self.get_ext_command_GL_AMD_gpu_shader_int16
    [
    ]
  end # self.get_ext_command_GL_AMD_gpu_shader_int16


  def self.define_ext_command_GL_AMD_gpu_shader_int64
    GL::GL_FUNCTION_SYMBOLS << :Uniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1i64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2i64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3i64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4i64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1ui64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2ui64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3ui64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4ui64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformi64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformi64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformi64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformui64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformui64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_gpu_shader_int64

  def self.get_ext_command_GL_AMD_gpu_shader_int64
    [
      'Uniform1i64NV',
      'Uniform2i64NV',
      'Uniform3i64NV',
      'Uniform4i64NV',
      'Uniform1i64vNV',
      'Uniform2i64vNV',
      'Uniform3i64vNV',
      'Uniform4i64vNV',
      'Uniform1ui64NV',
      'Uniform2ui64NV',
      'Uniform3ui64NV',
      'Uniform4ui64NV',
      'Uniform1ui64vNV',
      'Uniform2ui64vNV',
      'Uniform3ui64vNV',
      'Uniform4ui64vNV',
      'GetUniformi64vNV',
      'GetUniformui64vNV',
      'ProgramUniform1i64NV',
      'ProgramUniform2i64NV',
      'ProgramUniform3i64NV',
      'ProgramUniform4i64NV',
      'ProgramUniform1i64vNV',
      'ProgramUniform2i64vNV',
      'ProgramUniform3i64vNV',
      'ProgramUniform4i64vNV',
      'ProgramUniform1ui64NV',
      'ProgramUniform2ui64NV',
      'ProgramUniform3ui64NV',
      'ProgramUniform4ui64NV',
      'ProgramUniform1ui64vNV',
      'ProgramUniform2ui64vNV',
      'ProgramUniform3ui64vNV',
      'ProgramUniform4ui64vNV',
    ]
  end # self.get_ext_command_GL_AMD_gpu_shader_int64


  def self.define_ext_command_GL_AMD_interleaved_elements
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribParameteriAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribParameteriAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribParameteriAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribParameteriAMD)
    GL.module_eval(<<-SRC)
      def self.VertexAttribParameteriAMD(_index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:VertexAttribParameteriAMD].call(_index_, _pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_interleaved_elements

  def self.get_ext_command_GL_AMD_interleaved_elements
    [
      'VertexAttribParameteriAMD',
    ]
  end # self.get_ext_command_GL_AMD_interleaved_elements


  def self.define_ext_command_GL_AMD_multi_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :MultiDrawArraysIndirectAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawArraysIndirectAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawArraysIndirectAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawArraysIndirectAMD)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectAMD(_mode_, _indirect_, _primcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawArraysIndirectAMD].call(_mode_, _indirect_, _primcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsIndirectAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsIndirectAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsIndirectAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsIndirectAMD)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectAMD(_mode_, _type_, _indirect_, _primcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsIndirectAMD].call(_mode_, _type_, _indirect_, _primcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_multi_draw_indirect

  def self.get_ext_command_GL_AMD_multi_draw_indirect
    [
      'MultiDrawArraysIndirectAMD',
      'MultiDrawElementsIndirectAMD',
    ]
  end # self.get_ext_command_GL_AMD_multi_draw_indirect


  def self.define_ext_command_GL_AMD_name_gen_delete
    GL::GL_FUNCTION_SYMBOLS << :GenNamesAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GenNamesAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenNamesAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GenNamesAMD)
    GL.module_eval(<<-SRC)
      def self.GenNamesAMD(_identifier_, _num_, _names_)
        GL_FUNCTIONS_MAP[:GenNamesAMD].call(_identifier_, _num_, _names_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteNamesAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteNamesAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteNamesAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteNamesAMD)
    GL.module_eval(<<-SRC)
      def self.DeleteNamesAMD(_identifier_, _num_, _names_)
        GL_FUNCTIONS_MAP[:DeleteNamesAMD].call(_identifier_, _num_, _names_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsNameAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:IsNameAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsNameAMD] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsNameAMD)
    GL.module_eval(<<-SRC)
      def self.IsNameAMD(_identifier_, _name_)
        GL_FUNCTIONS_MAP[:IsNameAMD].call(_identifier_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_name_gen_delete

  def self.get_ext_command_GL_AMD_name_gen_delete
    [
      'GenNamesAMD',
      'DeleteNamesAMD',
      'IsNameAMD',
    ]
  end # self.get_ext_command_GL_AMD_name_gen_delete


  def self.define_ext_command_GL_AMD_occlusion_query_event
    GL::GL_FUNCTION_SYMBOLS << :QueryObjectParameteruiAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:QueryObjectParameteruiAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:QueryObjectParameteruiAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:QueryObjectParameteruiAMD)
    GL.module_eval(<<-SRC)
      def self.QueryObjectParameteruiAMD(_target_, _id_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:QueryObjectParameteruiAMD].call(_target_, _id_, _pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_occlusion_query_event

  def self.get_ext_command_GL_AMD_occlusion_query_event
    [
      'QueryObjectParameteruiAMD',
    ]
  end # self.get_ext_command_GL_AMD_occlusion_query_event


  def self.define_ext_command_GL_AMD_performance_monitor
    GL::GL_FUNCTION_SYMBOLS << :GetPerfMonitorGroupsAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfMonitorGroupsAMD] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfMonitorGroupsAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfMonitorGroupsAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorGroupsAMD(_numGroups_, _groupsSize_, _groups_)
        GL_FUNCTIONS_MAP[:GetPerfMonitorGroupsAMD].call(_numGroups_, _groupsSize_, _groups_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfMonitorCountersAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfMonitorCountersAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfMonitorCountersAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfMonitorCountersAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCountersAMD(_group_, _numCounters_, _maxActiveCounters_, _counterSize_, _counters_)
        GL_FUNCTIONS_MAP[:GetPerfMonitorCountersAMD].call(_group_, _numCounters_, _maxActiveCounters_, _counterSize_, _counters_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfMonitorGroupStringAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfMonitorGroupStringAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfMonitorGroupStringAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfMonitorGroupStringAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorGroupStringAMD(_group_, _bufSize_, _length_, _groupString_)
        GL_FUNCTIONS_MAP[:GetPerfMonitorGroupStringAMD].call(_group_, _bufSize_, _length_, _groupString_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfMonitorCounterStringAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfMonitorCounterStringAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfMonitorCounterStringAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfMonitorCounterStringAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCounterStringAMD(_group_, _counter_, _bufSize_, _length_, _counterString_)
        GL_FUNCTIONS_MAP[:GetPerfMonitorCounterStringAMD].call(_group_, _counter_, _bufSize_, _length_, _counterString_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfMonitorCounterInfoAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfMonitorCounterInfoAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfMonitorCounterInfoAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfMonitorCounterInfoAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCounterInfoAMD(_group_, _counter_, _pname_, _data_)
        GL_FUNCTIONS_MAP[:GetPerfMonitorCounterInfoAMD].call(_group_, _counter_, _pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenPerfMonitorsAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GenPerfMonitorsAMD] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenPerfMonitorsAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GenPerfMonitorsAMD)
    GL.module_eval(<<-SRC)
      def self.GenPerfMonitorsAMD(_n_, _monitors_)
        GL_FUNCTIONS_MAP[:GenPerfMonitorsAMD].call(_n_, _monitors_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeletePerfMonitorsAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:DeletePerfMonitorsAMD] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeletePerfMonitorsAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:DeletePerfMonitorsAMD)
    GL.module_eval(<<-SRC)
      def self.DeletePerfMonitorsAMD(_n_, _monitors_)
        GL_FUNCTIONS_MAP[:DeletePerfMonitorsAMD].call(_n_, _monitors_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SelectPerfMonitorCountersAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:SelectPerfMonitorCountersAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SelectPerfMonitorCountersAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:SelectPerfMonitorCountersAMD)
    GL.module_eval(<<-SRC)
      def self.SelectPerfMonitorCountersAMD(_monitor_, _enable_, _group_, _numCounters_, _counterList_)
        GL_FUNCTIONS_MAP[:SelectPerfMonitorCountersAMD].call(_monitor_, _enable_, _group_, _numCounters_, _counterList_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BeginPerfMonitorAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginPerfMonitorAMD] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginPerfMonitorAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginPerfMonitorAMD)
    GL.module_eval(<<-SRC)
      def self.BeginPerfMonitorAMD(_monitor_)
        GL_FUNCTIONS_MAP[:BeginPerfMonitorAMD].call(_monitor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndPerfMonitorAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:EndPerfMonitorAMD] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndPerfMonitorAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:EndPerfMonitorAMD)
    GL.module_eval(<<-SRC)
      def self.EndPerfMonitorAMD(_monitor_)
        GL_FUNCTIONS_MAP[:EndPerfMonitorAMD].call(_monitor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfMonitorCounterDataAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfMonitorCounterDataAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfMonitorCounterDataAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfMonitorCounterDataAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCounterDataAMD(_monitor_, _pname_, _dataSize_, _data_, _bytesWritten_)
        GL_FUNCTIONS_MAP[:GetPerfMonitorCounterDataAMD].call(_monitor_, _pname_, _dataSize_, _data_, _bytesWritten_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_performance_monitor

  def self.get_ext_command_GL_AMD_performance_monitor
    [
      'GetPerfMonitorGroupsAMD',
      'GetPerfMonitorCountersAMD',
      'GetPerfMonitorGroupStringAMD',
      'GetPerfMonitorCounterStringAMD',
      'GetPerfMonitorCounterInfoAMD',
      'GenPerfMonitorsAMD',
      'DeletePerfMonitorsAMD',
      'SelectPerfMonitorCountersAMD',
      'BeginPerfMonitorAMD',
      'EndPerfMonitorAMD',
      'GetPerfMonitorCounterDataAMD',
    ]
  end # self.get_ext_command_GL_AMD_performance_monitor


  def self.define_ext_command_GL_AMD_pinned_memory
  end # self.define_ext_command_GL_AMD_pinned_memory

  def self.get_ext_command_GL_AMD_pinned_memory
    [
    ]
  end # self.get_ext_command_GL_AMD_pinned_memory


  def self.define_ext_command_GL_AMD_query_buffer_object
  end # self.define_ext_command_GL_AMD_query_buffer_object

  def self.get_ext_command_GL_AMD_query_buffer_object
    [
    ]
  end # self.get_ext_command_GL_AMD_query_buffer_object


  def self.define_ext_command_GL_AMD_sample_positions
    GL::GL_FUNCTION_SYMBOLS << :SetMultisamplefvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:SetMultisamplefvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SetMultisamplefvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:SetMultisamplefvAMD)
    GL.module_eval(<<-SRC)
      def self.SetMultisamplefvAMD(_pname_, _index_, _val_)
        GL_FUNCTIONS_MAP[:SetMultisamplefvAMD].call(_pname_, _index_, _val_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_sample_positions

  def self.get_ext_command_GL_AMD_sample_positions
    [
      'SetMultisamplefvAMD',
    ]
  end # self.get_ext_command_GL_AMD_sample_positions


  def self.define_ext_command_GL_AMD_seamless_cubemap_per_texture
  end # self.define_ext_command_GL_AMD_seamless_cubemap_per_texture

  def self.get_ext_command_GL_AMD_seamless_cubemap_per_texture
    [
    ]
  end # self.get_ext_command_GL_AMD_seamless_cubemap_per_texture


  def self.define_ext_command_GL_AMD_shader_atomic_counter_ops
  end # self.define_ext_command_GL_AMD_shader_atomic_counter_ops

  def self.get_ext_command_GL_AMD_shader_atomic_counter_ops
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_atomic_counter_ops


  def self.define_ext_command_GL_AMD_shader_ballot
  end # self.define_ext_command_GL_AMD_shader_ballot

  def self.get_ext_command_GL_AMD_shader_ballot
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_ballot


  def self.define_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch
  end # self.define_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch

  def self.get_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch


  def self.define_ext_command_GL_AMD_shader_image_load_store_lod
  end # self.define_ext_command_GL_AMD_shader_image_load_store_lod

  def self.get_ext_command_GL_AMD_shader_image_load_store_lod
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_image_load_store_lod


  def self.define_ext_command_GL_AMD_shader_stencil_export
  end # self.define_ext_command_GL_AMD_shader_stencil_export

  def self.get_ext_command_GL_AMD_shader_stencil_export
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_stencil_export


  def self.define_ext_command_GL_AMD_shader_trinary_minmax
  end # self.define_ext_command_GL_AMD_shader_trinary_minmax

  def self.get_ext_command_GL_AMD_shader_trinary_minmax
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_trinary_minmax


  def self.define_ext_command_GL_AMD_shader_explicit_vertex_parameter
  end # self.define_ext_command_GL_AMD_shader_explicit_vertex_parameter

  def self.get_ext_command_GL_AMD_shader_explicit_vertex_parameter
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_explicit_vertex_parameter


  def self.define_ext_command_GL_AMD_sparse_texture
    GL::GL_FUNCTION_SYMBOLS << :TexStorageSparseAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorageSparseAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorageSparseAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorageSparseAMD)
    GL.module_eval(<<-SRC)
      def self.TexStorageSparseAMD(_target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
        GL_FUNCTIONS_MAP[:TexStorageSparseAMD].call(_target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorageSparseAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorageSparseAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorageSparseAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorageSparseAMD)
    GL.module_eval(<<-SRC)
      def self.TextureStorageSparseAMD(_texture_, _target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
        GL_FUNCTIONS_MAP[:TextureStorageSparseAMD].call(_texture_, _target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_sparse_texture

  def self.get_ext_command_GL_AMD_sparse_texture
    [
      'TexStorageSparseAMD',
      'TextureStorageSparseAMD',
    ]
  end # self.get_ext_command_GL_AMD_sparse_texture


  def self.define_ext_command_GL_AMD_stencil_operation_extended
    GL::GL_FUNCTION_SYMBOLS << :StencilOpValueAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilOpValueAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilOpValueAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilOpValueAMD)
    GL.module_eval(<<-SRC)
      def self.StencilOpValueAMD(_face_, _value_)
        GL_FUNCTIONS_MAP[:StencilOpValueAMD].call(_face_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_stencil_operation_extended

  def self.get_ext_command_GL_AMD_stencil_operation_extended
    [
      'StencilOpValueAMD',
    ]
  end # self.get_ext_command_GL_AMD_stencil_operation_extended


  def self.define_ext_command_GL_AMD_texture_gather_bias_lod
  end # self.define_ext_command_GL_AMD_texture_gather_bias_lod

  def self.get_ext_command_GL_AMD_texture_gather_bias_lod
    [
    ]
  end # self.get_ext_command_GL_AMD_texture_gather_bias_lod


  def self.define_ext_command_GL_AMD_texture_texture4
  end # self.define_ext_command_GL_AMD_texture_texture4

  def self.get_ext_command_GL_AMD_texture_texture4
    [
    ]
  end # self.get_ext_command_GL_AMD_texture_texture4


  def self.define_ext_command_GL_AMD_transform_feedback3_lines_triangles
  end # self.define_ext_command_GL_AMD_transform_feedback3_lines_triangles

  def self.get_ext_command_GL_AMD_transform_feedback3_lines_triangles
    [
    ]
  end # self.get_ext_command_GL_AMD_transform_feedback3_lines_triangles


  def self.define_ext_command_GL_AMD_transform_feedback4
  end # self.define_ext_command_GL_AMD_transform_feedback4

  def self.get_ext_command_GL_AMD_transform_feedback4
    [
    ]
  end # self.get_ext_command_GL_AMD_transform_feedback4


  def self.define_ext_command_GL_AMD_vertex_shader_layer
  end # self.define_ext_command_GL_AMD_vertex_shader_layer

  def self.get_ext_command_GL_AMD_vertex_shader_layer
    [
    ]
  end # self.get_ext_command_GL_AMD_vertex_shader_layer


  def self.define_ext_command_GL_AMD_vertex_shader_tessellator
    GL::GL_FUNCTION_SYMBOLS << :TessellationFactorAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:TessellationFactorAMD] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TessellationFactorAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:TessellationFactorAMD)
    GL.module_eval(<<-SRC)
      def self.TessellationFactorAMD(_factor_)
        GL_FUNCTIONS_MAP[:TessellationFactorAMD].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TessellationModeAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:TessellationModeAMD] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TessellationModeAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:TessellationModeAMD)
    GL.module_eval(<<-SRC)
      def self.TessellationModeAMD(_mode_)
        GL_FUNCTIONS_MAP[:TessellationModeAMD].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_vertex_shader_tessellator

  def self.get_ext_command_GL_AMD_vertex_shader_tessellator
    [
      'TessellationFactorAMD',
      'TessellationModeAMD',
    ]
  end # self.get_ext_command_GL_AMD_vertex_shader_tessellator


  def self.define_ext_command_GL_AMD_vertex_shader_viewport_index
  end # self.define_ext_command_GL_AMD_vertex_shader_viewport_index

  def self.get_ext_command_GL_AMD_vertex_shader_viewport_index
    [
    ]
  end # self.get_ext_command_GL_AMD_vertex_shader_viewport_index


  def self.define_ext_command_GL_APPLE_aux_depth_stencil
  end # self.define_ext_command_GL_APPLE_aux_depth_stencil

  def self.get_ext_command_GL_APPLE_aux_depth_stencil
    [
    ]
  end # self.get_ext_command_GL_APPLE_aux_depth_stencil


  def self.define_ext_command_GL_APPLE_client_storage
  end # self.define_ext_command_GL_APPLE_client_storage

  def self.get_ext_command_GL_APPLE_client_storage
    [
    ]
  end # self.get_ext_command_GL_APPLE_client_storage


  def self.define_ext_command_GL_APPLE_element_array
    GL::GL_FUNCTION_SYMBOLS << :ElementPointerAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:ElementPointerAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ElementPointerAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:ElementPointerAPPLE)
    GL.module_eval(<<-SRC)
      def self.ElementPointerAPPLE(_type_, _pointer_)
        GL_FUNCTIONS_MAP[:ElementPointerAPPLE].call(_type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementArrayAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.DrawElementArrayAPPLE(_mode_, _first_, _count_)
        GL_FUNCTIONS_MAP[:DrawElementArrayAPPLE].call(_mode_, _first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawRangeElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawRangeElementArrayAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawRangeElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawRangeElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementArrayAPPLE(_mode_, _start_, _end_, _first_, _count_)
        GL_FUNCTIONS_MAP[:DrawRangeElementArrayAPPLE].call(_mode_, _start_, _end_, _first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementArrayAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementArrayAPPLE(_mode_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:MultiDrawElementArrayAPPLE].call(_mode_, _first_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawRangeElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawRangeElementArrayAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawRangeElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawRangeElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.MultiDrawRangeElementArrayAPPLE(_mode_, _start_, _end_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:MultiDrawRangeElementArrayAPPLE].call(_mode_, _start_, _end_, _first_, _count_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_element_array

  def self.get_ext_command_GL_APPLE_element_array
    [
      'ElementPointerAPPLE',
      'DrawElementArrayAPPLE',
      'DrawRangeElementArrayAPPLE',
      'MultiDrawElementArrayAPPLE',
      'MultiDrawRangeElementArrayAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_element_array


  def self.define_ext_command_GL_APPLE_fence
    GL::GL_FUNCTION_SYMBOLS << :GenFencesAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:GenFencesAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenFencesAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:GenFencesAPPLE)
    GL.module_eval(<<-SRC)
      def self.GenFencesAPPLE(_n_, _fences_)
        GL_FUNCTIONS_MAP[:GenFencesAPPLE].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteFencesAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteFencesAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteFencesAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteFencesAPPLE)
    GL.module_eval(<<-SRC)
      def self.DeleteFencesAPPLE(_n_, _fences_)
        GL_FUNCTIONS_MAP[:DeleteFencesAPPLE].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SetFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:SetFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SetFenceAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:SetFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.SetFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:SetFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:IsFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsFenceAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.IsFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:IsFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TestFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:TestFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TestFenceAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:TestFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.TestFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:TestFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FinishFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:FinishFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FinishFenceAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:FinishFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.FinishFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:FinishFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TestObjectAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:TestObjectAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TestObjectAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:TestObjectAPPLE)
    GL.module_eval(<<-SRC)
      def self.TestObjectAPPLE(_object_, _name_)
        GL_FUNCTIONS_MAP[:TestObjectAPPLE].call(_object_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FinishObjectAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:FinishObjectAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FinishObjectAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:FinishObjectAPPLE)
    GL.module_eval(<<-SRC)
      def self.FinishObjectAPPLE(_object_, _name_)
        GL_FUNCTIONS_MAP[:FinishObjectAPPLE].call(_object_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_fence

  def self.get_ext_command_GL_APPLE_fence
    [
      'GenFencesAPPLE',
      'DeleteFencesAPPLE',
      'SetFenceAPPLE',
      'IsFenceAPPLE',
      'TestFenceAPPLE',
      'FinishFenceAPPLE',
      'TestObjectAPPLE',
      'FinishObjectAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_fence


  def self.define_ext_command_GL_APPLE_float_pixels
  end # self.define_ext_command_GL_APPLE_float_pixels

  def self.get_ext_command_GL_APPLE_float_pixels
    [
    ]
  end # self.get_ext_command_GL_APPLE_float_pixels


  def self.define_ext_command_GL_APPLE_flush_buffer_range
    GL::GL_FUNCTION_SYMBOLS << :BufferParameteriAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferParameteriAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferParameteriAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferParameteriAPPLE)
    GL.module_eval(<<-SRC)
      def self.BufferParameteriAPPLE(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:BufferParameteriAPPLE].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FlushMappedBufferRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushMappedBufferRangeAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushMappedBufferRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushMappedBufferRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.FlushMappedBufferRangeAPPLE(_target_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:FlushMappedBufferRangeAPPLE].call(_target_, _offset_, _size_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_flush_buffer_range

  def self.get_ext_command_GL_APPLE_flush_buffer_range
    [
      'BufferParameteriAPPLE',
      'FlushMappedBufferRangeAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_flush_buffer_range


  def self.define_ext_command_GL_APPLE_object_purgeable
    GL::GL_FUNCTION_SYMBOLS << :ObjectPurgeableAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:ObjectPurgeableAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ObjectPurgeableAPPLE] = -Fiddle::TYPE_INT
    GL.bind_command(:ObjectPurgeableAPPLE)
    GL.module_eval(<<-SRC)
      def self.ObjectPurgeableAPPLE(_objectType_, _name_, _option_)
        GL_FUNCTIONS_MAP[:ObjectPurgeableAPPLE].call(_objectType_, _name_, _option_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ObjectUnpurgeableAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:ObjectUnpurgeableAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ObjectUnpurgeableAPPLE] = -Fiddle::TYPE_INT
    GL.bind_command(:ObjectUnpurgeableAPPLE)
    GL.module_eval(<<-SRC)
      def self.ObjectUnpurgeableAPPLE(_objectType_, _name_, _option_)
        GL_FUNCTIONS_MAP[:ObjectUnpurgeableAPPLE].call(_objectType_, _name_, _option_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectParameterivAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectParameterivAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectParameterivAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectParameterivAPPLE)
    GL.module_eval(<<-SRC)
      def self.GetObjectParameterivAPPLE(_objectType_, _name_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetObjectParameterivAPPLE].call(_objectType_, _name_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_object_purgeable

  def self.get_ext_command_GL_APPLE_object_purgeable
    [
      'ObjectPurgeableAPPLE',
      'ObjectUnpurgeableAPPLE',
      'GetObjectParameterivAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_object_purgeable


  def self.define_ext_command_GL_APPLE_rgb_422
  end # self.define_ext_command_GL_APPLE_rgb_422

  def self.get_ext_command_GL_APPLE_rgb_422
    [
    ]
  end # self.get_ext_command_GL_APPLE_rgb_422


  def self.define_ext_command_GL_APPLE_row_bytes
  end # self.define_ext_command_GL_APPLE_row_bytes

  def self.get_ext_command_GL_APPLE_row_bytes
    [
    ]
  end # self.get_ext_command_GL_APPLE_row_bytes


  def self.define_ext_command_GL_APPLE_specular_vector
  end # self.define_ext_command_GL_APPLE_specular_vector

  def self.get_ext_command_GL_APPLE_specular_vector
    [
    ]
  end # self.get_ext_command_GL_APPLE_specular_vector


  def self.define_ext_command_GL_APPLE_texture_range
    GL::GL_FUNCTION_SYMBOLS << :TextureRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureRangeAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.TextureRangeAPPLE(_target_, _length_, _pointer_)
        GL_FUNCTIONS_MAP[:TextureRangeAPPLE].call(_target_, _length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexParameterPointervAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexParameterPointervAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexParameterPointervAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexParameterPointervAPPLE)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterPointervAPPLE(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexParameterPointervAPPLE].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_texture_range

  def self.get_ext_command_GL_APPLE_texture_range
    [
      'TextureRangeAPPLE',
      'GetTexParameterPointervAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_texture_range


  def self.define_ext_command_GL_APPLE_transform_hint
  end # self.define_ext_command_GL_APPLE_transform_hint

  def self.get_ext_command_GL_APPLE_transform_hint
    [
    ]
  end # self.get_ext_command_GL_APPLE_transform_hint


  def self.define_ext_command_GL_APPLE_vertex_array_object
    GL::GL_FUNCTION_SYMBOLS << :BindVertexArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVertexArrayAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVertexArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVertexArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.BindVertexArrayAPPLE(_array_)
        GL_FUNCTIONS_MAP[:BindVertexArrayAPPLE].call(_array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteVertexArraysAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteVertexArraysAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteVertexArraysAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteVertexArraysAPPLE)
    GL.module_eval(<<-SRC)
      def self.DeleteVertexArraysAPPLE(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:DeleteVertexArraysAPPLE].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenVertexArraysAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:GenVertexArraysAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenVertexArraysAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:GenVertexArraysAPPLE)
    GL.module_eval(<<-SRC)
      def self.GenVertexArraysAPPLE(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:GenVertexArraysAPPLE].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsVertexArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:IsVertexArrayAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsVertexArrayAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsVertexArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.IsVertexArrayAPPLE(_array_)
        GL_FUNCTIONS_MAP[:IsVertexArrayAPPLE].call(_array_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_vertex_array_object

  def self.get_ext_command_GL_APPLE_vertex_array_object
    [
      'BindVertexArrayAPPLE',
      'DeleteVertexArraysAPPLE',
      'GenVertexArraysAPPLE',
      'IsVertexArrayAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_vertex_array_object


  def self.define_ext_command_GL_APPLE_vertex_array_range
    GL::GL_FUNCTION_SYMBOLS << :VertexArrayRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayRangeAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.VertexArrayRangeAPPLE(_length_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexArrayRangeAPPLE].call(_length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FlushVertexArrayRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushVertexArrayRangeAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushVertexArrayRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushVertexArrayRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.FlushVertexArrayRangeAPPLE(_length_, _pointer_)
        GL_FUNCTIONS_MAP[:FlushVertexArrayRangeAPPLE].call(_length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayParameteriAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayParameteriAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayParameteriAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayParameteriAPPLE)
    GL.module_eval(<<-SRC)
      def self.VertexArrayParameteriAPPLE(_pname_, _param_)
        GL_FUNCTIONS_MAP[:VertexArrayParameteriAPPLE].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_vertex_array_range

  def self.get_ext_command_GL_APPLE_vertex_array_range
    [
      'VertexArrayRangeAPPLE',
      'FlushVertexArrayRangeAPPLE',
      'VertexArrayParameteriAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_vertex_array_range


  def self.define_ext_command_GL_APPLE_vertex_program_evaluators
    GL::GL_FUNCTION_SYMBOLS << :EnableVertexAttribAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVertexAttribAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVertexAttribAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVertexAttribAPPLE)
    GL.module_eval(<<-SRC)
      def self.EnableVertexAttribAPPLE(_index_, _pname_)
        GL_FUNCTIONS_MAP[:EnableVertexAttribAPPLE].call(_index_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVertexAttribAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVertexAttribAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVertexAttribAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVertexAttribAPPLE)
    GL.module_eval(<<-SRC)
      def self.DisableVertexAttribAPPLE(_index_, _pname_)
        GL_FUNCTIONS_MAP[:DisableVertexAttribAPPLE].call(_index_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsVertexAttribEnabledAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:IsVertexAttribEnabledAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsVertexAttribEnabledAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsVertexAttribEnabledAPPLE)
    GL.module_eval(<<-SRC)
      def self.IsVertexAttribEnabledAPPLE(_index_, _pname_)
        GL_FUNCTIONS_MAP[:IsVertexAttribEnabledAPPLE].call(_index_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapVertexAttrib1dAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:MapVertexAttrib1dAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapVertexAttrib1dAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:MapVertexAttrib1dAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib1dAPPLE(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
        GL_FUNCTIONS_MAP[:MapVertexAttrib1dAPPLE].call(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapVertexAttrib1fAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:MapVertexAttrib1fAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapVertexAttrib1fAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:MapVertexAttrib1fAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib1fAPPLE(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
        GL_FUNCTIONS_MAP[:MapVertexAttrib1fAPPLE].call(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapVertexAttrib2dAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:MapVertexAttrib2dAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapVertexAttrib2dAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:MapVertexAttrib2dAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib2dAPPLE(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
        GL_FUNCTIONS_MAP[:MapVertexAttrib2dAPPLE].call(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapVertexAttrib2fAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:MapVertexAttrib2fAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapVertexAttrib2fAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:MapVertexAttrib2fAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib2fAPPLE(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
        GL_FUNCTIONS_MAP[:MapVertexAttrib2fAPPLE].call(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_vertex_program_evaluators

  def self.get_ext_command_GL_APPLE_vertex_program_evaluators
    [
      'EnableVertexAttribAPPLE',
      'DisableVertexAttribAPPLE',
      'IsVertexAttribEnabledAPPLE',
      'MapVertexAttrib1dAPPLE',
      'MapVertexAttrib1fAPPLE',
      'MapVertexAttrib2dAPPLE',
      'MapVertexAttrib2fAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_vertex_program_evaluators


  def self.define_ext_command_GL_APPLE_ycbcr_422
  end # self.define_ext_command_GL_APPLE_ycbcr_422

  def self.get_ext_command_GL_APPLE_ycbcr_422
    [
    ]
  end # self.get_ext_command_GL_APPLE_ycbcr_422


  def self.define_ext_command_GL_ARB_ES2_compatibility
    GL::GL_FUNCTION_SYMBOLS << :ReleaseShaderCompiler
    GL::GL_FUNCTIONS_ARGS_MAP[:ReleaseShaderCompiler] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReleaseShaderCompiler] = Fiddle::TYPE_VOID
    GL.bind_command(:ReleaseShaderCompiler)
    GL.module_eval(<<-SRC)
      def self.ReleaseShaderCompiler()
        GL_FUNCTIONS_MAP[:ReleaseShaderCompiler].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShaderBinary
    GL::GL_FUNCTIONS_ARGS_MAP[:ShaderBinary] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShaderBinary] = Fiddle::TYPE_VOID
    GL.bind_command(:ShaderBinary)
    GL.module_eval(<<-SRC)
      def self.ShaderBinary(_count_, _shaders_, _binaryFormat_, _binary_, _length_)
        GL_FUNCTIONS_MAP[:ShaderBinary].call(_count_, _shaders_, _binaryFormat_, _binary_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetShaderPrecisionFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:GetShaderPrecisionFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetShaderPrecisionFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:GetShaderPrecisionFormat)
    GL.module_eval(<<-SRC)
      def self.GetShaderPrecisionFormat(_shadertype_, _precisiontype_, _range_, _precision_)
        GL_FUNCTIONS_MAP[:GetShaderPrecisionFormat].call(_shadertype_, _precisiontype_, _range_, _precision_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangef
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangef] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangef] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangef)
    GL.module_eval(<<-SRC)
      def self.DepthRangef(_n_, _f_)
        GL_FUNCTIONS_MAP[:DepthRangef].call(_n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearDepthf
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearDepthf] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearDepthf] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearDepthf)
    GL.module_eval(<<-SRC)
      def self.ClearDepthf(_d_)
        GL_FUNCTIONS_MAP[:ClearDepthf].call(_d_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_ES2_compatibility

  def self.get_ext_command_GL_ARB_ES2_compatibility
    [
      'ReleaseShaderCompiler',
      'ShaderBinary',
      'GetShaderPrecisionFormat',
      'DepthRangef',
      'ClearDepthf',
    ]
  end # self.get_ext_command_GL_ARB_ES2_compatibility


  def self.define_ext_command_GL_ARB_ES3_1_compatibility
    GL::GL_FUNCTION_SYMBOLS << :MemoryBarrierByRegion
    GL::GL_FUNCTIONS_ARGS_MAP[:MemoryBarrierByRegion] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MemoryBarrierByRegion] = Fiddle::TYPE_VOID
    GL.bind_command(:MemoryBarrierByRegion)
    GL.module_eval(<<-SRC)
      def self.MemoryBarrierByRegion(_barriers_)
        GL_FUNCTIONS_MAP[:MemoryBarrierByRegion].call(_barriers_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_ES3_1_compatibility

  def self.get_ext_command_GL_ARB_ES3_1_compatibility
    [
      'MemoryBarrierByRegion',
    ]
  end # self.get_ext_command_GL_ARB_ES3_1_compatibility


  def self.define_ext_command_GL_ARB_ES3_2_compatibility
    GL::GL_FUNCTION_SYMBOLS << :PrimitiveBoundingBoxARB
    GL::GL_FUNCTIONS_ARGS_MAP[:PrimitiveBoundingBoxARB] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PrimitiveBoundingBoxARB] = Fiddle::TYPE_VOID
    GL.bind_command(:PrimitiveBoundingBoxARB)
    GL.module_eval(<<-SRC)
      def self.PrimitiveBoundingBoxARB(_minX_, _minY_, _minZ_, _minW_, _maxX_, _maxY_, _maxZ_, _maxW_)
        GL_FUNCTIONS_MAP[:PrimitiveBoundingBoxARB].call(_minX_, _minY_, _minZ_, _minW_, _maxX_, _maxY_, _maxZ_, _maxW_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_ES3_2_compatibility

  def self.get_ext_command_GL_ARB_ES3_2_compatibility
    [
      'PrimitiveBoundingBoxARB',
    ]
  end # self.get_ext_command_GL_ARB_ES3_2_compatibility


  def self.define_ext_command_GL_ARB_ES3_compatibility
  end # self.define_ext_command_GL_ARB_ES3_compatibility

  def self.get_ext_command_GL_ARB_ES3_compatibility
    [
    ]
  end # self.get_ext_command_GL_ARB_ES3_compatibility


  def self.define_ext_command_GL_ARB_arrays_of_arrays
  end # self.define_ext_command_GL_ARB_arrays_of_arrays

  def self.get_ext_command_GL_ARB_arrays_of_arrays
    [
    ]
  end # self.get_ext_command_GL_ARB_arrays_of_arrays


  def self.define_ext_command_GL_ARB_base_instance
    GL::GL_FUNCTION_SYMBOLS << :DrawArraysInstancedBaseInstance
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawArraysInstancedBaseInstance] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawArraysInstancedBaseInstance] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawArraysInstancedBaseInstance)
    GL.module_eval(<<-SRC)
      def self.DrawArraysInstancedBaseInstance(_mode_, _first_, _count_, _instancecount_, _baseinstance_)
        GL_FUNCTIONS_MAP[:DrawArraysInstancedBaseInstance].call(_mode_, _first_, _count_, _instancecount_, _baseinstance_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementsInstancedBaseInstance
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsInstancedBaseInstance] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsInstancedBaseInstance] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsInstancedBaseInstance)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedBaseInstance(_mode_, _count_, _type_, _indices_, _instancecount_, _baseinstance_)
        GL_FUNCTIONS_MAP[:DrawElementsInstancedBaseInstance].call(_mode_, _count_, _type_, _indices_, _instancecount_, _baseinstance_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementsInstancedBaseVertexBaseInstance
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsInstancedBaseVertexBaseInstance] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsInstancedBaseVertexBaseInstance] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsInstancedBaseVertexBaseInstance)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedBaseVertexBaseInstance(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_, _baseinstance_)
        GL_FUNCTIONS_MAP[:DrawElementsInstancedBaseVertexBaseInstance].call(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_, _baseinstance_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_base_instance

  def self.get_ext_command_GL_ARB_base_instance
    [
      'DrawArraysInstancedBaseInstance',
      'DrawElementsInstancedBaseInstance',
      'DrawElementsInstancedBaseVertexBaseInstance',
    ]
  end # self.get_ext_command_GL_ARB_base_instance


  def self.define_ext_command_GL_ARB_bindless_texture
    GL::GL_FUNCTION_SYMBOLS << :GetTextureHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureHandleARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureHandleARB] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:GetTextureHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetTextureHandleARB(_texture_)
        GL_FUNCTIONS_MAP[:GetTextureHandleARB].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureSamplerHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureSamplerHandleARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureSamplerHandleARB] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:GetTextureSamplerHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetTextureSamplerHandleARB(_texture_, _sampler_)
        GL_FUNCTIONS_MAP[:GetTextureSamplerHandleARB].call(_texture_, _sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeTextureHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeTextureHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeTextureHandleResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeTextureHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:MakeTextureHandleResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeTextureHandleNonResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeTextureHandleNonResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeTextureHandleNonResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeTextureHandleNonResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleNonResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:MakeTextureHandleNonResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetImageHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetImageHandleARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetImageHandleARB] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:GetImageHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetImageHandleARB(_texture_, _level_, _layered_, _layer_, _format_)
        GL_FUNCTIONS_MAP[:GetImageHandleARB].call(_texture_, _level_, _layered_, _layer_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeImageHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeImageHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeImageHandleResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeImageHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleResidentARB(_handle_, _access_)
        GL_FUNCTIONS_MAP[:MakeImageHandleResidentARB].call(_handle_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeImageHandleNonResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeImageHandleNonResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeImageHandleNonResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeImageHandleNonResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleNonResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:MakeImageHandleNonResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformHandleui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformHandleui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformHandleui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformHandleui64ARB)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64ARB(_location_, _value_)
        GL_FUNCTIONS_MAP[:UniformHandleui64ARB].call(_location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformHandleui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformHandleui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformHandleui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformHandleui64vARB)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:UniformHandleui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformHandleui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformHandleui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformHandleui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformHandleui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64ARB(_program_, _location_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformHandleui64ARB].call(_program_, _location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformHandleui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformHandleui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformHandleui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformHandleui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64vARB(_program_, _location_, _count_, _values_)
        GL_FUNCTIONS_MAP[:ProgramUniformHandleui64vARB].call(_program_, _location_, _count_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsTextureHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsTextureHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsTextureHandleResidentARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsTextureHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.IsTextureHandleResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:IsTextureHandleResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsImageHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsImageHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsImageHandleResidentARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsImageHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.IsImageHandleResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:IsImageHandleResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1ui64ARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1ui64ARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64ARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribL1ui64ARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1ui64vARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64vARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL1ui64vARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribLui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribLui64vARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribLui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribLui64vARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLui64vARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribLui64vARB].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_bindless_texture

  def self.get_ext_command_GL_ARB_bindless_texture
    [
      'GetTextureHandleARB',
      'GetTextureSamplerHandleARB',
      'MakeTextureHandleResidentARB',
      'MakeTextureHandleNonResidentARB',
      'GetImageHandleARB',
      'MakeImageHandleResidentARB',
      'MakeImageHandleNonResidentARB',
      'UniformHandleui64ARB',
      'UniformHandleui64vARB',
      'ProgramUniformHandleui64ARB',
      'ProgramUniformHandleui64vARB',
      'IsTextureHandleResidentARB',
      'IsImageHandleResidentARB',
      'VertexAttribL1ui64ARB',
      'VertexAttribL1ui64vARB',
      'GetVertexAttribLui64vARB',
    ]
  end # self.get_ext_command_GL_ARB_bindless_texture


  def self.define_ext_command_GL_ARB_blend_func_extended
    GL::GL_FUNCTION_SYMBOLS << :BindFragDataLocationIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:BindFragDataLocationIndexed] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindFragDataLocationIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:BindFragDataLocationIndexed)
    GL.module_eval(<<-SRC)
      def self.BindFragDataLocationIndexed(_program_, _colorNumber_, _index_, _name_)
        GL_FUNCTIONS_MAP[:BindFragDataLocationIndexed].call(_program_, _colorNumber_, _index_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFragDataIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFragDataIndex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFragDataIndex] = Fiddle::TYPE_INT
    GL.bind_command(:GetFragDataIndex)
    GL.module_eval(<<-SRC)
      def self.GetFragDataIndex(_program_, _name_)
        GL_FUNCTIONS_MAP[:GetFragDataIndex].call(_program_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_blend_func_extended

  def self.get_ext_command_GL_ARB_blend_func_extended
    [
      'BindFragDataLocationIndexed',
      'GetFragDataIndex',
    ]
  end # self.get_ext_command_GL_ARB_blend_func_extended


  def self.define_ext_command_GL_ARB_buffer_storage
    GL::GL_FUNCTION_SYMBOLS << :BufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferStorage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferStorage)
    GL.module_eval(<<-SRC)
      def self.BufferStorage(_target_, _size_, _data_, _flags_)
        GL_FUNCTIONS_MAP[:BufferStorage].call(_target_, _size_, _data_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_buffer_storage

  def self.get_ext_command_GL_ARB_buffer_storage
    [
      'BufferStorage',
    ]
  end # self.get_ext_command_GL_ARB_buffer_storage


  def self.define_ext_command_GL_ARB_cl_event
    GL::GL_FUNCTION_SYMBOLS << :CreateSyncFromCLeventARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateSyncFromCLeventARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateSyncFromCLeventARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:CreateSyncFromCLeventARB)
    GL.module_eval(<<-SRC)
      def self.CreateSyncFromCLeventARB(_context_, _event_, _flags_)
        GL_FUNCTIONS_MAP[:CreateSyncFromCLeventARB].call(_context_, _event_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_cl_event

  def self.get_ext_command_GL_ARB_cl_event
    [
      'CreateSyncFromCLeventARB',
    ]
  end # self.get_ext_command_GL_ARB_cl_event


  def self.define_ext_command_GL_ARB_clear_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :ClearBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearBufferData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearBufferData)
    GL.module_eval(<<-SRC)
      def self.ClearBufferData(_target_, _internalformat_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearBufferData].call(_target_, _internalformat_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearBufferSubData)
    GL.module_eval(<<-SRC)
      def self.ClearBufferSubData(_target_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearBufferSubData].call(_target_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_clear_buffer_object

  def self.get_ext_command_GL_ARB_clear_buffer_object
    [
      'ClearBufferData',
      'ClearBufferSubData',
    ]
  end # self.get_ext_command_GL_ARB_clear_buffer_object


  def self.define_ext_command_GL_ARB_clear_texture
    GL::GL_FUNCTION_SYMBOLS << :ClearTexImage
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearTexImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearTexImage] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearTexImage)
    GL.module_eval(<<-SRC)
      def self.ClearTexImage(_texture_, _level_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearTexImage].call(_texture_, _level_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearTexSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearTexSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearTexSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearTexSubImage)
    GL.module_eval(<<-SRC)
      def self.ClearTexSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearTexSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_clear_texture

  def self.get_ext_command_GL_ARB_clear_texture
    [
      'ClearTexImage',
      'ClearTexSubImage',
    ]
  end # self.get_ext_command_GL_ARB_clear_texture


  def self.define_ext_command_GL_ARB_clip_control
    GL::GL_FUNCTION_SYMBOLS << :ClipControl
    GL::GL_FUNCTIONS_ARGS_MAP[:ClipControl] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClipControl] = Fiddle::TYPE_VOID
    GL.bind_command(:ClipControl)
    GL.module_eval(<<-SRC)
      def self.ClipControl(_origin_, _depth_)
        GL_FUNCTIONS_MAP[:ClipControl].call(_origin_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_clip_control

  def self.get_ext_command_GL_ARB_clip_control
    [
      'ClipControl',
    ]
  end # self.get_ext_command_GL_ARB_clip_control


  def self.define_ext_command_GL_ARB_color_buffer_float
    GL::GL_FUNCTION_SYMBOLS << :ClampColorARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ClampColorARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClampColorARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ClampColorARB)
    GL.module_eval(<<-SRC)
      def self.ClampColorARB(_target_, _clamp_)
        GL_FUNCTIONS_MAP[:ClampColorARB].call(_target_, _clamp_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_color_buffer_float

  def self.get_ext_command_GL_ARB_color_buffer_float
    [
      'ClampColorARB',
    ]
  end # self.get_ext_command_GL_ARB_color_buffer_float


  def self.define_ext_command_GL_ARB_compatibility
  end # self.define_ext_command_GL_ARB_compatibility

  def self.get_ext_command_GL_ARB_compatibility
    [
    ]
  end # self.get_ext_command_GL_ARB_compatibility


  def self.define_ext_command_GL_ARB_compressed_texture_pixel_storage
  end # self.define_ext_command_GL_ARB_compressed_texture_pixel_storage

  def self.get_ext_command_GL_ARB_compressed_texture_pixel_storage
    [
    ]
  end # self.get_ext_command_GL_ARB_compressed_texture_pixel_storage


  def self.define_ext_command_GL_ARB_compute_shader
    GL::GL_FUNCTION_SYMBOLS << :DispatchCompute
    GL::GL_FUNCTIONS_ARGS_MAP[:DispatchCompute] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DispatchCompute] = Fiddle::TYPE_VOID
    GL.bind_command(:DispatchCompute)
    GL.module_eval(<<-SRC)
      def self.DispatchCompute(_num_groups_x_, _num_groups_y_, _num_groups_z_)
        GL_FUNCTIONS_MAP[:DispatchCompute].call(_num_groups_x_, _num_groups_y_, _num_groups_z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DispatchComputeIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:DispatchComputeIndirect] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DispatchComputeIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:DispatchComputeIndirect)
    GL.module_eval(<<-SRC)
      def self.DispatchComputeIndirect(_indirect_)
        GL_FUNCTIONS_MAP[:DispatchComputeIndirect].call(_indirect_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_compute_shader

  def self.get_ext_command_GL_ARB_compute_shader
    [
      'DispatchCompute',
      'DispatchComputeIndirect',
    ]
  end # self.get_ext_command_GL_ARB_compute_shader


  def self.define_ext_command_GL_ARB_compute_variable_group_size
    GL::GL_FUNCTION_SYMBOLS << :DispatchComputeGroupSizeARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DispatchComputeGroupSizeARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DispatchComputeGroupSizeARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DispatchComputeGroupSizeARB)
    GL.module_eval(<<-SRC)
      def self.DispatchComputeGroupSizeARB(_num_groups_x_, _num_groups_y_, _num_groups_z_, _group_size_x_, _group_size_y_, _group_size_z_)
        GL_FUNCTIONS_MAP[:DispatchComputeGroupSizeARB].call(_num_groups_x_, _num_groups_y_, _num_groups_z_, _group_size_x_, _group_size_y_, _group_size_z_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_compute_variable_group_size

  def self.get_ext_command_GL_ARB_compute_variable_group_size
    [
      'DispatchComputeGroupSizeARB',
    ]
  end # self.get_ext_command_GL_ARB_compute_variable_group_size


  def self.define_ext_command_GL_ARB_conditional_render_inverted
  end # self.define_ext_command_GL_ARB_conditional_render_inverted

  def self.get_ext_command_GL_ARB_conditional_render_inverted
    [
    ]
  end # self.get_ext_command_GL_ARB_conditional_render_inverted


  def self.define_ext_command_GL_ARB_conservative_depth
  end # self.define_ext_command_GL_ARB_conservative_depth

  def self.get_ext_command_GL_ARB_conservative_depth
    [
    ]
  end # self.get_ext_command_GL_ARB_conservative_depth


  def self.define_ext_command_GL_ARB_copy_buffer
    GL::GL_FUNCTION_SYMBOLS << :CopyBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyBufferSubData)
    GL.module_eval(<<-SRC)
      def self.CopyBufferSubData(_readTarget_, _writeTarget_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:CopyBufferSubData].call(_readTarget_, _writeTarget_, _readOffset_, _writeOffset_, _size_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_copy_buffer

  def self.get_ext_command_GL_ARB_copy_buffer
    [
      'CopyBufferSubData',
    ]
  end # self.get_ext_command_GL_ARB_copy_buffer


  def self.define_ext_command_GL_ARB_copy_image
    GL::GL_FUNCTION_SYMBOLS << :CopyImageSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyImageSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyImageSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyImageSubData)
    GL.module_eval(<<-SRC)
      def self.CopyImageSubData(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
        GL_FUNCTIONS_MAP[:CopyImageSubData].call(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_copy_image

  def self.get_ext_command_GL_ARB_copy_image
    [
      'CopyImageSubData',
    ]
  end # self.get_ext_command_GL_ARB_copy_image


  def self.define_ext_command_GL_ARB_cull_distance
  end # self.define_ext_command_GL_ARB_cull_distance

  def self.get_ext_command_GL_ARB_cull_distance
    [
    ]
  end # self.get_ext_command_GL_ARB_cull_distance


  def self.define_ext_command_GL_ARB_debug_output
    GL::GL_FUNCTION_SYMBOLS << :DebugMessageControlARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageControlARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageControlARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageControlARB)
    GL.module_eval(<<-SRC)
      def self.DebugMessageControlARB(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:DebugMessageControlARB].call(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageInsertARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageInsertARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageInsertARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageInsertARB)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsertARB(_source_, _type_, _id_, _severity_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:DebugMessageInsertARB].call(_source_, _type_, _id_, _severity_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageCallbackARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageCallbackARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageCallbackARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageCallbackARB)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallbackARB(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:DebugMessageCallbackARB].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDebugMessageLogARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDebugMessageLogARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDebugMessageLogARB] = -Fiddle::TYPE_INT
    GL.bind_command(:GetDebugMessageLogARB)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLogARB(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
        GL_FUNCTIONS_MAP[:GetDebugMessageLogARB].call(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_debug_output

  def self.get_ext_command_GL_ARB_debug_output
    [
      'DebugMessageControlARB',
      'DebugMessageInsertARB',
      'DebugMessageCallbackARB',
      'GetDebugMessageLogARB',
    ]
  end # self.get_ext_command_GL_ARB_debug_output


  def self.define_ext_command_GL_ARB_depth_buffer_float
  end # self.define_ext_command_GL_ARB_depth_buffer_float

  def self.get_ext_command_GL_ARB_depth_buffer_float
    [
    ]
  end # self.get_ext_command_GL_ARB_depth_buffer_float


  def self.define_ext_command_GL_ARB_depth_clamp
  end # self.define_ext_command_GL_ARB_depth_clamp

  def self.get_ext_command_GL_ARB_depth_clamp
    [
    ]
  end # self.get_ext_command_GL_ARB_depth_clamp


  def self.define_ext_command_GL_ARB_depth_texture
  end # self.define_ext_command_GL_ARB_depth_texture

  def self.get_ext_command_GL_ARB_depth_texture
    [
    ]
  end # self.get_ext_command_GL_ARB_depth_texture


  def self.define_ext_command_GL_ARB_derivative_control
  end # self.define_ext_command_GL_ARB_derivative_control

  def self.get_ext_command_GL_ARB_derivative_control
    [
    ]
  end # self.get_ext_command_GL_ARB_derivative_control


  def self.define_ext_command_GL_ARB_direct_state_access
    GL::GL_FUNCTION_SYMBOLS << :CreateTransformFeedbacks
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateTransformFeedbacks] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateTransformFeedbacks] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateTransformFeedbacks)
    GL.module_eval(<<-SRC)
      def self.CreateTransformFeedbacks(_n_, _ids_)
        GL_FUNCTIONS_MAP[:CreateTransformFeedbacks].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformFeedbackBufferBase
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformFeedbackBufferBase] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformFeedbackBufferBase] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformFeedbackBufferBase)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackBufferBase(_xfb_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:TransformFeedbackBufferBase].call(_xfb_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformFeedbackBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformFeedbackBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformFeedbackBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformFeedbackBufferRange)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackBufferRange(_xfb_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:TransformFeedbackBufferRange].call(_xfb_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTransformFeedbackiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTransformFeedbackiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTransformFeedbackiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTransformFeedbackiv)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbackiv(_xfb_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetTransformFeedbackiv].call(_xfb_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTransformFeedbacki_v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTransformFeedbacki_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTransformFeedbacki_v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTransformFeedbacki_v)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbacki_v(_xfb_, _pname_, _index_, _param_)
        GL_FUNCTIONS_MAP[:GetTransformFeedbacki_v].call(_xfb_, _pname_, _index_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTransformFeedbacki64_v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTransformFeedbacki64_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTransformFeedbacki64_v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTransformFeedbacki64_v)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbacki64_v(_xfb_, _pname_, _index_, _param_)
        GL_FUNCTIONS_MAP[:GetTransformFeedbacki64_v].call(_xfb_, _pname_, _index_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateBuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateBuffers)
    GL.module_eval(<<-SRC)
      def self.CreateBuffers(_n_, _buffers_)
        GL_FUNCTIONS_MAP[:CreateBuffers].call(_n_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferStorage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferStorage)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorage(_buffer_, _size_, _data_, _flags_)
        GL_FUNCTIONS_MAP[:NamedBufferStorage].call(_buffer_, _size_, _data_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferData)
    GL.module_eval(<<-SRC)
      def self.NamedBufferData(_buffer_, _size_, _data_, _usage_)
        GL_FUNCTIONS_MAP[:NamedBufferData].call(_buffer_, _size_, _data_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.NamedBufferSubData(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:NamedBufferSubData].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyNamedBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.CopyNamedBufferSubData(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:CopyNamedBufferSubData].call(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedBufferData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedBufferData)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferData(_buffer_, _internalformat_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearNamedBufferData].call(_buffer_, _internalformat_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferSubData(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearNamedBufferSubData].call(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapNamedBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:MapNamedBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapNamedBuffer] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapNamedBuffer)
    GL.module_eval(<<-SRC)
      def self.MapNamedBuffer(_buffer_, _access_)
        GL_FUNCTIONS_MAP[:MapNamedBuffer].call(_buffer_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapNamedBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:MapNamedBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapNamedBufferRange] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapNamedBufferRange)
    GL.module_eval(<<-SRC)
      def self.MapNamedBufferRange(_buffer_, _offset_, _length_, _access_)
        GL_FUNCTIONS_MAP[:MapNamedBufferRange].call(_buffer_, _offset_, _length_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UnmapNamedBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:UnmapNamedBuffer] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UnmapNamedBuffer] = -Fiddle::TYPE_CHAR
    GL.bind_command(:UnmapNamedBuffer)
    GL.module_eval(<<-SRC)
      def self.UnmapNamedBuffer(_buffer_)
        GL_FUNCTIONS_MAP[:UnmapNamedBuffer].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FlushMappedNamedBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushMappedNamedBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushMappedNamedBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushMappedNamedBufferRange)
    GL.module_eval(<<-SRC)
      def self.FlushMappedNamedBufferRange(_buffer_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:FlushMappedNamedBufferRange].call(_buffer_, _offset_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameteriv(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedBufferParameteriv].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferParameteri64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferParameteri64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferParameteri64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferParameteri64v)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameteri64v(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedBufferParameteri64v].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferPointerv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferPointerv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferPointerv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferPointerv)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferPointerv(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedBufferPointerv].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferSubData(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:GetNamedBufferSubData].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateFramebuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateFramebuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateFramebuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateFramebuffers)
    GL.module_eval(<<-SRC)
      def self.CreateFramebuffers(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:CreateFramebuffers].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferRenderbuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferRenderbuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferRenderbuffer(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:NamedFramebufferRenderbuffer].call(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferParameteri)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferParameteri(_framebuffer_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:NamedFramebufferParameteri].call(_framebuffer_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTexture
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTexture] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTexture] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTexture)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture(_framebuffer_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTexture].call(_framebuffer_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTextureLayer
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTextureLayer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTextureLayer] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTextureLayer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureLayer(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTextureLayer].call(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferDrawBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferDrawBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferDrawBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferDrawBuffer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferDrawBuffer(_framebuffer_, _buf_)
        GL_FUNCTIONS_MAP[:NamedFramebufferDrawBuffer].call(_framebuffer_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferDrawBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferDrawBuffers] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferDrawBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferDrawBuffers)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferDrawBuffers(_framebuffer_, _n_, _bufs_)
        GL_FUNCTIONS_MAP[:NamedFramebufferDrawBuffers].call(_framebuffer_, _n_, _bufs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferReadBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferReadBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferReadBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferReadBuffer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferReadBuffer(_framebuffer_, _src_)
        GL_FUNCTIONS_MAP[:NamedFramebufferReadBuffer].call(_framebuffer_, _src_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateNamedFramebufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateNamedFramebufferData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateNamedFramebufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateNamedFramebufferData)
    GL.module_eval(<<-SRC)
      def self.InvalidateNamedFramebufferData(_framebuffer_, _numAttachments_, _attachments_)
        GL_FUNCTIONS_MAP[:InvalidateNamedFramebufferData].call(_framebuffer_, _numAttachments_, _attachments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateNamedFramebufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateNamedFramebufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateNamedFramebufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateNamedFramebufferSubData)
    GL.module_eval(<<-SRC)
      def self.InvalidateNamedFramebufferSubData(_framebuffer_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:InvalidateNamedFramebufferSubData].call(_framebuffer_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedFramebufferiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedFramebufferiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedFramebufferiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedFramebufferiv)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferiv(_framebuffer_, _buffer_, _drawbuffer_, _value_)
        GL_FUNCTIONS_MAP[:ClearNamedFramebufferiv].call(_framebuffer_, _buffer_, _drawbuffer_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedFramebufferuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedFramebufferuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedFramebufferuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedFramebufferuiv)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferuiv(_framebuffer_, _buffer_, _drawbuffer_, _value_)
        GL_FUNCTIONS_MAP[:ClearNamedFramebufferuiv].call(_framebuffer_, _buffer_, _drawbuffer_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedFramebufferfv
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedFramebufferfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedFramebufferfv] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedFramebufferfv)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferfv(_framebuffer_, _buffer_, _drawbuffer_, _value_)
        GL_FUNCTIONS_MAP[:ClearNamedFramebufferfv].call(_framebuffer_, _buffer_, _drawbuffer_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedFramebufferfi
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedFramebufferfi] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedFramebufferfi] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedFramebufferfi)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferfi(_framebuffer_, _buffer_, _drawbuffer_, _depth_, _stencil_)
        GL_FUNCTIONS_MAP[:ClearNamedFramebufferfi].call(_framebuffer_, _buffer_, _drawbuffer_, _depth_, _stencil_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlitNamedFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:BlitNamedFramebuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlitNamedFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:BlitNamedFramebuffer)
    GL.module_eval(<<-SRC)
      def self.BlitNamedFramebuffer(_readFramebuffer_, _drawFramebuffer_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:BlitNamedFramebuffer].call(_readFramebuffer_, _drawFramebuffer_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CheckNamedFramebufferStatus
    GL::GL_FUNCTIONS_ARGS_MAP[:CheckNamedFramebufferStatus] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CheckNamedFramebufferStatus] = -Fiddle::TYPE_INT
    GL.bind_command(:CheckNamedFramebufferStatus)
    GL.module_eval(<<-SRC)
      def self.CheckNamedFramebufferStatus(_framebuffer_, _target_)
        GL_FUNCTIONS_MAP[:CheckNamedFramebufferStatus].call(_framebuffer_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedFramebufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedFramebufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedFramebufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedFramebufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferParameteriv(_framebuffer_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetNamedFramebufferParameteriv].call(_framebuffer_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedFramebufferAttachmentParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedFramebufferAttachmentParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedFramebufferAttachmentParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedFramebufferAttachmentParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferAttachmentParameteriv(_framebuffer_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedFramebufferAttachmentParameteriv].call(_framebuffer_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateRenderbuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateRenderbuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateRenderbuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateRenderbuffers)
    GL.module_eval(<<-SRC)
      def self.CreateRenderbuffers(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:CreateRenderbuffers].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedRenderbufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedRenderbufferStorage] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedRenderbufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedRenderbufferStorage)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorage(_renderbuffer_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:NamedRenderbufferStorage].call(_renderbuffer_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedRenderbufferStorageMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedRenderbufferStorageMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedRenderbufferStorageMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedRenderbufferStorageMultisample)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisample(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:NamedRenderbufferStorageMultisample].call(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedRenderbufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedRenderbufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedRenderbufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedRenderbufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedRenderbufferParameteriv(_renderbuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedRenderbufferParameteriv].call(_renderbuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateTextures
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateTextures] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateTextures] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateTextures)
    GL.module_eval(<<-SRC)
      def self.CreateTextures(_target_, _n_, _textures_)
        GL_FUNCTIONS_MAP[:CreateTextures].call(_target_, _n_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureBuffer)
    GL.module_eval(<<-SRC)
      def self.TextureBuffer(_texture_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:TextureBuffer].call(_texture_, _internalformat_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureBufferRange)
    GL.module_eval(<<-SRC)
      def self.TextureBufferRange(_texture_, _internalformat_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:TextureBufferRange].call(_texture_, _internalformat_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage1D)
    GL.module_eval(<<-SRC)
      def self.TextureStorage1D(_texture_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:TextureStorage1D].call(_texture_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage2D)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2D(_texture_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:TextureStorage2D].call(_texture_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage3D)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3D(_texture_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:TextureStorage3D].call(_texture_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage2DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage2DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage2DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage2DMultisample)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DMultisample(_texture_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TextureStorage2DMultisample].call(_texture_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage3DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage3DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage3DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage3DMultisample)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DMultisample(_texture_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TextureStorage3DMultisample].call(_texture_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureSubImage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureSubImage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureSubImage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureSubImage1D)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage1D(_texture_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureSubImage1D].call(_texture_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureSubImage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureSubImage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureSubImage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureSubImage2D)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage2D(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureSubImage2D].call(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureSubImage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureSubImage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureSubImage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureSubImage3D)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage3D(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureSubImage3D].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureSubImage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureSubImage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureSubImage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureSubImage1D)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage1D(_texture_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTextureSubImage1D].call(_texture_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureSubImage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureSubImage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureSubImage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureSubImage2D)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage2D(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTextureSubImage2D].call(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureSubImage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureSubImage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureSubImage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureSubImage3D)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage3D(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTextureSubImage3D].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureSubImage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureSubImage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureSubImage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureSubImage1D)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage1D(_texture_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyTextureSubImage1D].call(_texture_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureSubImage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureSubImage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureSubImage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureSubImage2D)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage2D(_texture_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyTextureSubImage2D].call(_texture_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureSubImage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureSubImage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureSubImage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureSubImage3D)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage3D(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyTextureSubImage3D].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterf
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterf] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterf] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterf)
    GL.module_eval(<<-SRC)
      def self.TextureParameterf(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TextureParameterf].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterfv)
    GL.module_eval(<<-SRC)
      def self.TextureParameterfv(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TextureParameterfv].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameteri)
    GL.module_eval(<<-SRC)
      def self.TextureParameteri(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TextureParameteri].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterIiv)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TextureParameterIiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIuiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TextureParameterIuiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameteriv)
    GL.module_eval(<<-SRC)
      def self.TextureParameteriv(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TextureParameteriv].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenerateTextureMipmap
    GL::GL_FUNCTIONS_ARGS_MAP[:GenerateTextureMipmap] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenerateTextureMipmap] = Fiddle::TYPE_VOID
    GL.bind_command(:GenerateTextureMipmap)
    GL.module_eval(<<-SRC)
      def self.GenerateTextureMipmap(_texture_)
        GL_FUNCTIONS_MAP[:GenerateTextureMipmap].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindTextureUnit
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTextureUnit] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTextureUnit] = Fiddle::TYPE_VOID
    GL.bind_command(:BindTextureUnit)
    GL.module_eval(<<-SRC)
      def self.BindTextureUnit(_unit_, _texture_)
        GL_FUNCTIONS_MAP[:BindTextureUnit].call(_unit_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureImage
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureImage] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureImage)
    GL.module_eval(<<-SRC)
      def self.GetTextureImage(_texture_, _level_, _format_, _type_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:GetTextureImage].call(_texture_, _level_, _format_, _type_, _bufSize_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCompressedTextureImage
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCompressedTextureImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCompressedTextureImage] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCompressedTextureImage)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTextureImage(_texture_, _level_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:GetCompressedTextureImage].call(_texture_, _level_, _bufSize_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureLevelParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureLevelParameterfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureLevelParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureLevelParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameterfv(_texture_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureLevelParameterfv].call(_texture_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureLevelParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureLevelParameteriv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureLevelParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureLevelParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameteriv(_texture_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureLevelParameteriv].call(_texture_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterfv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterfv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterIiv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterIiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIuiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterIuiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameteriv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameteriv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateVertexArrays
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateVertexArrays] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateVertexArrays] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateVertexArrays)
    GL.module_eval(<<-SRC)
      def self.CreateVertexArrays(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:CreateVertexArrays].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVertexArrayAttrib
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVertexArrayAttrib] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVertexArrayAttrib] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVertexArrayAttrib)
    GL.module_eval(<<-SRC)
      def self.DisableVertexArrayAttrib(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:DisableVertexArrayAttrib].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableVertexArrayAttrib
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVertexArrayAttrib] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVertexArrayAttrib] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVertexArrayAttrib)
    GL.module_eval(<<-SRC)
      def self.EnableVertexArrayAttrib(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:EnableVertexArrayAttrib].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayElementBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayElementBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayElementBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayElementBuffer)
    GL.module_eval(<<-SRC)
      def self.VertexArrayElementBuffer(_vaobj_, _buffer_)
        GL_FUNCTIONS_MAP[:VertexArrayElementBuffer].call(_vaobj_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexBuffer)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexBuffer(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexBuffer].call(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexBuffers] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexBuffers)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexBuffers(_vaobj_, _first_, _count_, _buffers_, _offsets_, _strides_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexBuffers].call(_vaobj_, _first_, _count_, _buffers_, _offsets_, _strides_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayAttribBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayAttribBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayAttribBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayAttribBinding)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribBinding(_vaobj_, _attribindex_, _bindingindex_)
        GL_FUNCTIONS_MAP[:VertexArrayAttribBinding].call(_vaobj_, _attribindex_, _bindingindex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayAttribFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayAttribFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayAttribFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayAttribFormat)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribFormat(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexArrayAttribFormat].call(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayAttribIFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayAttribIFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayAttribIFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayAttribIFormat)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribIFormat(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexArrayAttribIFormat].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayAttribLFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayAttribLFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayAttribLFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayAttribLFormat)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribLFormat(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexArrayAttribLFormat].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayBindingDivisor
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayBindingDivisor] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayBindingDivisor] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayBindingDivisor)
    GL.module_eval(<<-SRC)
      def self.VertexArrayBindingDivisor(_vaobj_, _bindingindex_, _divisor_)
        GL_FUNCTIONS_MAP[:VertexArrayBindingDivisor].call(_vaobj_, _bindingindex_, _divisor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayiv)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayiv(_vaobj_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayiv].call(_vaobj_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayIndexediv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayIndexediv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayIndexediv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayIndexediv)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIndexediv(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayIndexediv].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayIndexed64iv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayIndexed64iv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayIndexed64iv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayIndexed64iv)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIndexed64iv(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayIndexed64iv].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateSamplers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateSamplers)
    GL.module_eval(<<-SRC)
      def self.CreateSamplers(_n_, _samplers_)
        GL_FUNCTIONS_MAP[:CreateSamplers].call(_n_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateProgramPipelines
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateProgramPipelines] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateProgramPipelines] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateProgramPipelines)
    GL.module_eval(<<-SRC)
      def self.CreateProgramPipelines(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:CreateProgramPipelines].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateQueries
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateQueries] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateQueries] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateQueries)
    GL.module_eval(<<-SRC)
      def self.CreateQueries(_target_, _n_, _ids_)
        GL_FUNCTIONS_MAP[:CreateQueries].call(_target_, _n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryBufferObjecti64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryBufferObjecti64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryBufferObjecti64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryBufferObjecti64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjecti64v(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:GetQueryBufferObjecti64v].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryBufferObjectiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryBufferObjectiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryBufferObjectiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryBufferObjectiv)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjectiv(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:GetQueryBufferObjectiv].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryBufferObjectui64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryBufferObjectui64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryBufferObjectui64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryBufferObjectui64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjectui64v(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:GetQueryBufferObjectui64v].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryBufferObjectuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryBufferObjectuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryBufferObjectuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryBufferObjectuiv)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjectuiv(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:GetQueryBufferObjectuiv].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_direct_state_access

  def self.get_ext_command_GL_ARB_direct_state_access
    [
      'CreateTransformFeedbacks',
      'TransformFeedbackBufferBase',
      'TransformFeedbackBufferRange',
      'GetTransformFeedbackiv',
      'GetTransformFeedbacki_v',
      'GetTransformFeedbacki64_v',
      'CreateBuffers',
      'NamedBufferStorage',
      'NamedBufferData',
      'NamedBufferSubData',
      'CopyNamedBufferSubData',
      'ClearNamedBufferData',
      'ClearNamedBufferSubData',
      'MapNamedBuffer',
      'MapNamedBufferRange',
      'UnmapNamedBuffer',
      'FlushMappedNamedBufferRange',
      'GetNamedBufferParameteriv',
      'GetNamedBufferParameteri64v',
      'GetNamedBufferPointerv',
      'GetNamedBufferSubData',
      'CreateFramebuffers',
      'NamedFramebufferRenderbuffer',
      'NamedFramebufferParameteri',
      'NamedFramebufferTexture',
      'NamedFramebufferTextureLayer',
      'NamedFramebufferDrawBuffer',
      'NamedFramebufferDrawBuffers',
      'NamedFramebufferReadBuffer',
      'InvalidateNamedFramebufferData',
      'InvalidateNamedFramebufferSubData',
      'ClearNamedFramebufferiv',
      'ClearNamedFramebufferuiv',
      'ClearNamedFramebufferfv',
      'ClearNamedFramebufferfi',
      'BlitNamedFramebuffer',
      'CheckNamedFramebufferStatus',
      'GetNamedFramebufferParameteriv',
      'GetNamedFramebufferAttachmentParameteriv',
      'CreateRenderbuffers',
      'NamedRenderbufferStorage',
      'NamedRenderbufferStorageMultisample',
      'GetNamedRenderbufferParameteriv',
      'CreateTextures',
      'TextureBuffer',
      'TextureBufferRange',
      'TextureStorage1D',
      'TextureStorage2D',
      'TextureStorage3D',
      'TextureStorage2DMultisample',
      'TextureStorage3DMultisample',
      'TextureSubImage1D',
      'TextureSubImage2D',
      'TextureSubImage3D',
      'CompressedTextureSubImage1D',
      'CompressedTextureSubImage2D',
      'CompressedTextureSubImage3D',
      'CopyTextureSubImage1D',
      'CopyTextureSubImage2D',
      'CopyTextureSubImage3D',
      'TextureParameterf',
      'TextureParameterfv',
      'TextureParameteri',
      'TextureParameterIiv',
      'TextureParameterIuiv',
      'TextureParameteriv',
      'GenerateTextureMipmap',
      'BindTextureUnit',
      'GetTextureImage',
      'GetCompressedTextureImage',
      'GetTextureLevelParameterfv',
      'GetTextureLevelParameteriv',
      'GetTextureParameterfv',
      'GetTextureParameterIiv',
      'GetTextureParameterIuiv',
      'GetTextureParameteriv',
      'CreateVertexArrays',
      'DisableVertexArrayAttrib',
      'EnableVertexArrayAttrib',
      'VertexArrayElementBuffer',
      'VertexArrayVertexBuffer',
      'VertexArrayVertexBuffers',
      'VertexArrayAttribBinding',
      'VertexArrayAttribFormat',
      'VertexArrayAttribIFormat',
      'VertexArrayAttribLFormat',
      'VertexArrayBindingDivisor',
      'GetVertexArrayiv',
      'GetVertexArrayIndexediv',
      'GetVertexArrayIndexed64iv',
      'CreateSamplers',
      'CreateProgramPipelines',
      'CreateQueries',
      'GetQueryBufferObjecti64v',
      'GetQueryBufferObjectiv',
      'GetQueryBufferObjectui64v',
      'GetQueryBufferObjectuiv',
    ]
  end # self.get_ext_command_GL_ARB_direct_state_access


  def self.define_ext_command_GL_ARB_draw_buffers
    GL::GL_FUNCTION_SYMBOLS << :DrawBuffersARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawBuffersARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawBuffersARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawBuffersARB)
    GL.module_eval(<<-SRC)
      def self.DrawBuffersARB(_n_, _bufs_)
        GL_FUNCTIONS_MAP[:DrawBuffersARB].call(_n_, _bufs_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_buffers

  def self.get_ext_command_GL_ARB_draw_buffers
    [
      'DrawBuffersARB',
    ]
  end # self.get_ext_command_GL_ARB_draw_buffers


  def self.define_ext_command_GL_ARB_draw_buffers_blend
    GL::GL_FUNCTION_SYMBOLS << :BlendEquationiARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquationiARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquationiARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquationiARB)
    GL.module_eval(<<-SRC)
      def self.BlendEquationiARB(_buf_, _mode_)
        GL_FUNCTIONS_MAP[:BlendEquationiARB].call(_buf_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendEquationSeparateiARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquationSeparateiARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquationSeparateiARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquationSeparateiARB)
    GL.module_eval(<<-SRC)
      def self.BlendEquationSeparateiARB(_buf_, _modeRGB_, _modeAlpha_)
        GL_FUNCTIONS_MAP[:BlendEquationSeparateiARB].call(_buf_, _modeRGB_, _modeAlpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendFunciARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendFunciARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendFunciARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendFunciARB)
    GL.module_eval(<<-SRC)
      def self.BlendFunciARB(_buf_, _src_, _dst_)
        GL_FUNCTIONS_MAP[:BlendFunciARB].call(_buf_, _src_, _dst_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendFuncSeparateiARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendFuncSeparateiARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendFuncSeparateiARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendFuncSeparateiARB)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateiARB(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
        GL_FUNCTIONS_MAP[:BlendFuncSeparateiARB].call(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_buffers_blend

  def self.get_ext_command_GL_ARB_draw_buffers_blend
    [
      'BlendEquationiARB',
      'BlendEquationSeparateiARB',
      'BlendFunciARB',
      'BlendFuncSeparateiARB',
    ]
  end # self.get_ext_command_GL_ARB_draw_buffers_blend


  def self.define_ext_command_GL_ARB_draw_elements_base_vertex
    GL::GL_FUNCTION_SYMBOLS << :DrawElementsBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsBaseVertex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsBaseVertex)
    GL.module_eval(<<-SRC)
      def self.DrawElementsBaseVertex(_mode_, _count_, _type_, _indices_, _basevertex_)
        GL_FUNCTIONS_MAP[:DrawElementsBaseVertex].call(_mode_, _count_, _type_, _indices_, _basevertex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawRangeElementsBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawRangeElementsBaseVertex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawRangeElementsBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawRangeElementsBaseVertex)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementsBaseVertex(_mode_, _start_, _end_, _count_, _type_, _indices_, _basevertex_)
        GL_FUNCTIONS_MAP[:DrawRangeElementsBaseVertex].call(_mode_, _start_, _end_, _count_, _type_, _indices_, _basevertex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementsInstancedBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsInstancedBaseVertex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsInstancedBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsInstancedBaseVertex)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedBaseVertex(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_)
        GL_FUNCTIONS_MAP[:DrawElementsInstancedBaseVertex].call(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsBaseVertex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsBaseVertex)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsBaseVertex(_mode_, _count_, _type_, _indices_, _drawcount_, _basevertex_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsBaseVertex].call(_mode_, _count_, _type_, _indices_, _drawcount_, _basevertex_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_elements_base_vertex

  def self.get_ext_command_GL_ARB_draw_elements_base_vertex
    [
      'DrawElementsBaseVertex',
      'DrawRangeElementsBaseVertex',
      'DrawElementsInstancedBaseVertex',
      'MultiDrawElementsBaseVertex',
    ]
  end # self.get_ext_command_GL_ARB_draw_elements_base_vertex


  def self.define_ext_command_GL_ARB_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :DrawArraysIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawArraysIndirect] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawArraysIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawArraysIndirect)
    GL.module_eval(<<-SRC)
      def self.DrawArraysIndirect(_mode_, _indirect_)
        GL_FUNCTIONS_MAP[:DrawArraysIndirect].call(_mode_, _indirect_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementsIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsIndirect] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsIndirect)
    GL.module_eval(<<-SRC)
      def self.DrawElementsIndirect(_mode_, _type_, _indirect_)
        GL_FUNCTIONS_MAP[:DrawElementsIndirect].call(_mode_, _type_, _indirect_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_indirect

  def self.get_ext_command_GL_ARB_draw_indirect
    [
      'DrawArraysIndirect',
      'DrawElementsIndirect',
    ]
  end # self.get_ext_command_GL_ARB_draw_indirect


  def self.define_ext_command_GL_ARB_draw_instanced
    GL::GL_FUNCTION_SYMBOLS << :DrawArraysInstancedARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawArraysInstancedARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawArraysInstancedARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawArraysInstancedARB)
    GL.module_eval(<<-SRC)
      def self.DrawArraysInstancedARB(_mode_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:DrawArraysInstancedARB].call(_mode_, _first_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementsInstancedARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsInstancedARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsInstancedARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsInstancedARB)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedARB(_mode_, _count_, _type_, _indices_, _primcount_)
        GL_FUNCTIONS_MAP[:DrawElementsInstancedARB].call(_mode_, _count_, _type_, _indices_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_instanced

  def self.get_ext_command_GL_ARB_draw_instanced
    [
      'DrawArraysInstancedARB',
      'DrawElementsInstancedARB',
    ]
  end # self.get_ext_command_GL_ARB_draw_instanced


  def self.define_ext_command_GL_ARB_enhanced_layouts
  end # self.define_ext_command_GL_ARB_enhanced_layouts

  def self.get_ext_command_GL_ARB_enhanced_layouts
    [
    ]
  end # self.get_ext_command_GL_ARB_enhanced_layouts


  def self.define_ext_command_GL_ARB_explicit_attrib_location
  end # self.define_ext_command_GL_ARB_explicit_attrib_location

  def self.get_ext_command_GL_ARB_explicit_attrib_location
    [
    ]
  end # self.get_ext_command_GL_ARB_explicit_attrib_location


  def self.define_ext_command_GL_ARB_explicit_uniform_location
  end # self.define_ext_command_GL_ARB_explicit_uniform_location

  def self.get_ext_command_GL_ARB_explicit_uniform_location
    [
    ]
  end # self.get_ext_command_GL_ARB_explicit_uniform_location


  def self.define_ext_command_GL_ARB_fragment_coord_conventions
  end # self.define_ext_command_GL_ARB_fragment_coord_conventions

  def self.get_ext_command_GL_ARB_fragment_coord_conventions
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_coord_conventions


  def self.define_ext_command_GL_ARB_fragment_layer_viewport
  end # self.define_ext_command_GL_ARB_fragment_layer_viewport

  def self.get_ext_command_GL_ARB_fragment_layer_viewport
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_layer_viewport


  def self.define_ext_command_GL_ARB_fragment_program
    GL::GL_FUNCTION_SYMBOLS << :ProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.ProgramStringARB(_target_, _format_, _len_, _string_)
        GL_FUNCTIONS_MAP[:ProgramStringARB].call(_target_, _format_, _len_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BindProgramARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BindProgramARB)
    GL.module_eval(<<-SRC)
      def self.BindProgramARB(_target_, _program_)
        GL_FUNCTIONS_MAP[:BindProgramARB].call(_target_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteProgramsARB)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:DeleteProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GenProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GenProgramsARB)
    GL.module_eval(<<-SRC)
      def self.GenProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:GenProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramEnvParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramEnvParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramEnvParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramEnvParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramEnvParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramEnvParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramEnvParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramEnvParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramEnvParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramEnvParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramLocalParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramLocalParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramLocalParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramLocalParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramLocalParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramLocalParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramLocalParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramLocalParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramLocalParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramLocalParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramivARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramStringARB(_target_, _pname_, _string_)
        GL_FUNCTIONS_MAP[:GetProgramStringARB].call(_target_, _pname_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsProgramARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsProgramARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsProgramARB)
    GL.module_eval(<<-SRC)
      def self.IsProgramARB(_program_)
        GL_FUNCTIONS_MAP[:IsProgramARB].call(_program_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_fragment_program

  def self.get_ext_command_GL_ARB_fragment_program
    [
      'ProgramStringARB',
      'BindProgramARB',
      'DeleteProgramsARB',
      'GenProgramsARB',
      'ProgramEnvParameter4dARB',
      'ProgramEnvParameter4dvARB',
      'ProgramEnvParameter4fARB',
      'ProgramEnvParameter4fvARB',
      'ProgramLocalParameter4dARB',
      'ProgramLocalParameter4dvARB',
      'ProgramLocalParameter4fARB',
      'ProgramLocalParameter4fvARB',
      'GetProgramEnvParameterdvARB',
      'GetProgramEnvParameterfvARB',
      'GetProgramLocalParameterdvARB',
      'GetProgramLocalParameterfvARB',
      'GetProgramivARB',
      'GetProgramStringARB',
      'IsProgramARB',
    ]
  end # self.get_ext_command_GL_ARB_fragment_program


  def self.define_ext_command_GL_ARB_fragment_program_shadow
  end # self.define_ext_command_GL_ARB_fragment_program_shadow

  def self.get_ext_command_GL_ARB_fragment_program_shadow
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_program_shadow


  def self.define_ext_command_GL_ARB_fragment_shader
  end # self.define_ext_command_GL_ARB_fragment_shader

  def self.get_ext_command_GL_ARB_fragment_shader
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_shader


  def self.define_ext_command_GL_ARB_fragment_shader_interlock
  end # self.define_ext_command_GL_ARB_fragment_shader_interlock

  def self.get_ext_command_GL_ARB_fragment_shader_interlock
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_shader_interlock


  def self.define_ext_command_GL_ARB_framebuffer_no_attachments
    GL::GL_FUNCTION_SYMBOLS << :FramebufferParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferParameteri)
    GL.module_eval(<<-SRC)
      def self.FramebufferParameteri(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:FramebufferParameteri].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFramebufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFramebufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFramebufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFramebufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFramebufferParameteriv].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_framebuffer_no_attachments

  def self.get_ext_command_GL_ARB_framebuffer_no_attachments
    [
      'FramebufferParameteri',
      'GetFramebufferParameteriv',
    ]
  end # self.get_ext_command_GL_ARB_framebuffer_no_attachments


  def self.define_ext_command_GL_ARB_framebuffer_object
    GL::GL_FUNCTION_SYMBOLS << :IsRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:IsRenderbuffer] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsRenderbuffer] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.IsRenderbuffer(_renderbuffer_)
        GL_FUNCTIONS_MAP[:IsRenderbuffer].call(_renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:BindRenderbuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindRenderbuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:BindRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.BindRenderbuffer(_target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:BindRenderbuffer].call(_target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteRenderbuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteRenderbuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteRenderbuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteRenderbuffers)
    GL.module_eval(<<-SRC)
      def self.DeleteRenderbuffers(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:DeleteRenderbuffers].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenRenderbuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:GenRenderbuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenRenderbuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:GenRenderbuffers)
    GL.module_eval(<<-SRC)
      def self.GenRenderbuffers(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:GenRenderbuffers].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RenderbufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderbufferStorage] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderbufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderbufferStorage)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorage(_target_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:RenderbufferStorage].call(_target_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetRenderbufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetRenderbufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetRenderbufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetRenderbufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetRenderbufferParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetRenderbufferParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:IsFramebuffer] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsFramebuffer] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsFramebuffer)
    GL.module_eval(<<-SRC)
      def self.IsFramebuffer(_framebuffer_)
        GL_FUNCTIONS_MAP[:IsFramebuffer].call(_framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:BindFramebuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:BindFramebuffer)
    GL.module_eval(<<-SRC)
      def self.BindFramebuffer(_target_, _framebuffer_)
        GL_FUNCTIONS_MAP[:BindFramebuffer].call(_target_, _framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteFramebuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteFramebuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteFramebuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteFramebuffers)
    GL.module_eval(<<-SRC)
      def self.DeleteFramebuffers(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:DeleteFramebuffers].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenFramebuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:GenFramebuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenFramebuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:GenFramebuffers)
    GL.module_eval(<<-SRC)
      def self.GenFramebuffers(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:GenFramebuffers].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CheckFramebufferStatus
    GL::GL_FUNCTIONS_ARGS_MAP[:CheckFramebufferStatus] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CheckFramebufferStatus] = -Fiddle::TYPE_INT
    GL.bind_command(:CheckFramebufferStatus)
    GL.module_eval(<<-SRC)
      def self.CheckFramebufferStatus(_target_)
        GL_FUNCTIONS_MAP[:CheckFramebufferStatus].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTexture1D
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTexture1D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTexture1D] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTexture1D)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture1D(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:FramebufferTexture1D].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTexture2D
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTexture2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTexture2D] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTexture2D)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture2D(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:FramebufferTexture2D].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTexture3D
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTexture3D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTexture3D] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTexture3D)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture3D(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
        GL_FUNCTIONS_MAP[:FramebufferTexture3D].call(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferRenderbuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferRenderbuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.FramebufferRenderbuffer(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:FramebufferRenderbuffer].call(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFramebufferAttachmentParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFramebufferAttachmentParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFramebufferAttachmentParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFramebufferAttachmentParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferAttachmentParameteriv(_target_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFramebufferAttachmentParameteriv].call(_target_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenerateMipmap
    GL::GL_FUNCTIONS_ARGS_MAP[:GenerateMipmap] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenerateMipmap] = Fiddle::TYPE_VOID
    GL.bind_command(:GenerateMipmap)
    GL.module_eval(<<-SRC)
      def self.GenerateMipmap(_target_)
        GL_FUNCTIONS_MAP[:GenerateMipmap].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlitFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:BlitFramebuffer] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlitFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:BlitFramebuffer)
    GL.module_eval(<<-SRC)
      def self.BlitFramebuffer(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:BlitFramebuffer].call(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RenderbufferStorageMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderbufferStorageMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderbufferStorageMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderbufferStorageMultisample)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisample(_target_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:RenderbufferStorageMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureLayer
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureLayer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureLayer] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureLayer)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayer(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:FramebufferTextureLayer].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_framebuffer_object

  def self.get_ext_command_GL_ARB_framebuffer_object
    [
      'IsRenderbuffer',
      'BindRenderbuffer',
      'DeleteRenderbuffers',
      'GenRenderbuffers',
      'RenderbufferStorage',
      'GetRenderbufferParameteriv',
      'IsFramebuffer',
      'BindFramebuffer',
      'DeleteFramebuffers',
      'GenFramebuffers',
      'CheckFramebufferStatus',
      'FramebufferTexture1D',
      'FramebufferTexture2D',
      'FramebufferTexture3D',
      'FramebufferRenderbuffer',
      'GetFramebufferAttachmentParameteriv',
      'GenerateMipmap',
      'BlitFramebuffer',
      'RenderbufferStorageMultisample',
      'FramebufferTextureLayer',
    ]
  end # self.get_ext_command_GL_ARB_framebuffer_object


  def self.define_ext_command_GL_ARB_framebuffer_sRGB
  end # self.define_ext_command_GL_ARB_framebuffer_sRGB

  def self.get_ext_command_GL_ARB_framebuffer_sRGB
    [
    ]
  end # self.get_ext_command_GL_ARB_framebuffer_sRGB


  def self.define_ext_command_GL_ARB_geometry_shader4
    GL::GL_FUNCTION_SYMBOLS << :ProgramParameteriARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameteriARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameteriARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameteriARB)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteriARB(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:ProgramParameteriARB].call(_program_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureARB
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureARB] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureARB(_target_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:FramebufferTextureARB].call(_target_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureLayerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureLayerARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureLayerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureLayerARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayerARB(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:FramebufferTextureLayerARB].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureFaceARB
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureFaceARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureFaceARB] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureFaceARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureFaceARB(_target_, _attachment_, _texture_, _level_, _face_)
        GL_FUNCTIONS_MAP[:FramebufferTextureFaceARB].call(_target_, _attachment_, _texture_, _level_, _face_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_geometry_shader4

  def self.get_ext_command_GL_ARB_geometry_shader4
    [
      'ProgramParameteriARB',
      'FramebufferTextureARB',
      'FramebufferTextureLayerARB',
      'FramebufferTextureFaceARB',
    ]
  end # self.get_ext_command_GL_ARB_geometry_shader4


  def self.define_ext_command_GL_ARB_get_program_binary
    GL::GL_FUNCTION_SYMBOLS << :GetProgramBinary
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramBinary] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramBinary] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramBinary)
    GL.module_eval(<<-SRC)
      def self.GetProgramBinary(_program_, _bufSize_, _length_, _binaryFormat_, _binary_)
        GL_FUNCTIONS_MAP[:GetProgramBinary].call(_program_, _bufSize_, _length_, _binaryFormat_, _binary_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramBinary
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramBinary] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramBinary] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramBinary)
    GL.module_eval(<<-SRC)
      def self.ProgramBinary(_program_, _binaryFormat_, _binary_, _length_)
        GL_FUNCTIONS_MAP[:ProgramBinary].call(_program_, _binaryFormat_, _binary_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameteri)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteri(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:ProgramParameteri].call(_program_, _pname_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_get_program_binary

  def self.get_ext_command_GL_ARB_get_program_binary
    [
      'GetProgramBinary',
      'ProgramBinary',
      'ProgramParameteri',
    ]
  end # self.get_ext_command_GL_ARB_get_program_binary


  def self.define_ext_command_GL_ARB_get_texture_sub_image
    GL::GL_FUNCTION_SYMBOLS << :GetTextureSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureSubImage)
    GL.module_eval(<<-SRC)
      def self.GetTextureSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:GetTextureSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _bufSize_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCompressedTextureSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCompressedTextureSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCompressedTextureSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCompressedTextureSubImage)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTextureSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:GetCompressedTextureSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _bufSize_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_get_texture_sub_image

  def self.get_ext_command_GL_ARB_get_texture_sub_image
    [
      'GetTextureSubImage',
      'GetCompressedTextureSubImage',
    ]
  end # self.get_ext_command_GL_ARB_get_texture_sub_image


  def self.define_ext_command_GL_ARB_gl_spirv
    GL::GL_FUNCTION_SYMBOLS << :SpecializeShaderARB
    GL::GL_FUNCTIONS_ARGS_MAP[:SpecializeShaderARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SpecializeShaderARB] = Fiddle::TYPE_VOID
    GL.bind_command(:SpecializeShaderARB)
    GL.module_eval(<<-SRC)
      def self.SpecializeShaderARB(_shader_, _pEntryPoint_, _numSpecializationConstants_, _pConstantIndex_, _pConstantValue_)
        GL_FUNCTIONS_MAP[:SpecializeShaderARB].call(_shader_, _pEntryPoint_, _numSpecializationConstants_, _pConstantIndex_, _pConstantValue_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_gl_spirv

  def self.get_ext_command_GL_ARB_gl_spirv
    [
      'SpecializeShaderARB',
    ]
  end # self.get_ext_command_GL_ARB_gl_spirv


  def self.define_ext_command_GL_ARB_gpu_shader5
  end # self.define_ext_command_GL_ARB_gpu_shader5

  def self.get_ext_command_GL_ARB_gpu_shader5
    [
    ]
  end # self.get_ext_command_GL_ARB_gpu_shader5


  def self.define_ext_command_GL_ARB_gpu_shader_fp64
    GL::GL_FUNCTION_SYMBOLS << :Uniform1d
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1d] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1d)
    GL.module_eval(<<-SRC)
      def self.Uniform1d(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1d].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2d
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2d] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2d)
    GL.module_eval(<<-SRC)
      def self.Uniform2d(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2d].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3d
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3d] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3d)
    GL.module_eval(<<-SRC)
      def self.Uniform3d(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3d].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4d
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4d] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4d)
    GL.module_eval(<<-SRC)
      def self.Uniform4d(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4d].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1dv
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1dv] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1dv)
    GL.module_eval(<<-SRC)
      def self.Uniform1dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2dv)
    GL.module_eval(<<-SRC)
      def self.Uniform2dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3dv)
    GL.module_eval(<<-SRC)
      def self.Uniform3dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4dv)
    GL.module_eval(<<-SRC)
      def self.Uniform4dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix2dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix2dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix3dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix3dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix4dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix4dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix2x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix2x3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix2x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix2x3dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2x3dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix2x3dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix2x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix2x4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix2x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix2x4dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2x4dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix2x4dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix3x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix3x2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix3x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix3x2dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3x2dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix3x2dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix3x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix3x4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix3x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix3x4dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3x4dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix3x4dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix4x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix4x2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix4x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix4x2dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4x2dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix4x2dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix4x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix4x3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix4x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix4x3dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4x3dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix4x3dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformdv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformdv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformdv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformdv)
    GL.module_eval(<<-SRC)
      def self.GetUniformdv(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformdv].call(_program_, _location_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_gpu_shader_fp64

  def self.get_ext_command_GL_ARB_gpu_shader_fp64
    [
      'Uniform1d',
      'Uniform2d',
      'Uniform3d',
      'Uniform4d',
      'Uniform1dv',
      'Uniform2dv',
      'Uniform3dv',
      'Uniform4dv',
      'UniformMatrix2dv',
      'UniformMatrix3dv',
      'UniformMatrix4dv',
      'UniformMatrix2x3dv',
      'UniformMatrix2x4dv',
      'UniformMatrix3x2dv',
      'UniformMatrix3x4dv',
      'UniformMatrix4x2dv',
      'UniformMatrix4x3dv',
      'GetUniformdv',
    ]
  end # self.get_ext_command_GL_ARB_gpu_shader_fp64


  def self.define_ext_command_GL_ARB_gpu_shader_int64
    GL::GL_FUNCTION_SYMBOLS << :Uniform1i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64ARB(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1i64ARB].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64ARB(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2i64ARB].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64ARB(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3i64ARB].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64ARB(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4i64ARB].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64ARB(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1ui64ARB].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64ARB(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2ui64ARB].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64ARB(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3ui64ARB].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64ARB(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4ui64ARB].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformi64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformi64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformi64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformi64vARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformi64vARB(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformi64vARB].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformui64vARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformui64vARB(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformui64vARB].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformi64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformi64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformi64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformi64vARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformi64vARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformi64vARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformui64vARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformui64vARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformui64vARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64ARB(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i64ARB].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64ARB(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i64ARB].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64ARB(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i64ARB].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64ARB(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i64ARB].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64ARB(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui64ARB].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64ARB(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui64ARB].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64ARB(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui64ARB].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64ARB(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui64ARB].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_gpu_shader_int64

  def self.get_ext_command_GL_ARB_gpu_shader_int64
    [
      'Uniform1i64ARB',
      'Uniform2i64ARB',
      'Uniform3i64ARB',
      'Uniform4i64ARB',
      'Uniform1i64vARB',
      'Uniform2i64vARB',
      'Uniform3i64vARB',
      'Uniform4i64vARB',
      'Uniform1ui64ARB',
      'Uniform2ui64ARB',
      'Uniform3ui64ARB',
      'Uniform4ui64ARB',
      'Uniform1ui64vARB',
      'Uniform2ui64vARB',
      'Uniform3ui64vARB',
      'Uniform4ui64vARB',
      'GetUniformi64vARB',
      'GetUniformui64vARB',
      'GetnUniformi64vARB',
      'GetnUniformui64vARB',
      'ProgramUniform1i64ARB',
      'ProgramUniform2i64ARB',
      'ProgramUniform3i64ARB',
      'ProgramUniform4i64ARB',
      'ProgramUniform1i64vARB',
      'ProgramUniform2i64vARB',
      'ProgramUniform3i64vARB',
      'ProgramUniform4i64vARB',
      'ProgramUniform1ui64ARB',
      'ProgramUniform2ui64ARB',
      'ProgramUniform3ui64ARB',
      'ProgramUniform4ui64ARB',
      'ProgramUniform1ui64vARB',
      'ProgramUniform2ui64vARB',
      'ProgramUniform3ui64vARB',
      'ProgramUniform4ui64vARB',
    ]
  end # self.get_ext_command_GL_ARB_gpu_shader_int64


  def self.define_ext_command_GL_ARB_half_float_pixel
  end # self.define_ext_command_GL_ARB_half_float_pixel

  def self.get_ext_command_GL_ARB_half_float_pixel
    [
    ]
  end # self.get_ext_command_GL_ARB_half_float_pixel


  def self.define_ext_command_GL_ARB_half_float_vertex
  end # self.define_ext_command_GL_ARB_half_float_vertex

  def self.get_ext_command_GL_ARB_half_float_vertex
    [
    ]
  end # self.get_ext_command_GL_ARB_half_float_vertex


  def self.define_ext_command_GL_ARB_imaging
    GL::GL_FUNCTION_SYMBOLS << :BlendColor
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendColor] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendColor] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendColor)
    GL.module_eval(<<-SRC)
      def self.BlendColor(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:BlendColor].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendEquation
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquation] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquation] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquation)
    GL.module_eval(<<-SRC)
      def self.BlendEquation(_mode_)
        GL_FUNCTIONS_MAP[:BlendEquation].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorTable
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTable] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTable] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTable)
    GL.module_eval(<<-SRC)
      def self.ColorTable(_target_, _internalformat_, _width_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:ColorTable].call(_target_, _internalformat_, _width_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorTableParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTableParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTableParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTableParameterfv)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ColorTableParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorTableParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTableParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTableParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTableParameteriv)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ColorTableParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyColorTable
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyColorTable] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyColorTable] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyColorTable)
    GL.module_eval(<<-SRC)
      def self.CopyColorTable(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyColorTable].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTable
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTable] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTable] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTable)
    GL.module_eval(<<-SRC)
      def self.GetColorTable(_target_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:GetColorTable].call(_target_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetColorTableParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetColorTableParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorSubTable
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorSubTable] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorSubTable] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorSubTable)
    GL.module_eval(<<-SRC)
      def self.ColorSubTable(_target_, _start_, _count_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ColorSubTable].call(_target_, _start_, _count_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyColorSubTable
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyColorSubTable] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyColorSubTable] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyColorSubTable)
    GL.module_eval(<<-SRC)
      def self.CopyColorSubTable(_target_, _start_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyColorSubTable].call(_target_, _start_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionFilter1D
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionFilter1D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionFilter1D] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionFilter1D)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter1D(_target_, _internalformat_, _width_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:ConvolutionFilter1D].call(_target_, _internalformat_, _width_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionFilter2D
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionFilter2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionFilter2D] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionFilter2D)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter2D(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:ConvolutionFilter2D].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterf
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterf] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterf] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterf)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterf(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterf].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterfv)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameteri)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameteri(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameteri].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameteriv)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyConvolutionFilter1D
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyConvolutionFilter1D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyConvolutionFilter1D] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyConvolutionFilter1D)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter1D(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyConvolutionFilter1D].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyConvolutionFilter2D
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyConvolutionFilter2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyConvolutionFilter2D] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyConvolutionFilter2D)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter2D(_target_, _internalformat_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyConvolutionFilter2D].call(_target_, _internalformat_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionFilter
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionFilter] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionFilter] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionFilter)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionFilter(_target_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:GetConvolutionFilter].call(_target_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetConvolutionParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetConvolutionParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSeparableFilter
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSeparableFilter] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSeparableFilter] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSeparableFilter)
    GL.module_eval(<<-SRC)
      def self.GetSeparableFilter(_target_, _format_, _type_, _row_, _column_, _span_)
        GL_FUNCTIONS_MAP[:GetSeparableFilter].call(_target_, _format_, _type_, _row_, _column_, _span_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SeparableFilter2D
    GL::GL_FUNCTIONS_ARGS_MAP[:SeparableFilter2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SeparableFilter2D] = Fiddle::TYPE_VOID
    GL.bind_command(:SeparableFilter2D)
    GL.module_eval(<<-SRC)
      def self.SeparableFilter2D(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
        GL_FUNCTIONS_MAP[:SeparableFilter2D].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHistogram
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogram] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogram] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogram)
    GL.module_eval(<<-SRC)
      def self.GetHistogram(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:GetHistogram].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHistogramParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogramParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogramParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogramParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetHistogramParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHistogramParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogramParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogramParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogramParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetHistogramParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMinmax
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMinmax] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMinmax] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMinmax)
    GL.module_eval(<<-SRC)
      def self.GetMinmax(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:GetMinmax].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMinmaxParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMinmaxParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMinmaxParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMinmaxParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMinmaxParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMinmaxParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMinmaxParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMinmaxParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMinmaxParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMinmaxParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Histogram
    GL::GL_FUNCTIONS_ARGS_MAP[:Histogram] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Histogram] = Fiddle::TYPE_VOID
    GL.bind_command(:Histogram)
    GL.module_eval(<<-SRC)
      def self.Histogram(_target_, _width_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:Histogram].call(_target_, _width_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Minmax
    GL::GL_FUNCTIONS_ARGS_MAP[:Minmax] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Minmax] = Fiddle::TYPE_VOID
    GL.bind_command(:Minmax)
    GL.module_eval(<<-SRC)
      def self.Minmax(_target_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:Minmax].call(_target_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResetHistogram
    GL::GL_FUNCTIONS_ARGS_MAP[:ResetHistogram] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResetHistogram] = Fiddle::TYPE_VOID
    GL.bind_command(:ResetHistogram)
    GL.module_eval(<<-SRC)
      def self.ResetHistogram(_target_)
        GL_FUNCTIONS_MAP[:ResetHistogram].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResetMinmax
    GL::GL_FUNCTIONS_ARGS_MAP[:ResetMinmax] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResetMinmax] = Fiddle::TYPE_VOID
    GL.bind_command(:ResetMinmax)
    GL.module_eval(<<-SRC)
      def self.ResetMinmax(_target_)
        GL_FUNCTIONS_MAP[:ResetMinmax].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_imaging

  def self.get_ext_command_GL_ARB_imaging
    [
      'BlendColor',
      'BlendEquation',
      'ColorTable',
      'ColorTableParameterfv',
      'ColorTableParameteriv',
      'CopyColorTable',
      'GetColorTable',
      'GetColorTableParameterfv',
      'GetColorTableParameteriv',
      'ColorSubTable',
      'CopyColorSubTable',
      'ConvolutionFilter1D',
      'ConvolutionFilter2D',
      'ConvolutionParameterf',
      'ConvolutionParameterfv',
      'ConvolutionParameteri',
      'ConvolutionParameteriv',
      'CopyConvolutionFilter1D',
      'CopyConvolutionFilter2D',
      'GetConvolutionFilter',
      'GetConvolutionParameterfv',
      'GetConvolutionParameteriv',
      'GetSeparableFilter',
      'SeparableFilter2D',
      'GetHistogram',
      'GetHistogramParameterfv',
      'GetHistogramParameteriv',
      'GetMinmax',
      'GetMinmaxParameterfv',
      'GetMinmaxParameteriv',
      'Histogram',
      'Minmax',
      'ResetHistogram',
      'ResetMinmax',
    ]
  end # self.get_ext_command_GL_ARB_imaging


  def self.define_ext_command_GL_ARB_indirect_parameters
    GL::GL_FUNCTION_SYMBOLS << :MultiDrawArraysIndirectCountARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawArraysIndirectCountARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawArraysIndirectCountARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawArraysIndirectCountARB)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectCountARB(_mode_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawArraysIndirectCountARB].call(_mode_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsIndirectCountARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsIndirectCountARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsIndirectCountARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsIndirectCountARB)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectCountARB(_mode_, _type_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsIndirectCountARB].call(_mode_, _type_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_indirect_parameters

  def self.get_ext_command_GL_ARB_indirect_parameters
    [
      'MultiDrawArraysIndirectCountARB',
      'MultiDrawElementsIndirectCountARB',
    ]
  end # self.get_ext_command_GL_ARB_indirect_parameters


  def self.define_ext_command_GL_ARB_instanced_arrays
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribDivisorARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribDivisorARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribDivisorARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribDivisorARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribDivisorARB(_index_, _divisor_)
        GL_FUNCTIONS_MAP[:VertexAttribDivisorARB].call(_index_, _divisor_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_instanced_arrays

  def self.get_ext_command_GL_ARB_instanced_arrays
    [
      'VertexAttribDivisorARB',
    ]
  end # self.get_ext_command_GL_ARB_instanced_arrays


  def self.define_ext_command_GL_ARB_internalformat_query
    GL::GL_FUNCTION_SYMBOLS << :GetInternalformativ
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInternalformativ] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInternalformativ] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInternalformativ)
    GL.module_eval(<<-SRC)
      def self.GetInternalformativ(_target_, _internalformat_, _pname_, _count_, _params_)
        GL_FUNCTIONS_MAP[:GetInternalformativ].call(_target_, _internalformat_, _pname_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_internalformat_query

  def self.get_ext_command_GL_ARB_internalformat_query
    [
      'GetInternalformativ',
    ]
  end # self.get_ext_command_GL_ARB_internalformat_query


  def self.define_ext_command_GL_ARB_internalformat_query2
    GL::GL_FUNCTION_SYMBOLS << :GetInternalformati64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInternalformati64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInternalformati64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInternalformati64v)
    GL.module_eval(<<-SRC)
      def self.GetInternalformati64v(_target_, _internalformat_, _pname_, _count_, _params_)
        GL_FUNCTIONS_MAP[:GetInternalformati64v].call(_target_, _internalformat_, _pname_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_internalformat_query2

  def self.get_ext_command_GL_ARB_internalformat_query2
    [
      'GetInternalformati64v',
    ]
  end # self.get_ext_command_GL_ARB_internalformat_query2


  def self.define_ext_command_GL_ARB_invalidate_subdata
    GL::GL_FUNCTION_SYMBOLS << :InvalidateTexSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateTexSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateTexSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateTexSubImage)
    GL.module_eval(<<-SRC)
      def self.InvalidateTexSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:InvalidateTexSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateTexImage
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateTexImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateTexImage] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateTexImage)
    GL.module_eval(<<-SRC)
      def self.InvalidateTexImage(_texture_, _level_)
        GL_FUNCTIONS_MAP[:InvalidateTexImage].call(_texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateBufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateBufferSubData)
    GL.module_eval(<<-SRC)
      def self.InvalidateBufferSubData(_buffer_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:InvalidateBufferSubData].call(_buffer_, _offset_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateBufferData] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateBufferData)
    GL.module_eval(<<-SRC)
      def self.InvalidateBufferData(_buffer_)
        GL_FUNCTIONS_MAP[:InvalidateBufferData].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateFramebuffer] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateFramebuffer)
    GL.module_eval(<<-SRC)
      def self.InvalidateFramebuffer(_target_, _numAttachments_, _attachments_)
        GL_FUNCTIONS_MAP[:InvalidateFramebuffer].call(_target_, _numAttachments_, _attachments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InvalidateSubFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:InvalidateSubFramebuffer] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InvalidateSubFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:InvalidateSubFramebuffer)
    GL.module_eval(<<-SRC)
      def self.InvalidateSubFramebuffer(_target_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:InvalidateSubFramebuffer].call(_target_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_invalidate_subdata

  def self.get_ext_command_GL_ARB_invalidate_subdata
    [
      'InvalidateTexSubImage',
      'InvalidateTexImage',
      'InvalidateBufferSubData',
      'InvalidateBufferData',
      'InvalidateFramebuffer',
      'InvalidateSubFramebuffer',
    ]
  end # self.get_ext_command_GL_ARB_invalidate_subdata


  def self.define_ext_command_GL_ARB_map_buffer_alignment
  end # self.define_ext_command_GL_ARB_map_buffer_alignment

  def self.get_ext_command_GL_ARB_map_buffer_alignment
    [
    ]
  end # self.get_ext_command_GL_ARB_map_buffer_alignment


  def self.define_ext_command_GL_ARB_map_buffer_range
    GL::GL_FUNCTION_SYMBOLS << :MapBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:MapBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapBufferRange] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapBufferRange)
    GL.module_eval(<<-SRC)
      def self.MapBufferRange(_target_, _offset_, _length_, _access_)
        GL_FUNCTIONS_MAP[:MapBufferRange].call(_target_, _offset_, _length_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FlushMappedBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushMappedBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushMappedBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushMappedBufferRange)
    GL.module_eval(<<-SRC)
      def self.FlushMappedBufferRange(_target_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:FlushMappedBufferRange].call(_target_, _offset_, _length_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_map_buffer_range

  def self.get_ext_command_GL_ARB_map_buffer_range
    [
      'MapBufferRange',
      'FlushMappedBufferRange',
    ]
  end # self.get_ext_command_GL_ARB_map_buffer_range


  def self.define_ext_command_GL_ARB_matrix_palette
    GL::GL_FUNCTION_SYMBOLS << :CurrentPaletteMatrixARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CurrentPaletteMatrixARB] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CurrentPaletteMatrixARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CurrentPaletteMatrixARB)
    GL.module_eval(<<-SRC)
      def self.CurrentPaletteMatrixARB(_index_)
        GL_FUNCTIONS_MAP[:CurrentPaletteMatrixARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixIndexubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixIndexubvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixIndexubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixIndexubvARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexubvARB(_size_, _indices_)
        GL_FUNCTIONS_MAP[:MatrixIndexubvARB].call(_size_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixIndexusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixIndexusvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixIndexusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixIndexusvARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexusvARB(_size_, _indices_)
        GL_FUNCTIONS_MAP[:MatrixIndexusvARB].call(_size_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixIndexuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixIndexuivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixIndexuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixIndexuivARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexuivARB(_size_, _indices_)
        GL_FUNCTIONS_MAP[:MatrixIndexuivARB].call(_size_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixIndexPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixIndexPointerARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixIndexPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixIndexPointerARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexPointerARB(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:MatrixIndexPointerARB].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_matrix_palette

  def self.get_ext_command_GL_ARB_matrix_palette
    [
      'CurrentPaletteMatrixARB',
      'MatrixIndexubvARB',
      'MatrixIndexusvARB',
      'MatrixIndexuivARB',
      'MatrixIndexPointerARB',
    ]
  end # self.get_ext_command_GL_ARB_matrix_palette


  def self.define_ext_command_GL_ARB_multi_bind
    GL::GL_FUNCTION_SYMBOLS << :BindBuffersBase
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBuffersBase] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBuffersBase] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBuffersBase)
    GL.module_eval(<<-SRC)
      def self.BindBuffersBase(_target_, _first_, _count_, _buffers_)
        GL_FUNCTIONS_MAP[:BindBuffersBase].call(_target_, _first_, _count_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBuffersRange
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBuffersRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBuffersRange] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBuffersRange)
    GL.module_eval(<<-SRC)
      def self.BindBuffersRange(_target_, _first_, _count_, _buffers_, _offsets_, _sizes_)
        GL_FUNCTIONS_MAP[:BindBuffersRange].call(_target_, _first_, _count_, _buffers_, _offsets_, _sizes_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindTextures
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTextures] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTextures] = Fiddle::TYPE_VOID
    GL.bind_command(:BindTextures)
    GL.module_eval(<<-SRC)
      def self.BindTextures(_first_, _count_, _textures_)
        GL_FUNCTIONS_MAP[:BindTextures].call(_first_, _count_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:BindSamplers] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:BindSamplers)
    GL.module_eval(<<-SRC)
      def self.BindSamplers(_first_, _count_, _samplers_)
        GL_FUNCTIONS_MAP[:BindSamplers].call(_first_, _count_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindImageTextures
    GL::GL_FUNCTIONS_ARGS_MAP[:BindImageTextures] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindImageTextures] = Fiddle::TYPE_VOID
    GL.bind_command(:BindImageTextures)
    GL.module_eval(<<-SRC)
      def self.BindImageTextures(_first_, _count_, _textures_)
        GL_FUNCTIONS_MAP[:BindImageTextures].call(_first_, _count_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindVertexBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVertexBuffers] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVertexBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVertexBuffers)
    GL.module_eval(<<-SRC)
      def self.BindVertexBuffers(_first_, _count_, _buffers_, _offsets_, _strides_)
        GL_FUNCTIONS_MAP[:BindVertexBuffers].call(_first_, _count_, _buffers_, _offsets_, _strides_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multi_bind

  def self.get_ext_command_GL_ARB_multi_bind
    [
      'BindBuffersBase',
      'BindBuffersRange',
      'BindTextures',
      'BindSamplers',
      'BindImageTextures',
      'BindVertexBuffers',
    ]
  end # self.get_ext_command_GL_ARB_multi_bind


  def self.define_ext_command_GL_ARB_multi_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :MultiDrawArraysIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawArraysIndirect] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawArraysIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawArraysIndirect)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirect(_mode_, _indirect_, _drawcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawArraysIndirect].call(_mode_, _indirect_, _drawcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsIndirect] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsIndirect)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirect(_mode_, _type_, _indirect_, _drawcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsIndirect].call(_mode_, _type_, _indirect_, _drawcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multi_draw_indirect

  def self.get_ext_command_GL_ARB_multi_draw_indirect
    [
      'MultiDrawArraysIndirect',
      'MultiDrawElementsIndirect',
    ]
  end # self.get_ext_command_GL_ARB_multi_draw_indirect


  def self.define_ext_command_GL_ARB_multisample
    GL::GL_FUNCTION_SYMBOLS << :SampleCoverageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleCoverageARB] = [Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleCoverageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleCoverageARB)
    GL.module_eval(<<-SRC)
      def self.SampleCoverageARB(_value_, _invert_)
        GL_FUNCTIONS_MAP[:SampleCoverageARB].call(_value_, _invert_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multisample

  def self.get_ext_command_GL_ARB_multisample
    [
      'SampleCoverageARB',
    ]
  end # self.get_ext_command_GL_ARB_multisample


  def self.define_ext_command_GL_ARB_multitexture
    GL::GL_FUNCTION_SYMBOLS << :ActiveTextureARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ActiveTextureARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ActiveTextureARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ActiveTextureARB)
    GL.module_eval(<<-SRC)
      def self.ActiveTextureARB(_texture_)
        GL_FUNCTIONS_MAP[:ActiveTextureARB].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClientActiveTextureARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ClientActiveTextureARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClientActiveTextureARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ClientActiveTextureARB)
    GL.module_eval(<<-SRC)
      def self.ClientActiveTextureARB(_texture_)
        GL_FUNCTIONS_MAP[:ClientActiveTextureARB].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1dARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1dARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1fARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1fARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1iARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1iARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1sARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1sARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1svARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2dARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2dARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2fARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2fARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2iARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2iARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2sARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2sARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2svARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3dARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3dARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3fARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3fARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3iARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3iARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3sARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3sARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3svARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4dARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4dARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4fARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4fARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4iARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4iARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4sARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4sARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4svARB].call(_target_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multitexture

  def self.get_ext_command_GL_ARB_multitexture
    [
      'ActiveTextureARB',
      'ClientActiveTextureARB',
      'MultiTexCoord1dARB',
      'MultiTexCoord1dvARB',
      'MultiTexCoord1fARB',
      'MultiTexCoord1fvARB',
      'MultiTexCoord1iARB',
      'MultiTexCoord1ivARB',
      'MultiTexCoord1sARB',
      'MultiTexCoord1svARB',
      'MultiTexCoord2dARB',
      'MultiTexCoord2dvARB',
      'MultiTexCoord2fARB',
      'MultiTexCoord2fvARB',
      'MultiTexCoord2iARB',
      'MultiTexCoord2ivARB',
      'MultiTexCoord2sARB',
      'MultiTexCoord2svARB',
      'MultiTexCoord3dARB',
      'MultiTexCoord3dvARB',
      'MultiTexCoord3fARB',
      'MultiTexCoord3fvARB',
      'MultiTexCoord3iARB',
      'MultiTexCoord3ivARB',
      'MultiTexCoord3sARB',
      'MultiTexCoord3svARB',
      'MultiTexCoord4dARB',
      'MultiTexCoord4dvARB',
      'MultiTexCoord4fARB',
      'MultiTexCoord4fvARB',
      'MultiTexCoord4iARB',
      'MultiTexCoord4ivARB',
      'MultiTexCoord4sARB',
      'MultiTexCoord4svARB',
    ]
  end # self.get_ext_command_GL_ARB_multitexture


  def self.define_ext_command_GL_ARB_occlusion_query
    GL::GL_FUNCTION_SYMBOLS << :GenQueriesARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GenQueriesARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenQueriesARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GenQueriesARB)
    GL.module_eval(<<-SRC)
      def self.GenQueriesARB(_n_, _ids_)
        GL_FUNCTIONS_MAP[:GenQueriesARB].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteQueriesARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteQueriesARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteQueriesARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteQueriesARB)
    GL.module_eval(<<-SRC)
      def self.DeleteQueriesARB(_n_, _ids_)
        GL_FUNCTIONS_MAP[:DeleteQueriesARB].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsQueryARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsQueryARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsQueryARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsQueryARB)
    GL.module_eval(<<-SRC)
      def self.IsQueryARB(_id_)
        GL_FUNCTIONS_MAP[:IsQueryARB].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BeginQueryARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginQueryARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginQueryARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginQueryARB)
    GL.module_eval(<<-SRC)
      def self.BeginQueryARB(_target_, _id_)
        GL_FUNCTIONS_MAP[:BeginQueryARB].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndQueryARB
    GL::GL_FUNCTIONS_ARGS_MAP[:EndQueryARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndQueryARB] = Fiddle::TYPE_VOID
    GL.bind_command(:EndQueryARB)
    GL.module_eval(<<-SRC)
      def self.EndQueryARB(_target_)
        GL_FUNCTIONS_MAP[:EndQueryARB].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryivARB)
    GL.module_eval(<<-SRC)
      def self.GetQueryivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryObjectivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryObjectivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryObjectivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryObjectivARB)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectivARB(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryObjectivARB].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryObjectuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryObjectuivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryObjectuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryObjectuivARB)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectuivARB(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryObjectuivARB].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_occlusion_query

  def self.get_ext_command_GL_ARB_occlusion_query
    [
      'GenQueriesARB',
      'DeleteQueriesARB',
      'IsQueryARB',
      'BeginQueryARB',
      'EndQueryARB',
      'GetQueryivARB',
      'GetQueryObjectivARB',
      'GetQueryObjectuivARB',
    ]
  end # self.get_ext_command_GL_ARB_occlusion_query


  def self.define_ext_command_GL_ARB_occlusion_query2
  end # self.define_ext_command_GL_ARB_occlusion_query2

  def self.get_ext_command_GL_ARB_occlusion_query2
    [
    ]
  end # self.get_ext_command_GL_ARB_occlusion_query2


  def self.define_ext_command_GL_ARB_parallel_shader_compile
    GL::GL_FUNCTION_SYMBOLS << :MaxShaderCompilerThreadsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MaxShaderCompilerThreadsARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MaxShaderCompilerThreadsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MaxShaderCompilerThreadsARB)
    GL.module_eval(<<-SRC)
      def self.MaxShaderCompilerThreadsARB(_count_)
        GL_FUNCTIONS_MAP[:MaxShaderCompilerThreadsARB].call(_count_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_parallel_shader_compile

  def self.get_ext_command_GL_ARB_parallel_shader_compile
    [
      'MaxShaderCompilerThreadsARB',
    ]
  end # self.get_ext_command_GL_ARB_parallel_shader_compile


  def self.define_ext_command_GL_ARB_pipeline_statistics_query
  end # self.define_ext_command_GL_ARB_pipeline_statistics_query

  def self.get_ext_command_GL_ARB_pipeline_statistics_query
    [
    ]
  end # self.get_ext_command_GL_ARB_pipeline_statistics_query


  def self.define_ext_command_GL_ARB_pixel_buffer_object
  end # self.define_ext_command_GL_ARB_pixel_buffer_object

  def self.get_ext_command_GL_ARB_pixel_buffer_object
    [
    ]
  end # self.get_ext_command_GL_ARB_pixel_buffer_object


  def self.define_ext_command_GL_ARB_point_parameters
    GL::GL_FUNCTION_SYMBOLS << :PointParameterfARB
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterfARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterfARB] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterfARB)
    GL.module_eval(<<-SRC)
      def self.PointParameterfARB(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PointParameterfARB].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterfvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.PointParameterfvARB(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PointParameterfvARB].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_point_parameters

  def self.get_ext_command_GL_ARB_point_parameters
    [
      'PointParameterfARB',
      'PointParameterfvARB',
    ]
  end # self.get_ext_command_GL_ARB_point_parameters


  def self.define_ext_command_GL_ARB_point_sprite
  end # self.define_ext_command_GL_ARB_point_sprite

  def self.get_ext_command_GL_ARB_point_sprite
    [
    ]
  end # self.get_ext_command_GL_ARB_point_sprite


  def self.define_ext_command_GL_ARB_polygon_offset_clamp
    GL::GL_FUNCTION_SYMBOLS << :PolygonOffsetClamp
    GL::GL_FUNCTIONS_ARGS_MAP[:PolygonOffsetClamp] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PolygonOffsetClamp] = Fiddle::TYPE_VOID
    GL.bind_command(:PolygonOffsetClamp)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetClamp(_factor_, _units_, _clamp_)
        GL_FUNCTIONS_MAP[:PolygonOffsetClamp].call(_factor_, _units_, _clamp_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_polygon_offset_clamp

  def self.get_ext_command_GL_ARB_polygon_offset_clamp
    [
      'PolygonOffsetClamp',
    ]
  end # self.get_ext_command_GL_ARB_polygon_offset_clamp


  def self.define_ext_command_GL_ARB_post_depth_coverage
  end # self.define_ext_command_GL_ARB_post_depth_coverage

  def self.get_ext_command_GL_ARB_post_depth_coverage
    [
    ]
  end # self.get_ext_command_GL_ARB_post_depth_coverage


  def self.define_ext_command_GL_ARB_program_interface_query
    GL::GL_FUNCTION_SYMBOLS << :GetProgramInterfaceiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramInterfaceiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramInterfaceiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramInterfaceiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramInterfaceiv(_program_, _programInterface_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramInterfaceiv].call(_program_, _programInterface_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramResourceIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramResourceIndex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramResourceIndex] = -Fiddle::TYPE_INT
    GL.bind_command(:GetProgramResourceIndex)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceIndex(_program_, _programInterface_, _name_)
        GL_FUNCTIONS_MAP[:GetProgramResourceIndex].call(_program_, _programInterface_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramResourceName
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramResourceName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramResourceName] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramResourceName)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceName(_program_, _programInterface_, _index_, _bufSize_, _length_, _name_)
        GL_FUNCTIONS_MAP[:GetProgramResourceName].call(_program_, _programInterface_, _index_, _bufSize_, _length_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramResourceiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramResourceiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramResourceiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramResourceiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceiv(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramResourceiv].call(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramResourceLocation
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramResourceLocation] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramResourceLocation] = Fiddle::TYPE_INT
    GL.bind_command(:GetProgramResourceLocation)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceLocation(_program_, _programInterface_, _name_)
        GL_FUNCTIONS_MAP[:GetProgramResourceLocation].call(_program_, _programInterface_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramResourceLocationIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramResourceLocationIndex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramResourceLocationIndex] = Fiddle::TYPE_INT
    GL.bind_command(:GetProgramResourceLocationIndex)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceLocationIndex(_program_, _programInterface_, _name_)
        GL_FUNCTIONS_MAP[:GetProgramResourceLocationIndex].call(_program_, _programInterface_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_program_interface_query

  def self.get_ext_command_GL_ARB_program_interface_query
    [
      'GetProgramInterfaceiv',
      'GetProgramResourceIndex',
      'GetProgramResourceName',
      'GetProgramResourceiv',
      'GetProgramResourceLocation',
      'GetProgramResourceLocationIndex',
    ]
  end # self.get_ext_command_GL_ARB_program_interface_query


  def self.define_ext_command_GL_ARB_provoking_vertex
    GL::GL_FUNCTION_SYMBOLS << :ProvokingVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:ProvokingVertex] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProvokingVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:ProvokingVertex)
    GL.module_eval(<<-SRC)
      def self.ProvokingVertex(_mode_)
        GL_FUNCTIONS_MAP[:ProvokingVertex].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_provoking_vertex

  def self.get_ext_command_GL_ARB_provoking_vertex
    [
      'ProvokingVertex',
    ]
  end # self.get_ext_command_GL_ARB_provoking_vertex


  def self.define_ext_command_GL_ARB_query_buffer_object
  end # self.define_ext_command_GL_ARB_query_buffer_object

  def self.get_ext_command_GL_ARB_query_buffer_object
    [
    ]
  end # self.get_ext_command_GL_ARB_query_buffer_object


  def self.define_ext_command_GL_ARB_robust_buffer_access_behavior
  end # self.define_ext_command_GL_ARB_robust_buffer_access_behavior

  def self.get_ext_command_GL_ARB_robust_buffer_access_behavior
    [
    ]
  end # self.get_ext_command_GL_ARB_robust_buffer_access_behavior


  def self.define_ext_command_GL_ARB_robustness
    GL::GL_FUNCTION_SYMBOLS << :GetGraphicsResetStatusARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetGraphicsResetStatusARB] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetGraphicsResetStatusARB] = -Fiddle::TYPE_INT
    GL.bind_command(:GetGraphicsResetStatusARB)
    GL.module_eval(<<-SRC)
      def self.GetGraphicsResetStatusARB()
        GL_FUNCTIONS_MAP[:GetGraphicsResetStatusARB].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnTexImageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnTexImageARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnTexImageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnTexImageARB)
    GL.module_eval(<<-SRC)
      def self.GetnTexImageARB(_target_, _level_, _format_, _type_, _bufSize_, _img_)
        GL_FUNCTIONS_MAP[:GetnTexImageARB].call(_target_, _level_, _format_, _type_, _bufSize_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReadnPixelsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ReadnPixelsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReadnPixelsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ReadnPixelsARB)
    GL.module_eval(<<-SRC)
      def self.ReadnPixelsARB(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
        GL_FUNCTIONS_MAP[:ReadnPixelsARB].call(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnCompressedTexImageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnCompressedTexImageARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnCompressedTexImageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnCompressedTexImageARB)
    GL.module_eval(<<-SRC)
      def self.GetnCompressedTexImageARB(_target_, _lod_, _bufSize_, _img_)
        GL_FUNCTIONS_MAP[:GetnCompressedTexImageARB].call(_target_, _lod_, _bufSize_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformfvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformfvARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformfvARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformfvARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformivARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformivARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformivARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformuivARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformuivARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformuivARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformdvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformdvARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformdvARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformdvARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnMapdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnMapdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnMapdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnMapdvARB)
    GL.module_eval(<<-SRC)
      def self.GetnMapdvARB(_target_, _query_, _bufSize_, _v_)
        GL_FUNCTIONS_MAP[:GetnMapdvARB].call(_target_, _query_, _bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnMapfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnMapfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnMapfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnMapfvARB)
    GL.module_eval(<<-SRC)
      def self.GetnMapfvARB(_target_, _query_, _bufSize_, _v_)
        GL_FUNCTIONS_MAP[:GetnMapfvARB].call(_target_, _query_, _bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnMapivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnMapivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnMapivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnMapivARB)
    GL.module_eval(<<-SRC)
      def self.GetnMapivARB(_target_, _query_, _bufSize_, _v_)
        GL_FUNCTIONS_MAP[:GetnMapivARB].call(_target_, _query_, _bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnPixelMapfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnPixelMapfvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnPixelMapfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnPixelMapfvARB)
    GL.module_eval(<<-SRC)
      def self.GetnPixelMapfvARB(_map_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:GetnPixelMapfvARB].call(_map_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnPixelMapuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnPixelMapuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnPixelMapuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnPixelMapuivARB)
    GL.module_eval(<<-SRC)
      def self.GetnPixelMapuivARB(_map_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:GetnPixelMapuivARB].call(_map_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnPixelMapusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnPixelMapusvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnPixelMapusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnPixelMapusvARB)
    GL.module_eval(<<-SRC)
      def self.GetnPixelMapusvARB(_map_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:GetnPixelMapusvARB].call(_map_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnPolygonStippleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnPolygonStippleARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnPolygonStippleARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnPolygonStippleARB)
    GL.module_eval(<<-SRC)
      def self.GetnPolygonStippleARB(_bufSize_, _pattern_)
        GL_FUNCTIONS_MAP[:GetnPolygonStippleARB].call(_bufSize_, _pattern_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnColorTableARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnColorTableARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnColorTableARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnColorTableARB)
    GL.module_eval(<<-SRC)
      def self.GetnColorTableARB(_target_, _format_, _type_, _bufSize_, _table_)
        GL_FUNCTIONS_MAP[:GetnColorTableARB].call(_target_, _format_, _type_, _bufSize_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnConvolutionFilterARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnConvolutionFilterARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnConvolutionFilterARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnConvolutionFilterARB)
    GL.module_eval(<<-SRC)
      def self.GetnConvolutionFilterARB(_target_, _format_, _type_, _bufSize_, _image_)
        GL_FUNCTIONS_MAP[:GetnConvolutionFilterARB].call(_target_, _format_, _type_, _bufSize_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnSeparableFilterARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnSeparableFilterARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnSeparableFilterARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnSeparableFilterARB)
    GL.module_eval(<<-SRC)
      def self.GetnSeparableFilterARB(_target_, _format_, _type_, _rowBufSize_, _row_, _columnBufSize_, _column_, _span_)
        GL_FUNCTIONS_MAP[:GetnSeparableFilterARB].call(_target_, _format_, _type_, _rowBufSize_, _row_, _columnBufSize_, _column_, _span_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnHistogramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnHistogramARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnHistogramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnHistogramARB)
    GL.module_eval(<<-SRC)
      def self.GetnHistogramARB(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:GetnHistogramARB].call(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnMinmaxARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnMinmaxARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnMinmaxARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnMinmaxARB)
    GL.module_eval(<<-SRC)
      def self.GetnMinmaxARB(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:GetnMinmaxARB].call(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_robustness

  def self.get_ext_command_GL_ARB_robustness
    [
      'GetGraphicsResetStatusARB',
      'GetnTexImageARB',
      'ReadnPixelsARB',
      'GetnCompressedTexImageARB',
      'GetnUniformfvARB',
      'GetnUniformivARB',
      'GetnUniformuivARB',
      'GetnUniformdvARB',
      'GetnMapdvARB',
      'GetnMapfvARB',
      'GetnMapivARB',
      'GetnPixelMapfvARB',
      'GetnPixelMapuivARB',
      'GetnPixelMapusvARB',
      'GetnPolygonStippleARB',
      'GetnColorTableARB',
      'GetnConvolutionFilterARB',
      'GetnSeparableFilterARB',
      'GetnHistogramARB',
      'GetnMinmaxARB',
    ]
  end # self.get_ext_command_GL_ARB_robustness


  def self.define_ext_command_GL_ARB_robustness_isolation
  end # self.define_ext_command_GL_ARB_robustness_isolation

  def self.get_ext_command_GL_ARB_robustness_isolation
    [
    ]
  end # self.get_ext_command_GL_ARB_robustness_isolation


  def self.define_ext_command_GL_ARB_sample_locations
    GL::GL_FUNCTION_SYMBOLS << :FramebufferSampleLocationsfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferSampleLocationsfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferSampleLocationsfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferSampleLocationsfvARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferSampleLocationsfvARB(_target_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:FramebufferSampleLocationsfvARB].call(_target_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferSampleLocationsfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferSampleLocationsfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferSampleLocationsfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferSampleLocationsfvARB)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferSampleLocationsfvARB(_framebuffer_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:NamedFramebufferSampleLocationsfvARB].call(_framebuffer_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EvaluateDepthValuesARB
    GL::GL_FUNCTIONS_ARGS_MAP[:EvaluateDepthValuesARB] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EvaluateDepthValuesARB] = Fiddle::TYPE_VOID
    GL.bind_command(:EvaluateDepthValuesARB)
    GL.module_eval(<<-SRC)
      def self.EvaluateDepthValuesARB()
        GL_FUNCTIONS_MAP[:EvaluateDepthValuesARB].call()
      end
    SRC
  end # self.define_ext_command_GL_ARB_sample_locations

  def self.get_ext_command_GL_ARB_sample_locations
    [
      'FramebufferSampleLocationsfvARB',
      'NamedFramebufferSampleLocationsfvARB',
      'EvaluateDepthValuesARB',
    ]
  end # self.get_ext_command_GL_ARB_sample_locations


  def self.define_ext_command_GL_ARB_sample_shading
    GL::GL_FUNCTION_SYMBOLS << :MinSampleShadingARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MinSampleShadingARB] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MinSampleShadingARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MinSampleShadingARB)
    GL.module_eval(<<-SRC)
      def self.MinSampleShadingARB(_value_)
        GL_FUNCTIONS_MAP[:MinSampleShadingARB].call(_value_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sample_shading

  def self.get_ext_command_GL_ARB_sample_shading
    [
      'MinSampleShadingARB',
    ]
  end # self.get_ext_command_GL_ARB_sample_shading


  def self.define_ext_command_GL_ARB_sampler_objects
    GL::GL_FUNCTION_SYMBOLS << :GenSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:GenSamplers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:GenSamplers)
    GL.module_eval(<<-SRC)
      def self.GenSamplers(_count_, _samplers_)
        GL_FUNCTIONS_MAP[:GenSamplers].call(_count_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteSamplers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteSamplers)
    GL.module_eval(<<-SRC)
      def self.DeleteSamplers(_count_, _samplers_)
        GL_FUNCTIONS_MAP[:DeleteSamplers].call(_count_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsSampler
    GL::GL_FUNCTIONS_ARGS_MAP[:IsSampler] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsSampler] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsSampler)
    GL.module_eval(<<-SRC)
      def self.IsSampler(_sampler_)
        GL_FUNCTIONS_MAP[:IsSampler].call(_sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindSampler
    GL::GL_FUNCTIONS_ARGS_MAP[:BindSampler] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindSampler] = Fiddle::TYPE_VOID
    GL.bind_command(:BindSampler)
    GL.module_eval(<<-SRC)
      def self.BindSampler(_unit_, _sampler_)
        GL_FUNCTIONS_MAP[:BindSampler].call(_unit_, _sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplerParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplerParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplerParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplerParameteri)
    GL.module_eval(<<-SRC)
      def self.SamplerParameteri(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:SamplerParameteri].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplerParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplerParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplerParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplerParameteriv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameteriv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:SamplerParameteriv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplerParameterf
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplerParameterf] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplerParameterf] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplerParameterf)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterf(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:SamplerParameterf].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplerParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplerParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplerParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplerParameterfv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterfv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:SamplerParameterfv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplerParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplerParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplerParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplerParameterIiv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterIiv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:SamplerParameterIiv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplerParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplerParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplerParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplerParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterIuiv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:SamplerParameterIuiv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSamplerParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSamplerParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSamplerParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSamplerParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameteriv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetSamplerParameteriv].call(_sampler_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSamplerParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSamplerParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSamplerParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSamplerParameterIiv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameterIiv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetSamplerParameterIiv].call(_sampler_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSamplerParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSamplerParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSamplerParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSamplerParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameterfv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetSamplerParameterfv].call(_sampler_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSamplerParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSamplerParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSamplerParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSamplerParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameterIuiv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetSamplerParameterIuiv].call(_sampler_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sampler_objects

  def self.get_ext_command_GL_ARB_sampler_objects
    [
      'GenSamplers',
      'DeleteSamplers',
      'IsSampler',
      'BindSampler',
      'SamplerParameteri',
      'SamplerParameteriv',
      'SamplerParameterf',
      'SamplerParameterfv',
      'SamplerParameterIiv',
      'SamplerParameterIuiv',
      'GetSamplerParameteriv',
      'GetSamplerParameterIiv',
      'GetSamplerParameterfv',
      'GetSamplerParameterIuiv',
    ]
  end # self.get_ext_command_GL_ARB_sampler_objects


  def self.define_ext_command_GL_ARB_seamless_cube_map
  end # self.define_ext_command_GL_ARB_seamless_cube_map

  def self.get_ext_command_GL_ARB_seamless_cube_map
    [
    ]
  end # self.get_ext_command_GL_ARB_seamless_cube_map


  def self.define_ext_command_GL_ARB_seamless_cubemap_per_texture
  end # self.define_ext_command_GL_ARB_seamless_cubemap_per_texture

  def self.get_ext_command_GL_ARB_seamless_cubemap_per_texture
    [
    ]
  end # self.get_ext_command_GL_ARB_seamless_cubemap_per_texture


  def self.define_ext_command_GL_ARB_separate_shader_objects
    GL::GL_FUNCTION_SYMBOLS << :UseProgramStages
    GL::GL_FUNCTIONS_ARGS_MAP[:UseProgramStages] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UseProgramStages] = Fiddle::TYPE_VOID
    GL.bind_command(:UseProgramStages)
    GL.module_eval(<<-SRC)
      def self.UseProgramStages(_pipeline_, _stages_, _program_)
        GL_FUNCTIONS_MAP[:UseProgramStages].call(_pipeline_, _stages_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ActiveShaderProgram
    GL::GL_FUNCTIONS_ARGS_MAP[:ActiveShaderProgram] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ActiveShaderProgram] = Fiddle::TYPE_VOID
    GL.bind_command(:ActiveShaderProgram)
    GL.module_eval(<<-SRC)
      def self.ActiveShaderProgram(_pipeline_, _program_)
        GL_FUNCTIONS_MAP[:ActiveShaderProgram].call(_pipeline_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateShaderProgramv
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateShaderProgramv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateShaderProgramv] = -Fiddle::TYPE_INT
    GL.bind_command(:CreateShaderProgramv)
    GL.module_eval(<<-SRC)
      def self.CreateShaderProgramv(_type_, _count_, _strings_)
        GL_FUNCTIONS_MAP[:CreateShaderProgramv].call(_type_, _count_, _strings_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindProgramPipeline
    GL::GL_FUNCTIONS_ARGS_MAP[:BindProgramPipeline] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindProgramPipeline] = Fiddle::TYPE_VOID
    GL.bind_command(:BindProgramPipeline)
    GL.module_eval(<<-SRC)
      def self.BindProgramPipeline(_pipeline_)
        GL_FUNCTIONS_MAP[:BindProgramPipeline].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteProgramPipelines
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteProgramPipelines] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteProgramPipelines] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteProgramPipelines)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramPipelines(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:DeleteProgramPipelines].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenProgramPipelines
    GL::GL_FUNCTIONS_ARGS_MAP[:GenProgramPipelines] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenProgramPipelines] = Fiddle::TYPE_VOID
    GL.bind_command(:GenProgramPipelines)
    GL.module_eval(<<-SRC)
      def self.GenProgramPipelines(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:GenProgramPipelines].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsProgramPipeline
    GL::GL_FUNCTIONS_ARGS_MAP[:IsProgramPipeline] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsProgramPipeline] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsProgramPipeline)
    GL.module_eval(<<-SRC)
      def self.IsProgramPipeline(_pipeline_)
        GL_FUNCTIONS_MAP[:IsProgramPipeline].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramPipelineiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramPipelineiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramPipelineiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramPipelineiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineiv(_pipeline_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramPipelineiv].call(_pipeline_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameteri)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteri(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:ProgramParameteri].call(_program_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1iv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1iv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1f
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1f] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1f(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1f].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1d
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1d] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1d(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1d].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2iv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2iv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2f
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2f] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2f(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2f].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2d
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2d] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2d(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2d].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3iv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3iv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3f
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3f] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3f(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3f].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3d
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3d] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3d(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3d].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4iv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4iv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4f
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4f] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4f(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4f].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4d
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4d] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4d(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4d].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x3fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x2fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x4fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x2fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x4fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x3fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x3dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x2dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x4dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x2dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x4dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x3dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ValidateProgramPipeline
    GL::GL_FUNCTIONS_ARGS_MAP[:ValidateProgramPipeline] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ValidateProgramPipeline] = Fiddle::TYPE_VOID
    GL.bind_command(:ValidateProgramPipeline)
    GL.module_eval(<<-SRC)
      def self.ValidateProgramPipeline(_pipeline_)
        GL_FUNCTIONS_MAP[:ValidateProgramPipeline].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramPipelineInfoLog
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramPipelineInfoLog] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramPipelineInfoLog] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramPipelineInfoLog)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineInfoLog(_pipeline_, _bufSize_, _length_, _infoLog_)
        GL_FUNCTIONS_MAP[:GetProgramPipelineInfoLog].call(_pipeline_, _bufSize_, _length_, _infoLog_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_separate_shader_objects

  def self.get_ext_command_GL_ARB_separate_shader_objects
    [
      'UseProgramStages',
      'ActiveShaderProgram',
      'CreateShaderProgramv',
      'BindProgramPipeline',
      'DeleteProgramPipelines',
      'GenProgramPipelines',
      'IsProgramPipeline',
      'GetProgramPipelineiv',
      'ProgramParameteri',
      'ProgramUniform1i',
      'ProgramUniform1iv',
      'ProgramUniform1f',
      'ProgramUniform1fv',
      'ProgramUniform1d',
      'ProgramUniform1dv',
      'ProgramUniform1ui',
      'ProgramUniform1uiv',
      'ProgramUniform2i',
      'ProgramUniform2iv',
      'ProgramUniform2f',
      'ProgramUniform2fv',
      'ProgramUniform2d',
      'ProgramUniform2dv',
      'ProgramUniform2ui',
      'ProgramUniform2uiv',
      'ProgramUniform3i',
      'ProgramUniform3iv',
      'ProgramUniform3f',
      'ProgramUniform3fv',
      'ProgramUniform3d',
      'ProgramUniform3dv',
      'ProgramUniform3ui',
      'ProgramUniform3uiv',
      'ProgramUniform4i',
      'ProgramUniform4iv',
      'ProgramUniform4f',
      'ProgramUniform4fv',
      'ProgramUniform4d',
      'ProgramUniform4dv',
      'ProgramUniform4ui',
      'ProgramUniform4uiv',
      'ProgramUniformMatrix2fv',
      'ProgramUniformMatrix3fv',
      'ProgramUniformMatrix4fv',
      'ProgramUniformMatrix2dv',
      'ProgramUniformMatrix3dv',
      'ProgramUniformMatrix4dv',
      'ProgramUniformMatrix2x3fv',
      'ProgramUniformMatrix3x2fv',
      'ProgramUniformMatrix2x4fv',
      'ProgramUniformMatrix4x2fv',
      'ProgramUniformMatrix3x4fv',
      'ProgramUniformMatrix4x3fv',
      'ProgramUniformMatrix2x3dv',
      'ProgramUniformMatrix3x2dv',
      'ProgramUniformMatrix2x4dv',
      'ProgramUniformMatrix4x2dv',
      'ProgramUniformMatrix3x4dv',
      'ProgramUniformMatrix4x3dv',
      'ValidateProgramPipeline',
      'GetProgramPipelineInfoLog',
    ]
  end # self.get_ext_command_GL_ARB_separate_shader_objects


  def self.define_ext_command_GL_ARB_shader_atomic_counter_ops
  end # self.define_ext_command_GL_ARB_shader_atomic_counter_ops

  def self.get_ext_command_GL_ARB_shader_atomic_counter_ops
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_atomic_counter_ops


  def self.define_ext_command_GL_ARB_shader_atomic_counters
    GL::GL_FUNCTION_SYMBOLS << :GetActiveAtomicCounterBufferiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveAtomicCounterBufferiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveAtomicCounterBufferiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveAtomicCounterBufferiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveAtomicCounterBufferiv(_program_, _bufferIndex_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetActiveAtomicCounterBufferiv].call(_program_, _bufferIndex_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_atomic_counters

  def self.get_ext_command_GL_ARB_shader_atomic_counters
    [
      'GetActiveAtomicCounterBufferiv',
    ]
  end # self.get_ext_command_GL_ARB_shader_atomic_counters


  def self.define_ext_command_GL_ARB_shader_ballot
  end # self.define_ext_command_GL_ARB_shader_ballot

  def self.get_ext_command_GL_ARB_shader_ballot
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_ballot


  def self.define_ext_command_GL_ARB_shader_bit_encoding
  end # self.define_ext_command_GL_ARB_shader_bit_encoding

  def self.get_ext_command_GL_ARB_shader_bit_encoding
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_bit_encoding


  def self.define_ext_command_GL_ARB_shader_clock
  end # self.define_ext_command_GL_ARB_shader_clock

  def self.get_ext_command_GL_ARB_shader_clock
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_clock


  def self.define_ext_command_GL_ARB_shader_draw_parameters
  end # self.define_ext_command_GL_ARB_shader_draw_parameters

  def self.get_ext_command_GL_ARB_shader_draw_parameters
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_draw_parameters


  def self.define_ext_command_GL_ARB_shader_group_vote
  end # self.define_ext_command_GL_ARB_shader_group_vote

  def self.get_ext_command_GL_ARB_shader_group_vote
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_group_vote


  def self.define_ext_command_GL_ARB_shader_image_load_store
    GL::GL_FUNCTION_SYMBOLS << :BindImageTexture
    GL::GL_FUNCTIONS_ARGS_MAP[:BindImageTexture] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindImageTexture] = Fiddle::TYPE_VOID
    GL.bind_command(:BindImageTexture)
    GL.module_eval(<<-SRC)
      def self.BindImageTexture(_unit_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
        GL_FUNCTIONS_MAP[:BindImageTexture].call(_unit_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MemoryBarrier
    GL::GL_FUNCTIONS_ARGS_MAP[:MemoryBarrier] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MemoryBarrier] = Fiddle::TYPE_VOID
    GL.bind_command(:MemoryBarrier)
    GL.module_eval(<<-SRC)
      def self.MemoryBarrier(_barriers_)
        GL_FUNCTIONS_MAP[:MemoryBarrier].call(_barriers_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_image_load_store

  def self.get_ext_command_GL_ARB_shader_image_load_store
    [
      'BindImageTexture',
      'MemoryBarrier',
    ]
  end # self.get_ext_command_GL_ARB_shader_image_load_store


  def self.define_ext_command_GL_ARB_shader_image_size
  end # self.define_ext_command_GL_ARB_shader_image_size

  def self.get_ext_command_GL_ARB_shader_image_size
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_image_size


  def self.define_ext_command_GL_ARB_shader_objects
    GL::GL_FUNCTION_SYMBOLS << :DeleteObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteObjectARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteObjectARB)
    GL.module_eval(<<-SRC)
      def self.DeleteObjectARB(_obj_)
        GL_FUNCTIONS_MAP[:DeleteObjectARB].call(_obj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHandleARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHandleARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:GetHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetHandleARB(_pname_)
        GL_FUNCTIONS_MAP[:GetHandleARB].call(_pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DetachObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DetachObjectARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DetachObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DetachObjectARB)
    GL.module_eval(<<-SRC)
      def self.DetachObjectARB(_containerObj_, _attachedObj_)
        GL_FUNCTIONS_MAP[:DetachObjectARB].call(_containerObj_, _attachedObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateShaderObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateShaderObjectARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateShaderObjectARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:CreateShaderObjectARB)
    GL.module_eval(<<-SRC)
      def self.CreateShaderObjectARB(_shaderType_)
        GL_FUNCTIONS_MAP[:CreateShaderObjectARB].call(_shaderType_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShaderSourceARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ShaderSourceARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShaderSourceARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ShaderSourceARB)
    GL.module_eval(<<-SRC)
      def self.ShaderSourceARB(_shaderObj_, _count_, _string_, _length_)
        GL_FUNCTIONS_MAP[:ShaderSourceARB].call(_shaderObj_, _count_, _string_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompileShaderARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompileShaderARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompileShaderARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompileShaderARB)
    GL.module_eval(<<-SRC)
      def self.CompileShaderARB(_shaderObj_)
        GL_FUNCTIONS_MAP[:CompileShaderARB].call(_shaderObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateProgramObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateProgramObjectARB] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateProgramObjectARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:CreateProgramObjectARB)
    GL.module_eval(<<-SRC)
      def self.CreateProgramObjectARB()
        GL_FUNCTIONS_MAP[:CreateProgramObjectARB].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AttachObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:AttachObjectARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AttachObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:AttachObjectARB)
    GL.module_eval(<<-SRC)
      def self.AttachObjectARB(_containerObj_, _obj_)
        GL_FUNCTIONS_MAP[:AttachObjectARB].call(_containerObj_, _obj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LinkProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:LinkProgramARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LinkProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:LinkProgramARB)
    GL.module_eval(<<-SRC)
      def self.LinkProgramARB(_programObj_)
        GL_FUNCTIONS_MAP[:LinkProgramARB].call(_programObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UseProgramObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UseProgramObjectARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UseProgramObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:UseProgramObjectARB)
    GL.module_eval(<<-SRC)
      def self.UseProgramObjectARB(_programObj_)
        GL_FUNCTIONS_MAP[:UseProgramObjectARB].call(_programObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ValidateProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ValidateProgramARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ValidateProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ValidateProgramARB)
    GL.module_eval(<<-SRC)
      def self.ValidateProgramARB(_programObj_)
        GL_FUNCTIONS_MAP[:ValidateProgramARB].call(_programObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1fARB(_location_, _v0_)
        GL_FUNCTIONS_MAP[:Uniform1fARB].call(_location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2fARB(_location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:Uniform2fARB].call(_location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3fARB(_location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:Uniform3fARB].call(_location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4fARB(_location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:Uniform4fARB].call(_location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1iARB(_location_, _v0_)
        GL_FUNCTIONS_MAP[:Uniform1iARB].call(_location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2iARB(_location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:Uniform2iARB].call(_location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3iARB(_location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:Uniform3iARB].call(_location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4iARB(_location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:Uniform4iARB].call(_location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix2fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix2fvARB)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2fvARB(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix2fvARB].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix3fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix3fvARB)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3fvARB(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix3fvARB].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformMatrix4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformMatrix4fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformMatrix4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformMatrix4fvARB)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4fvARB(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:UniformMatrix4fvARB].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectParameterfvARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetObjectParameterfvARB(_obj_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetObjectParameterfvARB].call(_obj_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectParameterivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectParameterivARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectParameterivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectParameterivARB)
    GL.module_eval(<<-SRC)
      def self.GetObjectParameterivARB(_obj_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetObjectParameterivARB].call(_obj_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetInfoLogARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInfoLogARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInfoLogARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInfoLogARB)
    GL.module_eval(<<-SRC)
      def self.GetInfoLogARB(_obj_, _maxLength_, _length_, _infoLog_)
        GL_FUNCTIONS_MAP[:GetInfoLogARB].call(_obj_, _maxLength_, _length_, _infoLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetAttachedObjectsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetAttachedObjectsARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetAttachedObjectsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetAttachedObjectsARB)
    GL.module_eval(<<-SRC)
      def self.GetAttachedObjectsARB(_containerObj_, _maxCount_, _count_, _obj_)
        GL_FUNCTIONS_MAP[:GetAttachedObjectsARB].call(_containerObj_, _maxCount_, _count_, _obj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformLocationARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformLocationARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformLocationARB] = Fiddle::TYPE_INT
    GL.bind_command(:GetUniformLocationARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformLocationARB(_programObj_, _name_)
        GL_FUNCTIONS_MAP[:GetUniformLocationARB].call(_programObj_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveUniformARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveUniformARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveUniformARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveUniformARB)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformARB(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:GetActiveUniformARB].call(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformfvARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformfvARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformfvARB(_programObj_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformfvARB].call(_programObj_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformivARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformivARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformivARB(_programObj_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformivARB].call(_programObj_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetShaderSourceARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetShaderSourceARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetShaderSourceARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetShaderSourceARB)
    GL.module_eval(<<-SRC)
      def self.GetShaderSourceARB(_obj_, _maxLength_, _length_, _source_)
        GL_FUNCTIONS_MAP[:GetShaderSourceARB].call(_obj_, _maxLength_, _length_, _source_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_objects

  def self.get_ext_command_GL_ARB_shader_objects
    [
      'DeleteObjectARB',
      'GetHandleARB',
      'DetachObjectARB',
      'CreateShaderObjectARB',
      'ShaderSourceARB',
      'CompileShaderARB',
      'CreateProgramObjectARB',
      'AttachObjectARB',
      'LinkProgramARB',
      'UseProgramObjectARB',
      'ValidateProgramARB',
      'Uniform1fARB',
      'Uniform2fARB',
      'Uniform3fARB',
      'Uniform4fARB',
      'Uniform1iARB',
      'Uniform2iARB',
      'Uniform3iARB',
      'Uniform4iARB',
      'Uniform1fvARB',
      'Uniform2fvARB',
      'Uniform3fvARB',
      'Uniform4fvARB',
      'Uniform1ivARB',
      'Uniform2ivARB',
      'Uniform3ivARB',
      'Uniform4ivARB',
      'UniformMatrix2fvARB',
      'UniformMatrix3fvARB',
      'UniformMatrix4fvARB',
      'GetObjectParameterfvARB',
      'GetObjectParameterivARB',
      'GetInfoLogARB',
      'GetAttachedObjectsARB',
      'GetUniformLocationARB',
      'GetActiveUniformARB',
      'GetUniformfvARB',
      'GetUniformivARB',
      'GetShaderSourceARB',
    ]
  end # self.get_ext_command_GL_ARB_shader_objects


  def self.define_ext_command_GL_ARB_shader_precision
  end # self.define_ext_command_GL_ARB_shader_precision

  def self.get_ext_command_GL_ARB_shader_precision
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_precision


  def self.define_ext_command_GL_ARB_shader_stencil_export
  end # self.define_ext_command_GL_ARB_shader_stencil_export

  def self.get_ext_command_GL_ARB_shader_stencil_export
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_stencil_export


  def self.define_ext_command_GL_ARB_shader_storage_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :ShaderStorageBlockBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:ShaderStorageBlockBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShaderStorageBlockBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:ShaderStorageBlockBinding)
    GL.module_eval(<<-SRC)
      def self.ShaderStorageBlockBinding(_program_, _storageBlockIndex_, _storageBlockBinding_)
        GL_FUNCTIONS_MAP[:ShaderStorageBlockBinding].call(_program_, _storageBlockIndex_, _storageBlockBinding_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_storage_buffer_object

  def self.get_ext_command_GL_ARB_shader_storage_buffer_object
    [
      'ShaderStorageBlockBinding',
    ]
  end # self.get_ext_command_GL_ARB_shader_storage_buffer_object


  def self.define_ext_command_GL_ARB_shader_subroutine
    GL::GL_FUNCTION_SYMBOLS << :GetSubroutineUniformLocation
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSubroutineUniformLocation] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSubroutineUniformLocation] = Fiddle::TYPE_INT
    GL.bind_command(:GetSubroutineUniformLocation)
    GL.module_eval(<<-SRC)
      def self.GetSubroutineUniformLocation(_program_, _shadertype_, _name_)
        GL_FUNCTIONS_MAP[:GetSubroutineUniformLocation].call(_program_, _shadertype_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSubroutineIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSubroutineIndex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSubroutineIndex] = -Fiddle::TYPE_INT
    GL.bind_command(:GetSubroutineIndex)
    GL.module_eval(<<-SRC)
      def self.GetSubroutineIndex(_program_, _shadertype_, _name_)
        GL_FUNCTIONS_MAP[:GetSubroutineIndex].call(_program_, _shadertype_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveSubroutineUniformiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveSubroutineUniformiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveSubroutineUniformiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveSubroutineUniformiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveSubroutineUniformiv(_program_, _shadertype_, _index_, _pname_, _values_)
        GL_FUNCTIONS_MAP[:GetActiveSubroutineUniformiv].call(_program_, _shadertype_, _index_, _pname_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveSubroutineUniformName
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveSubroutineUniformName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveSubroutineUniformName] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveSubroutineUniformName)
    GL.module_eval(<<-SRC)
      def self.GetActiveSubroutineUniformName(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
        GL_FUNCTIONS_MAP[:GetActiveSubroutineUniformName].call(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveSubroutineName
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveSubroutineName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveSubroutineName] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveSubroutineName)
    GL.module_eval(<<-SRC)
      def self.GetActiveSubroutineName(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
        GL_FUNCTIONS_MAP[:GetActiveSubroutineName].call(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformSubroutinesuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformSubroutinesuiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformSubroutinesuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformSubroutinesuiv)
    GL.module_eval(<<-SRC)
      def self.UniformSubroutinesuiv(_shadertype_, _count_, _indices_)
        GL_FUNCTIONS_MAP[:UniformSubroutinesuiv].call(_shadertype_, _count_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformSubroutineuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformSubroutineuiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformSubroutineuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformSubroutineuiv)
    GL.module_eval(<<-SRC)
      def self.GetUniformSubroutineuiv(_shadertype_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformSubroutineuiv].call(_shadertype_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramStageiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramStageiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramStageiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramStageiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramStageiv(_program_, _shadertype_, _pname_, _values_)
        GL_FUNCTIONS_MAP[:GetProgramStageiv].call(_program_, _shadertype_, _pname_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_subroutine

  def self.get_ext_command_GL_ARB_shader_subroutine
    [
      'GetSubroutineUniformLocation',
      'GetSubroutineIndex',
      'GetActiveSubroutineUniformiv',
      'GetActiveSubroutineUniformName',
      'GetActiveSubroutineName',
      'UniformSubroutinesuiv',
      'GetUniformSubroutineuiv',
      'GetProgramStageiv',
    ]
  end # self.get_ext_command_GL_ARB_shader_subroutine


  def self.define_ext_command_GL_ARB_shader_texture_image_samples
  end # self.define_ext_command_GL_ARB_shader_texture_image_samples

  def self.get_ext_command_GL_ARB_shader_texture_image_samples
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_texture_image_samples


  def self.define_ext_command_GL_ARB_shader_texture_lod
  end # self.define_ext_command_GL_ARB_shader_texture_lod

  def self.get_ext_command_GL_ARB_shader_texture_lod
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_texture_lod


  def self.define_ext_command_GL_ARB_shader_viewport_layer_array
  end # self.define_ext_command_GL_ARB_shader_viewport_layer_array

  def self.get_ext_command_GL_ARB_shader_viewport_layer_array
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_viewport_layer_array


  def self.define_ext_command_GL_ARB_shading_language_100
  end # self.define_ext_command_GL_ARB_shading_language_100

  def self.get_ext_command_GL_ARB_shading_language_100
    [
    ]
  end # self.get_ext_command_GL_ARB_shading_language_100


  def self.define_ext_command_GL_ARB_shading_language_420pack
  end # self.define_ext_command_GL_ARB_shading_language_420pack

  def self.get_ext_command_GL_ARB_shading_language_420pack
    [
    ]
  end # self.get_ext_command_GL_ARB_shading_language_420pack


  def self.define_ext_command_GL_ARB_shading_language_include
    GL::GL_FUNCTION_SYMBOLS << :NamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedStringARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedStringARB)
    GL.module_eval(<<-SRC)
      def self.NamedStringARB(_type_, _namelen_, _name_, _stringlen_, _string_)
        GL_FUNCTIONS_MAP[:NamedStringARB].call(_type_, _namelen_, _name_, _stringlen_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteNamedStringARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteNamedStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.DeleteNamedStringARB(_namelen_, _name_)
        GL_FUNCTIONS_MAP[:DeleteNamedStringARB].call(_namelen_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompileShaderIncludeARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompileShaderIncludeARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompileShaderIncludeARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompileShaderIncludeARB)
    GL.module_eval(<<-SRC)
      def self.CompileShaderIncludeARB(_shader_, _count_, _path_, _length_)
        GL_FUNCTIONS_MAP[:CompileShaderIncludeARB].call(_shader_, _count_, _path_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsNamedStringARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsNamedStringARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.IsNamedStringARB(_namelen_, _name_)
        GL_FUNCTIONS_MAP[:IsNamedStringARB].call(_namelen_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedStringARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.GetNamedStringARB(_namelen_, _name_, _bufSize_, _stringlen_, _string_)
        GL_FUNCTIONS_MAP[:GetNamedStringARB].call(_namelen_, _name_, _bufSize_, _stringlen_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedStringivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedStringivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedStringivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedStringivARB)
    GL.module_eval(<<-SRC)
      def self.GetNamedStringivARB(_namelen_, _name_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedStringivARB].call(_namelen_, _name_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shading_language_include

  def self.get_ext_command_GL_ARB_shading_language_include
    [
      'NamedStringARB',
      'DeleteNamedStringARB',
      'CompileShaderIncludeARB',
      'IsNamedStringARB',
      'GetNamedStringARB',
      'GetNamedStringivARB',
    ]
  end # self.get_ext_command_GL_ARB_shading_language_include


  def self.define_ext_command_GL_ARB_shading_language_packing
  end # self.define_ext_command_GL_ARB_shading_language_packing

  def self.get_ext_command_GL_ARB_shading_language_packing
    [
    ]
  end # self.get_ext_command_GL_ARB_shading_language_packing


  def self.define_ext_command_GL_ARB_shadow
  end # self.define_ext_command_GL_ARB_shadow

  def self.get_ext_command_GL_ARB_shadow
    [
    ]
  end # self.get_ext_command_GL_ARB_shadow


  def self.define_ext_command_GL_ARB_shadow_ambient
  end # self.define_ext_command_GL_ARB_shadow_ambient

  def self.get_ext_command_GL_ARB_shadow_ambient
    [
    ]
  end # self.get_ext_command_GL_ARB_shadow_ambient


  def self.define_ext_command_GL_ARB_sparse_buffer
    GL::GL_FUNCTION_SYMBOLS << :BufferPageCommitmentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferPageCommitmentARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferPageCommitmentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferPageCommitmentARB)
    GL.module_eval(<<-SRC)
      def self.BufferPageCommitmentARB(_target_, _offset_, _size_, _commit_)
        GL_FUNCTIONS_MAP[:BufferPageCommitmentARB].call(_target_, _offset_, _size_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferPageCommitmentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferPageCommitmentEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferPageCommitmentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferPageCommitmentEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferPageCommitmentEXT(_buffer_, _offset_, _size_, _commit_)
        GL_FUNCTIONS_MAP[:NamedBufferPageCommitmentEXT].call(_buffer_, _offset_, _size_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferPageCommitmentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferPageCommitmentARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferPageCommitmentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferPageCommitmentARB)
    GL.module_eval(<<-SRC)
      def self.NamedBufferPageCommitmentARB(_buffer_, _offset_, _size_, _commit_)
        GL_FUNCTIONS_MAP[:NamedBufferPageCommitmentARB].call(_buffer_, _offset_, _size_, _commit_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sparse_buffer

  def self.get_ext_command_GL_ARB_sparse_buffer
    [
      'BufferPageCommitmentARB',
      'NamedBufferPageCommitmentEXT',
      'NamedBufferPageCommitmentARB',
    ]
  end # self.get_ext_command_GL_ARB_sparse_buffer


  def self.define_ext_command_GL_ARB_sparse_texture
    GL::GL_FUNCTION_SYMBOLS << :TexPageCommitmentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:TexPageCommitmentARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexPageCommitmentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:TexPageCommitmentARB)
    GL.module_eval(<<-SRC)
      def self.TexPageCommitmentARB(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
        GL_FUNCTIONS_MAP[:TexPageCommitmentARB].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sparse_texture

  def self.get_ext_command_GL_ARB_sparse_texture
    [
      'TexPageCommitmentARB',
    ]
  end # self.get_ext_command_GL_ARB_sparse_texture


  def self.define_ext_command_GL_ARB_sparse_texture2
  end # self.define_ext_command_GL_ARB_sparse_texture2

  def self.get_ext_command_GL_ARB_sparse_texture2
    [
    ]
  end # self.get_ext_command_GL_ARB_sparse_texture2


  def self.define_ext_command_GL_ARB_sparse_texture_clamp
  end # self.define_ext_command_GL_ARB_sparse_texture_clamp

  def self.get_ext_command_GL_ARB_sparse_texture_clamp
    [
    ]
  end # self.get_ext_command_GL_ARB_sparse_texture_clamp


  def self.define_ext_command_GL_ARB_spirv_extensions
  end # self.define_ext_command_GL_ARB_spirv_extensions

  def self.get_ext_command_GL_ARB_spirv_extensions
    [
    ]
  end # self.get_ext_command_GL_ARB_spirv_extensions


  def self.define_ext_command_GL_ARB_stencil_texturing
  end # self.define_ext_command_GL_ARB_stencil_texturing

  def self.get_ext_command_GL_ARB_stencil_texturing
    [
    ]
  end # self.get_ext_command_GL_ARB_stencil_texturing


  def self.define_ext_command_GL_ARB_sync
    GL::GL_FUNCTION_SYMBOLS << :FenceSync
    GL::GL_FUNCTIONS_ARGS_MAP[:FenceSync] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FenceSync] = Fiddle::TYPE_VOIDP
    GL.bind_command(:FenceSync)
    GL.module_eval(<<-SRC)
      def self.FenceSync(_condition_, _flags_)
        GL_FUNCTIONS_MAP[:FenceSync].call(_condition_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsSync
    GL::GL_FUNCTIONS_ARGS_MAP[:IsSync] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsSync] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsSync)
    GL.module_eval(<<-SRC)
      def self.IsSync(_sync_)
        GL_FUNCTIONS_MAP[:IsSync].call(_sync_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteSync
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteSync] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteSync] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteSync)
    GL.module_eval(<<-SRC)
      def self.DeleteSync(_sync_)
        GL_FUNCTIONS_MAP[:DeleteSync].call(_sync_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClientWaitSync
    GL::GL_FUNCTIONS_ARGS_MAP[:ClientWaitSync] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClientWaitSync] = -Fiddle::TYPE_INT
    GL.bind_command(:ClientWaitSync)
    GL.module_eval(<<-SRC)
      def self.ClientWaitSync(_sync_, _flags_, _timeout_)
        GL_FUNCTIONS_MAP[:ClientWaitSync].call(_sync_, _flags_, _timeout_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WaitSync
    GL::GL_FUNCTIONS_ARGS_MAP[:WaitSync] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WaitSync] = Fiddle::TYPE_VOID
    GL.bind_command(:WaitSync)
    GL.module_eval(<<-SRC)
      def self.WaitSync(_sync_, _flags_, _timeout_)
        GL_FUNCTIONS_MAP[:WaitSync].call(_sync_, _flags_, _timeout_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetInteger64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInteger64v] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInteger64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInteger64v)
    GL.module_eval(<<-SRC)
      def self.GetInteger64v(_pname_, _data_)
        GL_FUNCTIONS_MAP[:GetInteger64v].call(_pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSynciv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSynciv] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSynciv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSynciv)
    GL.module_eval(<<-SRC)
      def self.GetSynciv(_sync_, _pname_, _count_, _length_, _values_)
        GL_FUNCTIONS_MAP[:GetSynciv].call(_sync_, _pname_, _count_, _length_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sync

  def self.get_ext_command_GL_ARB_sync
    [
      'FenceSync',
      'IsSync',
      'DeleteSync',
      'ClientWaitSync',
      'WaitSync',
      'GetInteger64v',
      'GetSynciv',
    ]
  end # self.get_ext_command_GL_ARB_sync


  def self.define_ext_command_GL_ARB_tessellation_shader
    GL::GL_FUNCTION_SYMBOLS << :PatchParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:PatchParameteri] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PatchParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:PatchParameteri)
    GL.module_eval(<<-SRC)
      def self.PatchParameteri(_pname_, _value_)
        GL_FUNCTIONS_MAP[:PatchParameteri].call(_pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PatchParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:PatchParameterfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PatchParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:PatchParameterfv)
    GL.module_eval(<<-SRC)
      def self.PatchParameterfv(_pname_, _values_)
        GL_FUNCTIONS_MAP[:PatchParameterfv].call(_pname_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_tessellation_shader

  def self.get_ext_command_GL_ARB_tessellation_shader
    [
      'PatchParameteri',
      'PatchParameterfv',
    ]
  end # self.get_ext_command_GL_ARB_tessellation_shader


  def self.define_ext_command_GL_ARB_texture_barrier
    GL::GL_FUNCTION_SYMBOLS << :TextureBarrier
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureBarrier] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureBarrier] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureBarrier)
    GL.module_eval(<<-SRC)
      def self.TextureBarrier()
        GL_FUNCTIONS_MAP[:TextureBarrier].call()
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_barrier

  def self.get_ext_command_GL_ARB_texture_barrier
    [
      'TextureBarrier',
    ]
  end # self.get_ext_command_GL_ARB_texture_barrier


  def self.define_ext_command_GL_ARB_texture_border_clamp
  end # self.define_ext_command_GL_ARB_texture_border_clamp

  def self.get_ext_command_GL_ARB_texture_border_clamp
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_border_clamp


  def self.define_ext_command_GL_ARB_texture_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :TexBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:TexBufferARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexBufferARB] = Fiddle::TYPE_VOID
    GL.bind_command(:TexBufferARB)
    GL.module_eval(<<-SRC)
      def self.TexBufferARB(_target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:TexBufferARB].call(_target_, _internalformat_, _buffer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_buffer_object

  def self.get_ext_command_GL_ARB_texture_buffer_object
    [
      'TexBufferARB',
    ]
  end # self.get_ext_command_GL_ARB_texture_buffer_object


  def self.define_ext_command_GL_ARB_texture_buffer_object_rgb32
  end # self.define_ext_command_GL_ARB_texture_buffer_object_rgb32

  def self.get_ext_command_GL_ARB_texture_buffer_object_rgb32
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_buffer_object_rgb32


  def self.define_ext_command_GL_ARB_texture_buffer_range
    GL::GL_FUNCTION_SYMBOLS << :TexBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:TexBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:TexBufferRange)
    GL.module_eval(<<-SRC)
      def self.TexBufferRange(_target_, _internalformat_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:TexBufferRange].call(_target_, _internalformat_, _buffer_, _offset_, _size_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_buffer_range

  def self.get_ext_command_GL_ARB_texture_buffer_range
    [
      'TexBufferRange',
    ]
  end # self.get_ext_command_GL_ARB_texture_buffer_range


  def self.define_ext_command_GL_ARB_texture_compression
    GL::GL_FUNCTION_SYMBOLS << :CompressedTexImage3DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTexImage3DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTexImage3DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTexImage3DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexImage3DARB(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTexImage3DARB].call(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTexImage2DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTexImage2DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTexImage2DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTexImage2DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexImage2DARB(_target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTexImage2DARB].call(_target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTexImage1DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTexImage1DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTexImage1DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTexImage1DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexImage1DARB(_target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTexImage1DARB].call(_target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTexSubImage3DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTexSubImage3DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTexSubImage3DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTexSubImage3DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexSubImage3DARB(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTexSubImage3DARB].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTexSubImage2DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTexSubImage2DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTexSubImage2DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTexSubImage2DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexSubImage2DARB(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTexSubImage2DARB].call(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTexSubImage1DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTexSubImage1DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTexSubImage1DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTexSubImage1DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexSubImage1DARB(_target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:CompressedTexSubImage1DARB].call(_target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCompressedTexImageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCompressedTexImageARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCompressedTexImageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCompressedTexImageARB)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTexImageARB(_target_, _level_, _img_)
        GL_FUNCTIONS_MAP[:GetCompressedTexImageARB].call(_target_, _level_, _img_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_compression

  def self.get_ext_command_GL_ARB_texture_compression
    [
      'CompressedTexImage3DARB',
      'CompressedTexImage2DARB',
      'CompressedTexImage1DARB',
      'CompressedTexSubImage3DARB',
      'CompressedTexSubImage2DARB',
      'CompressedTexSubImage1DARB',
      'GetCompressedTexImageARB',
    ]
  end # self.get_ext_command_GL_ARB_texture_compression


  def self.define_ext_command_GL_ARB_texture_compression_bptc
  end # self.define_ext_command_GL_ARB_texture_compression_bptc

  def self.get_ext_command_GL_ARB_texture_compression_bptc
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_compression_bptc


  def self.define_ext_command_GL_ARB_texture_compression_rgtc
  end # self.define_ext_command_GL_ARB_texture_compression_rgtc

  def self.get_ext_command_GL_ARB_texture_compression_rgtc
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_compression_rgtc


  def self.define_ext_command_GL_ARB_texture_cube_map
  end # self.define_ext_command_GL_ARB_texture_cube_map

  def self.get_ext_command_GL_ARB_texture_cube_map
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_cube_map


  def self.define_ext_command_GL_ARB_texture_cube_map_array
  end # self.define_ext_command_GL_ARB_texture_cube_map_array

  def self.get_ext_command_GL_ARB_texture_cube_map_array
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_cube_map_array


  def self.define_ext_command_GL_ARB_texture_env_add
  end # self.define_ext_command_GL_ARB_texture_env_add

  def self.get_ext_command_GL_ARB_texture_env_add
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_add


  def self.define_ext_command_GL_ARB_texture_env_combine
  end # self.define_ext_command_GL_ARB_texture_env_combine

  def self.get_ext_command_GL_ARB_texture_env_combine
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_combine


  def self.define_ext_command_GL_ARB_texture_env_crossbar
  end # self.define_ext_command_GL_ARB_texture_env_crossbar

  def self.get_ext_command_GL_ARB_texture_env_crossbar
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_crossbar


  def self.define_ext_command_GL_ARB_texture_env_dot3
  end # self.define_ext_command_GL_ARB_texture_env_dot3

  def self.get_ext_command_GL_ARB_texture_env_dot3
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_dot3


  def self.define_ext_command_GL_ARB_texture_filter_anisotropic
  end # self.define_ext_command_GL_ARB_texture_filter_anisotropic

  def self.get_ext_command_GL_ARB_texture_filter_anisotropic
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_filter_anisotropic


  def self.define_ext_command_GL_ARB_texture_filter_minmax
  end # self.define_ext_command_GL_ARB_texture_filter_minmax

  def self.get_ext_command_GL_ARB_texture_filter_minmax
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_filter_minmax


  def self.define_ext_command_GL_ARB_texture_float
  end # self.define_ext_command_GL_ARB_texture_float

  def self.get_ext_command_GL_ARB_texture_float
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_float


  def self.define_ext_command_GL_ARB_texture_gather
  end # self.define_ext_command_GL_ARB_texture_gather

  def self.get_ext_command_GL_ARB_texture_gather
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_gather


  def self.define_ext_command_GL_ARB_texture_mirror_clamp_to_edge
  end # self.define_ext_command_GL_ARB_texture_mirror_clamp_to_edge

  def self.get_ext_command_GL_ARB_texture_mirror_clamp_to_edge
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_mirror_clamp_to_edge


  def self.define_ext_command_GL_ARB_texture_mirrored_repeat
  end # self.define_ext_command_GL_ARB_texture_mirrored_repeat

  def self.get_ext_command_GL_ARB_texture_mirrored_repeat
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_mirrored_repeat


  def self.define_ext_command_GL_ARB_texture_multisample
    GL::GL_FUNCTION_SYMBOLS << :TexImage2DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:TexImage2DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexImage2DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:TexImage2DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexImage2DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TexImage2DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexImage3DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:TexImage3DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexImage3DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:TexImage3DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexImage3DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TexImage3DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultisamplefv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultisamplefv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultisamplefv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultisamplefv)
    GL.module_eval(<<-SRC)
      def self.GetMultisamplefv(_pname_, _index_, _val_)
        GL_FUNCTIONS_MAP[:GetMultisamplefv].call(_pname_, _index_, _val_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SampleMaski
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleMaski] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleMaski] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleMaski)
    GL.module_eval(<<-SRC)
      def self.SampleMaski(_maskNumber_, _mask_)
        GL_FUNCTIONS_MAP[:SampleMaski].call(_maskNumber_, _mask_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_multisample

  def self.get_ext_command_GL_ARB_texture_multisample
    [
      'TexImage2DMultisample',
      'TexImage3DMultisample',
      'GetMultisamplefv',
      'SampleMaski',
    ]
  end # self.get_ext_command_GL_ARB_texture_multisample


  def self.define_ext_command_GL_ARB_texture_non_power_of_two
  end # self.define_ext_command_GL_ARB_texture_non_power_of_two

  def self.get_ext_command_GL_ARB_texture_non_power_of_two
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_non_power_of_two


  def self.define_ext_command_GL_ARB_texture_query_levels
  end # self.define_ext_command_GL_ARB_texture_query_levels

  def self.get_ext_command_GL_ARB_texture_query_levels
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_query_levels


  def self.define_ext_command_GL_ARB_texture_query_lod
  end # self.define_ext_command_GL_ARB_texture_query_lod

  def self.get_ext_command_GL_ARB_texture_query_lod
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_query_lod


  def self.define_ext_command_GL_ARB_texture_rectangle
  end # self.define_ext_command_GL_ARB_texture_rectangle

  def self.get_ext_command_GL_ARB_texture_rectangle
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_rectangle


  def self.define_ext_command_GL_ARB_texture_rg
  end # self.define_ext_command_GL_ARB_texture_rg

  def self.get_ext_command_GL_ARB_texture_rg
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_rg


  def self.define_ext_command_GL_ARB_texture_rgb10_a2ui
  end # self.define_ext_command_GL_ARB_texture_rgb10_a2ui

  def self.get_ext_command_GL_ARB_texture_rgb10_a2ui
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_rgb10_a2ui


  def self.define_ext_command_GL_ARB_texture_stencil8
  end # self.define_ext_command_GL_ARB_texture_stencil8

  def self.get_ext_command_GL_ARB_texture_stencil8
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_stencil8


  def self.define_ext_command_GL_ARB_texture_storage
    GL::GL_FUNCTION_SYMBOLS << :TexStorage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage1D)
    GL.module_eval(<<-SRC)
      def self.TexStorage1D(_target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:TexStorage1D].call(_target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage2D)
    GL.module_eval(<<-SRC)
      def self.TexStorage2D(_target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:TexStorage2D].call(_target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage3D)
    GL.module_eval(<<-SRC)
      def self.TexStorage3D(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:TexStorage3D].call(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_storage

  def self.get_ext_command_GL_ARB_texture_storage
    [
      'TexStorage1D',
      'TexStorage2D',
      'TexStorage3D',
    ]
  end # self.get_ext_command_GL_ARB_texture_storage


  def self.define_ext_command_GL_ARB_texture_storage_multisample
    GL::GL_FUNCTION_SYMBOLS << :TexStorage2DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage2DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage2DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage2DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexStorage2DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TexStorage2DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorage3DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage3DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage3DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage3DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexStorage3DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TexStorage3DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_storage_multisample

  def self.get_ext_command_GL_ARB_texture_storage_multisample
    [
      'TexStorage2DMultisample',
      'TexStorage3DMultisample',
    ]
  end # self.get_ext_command_GL_ARB_texture_storage_multisample


  def self.define_ext_command_GL_ARB_texture_swizzle
  end # self.define_ext_command_GL_ARB_texture_swizzle

  def self.get_ext_command_GL_ARB_texture_swizzle
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_swizzle


  def self.define_ext_command_GL_ARB_texture_view
    GL::GL_FUNCTION_SYMBOLS << :TextureView
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureView] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureView] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureView)
    GL.module_eval(<<-SRC)
      def self.TextureView(_texture_, _target_, _origtexture_, _internalformat_, _minlevel_, _numlevels_, _minlayer_, _numlayers_)
        GL_FUNCTIONS_MAP[:TextureView].call(_texture_, _target_, _origtexture_, _internalformat_, _minlevel_, _numlevels_, _minlayer_, _numlayers_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_view

  def self.get_ext_command_GL_ARB_texture_view
    [
      'TextureView',
    ]
  end # self.get_ext_command_GL_ARB_texture_view


  def self.define_ext_command_GL_ARB_timer_query
    GL::GL_FUNCTION_SYMBOLS << :QueryCounter
    GL::GL_FUNCTIONS_ARGS_MAP[:QueryCounter] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:QueryCounter] = Fiddle::TYPE_VOID
    GL.bind_command(:QueryCounter)
    GL.module_eval(<<-SRC)
      def self.QueryCounter(_id_, _target_)
        GL_FUNCTIONS_MAP[:QueryCounter].call(_id_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryObjecti64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryObjecti64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryObjecti64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryObjecti64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjecti64v(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryObjecti64v].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryObjectui64v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryObjectui64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryObjectui64v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryObjectui64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectui64v(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryObjectui64v].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_timer_query

  def self.get_ext_command_GL_ARB_timer_query
    [
      'QueryCounter',
      'GetQueryObjecti64v',
      'GetQueryObjectui64v',
    ]
  end # self.get_ext_command_GL_ARB_timer_query


  def self.define_ext_command_GL_ARB_transform_feedback2
    GL::GL_FUNCTION_SYMBOLS << :BindTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTransformFeedback] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:BindTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.BindTransformFeedback(_target_, _id_)
        GL_FUNCTIONS_MAP[:BindTransformFeedback].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteTransformFeedbacks
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteTransformFeedbacks] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteTransformFeedbacks] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteTransformFeedbacks)
    GL.module_eval(<<-SRC)
      def self.DeleteTransformFeedbacks(_n_, _ids_)
        GL_FUNCTIONS_MAP[:DeleteTransformFeedbacks].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenTransformFeedbacks
    GL::GL_FUNCTIONS_ARGS_MAP[:GenTransformFeedbacks] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenTransformFeedbacks] = Fiddle::TYPE_VOID
    GL.bind_command(:GenTransformFeedbacks)
    GL.module_eval(<<-SRC)
      def self.GenTransformFeedbacks(_n_, _ids_)
        GL_FUNCTIONS_MAP[:GenTransformFeedbacks].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:IsTransformFeedback] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsTransformFeedback] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.IsTransformFeedback(_id_)
        GL_FUNCTIONS_MAP[:IsTransformFeedback].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PauseTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:PauseTransformFeedback] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:PauseTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:PauseTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.PauseTransformFeedback()
        GL_FUNCTIONS_MAP[:PauseTransformFeedback].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResumeTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:ResumeTransformFeedback] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResumeTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:ResumeTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.ResumeTransformFeedback()
        GL_FUNCTIONS_MAP[:ResumeTransformFeedback].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawTransformFeedback] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedback(_mode_, _id_)
        GL_FUNCTIONS_MAP[:DrawTransformFeedback].call(_mode_, _id_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transform_feedback2

  def self.get_ext_command_GL_ARB_transform_feedback2
    [
      'BindTransformFeedback',
      'DeleteTransformFeedbacks',
      'GenTransformFeedbacks',
      'IsTransformFeedback',
      'PauseTransformFeedback',
      'ResumeTransformFeedback',
      'DrawTransformFeedback',
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback2


  def self.define_ext_command_GL_ARB_transform_feedback3
    GL::GL_FUNCTION_SYMBOLS << :DrawTransformFeedbackStream
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawTransformFeedbackStream] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawTransformFeedbackStream] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawTransformFeedbackStream)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackStream(_mode_, _id_, _stream_)
        GL_FUNCTIONS_MAP[:DrawTransformFeedbackStream].call(_mode_, _id_, _stream_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BeginQueryIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginQueryIndexed] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginQueryIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginQueryIndexed)
    GL.module_eval(<<-SRC)
      def self.BeginQueryIndexed(_target_, _index_, _id_)
        GL_FUNCTIONS_MAP[:BeginQueryIndexed].call(_target_, _index_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndQueryIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:EndQueryIndexed] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndQueryIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:EndQueryIndexed)
    GL.module_eval(<<-SRC)
      def self.EndQueryIndexed(_target_, _index_)
        GL_FUNCTIONS_MAP[:EndQueryIndexed].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryIndexediv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryIndexediv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryIndexediv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryIndexediv)
    GL.module_eval(<<-SRC)
      def self.GetQueryIndexediv(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryIndexediv].call(_target_, _index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transform_feedback3

  def self.get_ext_command_GL_ARB_transform_feedback3
    [
      'DrawTransformFeedbackStream',
      'BeginQueryIndexed',
      'EndQueryIndexed',
      'GetQueryIndexediv',
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback3


  def self.define_ext_command_GL_ARB_transform_feedback_instanced
    GL::GL_FUNCTION_SYMBOLS << :DrawTransformFeedbackInstanced
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawTransformFeedbackInstanced] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawTransformFeedbackInstanced] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawTransformFeedbackInstanced)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackInstanced(_mode_, _id_, _instancecount_)
        GL_FUNCTIONS_MAP[:DrawTransformFeedbackInstanced].call(_mode_, _id_, _instancecount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawTransformFeedbackStreamInstanced
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawTransformFeedbackStreamInstanced] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawTransformFeedbackStreamInstanced] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawTransformFeedbackStreamInstanced)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackStreamInstanced(_mode_, _id_, _stream_, _instancecount_)
        GL_FUNCTIONS_MAP[:DrawTransformFeedbackStreamInstanced].call(_mode_, _id_, _stream_, _instancecount_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transform_feedback_instanced

  def self.get_ext_command_GL_ARB_transform_feedback_instanced
    [
      'DrawTransformFeedbackInstanced',
      'DrawTransformFeedbackStreamInstanced',
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback_instanced


  def self.define_ext_command_GL_ARB_transform_feedback_overflow_query
  end # self.define_ext_command_GL_ARB_transform_feedback_overflow_query

  def self.get_ext_command_GL_ARB_transform_feedback_overflow_query
    [
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback_overflow_query


  def self.define_ext_command_GL_ARB_transpose_matrix
    GL::GL_FUNCTION_SYMBOLS << :LoadTransposeMatrixfARB
    GL::GL_FUNCTIONS_ARGS_MAP[:LoadTransposeMatrixfARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LoadTransposeMatrixfARB] = Fiddle::TYPE_VOID
    GL.bind_command(:LoadTransposeMatrixfARB)
    GL.module_eval(<<-SRC)
      def self.LoadTransposeMatrixfARB(_m_)
        GL_FUNCTIONS_MAP[:LoadTransposeMatrixfARB].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LoadTransposeMatrixdARB
    GL::GL_FUNCTIONS_ARGS_MAP[:LoadTransposeMatrixdARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LoadTransposeMatrixdARB] = Fiddle::TYPE_VOID
    GL.bind_command(:LoadTransposeMatrixdARB)
    GL.module_eval(<<-SRC)
      def self.LoadTransposeMatrixdARB(_m_)
        GL_FUNCTIONS_MAP[:LoadTransposeMatrixdARB].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultTransposeMatrixfARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultTransposeMatrixfARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultTransposeMatrixfARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultTransposeMatrixfARB)
    GL.module_eval(<<-SRC)
      def self.MultTransposeMatrixfARB(_m_)
        GL_FUNCTIONS_MAP[:MultTransposeMatrixfARB].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultTransposeMatrixdARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MultTransposeMatrixdARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultTransposeMatrixdARB] = Fiddle::TYPE_VOID
    GL.bind_command(:MultTransposeMatrixdARB)
    GL.module_eval(<<-SRC)
      def self.MultTransposeMatrixdARB(_m_)
        GL_FUNCTIONS_MAP[:MultTransposeMatrixdARB].call(_m_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transpose_matrix

  def self.get_ext_command_GL_ARB_transpose_matrix
    [
      'LoadTransposeMatrixfARB',
      'LoadTransposeMatrixdARB',
      'MultTransposeMatrixfARB',
      'MultTransposeMatrixdARB',
    ]
  end # self.get_ext_command_GL_ARB_transpose_matrix


  def self.define_ext_command_GL_ARB_uniform_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :GetUniformIndices
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformIndices] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformIndices] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformIndices)
    GL.module_eval(<<-SRC)
      def self.GetUniformIndices(_program_, _uniformCount_, _uniformNames_, _uniformIndices_)
        GL_FUNCTIONS_MAP[:GetUniformIndices].call(_program_, _uniformCount_, _uniformNames_, _uniformIndices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveUniformsiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveUniformsiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveUniformsiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveUniformsiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformsiv(_program_, _uniformCount_, _uniformIndices_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetActiveUniformsiv].call(_program_, _uniformCount_, _uniformIndices_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveUniformName
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveUniformName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveUniformName] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveUniformName)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformName(_program_, _uniformIndex_, _bufSize_, _length_, _uniformName_)
        GL_FUNCTIONS_MAP[:GetActiveUniformName].call(_program_, _uniformIndex_, _bufSize_, _length_, _uniformName_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformBlockIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformBlockIndex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformBlockIndex] = -Fiddle::TYPE_INT
    GL.bind_command(:GetUniformBlockIndex)
    GL.module_eval(<<-SRC)
      def self.GetUniformBlockIndex(_program_, _uniformBlockName_)
        GL_FUNCTIONS_MAP[:GetUniformBlockIndex].call(_program_, _uniformBlockName_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveUniformBlockiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveUniformBlockiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveUniformBlockiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveUniformBlockiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformBlockiv(_program_, _uniformBlockIndex_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetActiveUniformBlockiv].call(_program_, _uniformBlockIndex_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveUniformBlockName
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveUniformBlockName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveUniformBlockName] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveUniformBlockName)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformBlockName(_program_, _uniformBlockIndex_, _bufSize_, _length_, _uniformBlockName_)
        GL_FUNCTIONS_MAP[:GetActiveUniformBlockName].call(_program_, _uniformBlockIndex_, _bufSize_, _length_, _uniformBlockName_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformBlockBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformBlockBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformBlockBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformBlockBinding)
    GL.module_eval(<<-SRC)
      def self.UniformBlockBinding(_program_, _uniformBlockIndex_, _uniformBlockBinding_)
        GL_FUNCTIONS_MAP[:UniformBlockBinding].call(_program_, _uniformBlockIndex_, _uniformBlockBinding_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferRange)
    GL.module_eval(<<-SRC)
      def self.BindBufferRange(_target_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:BindBufferRange].call(_target_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferBase
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferBase] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferBase] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferBase)
    GL.module_eval(<<-SRC)
      def self.BindBufferBase(_target_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:BindBufferBase].call(_target_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetIntegeri_v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetIntegeri_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetIntegeri_v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetIntegeri_v)
    GL.module_eval(<<-SRC)
      def self.GetIntegeri_v(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetIntegeri_v].call(_target_, _index_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_uniform_buffer_object

  def self.get_ext_command_GL_ARB_uniform_buffer_object
    [
      'GetUniformIndices',
      'GetActiveUniformsiv',
      'GetActiveUniformName',
      'GetUniformBlockIndex',
      'GetActiveUniformBlockiv',
      'GetActiveUniformBlockName',
      'UniformBlockBinding',
      'BindBufferRange',
      'BindBufferBase',
      'GetIntegeri_v',
    ]
  end # self.get_ext_command_GL_ARB_uniform_buffer_object


  def self.define_ext_command_GL_ARB_vertex_array_bgra
  end # self.define_ext_command_GL_ARB_vertex_array_bgra

  def self.get_ext_command_GL_ARB_vertex_array_bgra
    [
    ]
  end # self.get_ext_command_GL_ARB_vertex_array_bgra


  def self.define_ext_command_GL_ARB_vertex_array_object
    GL::GL_FUNCTION_SYMBOLS << :BindVertexArray
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVertexArray] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVertexArray] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVertexArray)
    GL.module_eval(<<-SRC)
      def self.BindVertexArray(_array_)
        GL_FUNCTIONS_MAP[:BindVertexArray].call(_array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteVertexArrays
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteVertexArrays] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteVertexArrays] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteVertexArrays)
    GL.module_eval(<<-SRC)
      def self.DeleteVertexArrays(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:DeleteVertexArrays].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenVertexArrays
    GL::GL_FUNCTIONS_ARGS_MAP[:GenVertexArrays] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenVertexArrays] = Fiddle::TYPE_VOID
    GL.bind_command(:GenVertexArrays)
    GL.module_eval(<<-SRC)
      def self.GenVertexArrays(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:GenVertexArrays].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsVertexArray
    GL::GL_FUNCTIONS_ARGS_MAP[:IsVertexArray] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsVertexArray] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsVertexArray)
    GL.module_eval(<<-SRC)
      def self.IsVertexArray(_array_)
        GL_FUNCTIONS_MAP[:IsVertexArray].call(_array_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_array_object

  def self.get_ext_command_GL_ARB_vertex_array_object
    [
      'BindVertexArray',
      'DeleteVertexArrays',
      'GenVertexArrays',
      'IsVertexArray',
    ]
  end # self.get_ext_command_GL_ARB_vertex_array_object


  def self.define_ext_command_GL_ARB_vertex_attrib_64bit
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1d
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1d] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1d(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribL1d].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2d
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2d] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2d(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribL2d].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3d
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3d] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3d(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribL3d].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4d
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4d] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4d(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribL4d].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1dv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1dv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL1dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL2dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL3dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL4dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribLPointer
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribLPointer] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribLPointer] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribLPointer)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLPointer(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribLPointer].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribLdv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribLdv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribLdv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribLdv)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLdv(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribLdv].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_attrib_64bit

  def self.get_ext_command_GL_ARB_vertex_attrib_64bit
    [
      'VertexAttribL1d',
      'VertexAttribL2d',
      'VertexAttribL3d',
      'VertexAttribL4d',
      'VertexAttribL1dv',
      'VertexAttribL2dv',
      'VertexAttribL3dv',
      'VertexAttribL4dv',
      'VertexAttribLPointer',
      'GetVertexAttribLdv',
    ]
  end # self.get_ext_command_GL_ARB_vertex_attrib_64bit


  def self.define_ext_command_GL_ARB_vertex_attrib_binding
    GL::GL_FUNCTION_SYMBOLS << :BindVertexBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVertexBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVertexBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVertexBuffer)
    GL.module_eval(<<-SRC)
      def self.BindVertexBuffer(_bindingindex_, _buffer_, _offset_, _stride_)
        GL_FUNCTIONS_MAP[:BindVertexBuffer].call(_bindingindex_, _buffer_, _offset_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribFormat] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribFormat)
    GL.module_eval(<<-SRC)
      def self.VertexAttribFormat(_attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexAttribFormat].call(_attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribIFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribIFormat] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribIFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribIFormat)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIFormat(_attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexAttribIFormat].call(_attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribLFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribLFormat] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribLFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribLFormat)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLFormat(_attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexAttribLFormat].call(_attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribBinding)
    GL.module_eval(<<-SRC)
      def self.VertexAttribBinding(_attribindex_, _bindingindex_)
        GL_FUNCTIONS_MAP[:VertexAttribBinding].call(_attribindex_, _bindingindex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexBindingDivisor
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexBindingDivisor] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexBindingDivisor] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexBindingDivisor)
    GL.module_eval(<<-SRC)
      def self.VertexBindingDivisor(_bindingindex_, _divisor_)
        GL_FUNCTIONS_MAP[:VertexBindingDivisor].call(_bindingindex_, _divisor_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_attrib_binding

  def self.get_ext_command_GL_ARB_vertex_attrib_binding
    [
      'BindVertexBuffer',
      'VertexAttribFormat',
      'VertexAttribIFormat',
      'VertexAttribLFormat',
      'VertexAttribBinding',
      'VertexBindingDivisor',
    ]
  end # self.get_ext_command_GL_ARB_vertex_attrib_binding


  def self.define_ext_command_GL_ARB_vertex_blend
    GL::GL_FUNCTION_SYMBOLS << :WeightbvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightbvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightbvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightbvARB)
    GL.module_eval(<<-SRC)
      def self.WeightbvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightbvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightsvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightsvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightsvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightsvARB)
    GL.module_eval(<<-SRC)
      def self.WeightsvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightsvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightivARB)
    GL.module_eval(<<-SRC)
      def self.WeightivARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightivARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightfvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightfvARB)
    GL.module_eval(<<-SRC)
      def self.WeightfvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightfvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightdvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightdvARB)
    GL.module_eval(<<-SRC)
      def self.WeightdvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightdvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightubvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightubvARB)
    GL.module_eval(<<-SRC)
      def self.WeightubvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightubvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightusvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightusvARB)
    GL.module_eval(<<-SRC)
      def self.WeightusvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightusvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightuivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightuivARB)
    GL.module_eval(<<-SRC)
      def self.WeightuivARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:WeightuivARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightPointerARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightPointerARB)
    GL.module_eval(<<-SRC)
      def self.WeightPointerARB(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:WeightPointerARB].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexBlendARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexBlendARB] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexBlendARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexBlendARB)
    GL.module_eval(<<-SRC)
      def self.VertexBlendARB(_count_)
        GL_FUNCTIONS_MAP[:VertexBlendARB].call(_count_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_blend

  def self.get_ext_command_GL_ARB_vertex_blend
    [
      'WeightbvARB',
      'WeightsvARB',
      'WeightivARB',
      'WeightfvARB',
      'WeightdvARB',
      'WeightubvARB',
      'WeightusvARB',
      'WeightuivARB',
      'WeightPointerARB',
      'VertexBlendARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_blend


  def self.define_ext_command_GL_ARB_vertex_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :BindBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferARB)
    GL.module_eval(<<-SRC)
      def self.BindBufferARB(_target_, _buffer_)
        GL_FUNCTIONS_MAP[:BindBufferARB].call(_target_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteBuffersARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteBuffersARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteBuffersARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteBuffersARB)
    GL.module_eval(<<-SRC)
      def self.DeleteBuffersARB(_n_, _buffers_)
        GL_FUNCTIONS_MAP[:DeleteBuffersARB].call(_n_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenBuffersARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GenBuffersARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenBuffersARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GenBuffersARB)
    GL.module_eval(<<-SRC)
      def self.GenBuffersARB(_n_, _buffers_)
        GL_FUNCTIONS_MAP[:GenBuffersARB].call(_n_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsBufferARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsBufferARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsBufferARB)
    GL.module_eval(<<-SRC)
      def self.IsBufferARB(_buffer_)
        GL_FUNCTIONS_MAP[:IsBufferARB].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BufferDataARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferDataARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferDataARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferDataARB)
    GL.module_eval(<<-SRC)
      def self.BufferDataARB(_target_, _size_, _data_, _usage_)
        GL_FUNCTIONS_MAP[:BufferDataARB].call(_target_, _size_, _data_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BufferSubDataARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferSubDataARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferSubDataARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferSubDataARB)
    GL.module_eval(<<-SRC)
      def self.BufferSubDataARB(_target_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:BufferSubDataARB].call(_target_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetBufferSubDataARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetBufferSubDataARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetBufferSubDataARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetBufferSubDataARB)
    GL.module_eval(<<-SRC)
      def self.GetBufferSubDataARB(_target_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:GetBufferSubDataARB].call(_target_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:MapBufferARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapBufferARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapBufferARB)
    GL.module_eval(<<-SRC)
      def self.MapBufferARB(_target_, _access_)
        GL_FUNCTIONS_MAP[:MapBufferARB].call(_target_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UnmapBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:UnmapBufferARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UnmapBufferARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:UnmapBufferARB)
    GL.module_eval(<<-SRC)
      def self.UnmapBufferARB(_target_)
        GL_FUNCTIONS_MAP[:UnmapBufferARB].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetBufferParameterivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetBufferParameterivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetBufferParameterivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetBufferParameterivARB)
    GL.module_eval(<<-SRC)
      def self.GetBufferParameterivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetBufferParameterivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetBufferPointervARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetBufferPointervARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetBufferPointervARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetBufferPointervARB)
    GL.module_eval(<<-SRC)
      def self.GetBufferPointervARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetBufferPointervARB].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_buffer_object

  def self.get_ext_command_GL_ARB_vertex_buffer_object
    [
      'BindBufferARB',
      'DeleteBuffersARB',
      'GenBuffersARB',
      'IsBufferARB',
      'BufferDataARB',
      'BufferSubDataARB',
      'GetBufferSubDataARB',
      'MapBufferARB',
      'UnmapBufferARB',
      'GetBufferParameterivARB',
      'GetBufferPointervARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_buffer_object


  def self.define_ext_command_GL_ARB_vertex_program
    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1dARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1fARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1sARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1sARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2dARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2fARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2sARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2sARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3dARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3fARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3sARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3sARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NbvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NbvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NbvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NbvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NbvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NbvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NsvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NsvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NsvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NsvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NsvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NsvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NubARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NubARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NubARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NubARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NubARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NuivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NuivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NuivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NusvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NusvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NusvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NusvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4bvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4bvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4bvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4bvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4bvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4bvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4dARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4fARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4ivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4ivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4sARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4sARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4ubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4ubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4ubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4ubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4ubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4uivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4uivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4uivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4uivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4uivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4uivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4usvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4usvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4usvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4usvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4usvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4usvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribPointerARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribPointerARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribPointerARB(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribPointerARB].call(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.EnableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:EnableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.DisableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:DisableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.ProgramStringARB(_target_, _format_, _len_, _string_)
        GL_FUNCTIONS_MAP[:ProgramStringARB].call(_target_, _format_, _len_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BindProgramARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BindProgramARB)
    GL.module_eval(<<-SRC)
      def self.BindProgramARB(_target_, _program_)
        GL_FUNCTIONS_MAP[:BindProgramARB].call(_target_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteProgramsARB)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:DeleteProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GenProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GenProgramsARB)
    GL.module_eval(<<-SRC)
      def self.GenProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:GenProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramEnvParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramEnvParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramEnvParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramEnvParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramEnvParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramEnvParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramEnvParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramEnvParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramEnvParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramEnvParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramLocalParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramLocalParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramLocalParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramLocalParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramLocalParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramLocalParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramLocalParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramLocalParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramLocalParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramLocalParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramivARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramStringARB(_target_, _pname_, _string_)
        GL_FUNCTIONS_MAP[:GetProgramStringARB].call(_target_, _pname_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribdvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribdvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribdvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribfvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribfvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribfvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribivARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribivARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribivARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribPointervARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribPointervARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribPointervARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribPointervARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribPointervARB(_index_, _pname_, _pointer_)
        GL_FUNCTIONS_MAP[:GetVertexAttribPointervARB].call(_index_, _pname_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:IsProgramARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsProgramARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsProgramARB)
    GL.module_eval(<<-SRC)
      def self.IsProgramARB(_program_)
        GL_FUNCTIONS_MAP[:IsProgramARB].call(_program_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_program

  def self.get_ext_command_GL_ARB_vertex_program
    [
      'VertexAttrib1dARB',
      'VertexAttrib1dvARB',
      'VertexAttrib1fARB',
      'VertexAttrib1fvARB',
      'VertexAttrib1sARB',
      'VertexAttrib1svARB',
      'VertexAttrib2dARB',
      'VertexAttrib2dvARB',
      'VertexAttrib2fARB',
      'VertexAttrib2fvARB',
      'VertexAttrib2sARB',
      'VertexAttrib2svARB',
      'VertexAttrib3dARB',
      'VertexAttrib3dvARB',
      'VertexAttrib3fARB',
      'VertexAttrib3fvARB',
      'VertexAttrib3sARB',
      'VertexAttrib3svARB',
      'VertexAttrib4NbvARB',
      'VertexAttrib4NivARB',
      'VertexAttrib4NsvARB',
      'VertexAttrib4NubARB',
      'VertexAttrib4NubvARB',
      'VertexAttrib4NuivARB',
      'VertexAttrib4NusvARB',
      'VertexAttrib4bvARB',
      'VertexAttrib4dARB',
      'VertexAttrib4dvARB',
      'VertexAttrib4fARB',
      'VertexAttrib4fvARB',
      'VertexAttrib4ivARB',
      'VertexAttrib4sARB',
      'VertexAttrib4svARB',
      'VertexAttrib4ubvARB',
      'VertexAttrib4uivARB',
      'VertexAttrib4usvARB',
      'VertexAttribPointerARB',
      'EnableVertexAttribArrayARB',
      'DisableVertexAttribArrayARB',
      'ProgramStringARB',
      'BindProgramARB',
      'DeleteProgramsARB',
      'GenProgramsARB',
      'ProgramEnvParameter4dARB',
      'ProgramEnvParameter4dvARB',
      'ProgramEnvParameter4fARB',
      'ProgramEnvParameter4fvARB',
      'ProgramLocalParameter4dARB',
      'ProgramLocalParameter4dvARB',
      'ProgramLocalParameter4fARB',
      'ProgramLocalParameter4fvARB',
      'GetProgramEnvParameterdvARB',
      'GetProgramEnvParameterfvARB',
      'GetProgramLocalParameterdvARB',
      'GetProgramLocalParameterfvARB',
      'GetProgramivARB',
      'GetProgramStringARB',
      'GetVertexAttribdvARB',
      'GetVertexAttribfvARB',
      'GetVertexAttribivARB',
      'GetVertexAttribPointervARB',
      'IsProgramARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_program


  def self.define_ext_command_GL_ARB_vertex_shader
    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1fARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1sARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1sARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1dARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2fARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2sARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2sARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2dARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3fARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3sARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3sARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3dARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4fARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4sARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4sARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4dARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NubARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NubARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NubARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NubARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NubARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4ivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4ivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4bvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4bvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4bvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4bvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4bvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4bvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4ubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4ubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4ubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4ubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4ubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4usvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4usvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4usvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4usvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4usvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4usvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4uivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4uivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4uivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4uivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4uivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4uivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NbvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NbvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NbvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NbvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NbvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NbvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NsvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NsvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NsvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NsvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NsvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NsvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NusvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NusvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NusvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NusvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4NuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4NuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4NuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4NuivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NuivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4NuivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribPointerARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribPointerARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribPointerARB(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribPointerARB].call(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.EnableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:EnableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.DisableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:DisableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindAttribLocationARB
    GL::GL_FUNCTIONS_ARGS_MAP[:BindAttribLocationARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindAttribLocationARB] = Fiddle::TYPE_VOID
    GL.bind_command(:BindAttribLocationARB)
    GL.module_eval(<<-SRC)
      def self.BindAttribLocationARB(_programObj_, _index_, _name_)
        GL_FUNCTIONS_MAP[:BindAttribLocationARB].call(_programObj_, _index_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveAttribARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveAttribARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveAttribARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveAttribARB)
    GL.module_eval(<<-SRC)
      def self.GetActiveAttribARB(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:GetActiveAttribARB].call(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetAttribLocationARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetAttribLocationARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetAttribLocationARB] = Fiddle::TYPE_INT
    GL.bind_command(:GetAttribLocationARB)
    GL.module_eval(<<-SRC)
      def self.GetAttribLocationARB(_programObj_, _name_)
        GL_FUNCTIONS_MAP[:GetAttribLocationARB].call(_programObj_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribdvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribdvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribdvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribfvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribfvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribfvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribivARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribivARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribivARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribPointervARB
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribPointervARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribPointervARB] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribPointervARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribPointervARB(_index_, _pname_, _pointer_)
        GL_FUNCTIONS_MAP[:GetVertexAttribPointervARB].call(_index_, _pname_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_shader

  def self.get_ext_command_GL_ARB_vertex_shader
    [
      'VertexAttrib1fARB',
      'VertexAttrib1sARB',
      'VertexAttrib1dARB',
      'VertexAttrib2fARB',
      'VertexAttrib2sARB',
      'VertexAttrib2dARB',
      'VertexAttrib3fARB',
      'VertexAttrib3sARB',
      'VertexAttrib3dARB',
      'VertexAttrib4fARB',
      'VertexAttrib4sARB',
      'VertexAttrib4dARB',
      'VertexAttrib4NubARB',
      'VertexAttrib1fvARB',
      'VertexAttrib1svARB',
      'VertexAttrib1dvARB',
      'VertexAttrib2fvARB',
      'VertexAttrib2svARB',
      'VertexAttrib2dvARB',
      'VertexAttrib3fvARB',
      'VertexAttrib3svARB',
      'VertexAttrib3dvARB',
      'VertexAttrib4fvARB',
      'VertexAttrib4svARB',
      'VertexAttrib4dvARB',
      'VertexAttrib4ivARB',
      'VertexAttrib4bvARB',
      'VertexAttrib4ubvARB',
      'VertexAttrib4usvARB',
      'VertexAttrib4uivARB',
      'VertexAttrib4NbvARB',
      'VertexAttrib4NsvARB',
      'VertexAttrib4NivARB',
      'VertexAttrib4NubvARB',
      'VertexAttrib4NusvARB',
      'VertexAttrib4NuivARB',
      'VertexAttribPointerARB',
      'EnableVertexAttribArrayARB',
      'DisableVertexAttribArrayARB',
      'BindAttribLocationARB',
      'GetActiveAttribARB',
      'GetAttribLocationARB',
      'GetVertexAttribdvARB',
      'GetVertexAttribfvARB',
      'GetVertexAttribivARB',
      'GetVertexAttribPointervARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_shader


  def self.define_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev
  end # self.define_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev

  def self.get_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev
    [
    ]
  end # self.get_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev


  def self.define_ext_command_GL_ARB_vertex_type_2_10_10_10_rev
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP1ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP1ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP1ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP1ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP1uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP1uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP1uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP1uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP2ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP2ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP2ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP2uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP2uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP2uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP2uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP3ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP3ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP3ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP3uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP3uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP3uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP3uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP4ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP4ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP4ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribP4uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribP4uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP4uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:VertexAttribP4uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexP2ui)
    GL.module_eval(<<-SRC)
      def self.VertexP2ui(_type_, _value_)
        GL_FUNCTIONS_MAP[:VertexP2ui].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexP2uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexP2uiv)
    GL.module_eval(<<-SRC)
      def self.VertexP2uiv(_type_, _value_)
        GL_FUNCTIONS_MAP[:VertexP2uiv].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexP3ui)
    GL.module_eval(<<-SRC)
      def self.VertexP3ui(_type_, _value_)
        GL_FUNCTIONS_MAP[:VertexP3ui].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexP3uiv)
    GL.module_eval(<<-SRC)
      def self.VertexP3uiv(_type_, _value_)
        GL_FUNCTIONS_MAP[:VertexP3uiv].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexP4ui)
    GL.module_eval(<<-SRC)
      def self.VertexP4ui(_type_, _value_)
        GL_FUNCTIONS_MAP[:VertexP4ui].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexP4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexP4uiv)
    GL.module_eval(<<-SRC)
      def self.VertexP4uiv(_type_, _value_)
        GL_FUNCTIONS_MAP[:VertexP4uiv].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP1ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP1ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP1ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP1ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP1uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP1uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP1uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP1uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP2ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP2ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP2ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP2uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP2uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP2uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP2uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP3ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP3ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP3ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP3uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP3uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP3uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP4ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP4ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP4ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordP4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordP4uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP4uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:TexCoordP4uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP1ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP1ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP1ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP1ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP1uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP1uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP1uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP1uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP2ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP2ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP2ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP2uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP2uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP2uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP2uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP3ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP3ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP3ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP3uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP3uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP3uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP3uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP4ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP4ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP4ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordP4uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordP4uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP4uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoordP4uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalP3ui)
    GL.module_eval(<<-SRC)
      def self.NormalP3ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:NormalP3ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalP3uiv)
    GL.module_eval(<<-SRC)
      def self.NormalP3uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:NormalP3uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorP3ui)
    GL.module_eval(<<-SRC)
      def self.ColorP3ui(_type_, _color_)
        GL_FUNCTIONS_MAP[:ColorP3ui].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorP3uiv)
    GL.module_eval(<<-SRC)
      def self.ColorP3uiv(_type_, _color_)
        GL_FUNCTIONS_MAP[:ColorP3uiv].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorP4ui)
    GL.module_eval(<<-SRC)
      def self.ColorP4ui(_type_, _color_)
        GL_FUNCTIONS_MAP[:ColorP4ui].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorP4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorP4uiv)
    GL.module_eval(<<-SRC)
      def self.ColorP4uiv(_type_, _color_)
        GL_FUNCTIONS_MAP[:ColorP4uiv].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColorP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColorP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColorP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColorP3ui)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorP3ui(_type_, _color_)
        GL_FUNCTIONS_MAP[:SecondaryColorP3ui].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColorP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColorP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColorP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColorP3uiv)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorP3uiv(_type_, _color_)
        GL_FUNCTIONS_MAP[:SecondaryColorP3uiv].call(_type_, _color_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_type_2_10_10_10_rev

  def self.get_ext_command_GL_ARB_vertex_type_2_10_10_10_rev
    [
      'VertexAttribP1ui',
      'VertexAttribP1uiv',
      'VertexAttribP2ui',
      'VertexAttribP2uiv',
      'VertexAttribP3ui',
      'VertexAttribP3uiv',
      'VertexAttribP4ui',
      'VertexAttribP4uiv',
      'VertexP2ui',
      'VertexP2uiv',
      'VertexP3ui',
      'VertexP3uiv',
      'VertexP4ui',
      'VertexP4uiv',
      'TexCoordP1ui',
      'TexCoordP1uiv',
      'TexCoordP2ui',
      'TexCoordP2uiv',
      'TexCoordP3ui',
      'TexCoordP3uiv',
      'TexCoordP4ui',
      'TexCoordP4uiv',
      'MultiTexCoordP1ui',
      'MultiTexCoordP1uiv',
      'MultiTexCoordP2ui',
      'MultiTexCoordP2uiv',
      'MultiTexCoordP3ui',
      'MultiTexCoordP3uiv',
      'MultiTexCoordP4ui',
      'MultiTexCoordP4uiv',
      'NormalP3ui',
      'NormalP3uiv',
      'ColorP3ui',
      'ColorP3uiv',
      'ColorP4ui',
      'ColorP4uiv',
      'SecondaryColorP3ui',
      'SecondaryColorP3uiv',
    ]
  end # self.get_ext_command_GL_ARB_vertex_type_2_10_10_10_rev


  def self.define_ext_command_GL_ARB_viewport_array
    GL::GL_FUNCTION_SYMBOLS << :ViewportArrayv
    GL::GL_FUNCTIONS_ARGS_MAP[:ViewportArrayv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ViewportArrayv] = Fiddle::TYPE_VOID
    GL.bind_command(:ViewportArrayv)
    GL.module_eval(<<-SRC)
      def self.ViewportArrayv(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:ViewportArrayv].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ViewportIndexedf
    GL::GL_FUNCTIONS_ARGS_MAP[:ViewportIndexedf] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ViewportIndexedf] = Fiddle::TYPE_VOID
    GL.bind_command(:ViewportIndexedf)
    GL.module_eval(<<-SRC)
      def self.ViewportIndexedf(_index_, _x_, _y_, _w_, _h_)
        GL_FUNCTIONS_MAP[:ViewportIndexedf].call(_index_, _x_, _y_, _w_, _h_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ViewportIndexedfv
    GL::GL_FUNCTIONS_ARGS_MAP[:ViewportIndexedfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ViewportIndexedfv] = Fiddle::TYPE_VOID
    GL.bind_command(:ViewportIndexedfv)
    GL.module_eval(<<-SRC)
      def self.ViewportIndexedfv(_index_, _v_)
        GL_FUNCTIONS_MAP[:ViewportIndexedfv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ScissorArrayv
    GL::GL_FUNCTIONS_ARGS_MAP[:ScissorArrayv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ScissorArrayv] = Fiddle::TYPE_VOID
    GL.bind_command(:ScissorArrayv)
    GL.module_eval(<<-SRC)
      def self.ScissorArrayv(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:ScissorArrayv].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ScissorIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:ScissorIndexed] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ScissorIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:ScissorIndexed)
    GL.module_eval(<<-SRC)
      def self.ScissorIndexed(_index_, _left_, _bottom_, _width_, _height_)
        GL_FUNCTIONS_MAP[:ScissorIndexed].call(_index_, _left_, _bottom_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ScissorIndexedv
    GL::GL_FUNCTIONS_ARGS_MAP[:ScissorIndexedv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ScissorIndexedv] = Fiddle::TYPE_VOID
    GL.bind_command(:ScissorIndexedv)
    GL.module_eval(<<-SRC)
      def self.ScissorIndexedv(_index_, _v_)
        GL_FUNCTIONS_MAP[:ScissorIndexedv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangeArrayv
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangeArrayv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangeArrayv] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangeArrayv)
    GL.module_eval(<<-SRC)
      def self.DepthRangeArrayv(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:DepthRangeArrayv].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangeIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangeIndexed] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangeIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangeIndexed)
    GL.module_eval(<<-SRC)
      def self.DepthRangeIndexed(_index_, _n_, _f_)
        GL_FUNCTIONS_MAP[:DepthRangeIndexed].call(_index_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFloati_v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFloati_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFloati_v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFloati_v)
    GL.module_eval(<<-SRC)
      def self.GetFloati_v(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetFloati_v].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDoublei_v
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDoublei_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDoublei_v] = Fiddle::TYPE_VOID
    GL.bind_command(:GetDoublei_v)
    GL.module_eval(<<-SRC)
      def self.GetDoublei_v(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetDoublei_v].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangeArraydvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangeArraydvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangeArraydvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangeArraydvNV)
    GL.module_eval(<<-SRC)
      def self.DepthRangeArraydvNV(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:DepthRangeArraydvNV].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangeIndexeddNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangeIndexeddNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangeIndexeddNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangeIndexeddNV)
    GL.module_eval(<<-SRC)
      def self.DepthRangeIndexeddNV(_index_, _n_, _f_)
        GL_FUNCTIONS_MAP[:DepthRangeIndexeddNV].call(_index_, _n_, _f_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_viewport_array

  def self.get_ext_command_GL_ARB_viewport_array
    [
      'ViewportArrayv',
      'ViewportIndexedf',
      'ViewportIndexedfv',
      'ScissorArrayv',
      'ScissorIndexed',
      'ScissorIndexedv',
      'DepthRangeArrayv',
      'DepthRangeIndexed',
      'GetFloati_v',
      'GetDoublei_v',
      'DepthRangeArraydvNV',
      'DepthRangeIndexeddNV',
    ]
  end # self.get_ext_command_GL_ARB_viewport_array


  def self.define_ext_command_GL_ARB_window_pos
    GL::GL_FUNCTION_SYMBOLS << :WindowPos2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2dARB] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2dARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2dARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2dvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2dvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dvARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2dvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2fARB] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2fARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2fARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2fvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2fvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fvARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2fvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2iARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2iARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2iARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2ivARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2ivARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2ivARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2ivARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2sARB] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2sARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2sARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2sARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2svARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2svARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2svARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2svARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3dARB] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3dARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3dARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3dvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3dvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dvARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3dvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3fARB] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3fARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3fARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3fvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3fvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fvARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3fvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3iARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3iARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3iARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3ivARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3ivARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3ivARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3ivARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3sARB] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3sARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3sARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3sARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3svARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3svARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3svARB(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3svARB].call(_v_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_window_pos

  def self.get_ext_command_GL_ARB_window_pos
    [
      'WindowPos2dARB',
      'WindowPos2dvARB',
      'WindowPos2fARB',
      'WindowPos2fvARB',
      'WindowPos2iARB',
      'WindowPos2ivARB',
      'WindowPos2sARB',
      'WindowPos2svARB',
      'WindowPos3dARB',
      'WindowPos3dvARB',
      'WindowPos3fARB',
      'WindowPos3fvARB',
      'WindowPos3iARB',
      'WindowPos3ivARB',
      'WindowPos3sARB',
      'WindowPos3svARB',
    ]
  end # self.get_ext_command_GL_ARB_window_pos


  def self.define_ext_command_GL_ATI_draw_buffers
    GL::GL_FUNCTION_SYMBOLS << :DrawBuffersATI
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawBuffersATI] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawBuffersATI] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawBuffersATI)
    GL.module_eval(<<-SRC)
      def self.DrawBuffersATI(_n_, _bufs_)
        GL_FUNCTIONS_MAP[:DrawBuffersATI].call(_n_, _bufs_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_draw_buffers

  def self.get_ext_command_GL_ATI_draw_buffers
    [
      'DrawBuffersATI',
    ]
  end # self.get_ext_command_GL_ATI_draw_buffers


  def self.define_ext_command_GL_ATI_element_array
    GL::GL_FUNCTION_SYMBOLS << :ElementPointerATI
    GL::GL_FUNCTIONS_ARGS_MAP[:ElementPointerATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ElementPointerATI] = Fiddle::TYPE_VOID
    GL.bind_command(:ElementPointerATI)
    GL.module_eval(<<-SRC)
      def self.ElementPointerATI(_type_, _pointer_)
        GL_FUNCTIONS_MAP[:ElementPointerATI].call(_type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementArrayATI
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementArrayATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementArrayATI] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementArrayATI)
    GL.module_eval(<<-SRC)
      def self.DrawElementArrayATI(_mode_, _count_)
        GL_FUNCTIONS_MAP[:DrawElementArrayATI].call(_mode_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawRangeElementArrayATI
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawRangeElementArrayATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawRangeElementArrayATI] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawRangeElementArrayATI)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementArrayATI(_mode_, _start_, _end_, _count_)
        GL_FUNCTIONS_MAP[:DrawRangeElementArrayATI].call(_mode_, _start_, _end_, _count_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_element_array

  def self.get_ext_command_GL_ATI_element_array
    [
      'ElementPointerATI',
      'DrawElementArrayATI',
      'DrawRangeElementArrayATI',
    ]
  end # self.get_ext_command_GL_ATI_element_array


  def self.define_ext_command_GL_ATI_envmap_bumpmap
    GL::GL_FUNCTION_SYMBOLS << :TexBumpParameterivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:TexBumpParameterivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexBumpParameterivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:TexBumpParameterivATI)
    GL.module_eval(<<-SRC)
      def self.TexBumpParameterivATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:TexBumpParameterivATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexBumpParameterfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:TexBumpParameterfvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexBumpParameterfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:TexBumpParameterfvATI)
    GL.module_eval(<<-SRC)
      def self.TexBumpParameterfvATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:TexBumpParameterfvATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexBumpParameterivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexBumpParameterivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexBumpParameterivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexBumpParameterivATI)
    GL.module_eval(<<-SRC)
      def self.GetTexBumpParameterivATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:GetTexBumpParameterivATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexBumpParameterfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexBumpParameterfvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexBumpParameterfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexBumpParameterfvATI)
    GL.module_eval(<<-SRC)
      def self.GetTexBumpParameterfvATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:GetTexBumpParameterfvATI].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_envmap_bumpmap

  def self.get_ext_command_GL_ATI_envmap_bumpmap
    [
      'TexBumpParameterivATI',
      'TexBumpParameterfvATI',
      'GetTexBumpParameterivATI',
      'GetTexBumpParameterfvATI',
    ]
  end # self.get_ext_command_GL_ATI_envmap_bumpmap


  def self.define_ext_command_GL_ATI_fragment_shader
    GL::GL_FUNCTION_SYMBOLS << :GenFragmentShadersATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GenFragmentShadersATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenFragmentShadersATI] = -Fiddle::TYPE_INT
    GL.bind_command(:GenFragmentShadersATI)
    GL.module_eval(<<-SRC)
      def self.GenFragmentShadersATI(_range_)
        GL_FUNCTIONS_MAP[:GenFragmentShadersATI].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:BindFragmentShaderATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:BindFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.BindFragmentShaderATI(_id_)
        GL_FUNCTIONS_MAP[:BindFragmentShaderATI].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteFragmentShaderATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.DeleteFragmentShaderATI(_id_)
        GL_FUNCTIONS_MAP[:DeleteFragmentShaderATI].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BeginFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginFragmentShaderATI] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.BeginFragmentShaderATI()
        GL_FUNCTIONS_MAP[:BeginFragmentShaderATI].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:EndFragmentShaderATI] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:EndFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.EndFragmentShaderATI()
        GL_FUNCTIONS_MAP[:EndFragmentShaderATI].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PassTexCoordATI
    GL::GL_FUNCTIONS_ARGS_MAP[:PassTexCoordATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PassTexCoordATI] = Fiddle::TYPE_VOID
    GL.bind_command(:PassTexCoordATI)
    GL.module_eval(<<-SRC)
      def self.PassTexCoordATI(_dst_, _coord_, _swizzle_)
        GL_FUNCTIONS_MAP[:PassTexCoordATI].call(_dst_, _coord_, _swizzle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SampleMapATI
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleMapATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleMapATI] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleMapATI)
    GL.module_eval(<<-SRC)
      def self.SampleMapATI(_dst_, _interp_, _swizzle_)
        GL_FUNCTIONS_MAP[:SampleMapATI].call(_dst_, _interp_, _swizzle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorFragmentOp1ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorFragmentOp1ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorFragmentOp1ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorFragmentOp1ATI)
    GL.module_eval(<<-SRC)
      def self.ColorFragmentOp1ATI(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
        GL_FUNCTIONS_MAP[:ColorFragmentOp1ATI].call(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorFragmentOp2ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorFragmentOp2ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorFragmentOp2ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorFragmentOp2ATI)
    GL.module_eval(<<-SRC)
      def self.ColorFragmentOp2ATI(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
        GL_FUNCTIONS_MAP[:ColorFragmentOp2ATI].call(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorFragmentOp3ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorFragmentOp3ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorFragmentOp3ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorFragmentOp3ATI)
    GL.module_eval(<<-SRC)
      def self.ColorFragmentOp3ATI(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
        GL_FUNCTIONS_MAP[:ColorFragmentOp3ATI].call(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AlphaFragmentOp1ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:AlphaFragmentOp1ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AlphaFragmentOp1ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:AlphaFragmentOp1ATI)
    GL.module_eval(<<-SRC)
      def self.AlphaFragmentOp1ATI(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
        GL_FUNCTIONS_MAP[:AlphaFragmentOp1ATI].call(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AlphaFragmentOp2ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:AlphaFragmentOp2ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AlphaFragmentOp2ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:AlphaFragmentOp2ATI)
    GL.module_eval(<<-SRC)
      def self.AlphaFragmentOp2ATI(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
        GL_FUNCTIONS_MAP[:AlphaFragmentOp2ATI].call(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AlphaFragmentOp3ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:AlphaFragmentOp3ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AlphaFragmentOp3ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:AlphaFragmentOp3ATI)
    GL.module_eval(<<-SRC)
      def self.AlphaFragmentOp3ATI(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
        GL_FUNCTIONS_MAP[:AlphaFragmentOp3ATI].call(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SetFragmentShaderConstantATI
    GL::GL_FUNCTIONS_ARGS_MAP[:SetFragmentShaderConstantATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SetFragmentShaderConstantATI] = Fiddle::TYPE_VOID
    GL.bind_command(:SetFragmentShaderConstantATI)
    GL.module_eval(<<-SRC)
      def self.SetFragmentShaderConstantATI(_dst_, _value_)
        GL_FUNCTIONS_MAP[:SetFragmentShaderConstantATI].call(_dst_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_fragment_shader

  def self.get_ext_command_GL_ATI_fragment_shader
    [
      'GenFragmentShadersATI',
      'BindFragmentShaderATI',
      'DeleteFragmentShaderATI',
      'BeginFragmentShaderATI',
      'EndFragmentShaderATI',
      'PassTexCoordATI',
      'SampleMapATI',
      'ColorFragmentOp1ATI',
      'ColorFragmentOp2ATI',
      'ColorFragmentOp3ATI',
      'AlphaFragmentOp1ATI',
      'AlphaFragmentOp2ATI',
      'AlphaFragmentOp3ATI',
      'SetFragmentShaderConstantATI',
    ]
  end # self.get_ext_command_GL_ATI_fragment_shader


  def self.define_ext_command_GL_ATI_map_object_buffer
    GL::GL_FUNCTION_SYMBOLS << :MapObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:MapObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapObjectBufferATI] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.MapObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:MapObjectBufferATI].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UnmapObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:UnmapObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UnmapObjectBufferATI] = Fiddle::TYPE_VOID
    GL.bind_command(:UnmapObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.UnmapObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:UnmapObjectBufferATI].call(_buffer_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_map_object_buffer

  def self.get_ext_command_GL_ATI_map_object_buffer
    [
      'MapObjectBufferATI',
      'UnmapObjectBufferATI',
    ]
  end # self.get_ext_command_GL_ATI_map_object_buffer


  def self.define_ext_command_GL_ATI_meminfo
  end # self.define_ext_command_GL_ATI_meminfo

  def self.get_ext_command_GL_ATI_meminfo
    [
    ]
  end # self.get_ext_command_GL_ATI_meminfo


  def self.define_ext_command_GL_ATI_pixel_format_float
  end # self.define_ext_command_GL_ATI_pixel_format_float

  def self.get_ext_command_GL_ATI_pixel_format_float
    [
    ]
  end # self.get_ext_command_GL_ATI_pixel_format_float


  def self.define_ext_command_GL_ATI_pn_triangles
    GL::GL_FUNCTION_SYMBOLS << :PNTrianglesiATI
    GL::GL_FUNCTIONS_ARGS_MAP[:PNTrianglesiATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PNTrianglesiATI] = Fiddle::TYPE_VOID
    GL.bind_command(:PNTrianglesiATI)
    GL.module_eval(<<-SRC)
      def self.PNTrianglesiATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PNTrianglesiATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PNTrianglesfATI
    GL::GL_FUNCTIONS_ARGS_MAP[:PNTrianglesfATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PNTrianglesfATI] = Fiddle::TYPE_VOID
    GL.bind_command(:PNTrianglesfATI)
    GL.module_eval(<<-SRC)
      def self.PNTrianglesfATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PNTrianglesfATI].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_pn_triangles

  def self.get_ext_command_GL_ATI_pn_triangles
    [
      'PNTrianglesiATI',
      'PNTrianglesfATI',
    ]
  end # self.get_ext_command_GL_ATI_pn_triangles


  def self.define_ext_command_GL_ATI_separate_stencil
    GL::GL_FUNCTION_SYMBOLS << :StencilOpSeparateATI
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilOpSeparateATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilOpSeparateATI] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilOpSeparateATI)
    GL.module_eval(<<-SRC)
      def self.StencilOpSeparateATI(_face_, _sfail_, _dpfail_, _dppass_)
        GL_FUNCTIONS_MAP[:StencilOpSeparateATI].call(_face_, _sfail_, _dpfail_, _dppass_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilFuncSeparateATI
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilFuncSeparateATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilFuncSeparateATI] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilFuncSeparateATI)
    GL.module_eval(<<-SRC)
      def self.StencilFuncSeparateATI(_frontfunc_, _backfunc_, _ref_, _mask_)
        GL_FUNCTIONS_MAP[:StencilFuncSeparateATI].call(_frontfunc_, _backfunc_, _ref_, _mask_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_separate_stencil

  def self.get_ext_command_GL_ATI_separate_stencil
    [
      'StencilOpSeparateATI',
      'StencilFuncSeparateATI',
    ]
  end # self.get_ext_command_GL_ATI_separate_stencil


  def self.define_ext_command_GL_ATI_text_fragment_shader
  end # self.define_ext_command_GL_ATI_text_fragment_shader

  def self.get_ext_command_GL_ATI_text_fragment_shader
    [
    ]
  end # self.get_ext_command_GL_ATI_text_fragment_shader


  def self.define_ext_command_GL_ATI_texture_env_combine3
  end # self.define_ext_command_GL_ATI_texture_env_combine3

  def self.get_ext_command_GL_ATI_texture_env_combine3
    [
    ]
  end # self.get_ext_command_GL_ATI_texture_env_combine3


  def self.define_ext_command_GL_ATI_texture_float
  end # self.define_ext_command_GL_ATI_texture_float

  def self.get_ext_command_GL_ATI_texture_float
    [
    ]
  end # self.get_ext_command_GL_ATI_texture_float


  def self.define_ext_command_GL_ATI_texture_mirror_once
  end # self.define_ext_command_GL_ATI_texture_mirror_once

  def self.get_ext_command_GL_ATI_texture_mirror_once
    [
    ]
  end # self.get_ext_command_GL_ATI_texture_mirror_once


  def self.define_ext_command_GL_ATI_vertex_array_object
    GL::GL_FUNCTION_SYMBOLS << :NewObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NewObjectBufferATI] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NewObjectBufferATI] = -Fiddle::TYPE_INT
    GL.bind_command(:NewObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.NewObjectBufferATI(_size_, _pointer_, _usage_)
        GL_FUNCTIONS_MAP[:NewObjectBufferATI].call(_size_, _pointer_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:IsObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsObjectBufferATI] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.IsObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:IsObjectBufferATI].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UpdateObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:UpdateObjectBufferATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UpdateObjectBufferATI] = Fiddle::TYPE_VOID
    GL.bind_command(:UpdateObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.UpdateObjectBufferATI(_buffer_, _offset_, _size_, _pointer_, _preserve_)
        GL_FUNCTIONS_MAP[:UpdateObjectBufferATI].call(_buffer_, _offset_, _size_, _pointer_, _preserve_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectBufferfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectBufferfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectBufferfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectBufferfvATI)
    GL.module_eval(<<-SRC)
      def self.GetObjectBufferfvATI(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetObjectBufferfvATI].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectBufferivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectBufferivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectBufferivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectBufferivATI)
    GL.module_eval(<<-SRC)
      def self.GetObjectBufferivATI(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetObjectBufferivATI].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FreeObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:FreeObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FreeObjectBufferATI] = Fiddle::TYPE_VOID
    GL.bind_command(:FreeObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.FreeObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:FreeObjectBufferATI].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ArrayObjectATI
    GL::GL_FUNCTIONS_ARGS_MAP[:ArrayObjectATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ArrayObjectATI] = Fiddle::TYPE_VOID
    GL.bind_command(:ArrayObjectATI)
    GL.module_eval(<<-SRC)
      def self.ArrayObjectATI(_array_, _size_, _type_, _stride_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:ArrayObjectATI].call(_array_, _size_, _type_, _stride_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetArrayObjectfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetArrayObjectfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetArrayObjectfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetArrayObjectfvATI)
    GL.module_eval(<<-SRC)
      def self.GetArrayObjectfvATI(_array_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetArrayObjectfvATI].call(_array_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetArrayObjectivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetArrayObjectivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetArrayObjectivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetArrayObjectivATI)
    GL.module_eval(<<-SRC)
      def self.GetArrayObjectivATI(_array_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetArrayObjectivATI].call(_array_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantArrayObjectATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantArrayObjectATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantArrayObjectATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantArrayObjectATI)
    GL.module_eval(<<-SRC)
      def self.VariantArrayObjectATI(_id_, _type_, _stride_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:VariantArrayObjectATI].call(_id_, _type_, _stride_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVariantArrayObjectfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVariantArrayObjectfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVariantArrayObjectfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVariantArrayObjectfvATI)
    GL.module_eval(<<-SRC)
      def self.GetVariantArrayObjectfvATI(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVariantArrayObjectfvATI].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVariantArrayObjectivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVariantArrayObjectivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVariantArrayObjectivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVariantArrayObjectivATI)
    GL.module_eval(<<-SRC)
      def self.GetVariantArrayObjectivATI(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVariantArrayObjectivATI].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_vertex_array_object

  def self.get_ext_command_GL_ATI_vertex_array_object
    [
      'NewObjectBufferATI',
      'IsObjectBufferATI',
      'UpdateObjectBufferATI',
      'GetObjectBufferfvATI',
      'GetObjectBufferivATI',
      'FreeObjectBufferATI',
      'ArrayObjectATI',
      'GetArrayObjectfvATI',
      'GetArrayObjectivATI',
      'VariantArrayObjectATI',
      'GetVariantArrayObjectfvATI',
      'GetVariantArrayObjectivATI',
    ]
  end # self.get_ext_command_GL_ATI_vertex_array_object


  def self.define_ext_command_GL_ATI_vertex_attrib_array_object
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribArrayObjectATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribArrayObjectATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribArrayObjectATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribArrayObjectATI)
    GL.module_eval(<<-SRC)
      def self.VertexAttribArrayObjectATI(_index_, _size_, _type_, _normalized_, _stride_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:VertexAttribArrayObjectATI].call(_index_, _size_, _type_, _normalized_, _stride_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribArrayObjectfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribArrayObjectfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribArrayObjectfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribArrayObjectfvATI)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribArrayObjectfvATI(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribArrayObjectfvATI].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribArrayObjectivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribArrayObjectivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribArrayObjectivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribArrayObjectivATI)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribArrayObjectivATI(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribArrayObjectivATI].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_vertex_attrib_array_object

  def self.get_ext_command_GL_ATI_vertex_attrib_array_object
    [
      'VertexAttribArrayObjectATI',
      'GetVertexAttribArrayObjectfvATI',
      'GetVertexAttribArrayObjectivATI',
    ]
  end # self.get_ext_command_GL_ATI_vertex_attrib_array_object


  def self.define_ext_command_GL_ATI_vertex_streams
    GL::GL_FUNCTION_SYMBOLS << :VertexStream1sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1sATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:VertexStream1sATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream1svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1iATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:VertexStream1iATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream1ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1fATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:VertexStream1fATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream1fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1dATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:VertexStream1dATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream1dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream1dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream1dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream1dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream1dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2sATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexStream2sATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream2svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2iATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexStream2iATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream2ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2fATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexStream2fATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream2fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2dATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexStream2dATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream2dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream2dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream2dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream2dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream2dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3sATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexStream3sATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream3svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3iATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexStream3iATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream3ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3fATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexStream3fATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream3fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3dATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexStream3dATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream3dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream3dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream3dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream3dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream3dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4sATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexStream4sATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream4svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4iATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexStream4iATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream4ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4fATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexStream4fATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream4fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4dATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexStream4dATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexStream4dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexStream4dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexStream4dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexStream4dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:VertexStream4dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3bATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3bATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3bATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3bATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3bATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:NormalStream3bATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3bvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3bvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3bvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3bvATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3bvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:NormalStream3bvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3sATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3sATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:NormalStream3sATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3svATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:NormalStream3svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3iATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3iATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:NormalStream3iATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3ivATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:NormalStream3ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3fATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3fATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:NormalStream3fATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3fvATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:NormalStream3fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3dATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3dATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:NormalStream3dATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalStream3dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalStream3dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalStream3dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalStream3dvATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:NormalStream3dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClientActiveVertexStreamATI
    GL::GL_FUNCTIONS_ARGS_MAP[:ClientActiveVertexStreamATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClientActiveVertexStreamATI] = Fiddle::TYPE_VOID
    GL.bind_command(:ClientActiveVertexStreamATI)
    GL.module_eval(<<-SRC)
      def self.ClientActiveVertexStreamATI(_stream_)
        GL_FUNCTIONS_MAP[:ClientActiveVertexStreamATI].call(_stream_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexBlendEnviATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexBlendEnviATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexBlendEnviATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexBlendEnviATI)
    GL.module_eval(<<-SRC)
      def self.VertexBlendEnviATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:VertexBlendEnviATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexBlendEnvfATI
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexBlendEnvfATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexBlendEnvfATI] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexBlendEnvfATI)
    GL.module_eval(<<-SRC)
      def self.VertexBlendEnvfATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:VertexBlendEnvfATI].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_vertex_streams

  def self.get_ext_command_GL_ATI_vertex_streams
    [
      'VertexStream1sATI',
      'VertexStream1svATI',
      'VertexStream1iATI',
      'VertexStream1ivATI',
      'VertexStream1fATI',
      'VertexStream1fvATI',
      'VertexStream1dATI',
      'VertexStream1dvATI',
      'VertexStream2sATI',
      'VertexStream2svATI',
      'VertexStream2iATI',
      'VertexStream2ivATI',
      'VertexStream2fATI',
      'VertexStream2fvATI',
      'VertexStream2dATI',
      'VertexStream2dvATI',
      'VertexStream3sATI',
      'VertexStream3svATI',
      'VertexStream3iATI',
      'VertexStream3ivATI',
      'VertexStream3fATI',
      'VertexStream3fvATI',
      'VertexStream3dATI',
      'VertexStream3dvATI',
      'VertexStream4sATI',
      'VertexStream4svATI',
      'VertexStream4iATI',
      'VertexStream4ivATI',
      'VertexStream4fATI',
      'VertexStream4fvATI',
      'VertexStream4dATI',
      'VertexStream4dvATI',
      'NormalStream3bATI',
      'NormalStream3bvATI',
      'NormalStream3sATI',
      'NormalStream3svATI',
      'NormalStream3iATI',
      'NormalStream3ivATI',
      'NormalStream3fATI',
      'NormalStream3fvATI',
      'NormalStream3dATI',
      'NormalStream3dvATI',
      'ClientActiveVertexStreamATI',
      'VertexBlendEnviATI',
      'VertexBlendEnvfATI',
    ]
  end # self.get_ext_command_GL_ATI_vertex_streams


  def self.define_ext_command_GL_EXT_422_pixels
  end # self.define_ext_command_GL_EXT_422_pixels

  def self.get_ext_command_GL_EXT_422_pixels
    [
    ]
  end # self.get_ext_command_GL_EXT_422_pixels


  def self.define_ext_command_GL_EXT_EGL_image_storage
    GL::GL_FUNCTION_SYMBOLS << :EGLImageTargetTexStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EGLImageTargetTexStorageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EGLImageTargetTexStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EGLImageTargetTexStorageEXT)
    GL.module_eval(<<-SRC)
      def self.EGLImageTargetTexStorageEXT(_target_, _image_, _attrib_list_)
        GL_FUNCTIONS_MAP[:EGLImageTargetTexStorageEXT].call(_target_, _image_, _attrib_list_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EGLImageTargetTextureStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EGLImageTargetTextureStorageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EGLImageTargetTextureStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EGLImageTargetTextureStorageEXT)
    GL.module_eval(<<-SRC)
      def self.EGLImageTargetTextureStorageEXT(_texture_, _image_, _attrib_list_)
        GL_FUNCTIONS_MAP[:EGLImageTargetTextureStorageEXT].call(_texture_, _image_, _attrib_list_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_EGL_image_storage

  def self.get_ext_command_GL_EXT_EGL_image_storage
    [
      'EGLImageTargetTexStorageEXT',
      'EGLImageTargetTextureStorageEXT',
    ]
  end # self.get_ext_command_GL_EXT_EGL_image_storage


  def self.define_ext_command_GL_EXT_EGL_sync
  end # self.define_ext_command_GL_EXT_EGL_sync

  def self.get_ext_command_GL_EXT_EGL_sync
    [
    ]
  end # self.get_ext_command_GL_EXT_EGL_sync


  def self.define_ext_command_GL_EXT_abgr
  end # self.define_ext_command_GL_EXT_abgr

  def self.get_ext_command_GL_EXT_abgr
    [
    ]
  end # self.get_ext_command_GL_EXT_abgr


  def self.define_ext_command_GL_EXT_bgra
  end # self.define_ext_command_GL_EXT_bgra

  def self.get_ext_command_GL_EXT_bgra
    [
    ]
  end # self.get_ext_command_GL_EXT_bgra


  def self.define_ext_command_GL_EXT_bindable_uniform
    GL::GL_FUNCTION_SYMBOLS << :UniformBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformBufferEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformBufferEXT)
    GL.module_eval(<<-SRC)
      def self.UniformBufferEXT(_program_, _location_, _buffer_)
        GL_FUNCTIONS_MAP[:UniformBufferEXT].call(_program_, _location_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformBufferSizeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformBufferSizeEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformBufferSizeEXT] = Fiddle::TYPE_INT
    GL.bind_command(:GetUniformBufferSizeEXT)
    GL.module_eval(<<-SRC)
      def self.GetUniformBufferSizeEXT(_program_, _location_)
        GL_FUNCTIONS_MAP[:GetUniformBufferSizeEXT].call(_program_, _location_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformOffsetEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformOffsetEXT] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:GetUniformOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.GetUniformOffsetEXT(_program_, _location_)
        GL_FUNCTIONS_MAP[:GetUniformOffsetEXT].call(_program_, _location_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_bindable_uniform

  def self.get_ext_command_GL_EXT_bindable_uniform
    [
      'UniformBufferEXT',
      'GetUniformBufferSizeEXT',
      'GetUniformOffsetEXT',
    ]
  end # self.get_ext_command_GL_EXT_bindable_uniform


  def self.define_ext_command_GL_EXT_blend_color
    GL::GL_FUNCTION_SYMBOLS << :BlendColorEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendColorEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendColorEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendColorEXT)
    GL.module_eval(<<-SRC)
      def self.BlendColorEXT(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:BlendColorEXT].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_color

  def self.get_ext_command_GL_EXT_blend_color
    [
      'BlendColorEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_color


  def self.define_ext_command_GL_EXT_blend_equation_separate
    GL::GL_FUNCTION_SYMBOLS << :BlendEquationSeparateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquationSeparateEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquationSeparateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquationSeparateEXT)
    GL.module_eval(<<-SRC)
      def self.BlendEquationSeparateEXT(_modeRGB_, _modeAlpha_)
        GL_FUNCTIONS_MAP[:BlendEquationSeparateEXT].call(_modeRGB_, _modeAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_equation_separate

  def self.get_ext_command_GL_EXT_blend_equation_separate
    [
      'BlendEquationSeparateEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_equation_separate


  def self.define_ext_command_GL_EXT_blend_func_separate
    GL::GL_FUNCTION_SYMBOLS << :BlendFuncSeparateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendFuncSeparateEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendFuncSeparateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendFuncSeparateEXT)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateEXT(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
        GL_FUNCTIONS_MAP[:BlendFuncSeparateEXT].call(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_func_separate

  def self.get_ext_command_GL_EXT_blend_func_separate
    [
      'BlendFuncSeparateEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_func_separate


  def self.define_ext_command_GL_EXT_blend_logic_op
  end # self.define_ext_command_GL_EXT_blend_logic_op

  def self.get_ext_command_GL_EXT_blend_logic_op
    [
    ]
  end # self.get_ext_command_GL_EXT_blend_logic_op


  def self.define_ext_command_GL_EXT_blend_minmax
    GL::GL_FUNCTION_SYMBOLS << :BlendEquationEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendEquationEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendEquationEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendEquationEXT)
    GL.module_eval(<<-SRC)
      def self.BlendEquationEXT(_mode_)
        GL_FUNCTIONS_MAP[:BlendEquationEXT].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_minmax

  def self.get_ext_command_GL_EXT_blend_minmax
    [
      'BlendEquationEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_minmax


  def self.define_ext_command_GL_EXT_blend_subtract
  end # self.define_ext_command_GL_EXT_blend_subtract

  def self.get_ext_command_GL_EXT_blend_subtract
    [
    ]
  end # self.get_ext_command_GL_EXT_blend_subtract


  def self.define_ext_command_GL_EXT_clip_volume_hint
  end # self.define_ext_command_GL_EXT_clip_volume_hint

  def self.get_ext_command_GL_EXT_clip_volume_hint
    [
    ]
  end # self.get_ext_command_GL_EXT_clip_volume_hint


  def self.define_ext_command_GL_EXT_cmyka
  end # self.define_ext_command_GL_EXT_cmyka

  def self.get_ext_command_GL_EXT_cmyka
    [
    ]
  end # self.get_ext_command_GL_EXT_cmyka


  def self.define_ext_command_GL_EXT_color_subtable
    GL::GL_FUNCTION_SYMBOLS << :ColorSubTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorSubTableEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorSubTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorSubTableEXT)
    GL.module_eval(<<-SRC)
      def self.ColorSubTableEXT(_target_, _start_, _count_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ColorSubTableEXT].call(_target_, _start_, _count_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyColorSubTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyColorSubTableEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyColorSubTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyColorSubTableEXT)
    GL.module_eval(<<-SRC)
      def self.CopyColorSubTableEXT(_target_, _start_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyColorSubTableEXT].call(_target_, _start_, _x_, _y_, _width_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_color_subtable

  def self.get_ext_command_GL_EXT_color_subtable
    [
      'ColorSubTableEXT',
      'CopyColorSubTableEXT',
    ]
  end # self.get_ext_command_GL_EXT_color_subtable


  def self.define_ext_command_GL_EXT_compiled_vertex_array
    GL::GL_FUNCTION_SYMBOLS << :LockArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:LockArraysEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LockArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:LockArraysEXT)
    GL.module_eval(<<-SRC)
      def self.LockArraysEXT(_first_, _count_)
        GL_FUNCTIONS_MAP[:LockArraysEXT].call(_first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UnlockArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:UnlockArraysEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:UnlockArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:UnlockArraysEXT)
    GL.module_eval(<<-SRC)
      def self.UnlockArraysEXT()
        GL_FUNCTIONS_MAP[:UnlockArraysEXT].call()
      end
    SRC
  end # self.define_ext_command_GL_EXT_compiled_vertex_array

  def self.get_ext_command_GL_EXT_compiled_vertex_array
    [
      'LockArraysEXT',
      'UnlockArraysEXT',
    ]
  end # self.get_ext_command_GL_EXT_compiled_vertex_array


  def self.define_ext_command_GL_EXT_convolution
    GL::GL_FUNCTION_SYMBOLS << :ConvolutionFilter1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionFilter1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionFilter1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionFilter1DEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter1DEXT(_target_, _internalformat_, _width_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:ConvolutionFilter1DEXT].call(_target_, _internalformat_, _width_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionFilter2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionFilter2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionFilter2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionFilter2DEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter2DEXT(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:ConvolutionFilter2DEXT].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterfEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterfEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameteriEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameteriEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyConvolutionFilter1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyConvolutionFilter1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyConvolutionFilter1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyConvolutionFilter1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter1DEXT(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyConvolutionFilter1DEXT].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyConvolutionFilter2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyConvolutionFilter2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyConvolutionFilter2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyConvolutionFilter2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter2DEXT(_target_, _internalformat_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyConvolutionFilter2DEXT].call(_target_, _internalformat_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionFilterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionFilterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionFilterEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionFilterEXT)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionFilterEXT(_target_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:GetConvolutionFilterEXT].call(_target_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetConvolutionParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetConvolutionParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSeparableFilterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSeparableFilterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSeparableFilterEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSeparableFilterEXT)
    GL.module_eval(<<-SRC)
      def self.GetSeparableFilterEXT(_target_, _format_, _type_, _row_, _column_, _span_)
        GL_FUNCTIONS_MAP[:GetSeparableFilterEXT].call(_target_, _format_, _type_, _row_, _column_, _span_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SeparableFilter2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SeparableFilter2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SeparableFilter2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SeparableFilter2DEXT)
    GL.module_eval(<<-SRC)
      def self.SeparableFilter2DEXT(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
        GL_FUNCTIONS_MAP[:SeparableFilter2DEXT].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_convolution

  def self.get_ext_command_GL_EXT_convolution
    [
      'ConvolutionFilter1DEXT',
      'ConvolutionFilter2DEXT',
      'ConvolutionParameterfEXT',
      'ConvolutionParameterfvEXT',
      'ConvolutionParameteriEXT',
      'ConvolutionParameterivEXT',
      'CopyConvolutionFilter1DEXT',
      'CopyConvolutionFilter2DEXT',
      'GetConvolutionFilterEXT',
      'GetConvolutionParameterfvEXT',
      'GetConvolutionParameterivEXT',
      'GetSeparableFilterEXT',
      'SeparableFilter2DEXT',
    ]
  end # self.get_ext_command_GL_EXT_convolution


  def self.define_ext_command_GL_EXT_coordinate_frame
    GL::GL_FUNCTION_SYMBOLS << :Tangent3bEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3bEXT] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3bEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3bEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3bEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:Tangent3bEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3bvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3bvEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3bvEXT(_v_)
        GL_FUNCTIONS_MAP[:Tangent3bvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3dEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3dEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3dEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:Tangent3dEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3dvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3dvEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3dvEXT(_v_)
        GL_FUNCTIONS_MAP[:Tangent3dvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3fEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3fEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3fEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:Tangent3fEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3fvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3fvEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3fvEXT(_v_)
        GL_FUNCTIONS_MAP[:Tangent3fvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3iEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3iEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3iEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:Tangent3iEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3ivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3ivEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3ivEXT(_v_)
        GL_FUNCTIONS_MAP[:Tangent3ivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3sEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3sEXT] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3sEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3sEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3sEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:Tangent3sEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Tangent3svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Tangent3svEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Tangent3svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Tangent3svEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3svEXT(_v_)
        GL_FUNCTIONS_MAP[:Tangent3svEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3bEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3bEXT] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3bEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3bEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3bEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:Binormal3bEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3bvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3bvEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3bvEXT(_v_)
        GL_FUNCTIONS_MAP[:Binormal3bvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3dEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3dEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3dEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:Binormal3dEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3dvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3dvEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3dvEXT(_v_)
        GL_FUNCTIONS_MAP[:Binormal3dvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3fEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3fEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3fEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:Binormal3fEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3fvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3fvEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3fvEXT(_v_)
        GL_FUNCTIONS_MAP[:Binormal3fvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3iEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3iEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3iEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:Binormal3iEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3ivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3ivEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3ivEXT(_v_)
        GL_FUNCTIONS_MAP[:Binormal3ivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3sEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3sEXT] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3sEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3sEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3sEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:Binormal3sEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Binormal3svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Binormal3svEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Binormal3svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Binormal3svEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3svEXT(_v_)
        GL_FUNCTIONS_MAP[:Binormal3svEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TangentPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TangentPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TangentPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TangentPointerEXT)
    GL.module_eval(<<-SRC)
      def self.TangentPointerEXT(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:TangentPointerEXT].call(_type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BinormalPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BinormalPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BinormalPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BinormalPointerEXT)
    GL.module_eval(<<-SRC)
      def self.BinormalPointerEXT(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:BinormalPointerEXT].call(_type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_coordinate_frame

  def self.get_ext_command_GL_EXT_coordinate_frame
    [
      'Tangent3bEXT',
      'Tangent3bvEXT',
      'Tangent3dEXT',
      'Tangent3dvEXT',
      'Tangent3fEXT',
      'Tangent3fvEXT',
      'Tangent3iEXT',
      'Tangent3ivEXT',
      'Tangent3sEXT',
      'Tangent3svEXT',
      'Binormal3bEXT',
      'Binormal3bvEXT',
      'Binormal3dEXT',
      'Binormal3dvEXT',
      'Binormal3fEXT',
      'Binormal3fvEXT',
      'Binormal3iEXT',
      'Binormal3ivEXT',
      'Binormal3sEXT',
      'Binormal3svEXT',
      'TangentPointerEXT',
      'BinormalPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_coordinate_frame


  def self.define_ext_command_GL_EXT_copy_texture
    GL::GL_FUNCTION_SYMBOLS << :CopyTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTexImage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexImage1DEXT(_target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
        GL_FUNCTIONS_MAP[:CopyTexImage1DEXT].call(_target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTexImage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexImage2DEXT(_target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
        GL_FUNCTIONS_MAP[:CopyTexImage2DEXT].call(_target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTexSubImage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexSubImage1DEXT(_target_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyTexSubImage1DEXT].call(_target_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTexSubImage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexSubImage2DEXT(_target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyTexSubImage2DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTexSubImage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexSubImage3DEXT(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyTexSubImage3DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_copy_texture

  def self.get_ext_command_GL_EXT_copy_texture
    [
      'CopyTexImage1DEXT',
      'CopyTexImage2DEXT',
      'CopyTexSubImage1DEXT',
      'CopyTexSubImage2DEXT',
      'CopyTexSubImage3DEXT',
    ]
  end # self.get_ext_command_GL_EXT_copy_texture


  def self.define_ext_command_GL_EXT_cull_vertex
    GL::GL_FUNCTION_SYMBOLS << :CullParameterdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CullParameterdvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CullParameterdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CullParameterdvEXT)
    GL.module_eval(<<-SRC)
      def self.CullParameterdvEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:CullParameterdvEXT].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CullParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CullParameterfvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CullParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CullParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.CullParameterfvEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:CullParameterfvEXT].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_cull_vertex

  def self.get_ext_command_GL_EXT_cull_vertex
    [
      'CullParameterdvEXT',
      'CullParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_cull_vertex


  def self.define_ext_command_GL_EXT_debug_label
    GL::GL_FUNCTION_SYMBOLS << :LabelObjectEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:LabelObjectEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LabelObjectEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:LabelObjectEXT)
    GL.module_eval(<<-SRC)
      def self.LabelObjectEXT(_type_, _object_, _length_, _label_)
        GL_FUNCTIONS_MAP[:LabelObjectEXT].call(_type_, _object_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectLabelEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectLabelEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectLabelEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectLabelEXT)
    GL.module_eval(<<-SRC)
      def self.GetObjectLabelEXT(_type_, _object_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:GetObjectLabelEXT].call(_type_, _object_, _bufSize_, _length_, _label_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_debug_label

  def self.get_ext_command_GL_EXT_debug_label
    [
      'LabelObjectEXT',
      'GetObjectLabelEXT',
    ]
  end # self.get_ext_command_GL_EXT_debug_label


  def self.define_ext_command_GL_EXT_debug_marker
    GL::GL_FUNCTION_SYMBOLS << :InsertEventMarkerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:InsertEventMarkerEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InsertEventMarkerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:InsertEventMarkerEXT)
    GL.module_eval(<<-SRC)
      def self.InsertEventMarkerEXT(_length_, _marker_)
        GL_FUNCTIONS_MAP[:InsertEventMarkerEXT].call(_length_, _marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PushGroupMarkerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PushGroupMarkerEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PushGroupMarkerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PushGroupMarkerEXT)
    GL.module_eval(<<-SRC)
      def self.PushGroupMarkerEXT(_length_, _marker_)
        GL_FUNCTIONS_MAP[:PushGroupMarkerEXT].call(_length_, _marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PopGroupMarkerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PopGroupMarkerEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:PopGroupMarkerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PopGroupMarkerEXT)
    GL.module_eval(<<-SRC)
      def self.PopGroupMarkerEXT()
        GL_FUNCTIONS_MAP[:PopGroupMarkerEXT].call()
      end
    SRC
  end # self.define_ext_command_GL_EXT_debug_marker

  def self.get_ext_command_GL_EXT_debug_marker
    [
      'InsertEventMarkerEXT',
      'PushGroupMarkerEXT',
      'PopGroupMarkerEXT',
    ]
  end # self.get_ext_command_GL_EXT_debug_marker


  def self.define_ext_command_GL_EXT_depth_bounds_test
    GL::GL_FUNCTION_SYMBOLS << :DepthBoundsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthBoundsEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthBoundsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthBoundsEXT)
    GL.module_eval(<<-SRC)
      def self.DepthBoundsEXT(_zmin_, _zmax_)
        GL_FUNCTIONS_MAP[:DepthBoundsEXT].call(_zmin_, _zmax_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_depth_bounds_test

  def self.get_ext_command_GL_EXT_depth_bounds_test
    [
      'DepthBoundsEXT',
    ]
  end # self.get_ext_command_GL_EXT_depth_bounds_test


  def self.define_ext_command_GL_EXT_direct_state_access
    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoaddEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoaddEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoaddEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoaddEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoaddEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoaddEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultdEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultdEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultdEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultdEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadIdentityEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadIdentityEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadIdentityEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadIdentityEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadIdentityEXT(_mode_)
        GL_FUNCTIONS_MAP[:MatrixLoadIdentityEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixRotatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixRotatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixRotatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixRotatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatefEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixRotatefEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixRotatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixRotatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixRotatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixRotatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatedEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixRotatedEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixScalefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixScalefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixScalefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixScalefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScalefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixScalefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixScaledEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixScaledEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixScaledEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixScaledEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScaledEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixScaledEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixTranslatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixTranslatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixTranslatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixTranslatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixTranslatefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixTranslatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixTranslatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixTranslatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixTranslatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatedEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixTranslatedEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixFrustumEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixFrustumEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixFrustumEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixFrustumEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixFrustumEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:MatrixFrustumEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixOrthoEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixOrthoEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixOrthoEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixOrthoEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixOrthoEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:MatrixOrthoEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixPopEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixPopEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixPopEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixPopEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPopEXT(_mode_)
        GL_FUNCTIONS_MAP[:MatrixPopEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixPushEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixPushEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixPushEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixPushEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPushEXT(_mode_)
        GL_FUNCTIONS_MAP[:MatrixPushEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClientAttribDefaultEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ClientAttribDefaultEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClientAttribDefaultEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ClientAttribDefaultEXT)
    GL.module_eval(<<-SRC)
      def self.ClientAttribDefaultEXT(_mask_)
        GL_FUNCTIONS_MAP[:ClientAttribDefaultEXT].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PushClientAttribDefaultEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PushClientAttribDefaultEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PushClientAttribDefaultEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PushClientAttribDefaultEXT)
    GL.module_eval(<<-SRC)
      def self.PushClientAttribDefaultEXT(_mask_)
        GL_FUNCTIONS_MAP[:PushClientAttribDefaultEXT].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterfEXT(_texture_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TextureParameterfEXT].call(_texture_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterfvEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TextureParameterfvEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameteriEXT(_texture_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TextureParameteriEXT].call(_texture_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TextureParameterivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureImage1DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureImage1DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureImage2DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureImage2DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage1DEXT(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureSubImage1DEXT].call(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage2DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureSubImage2DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureImage1DEXT(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
        GL_FUNCTIONS_MAP[:CopyTextureImage1DEXT].call(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureImage2DEXT(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
        GL_FUNCTIONS_MAP[:CopyTextureImage2DEXT].call(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage1DEXT(_texture_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyTextureSubImage1DEXT].call(_texture_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage2DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyTextureSubImage2DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureImageEXT(_texture_, _target_, _level_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:GetTextureImageEXT].call(_texture_, _target_, _level_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterfvEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterfvEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureLevelParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureLevelParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureLevelParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureLevelParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameterfvEXT(_texture_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureLevelParameterfvEXT].call(_texture_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureLevelParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureLevelParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureLevelParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureLevelParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameterivEXT(_texture_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureLevelParameterivEXT].call(_texture_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureImage3DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureImage3DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage3DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TextureSubImage3DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyTextureSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyTextureSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyTextureSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyTextureSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage3DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyTextureSubImage3DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindMultiTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindMultiTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindMultiTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindMultiTextureEXT)
    GL.module_eval(<<-SRC)
      def self.BindMultiTextureEXT(_texunit_, _target_, _texture_)
        GL_FUNCTIONS_MAP[:BindMultiTextureEXT].call(_texunit_, _target_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoordPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoordPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoordPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoordPointerEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordPointerEXT(_texunit_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:MultiTexCoordPointerEXT].call(_texunit_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexEnvfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexEnvfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexEnvfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexEnvfEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnvfEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexEnvfEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexEnvfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexEnvfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexEnvfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexEnvfvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnvfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexEnvfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexEnviEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexEnviEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexEnviEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexEnviEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnviEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexEnviEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexEnvivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexEnvivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexEnvivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexEnvivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnvivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexEnvivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexGendEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexGendEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexGendEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexGendEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGendEXT(_texunit_, _coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexGendEXT].call(_texunit_, _coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexGendvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexGendvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexGendvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexGendvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGendvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexGendvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexGenfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexGenfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexGenfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexGenfEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGenfEXT(_texunit_, _coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexGenfEXT].call(_texunit_, _coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexGenfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexGenfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexGenfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexGenfvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGenfvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexGenfvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexGeniEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexGeniEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexGeniEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexGeniEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGeniEXT(_texunit_, _coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexGeniEXT].call(_texunit_, _coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexGenivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexGenivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexGenivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexGenivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGenivEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexGenivEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexEnvfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexEnvfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexEnvfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexEnvfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexEnvfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexEnvfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexEnvivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexEnvivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexEnvivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexEnvivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexEnvivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexEnvivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexGendvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexGendvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexGendvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexGendvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexGendvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexGendvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexGenfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexGenfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexGenfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexGenfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexGenfvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexGenfvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexGenivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexGenivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexGenivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexGenivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexGenivEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexGenivEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameteriEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexParameteriEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexParameterivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterfEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MultiTexParameterfEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexParameterfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexImage1DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:MultiTexImage1DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexImage2DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:MultiTexImage2DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexSubImage1DEXT(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:MultiTexSubImage1DEXT].call(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexSubImage2DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:MultiTexSubImage2DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyMultiTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyMultiTexImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyMultiTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyMultiTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexImage1DEXT(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
        GL_FUNCTIONS_MAP[:CopyMultiTexImage1DEXT].call(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyMultiTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyMultiTexImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyMultiTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyMultiTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexImage2DEXT(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
        GL_FUNCTIONS_MAP[:CopyMultiTexImage2DEXT].call(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyMultiTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyMultiTexSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyMultiTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyMultiTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexSubImage1DEXT(_texunit_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyMultiTexSubImage1DEXT].call(_texunit_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyMultiTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyMultiTexSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyMultiTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyMultiTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexSubImage2DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyMultiTexSubImage2DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexImageEXT(_texunit_, _target_, _level_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:GetMultiTexImageEXT].call(_texunit_, _target_, _level_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexParameterfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexParameterivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexLevelParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexLevelParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexLevelParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexLevelParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexLevelParameterfvEXT(_texunit_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexLevelParameterfvEXT].call(_texunit_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexLevelParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexLevelParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexLevelParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexLevelParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexLevelParameterivEXT(_texunit_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexLevelParameterivEXT].call(_texunit_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexImage3DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:MultiTexImage3DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexSubImage3DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:MultiTexSubImage3DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyMultiTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyMultiTexSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyMultiTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyMultiTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexSubImage3DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:CopyMultiTexSubImage3DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableClientStateIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableClientStateIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableClientStateIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableClientStateIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.EnableClientStateIndexedEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:EnableClientStateIndexedEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableClientStateIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableClientStateIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableClientStateIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableClientStateIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.DisableClientStateIndexedEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:DisableClientStateIndexedEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFloatIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFloatIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFloatIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFloatIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetFloatIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetFloatIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDoubleIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDoubleIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDoubleIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetDoubleIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetDoubleIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetDoubleIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPointerIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPointerIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPointerIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPointerIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetPointerIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetPointerIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.EnableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:EnableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.DisableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:DisableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsEnabledIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsEnabledIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsEnabledIndexedEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsEnabledIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.IsEnabledIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:IsEnabledIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetIntegerIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetIntegerIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetIntegerIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetIntegerIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetIntegerIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetIntegerIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetBooleanIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetBooleanIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetBooleanIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetBooleanIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetBooleanIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetBooleanIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureImage3DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedTextureImage3DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureImage2DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedTextureImage2DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureImage1DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedTextureImage1DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage3DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedTextureSubImage3DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage2DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedTextureSubImage2DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedTextureSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedTextureSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedTextureSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedTextureSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage1DEXT(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedTextureSubImage1DEXT].call(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCompressedTextureImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCompressedTextureImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCompressedTextureImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCompressedTextureImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTextureImageEXT(_texture_, _target_, _lod_, _img_)
        GL_FUNCTIONS_MAP[:GetCompressedTextureImageEXT].call(_texture_, _target_, _lod_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedMultiTexImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedMultiTexImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedMultiTexImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedMultiTexImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexImage3DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedMultiTexImage3DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedMultiTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedMultiTexImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedMultiTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedMultiTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexImage2DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedMultiTexImage2DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedMultiTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedMultiTexImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedMultiTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedMultiTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexImage1DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedMultiTexImage1DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedMultiTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedMultiTexSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedMultiTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedMultiTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexSubImage3DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedMultiTexSubImage3DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedMultiTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedMultiTexSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedMultiTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedMultiTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexSubImage2DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedMultiTexSubImage2DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompressedMultiTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CompressedMultiTexSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompressedMultiTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CompressedMultiTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexSubImage1DEXT(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:CompressedMultiTexSubImage1DEXT].call(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCompressedMultiTexImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCompressedMultiTexImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCompressedMultiTexImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCompressedMultiTexImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetCompressedMultiTexImageEXT(_texunit_, _target_, _lod_, _img_)
        GL_FUNCTIONS_MAP[:GetCompressedMultiTexImageEXT].call(_texunit_, _target_, _lod_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferDataEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferDataEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferDataEXT(_buffer_, _size_, _data_, _usage_)
        GL_FUNCTIONS_MAP[:NamedBufferDataEXT].call(_buffer_, _size_, _data_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferSubDataEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferSubDataEXT(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:NamedBufferSubDataEXT].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapNamedBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MapNamedBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapNamedBufferEXT] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapNamedBufferEXT)
    GL.module_eval(<<-SRC)
      def self.MapNamedBufferEXT(_buffer_, _access_)
        GL_FUNCTIONS_MAP[:MapNamedBufferEXT].call(_buffer_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UnmapNamedBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:UnmapNamedBufferEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UnmapNamedBufferEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:UnmapNamedBufferEXT)
    GL.module_eval(<<-SRC)
      def self.UnmapNamedBufferEXT(_buffer_)
        GL_FUNCTIONS_MAP[:UnmapNamedBufferEXT].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameterivEXT(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedBufferParameterivEXT].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferPointervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferPointervEXT(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedBufferPointervEXT].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferSubDataEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferSubDataEXT(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:GetNamedBufferSubDataEXT].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1fEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2fEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3fEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4fEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1iEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1iEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2iEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2iEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3iEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3iEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4iEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4iEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureBufferEXT)
    GL.module_eval(<<-SRC)
      def self.TextureBufferEXT(_texture_, _target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:TextureBufferEXT].call(_texture_, _target_, _internalformat_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexBufferEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexBufferEXT(_texunit_, _target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:MultiTexBufferEXT].call(_texunit_, _target_, _internalformat_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TextureParameterIivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIuivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TextureParameterIuivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterIivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTextureParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIuivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTextureParameterIuivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterIivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexParameterIivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterIuivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MultiTexParameterIuivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterIivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexParameterIivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMultiTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultiTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultiTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultiTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterIuivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMultiTexParameterIuivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uiEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1uiEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uiEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2uiEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uiEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uiEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameters4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameters4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameters4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameters4fvEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameters4fvEXT(_program_, _target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameters4fvEXT].call(_program_, _target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameterI4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameterI4iEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameterI4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameterI4iEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4iEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameterI4iEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameterI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameterI4ivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameterI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameterI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4ivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameterI4ivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParametersI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParametersI4ivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParametersI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParametersI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParametersI4ivEXT(_program_, _target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParametersI4ivEXT].call(_program_, _target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameterI4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameterI4uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameterI4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameterI4uiEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4uiEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameterI4uiEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameterI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameterI4uivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameterI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameterI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4uivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameterI4uivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParametersI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParametersI4uivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParametersI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParametersI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParametersI4uivEXT(_program_, _target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParametersI4uivEXT].call(_program_, _target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedProgramLocalParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedProgramLocalParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedProgramLocalParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedProgramLocalParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterIivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedProgramLocalParameterIivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedProgramLocalParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedProgramLocalParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedProgramLocalParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedProgramLocalParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterIuivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedProgramLocalParameterIuivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableClientStateiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableClientStateiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableClientStateiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableClientStateiEXT)
    GL.module_eval(<<-SRC)
      def self.EnableClientStateiEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:EnableClientStateiEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableClientStateiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableClientStateiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableClientStateiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableClientStateiEXT)
    GL.module_eval(<<-SRC)
      def self.DisableClientStateiEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:DisableClientStateiEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFloati_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFloati_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFloati_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFloati_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetFloati_vEXT(_pname_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetFloati_vEXT].call(_pname_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDoublei_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDoublei_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDoublei_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetDoublei_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetDoublei_vEXT(_pname_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetDoublei_vEXT].call(_pname_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPointeri_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPointeri_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPointeri_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPointeri_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetPointeri_vEXT(_pname_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetPointeri_vEXT].call(_pname_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramStringEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramStringEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramStringEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramStringEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramStringEXT(_program_, _target_, _format_, _len_, _string_)
        GL_FUNCTIONS_MAP[:NamedProgramStringEXT].call(_program_, _target_, _format_, _len_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameter4dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameter4dEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameter4dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameter4dEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4dEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameter4dEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameter4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameter4dvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameter4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameter4dvEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4dvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameter4dvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameter4fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameter4fEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameter4fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameter4fEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4fEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameter4fEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedProgramLocalParameter4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedProgramLocalParameter4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedProgramLocalParameter4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedProgramLocalParameter4fvEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4fvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:NamedProgramLocalParameter4fvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedProgramLocalParameterdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedProgramLocalParameterdvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedProgramLocalParameterdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedProgramLocalParameterdvEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterdvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedProgramLocalParameterdvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedProgramLocalParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedProgramLocalParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedProgramLocalParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedProgramLocalParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterfvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedProgramLocalParameterfvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedProgramivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedProgramivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedProgramivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedProgramivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramivEXT(_program_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedProgramivEXT].call(_program_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedProgramStringEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedProgramStringEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedProgramStringEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedProgramStringEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramStringEXT(_program_, _target_, _pname_, _string_)
        GL_FUNCTIONS_MAP[:GetNamedProgramStringEXT].call(_program_, _target_, _pname_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedRenderbufferStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedRenderbufferStorageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedRenderbufferStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedRenderbufferStorageEXT)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageEXT(_renderbuffer_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:NamedRenderbufferStorageEXT].call(_renderbuffer_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedRenderbufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedRenderbufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedRenderbufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedRenderbufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedRenderbufferParameterivEXT(_renderbuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedRenderbufferParameterivEXT].call(_renderbuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedRenderbufferStorageMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedRenderbufferStorageMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedRenderbufferStorageMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedRenderbufferStorageMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisampleEXT(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:NamedRenderbufferStorageMultisampleEXT].call(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedRenderbufferStorageMultisampleCoverageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedRenderbufferStorageMultisampleCoverageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedRenderbufferStorageMultisampleCoverageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedRenderbufferStorageMultisampleCoverageEXT)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisampleCoverageEXT(_renderbuffer_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:NamedRenderbufferStorageMultisampleCoverageEXT].call(_renderbuffer_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CheckNamedFramebufferStatusEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CheckNamedFramebufferStatusEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CheckNamedFramebufferStatusEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:CheckNamedFramebufferStatusEXT)
    GL.module_eval(<<-SRC)
      def self.CheckNamedFramebufferStatusEXT(_framebuffer_, _target_)
        GL_FUNCTIONS_MAP[:CheckNamedFramebufferStatusEXT].call(_framebuffer_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTexture1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTexture1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTexture1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTexture1DEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture1DEXT(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTexture1DEXT].call(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTexture2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTexture2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTexture2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTexture2DEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture2DEXT(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTexture2DEXT].call(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTexture3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTexture3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTexture3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTexture3DEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture3DEXT(_framebuffer_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTexture3DEXT].call(_framebuffer_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferRenderbufferEXT(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:NamedFramebufferRenderbufferEXT].call(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedFramebufferAttachmentParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedFramebufferAttachmentParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedFramebufferAttachmentParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedFramebufferAttachmentParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferAttachmentParameterivEXT(_framebuffer_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedFramebufferAttachmentParameterivEXT].call(_framebuffer_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenerateTextureMipmapEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenerateTextureMipmapEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenerateTextureMipmapEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenerateTextureMipmapEXT)
    GL.module_eval(<<-SRC)
      def self.GenerateTextureMipmapEXT(_texture_, _target_)
        GL_FUNCTIONS_MAP[:GenerateTextureMipmapEXT].call(_texture_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenerateMultiTexMipmapEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenerateMultiTexMipmapEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenerateMultiTexMipmapEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenerateMultiTexMipmapEXT)
    GL.module_eval(<<-SRC)
      def self.GenerateMultiTexMipmapEXT(_texunit_, _target_)
        GL_FUNCTIONS_MAP[:GenerateMultiTexMipmapEXT].call(_texunit_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferDrawBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferDrawBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferDrawBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferDrawBufferEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferDrawBufferEXT(_framebuffer_, _mode_)
        GL_FUNCTIONS_MAP[:FramebufferDrawBufferEXT].call(_framebuffer_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferDrawBuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferDrawBuffersEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferDrawBuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferDrawBuffersEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferDrawBuffersEXT(_framebuffer_, _n_, _bufs_)
        GL_FUNCTIONS_MAP[:FramebufferDrawBuffersEXT].call(_framebuffer_, _n_, _bufs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferReadBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferReadBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferReadBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferReadBufferEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferReadBufferEXT(_framebuffer_, _mode_)
        GL_FUNCTIONS_MAP[:FramebufferReadBufferEXT].call(_framebuffer_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFramebufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFramebufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFramebufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFramebufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameterivEXT(_framebuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFramebufferParameterivEXT].call(_framebuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedCopyBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedCopyBufferSubDataEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedCopyBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedCopyBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.NamedCopyBufferSubDataEXT(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:NamedCopyBufferSubDataEXT].call(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTextureEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureEXT(_framebuffer_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTextureEXT].call(_framebuffer_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTextureLayerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTextureLayerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTextureLayerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTextureLayerEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureLayerEXT(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTextureLayerEXT].call(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferTextureFaceEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferTextureFaceEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferTextureFaceEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferTextureFaceEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureFaceEXT(_framebuffer_, _attachment_, _texture_, _level_, _face_)
        GL_FUNCTIONS_MAP[:NamedFramebufferTextureFaceEXT].call(_framebuffer_, _attachment_, _texture_, _level_, _face_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.TextureRenderbufferEXT(_texture_, _target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:TextureRenderbufferEXT].call(_texture_, _target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexRenderbufferEXT(_texunit_, _target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:MultiTexRenderbufferEXT].call(_texunit_, _target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayColorOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayColorOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayColorOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayColorOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayColorOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayColorOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayEdgeFlagOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayEdgeFlagOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayEdgeFlagOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayEdgeFlagOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayEdgeFlagOffsetEXT(_vaobj_, _buffer_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayEdgeFlagOffsetEXT].call(_vaobj_, _buffer_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayIndexOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayIndexOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayIndexOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayIndexOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayIndexOffsetEXT(_vaobj_, _buffer_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayIndexOffsetEXT].call(_vaobj_, _buffer_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayNormalOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayNormalOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayNormalOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayNormalOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayNormalOffsetEXT(_vaobj_, _buffer_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayNormalOffsetEXT].call(_vaobj_, _buffer_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayTexCoordOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayTexCoordOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayTexCoordOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayTexCoordOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayTexCoordOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayTexCoordOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayMultiTexCoordOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayMultiTexCoordOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayMultiTexCoordOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayMultiTexCoordOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayMultiTexCoordOffsetEXT(_vaobj_, _buffer_, _texunit_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayMultiTexCoordOffsetEXT].call(_vaobj_, _buffer_, _texunit_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayFogCoordOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayFogCoordOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayFogCoordOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayFogCoordOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayFogCoordOffsetEXT(_vaobj_, _buffer_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayFogCoordOffsetEXT].call(_vaobj_, _buffer_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArraySecondaryColorOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArraySecondaryColorOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArraySecondaryColorOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArraySecondaryColorOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArraySecondaryColorOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArraySecondaryColorOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribOffsetEXT(_vaobj_, _buffer_, _index_, _size_, _type_, _normalized_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribOffsetEXT].call(_vaobj_, _buffer_, _index_, _size_, _type_, _normalized_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribIOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribIOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribIOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribIOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribIOffsetEXT(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribIOffsetEXT].call(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableVertexArrayEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVertexArrayEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVertexArrayEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVertexArrayEXT)
    GL.module_eval(<<-SRC)
      def self.EnableVertexArrayEXT(_vaobj_, _array_)
        GL_FUNCTIONS_MAP[:EnableVertexArrayEXT].call(_vaobj_, _array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVertexArrayEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVertexArrayEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVertexArrayEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVertexArrayEXT)
    GL.module_eval(<<-SRC)
      def self.DisableVertexArrayEXT(_vaobj_, _array_)
        GL_FUNCTIONS_MAP[:DisableVertexArrayEXT].call(_vaobj_, _array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableVertexArrayAttribEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVertexArrayAttribEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVertexArrayAttribEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVertexArrayAttribEXT)
    GL.module_eval(<<-SRC)
      def self.EnableVertexArrayAttribEXT(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:EnableVertexArrayAttribEXT].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVertexArrayAttribEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVertexArrayAttribEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVertexArrayAttribEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVertexArrayAttribEXT)
    GL.module_eval(<<-SRC)
      def self.DisableVertexArrayAttribEXT(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:DisableVertexArrayAttribEXT].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIntegervEXT(_vaobj_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayIntegervEXT].call(_vaobj_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayPointervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayPointervEXT(_vaobj_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayPointervEXT].call(_vaobj_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayIntegeri_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayIntegeri_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayIntegeri_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayIntegeri_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIntegeri_vEXT(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayIntegeri_vEXT].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexArrayPointeri_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexArrayPointeri_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexArrayPointeri_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexArrayPointeri_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayPointeri_vEXT(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetVertexArrayPointeri_vEXT].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapNamedBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MapNamedBufferRangeEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapNamedBufferRangeEXT] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapNamedBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.MapNamedBufferRangeEXT(_buffer_, _offset_, _length_, _access_)
        GL_FUNCTIONS_MAP[:MapNamedBufferRangeEXT].call(_buffer_, _offset_, _length_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FlushMappedNamedBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushMappedNamedBufferRangeEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushMappedNamedBufferRangeEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushMappedNamedBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.FlushMappedNamedBufferRangeEXT(_buffer_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:FlushMappedNamedBufferRangeEXT].call(_buffer_, _offset_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferStorageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferStorageEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorageEXT(_buffer_, _size_, _data_, _flags_)
        GL_FUNCTIONS_MAP[:NamedBufferStorageEXT].call(_buffer_, _size_, _data_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedBufferDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedBufferDataEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedBufferDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedBufferDataEXT)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferDataEXT(_buffer_, _internalformat_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearNamedBufferDataEXT].call(_buffer_, _internalformat_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearNamedBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearNamedBufferSubDataEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearNamedBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearNamedBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferSubDataEXT(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:ClearNamedBufferSubDataEXT].call(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferParameteriEXT(_framebuffer_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:NamedFramebufferParameteriEXT].call(_framebuffer_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedFramebufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedFramebufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedFramebufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedFramebufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferParameterivEXT(_framebuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedFramebufferParameterivEXT].call(_framebuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1dEXT(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1dEXT].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2dEXT(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2dEXT].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3dEXT(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3dEXT].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4dEXT(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4dEXT].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x3dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x4dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x2dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x4dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x2dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x3dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureBufferRangeEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureBufferRangeEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.TextureBufferRangeEXT(_texture_, _target_, _internalformat_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:TextureBufferRangeEXT].call(_texture_, _target_, _internalformat_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage1DEXT(_texture_, _target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:TextureStorage1DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:TextureStorage2DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:TextureStorage3DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage2DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage2DMultisampleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage2DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage2DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DMultisampleEXT(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TextureStorage2DMultisampleEXT].call(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage3DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage3DMultisampleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage3DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage3DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DMultisampleEXT(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:TextureStorage3DMultisampleEXT].call(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayBindVertexBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayBindVertexBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayBindVertexBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayBindVertexBufferEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayBindVertexBufferEXT(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
        GL_FUNCTIONS_MAP[:VertexArrayBindVertexBufferEXT].call(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribFormatEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribFormatEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribFormatEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribFormatEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribFormatEXT(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribFormatEXT].call(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribIFormatEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribIFormatEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribIFormatEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribIFormatEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribIFormatEXT(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribIFormatEXT].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribLFormatEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribLFormatEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribLFormatEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribLFormatEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribLFormatEXT(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribLFormatEXT].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribBindingEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribBindingEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribBindingEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribBindingEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribBindingEXT(_vaobj_, _attribindex_, _bindingindex_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribBindingEXT].call(_vaobj_, _attribindex_, _bindingindex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexBindingDivisorEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexBindingDivisorEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexBindingDivisorEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexBindingDivisorEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexBindingDivisorEXT(_vaobj_, _bindingindex_, _divisor_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexBindingDivisorEXT].call(_vaobj_, _bindingindex_, _divisor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribLOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribLOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribLOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribLOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribLOffsetEXT(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribLOffsetEXT].call(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexturePageCommitmentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexturePageCommitmentEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexturePageCommitmentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexturePageCommitmentEXT)
    GL.module_eval(<<-SRC)
      def self.TexturePageCommitmentEXT(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
        GL_FUNCTIONS_MAP[:TexturePageCommitmentEXT].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayVertexAttribDivisorEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayVertexAttribDivisorEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayVertexAttribDivisorEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayVertexAttribDivisorEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribDivisorEXT(_vaobj_, _index_, _divisor_)
        GL_FUNCTIONS_MAP[:VertexArrayVertexAttribDivisorEXT].call(_vaobj_, _index_, _divisor_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_direct_state_access

  def self.get_ext_command_GL_EXT_direct_state_access
    [
      'MatrixLoadfEXT',
      'MatrixLoaddEXT',
      'MatrixMultfEXT',
      'MatrixMultdEXT',
      'MatrixLoadIdentityEXT',
      'MatrixRotatefEXT',
      'MatrixRotatedEXT',
      'MatrixScalefEXT',
      'MatrixScaledEXT',
      'MatrixTranslatefEXT',
      'MatrixTranslatedEXT',
      'MatrixFrustumEXT',
      'MatrixOrthoEXT',
      'MatrixPopEXT',
      'MatrixPushEXT',
      'ClientAttribDefaultEXT',
      'PushClientAttribDefaultEXT',
      'TextureParameterfEXT',
      'TextureParameterfvEXT',
      'TextureParameteriEXT',
      'TextureParameterivEXT',
      'TextureImage1DEXT',
      'TextureImage2DEXT',
      'TextureSubImage1DEXT',
      'TextureSubImage2DEXT',
      'CopyTextureImage1DEXT',
      'CopyTextureImage2DEXT',
      'CopyTextureSubImage1DEXT',
      'CopyTextureSubImage2DEXT',
      'GetTextureImageEXT',
      'GetTextureParameterfvEXT',
      'GetTextureParameterivEXT',
      'GetTextureLevelParameterfvEXT',
      'GetTextureLevelParameterivEXT',
      'TextureImage3DEXT',
      'TextureSubImage3DEXT',
      'CopyTextureSubImage3DEXT',
      'BindMultiTextureEXT',
      'MultiTexCoordPointerEXT',
      'MultiTexEnvfEXT',
      'MultiTexEnvfvEXT',
      'MultiTexEnviEXT',
      'MultiTexEnvivEXT',
      'MultiTexGendEXT',
      'MultiTexGendvEXT',
      'MultiTexGenfEXT',
      'MultiTexGenfvEXT',
      'MultiTexGeniEXT',
      'MultiTexGenivEXT',
      'GetMultiTexEnvfvEXT',
      'GetMultiTexEnvivEXT',
      'GetMultiTexGendvEXT',
      'GetMultiTexGenfvEXT',
      'GetMultiTexGenivEXT',
      'MultiTexParameteriEXT',
      'MultiTexParameterivEXT',
      'MultiTexParameterfEXT',
      'MultiTexParameterfvEXT',
      'MultiTexImage1DEXT',
      'MultiTexImage2DEXT',
      'MultiTexSubImage1DEXT',
      'MultiTexSubImage2DEXT',
      'CopyMultiTexImage1DEXT',
      'CopyMultiTexImage2DEXT',
      'CopyMultiTexSubImage1DEXT',
      'CopyMultiTexSubImage2DEXT',
      'GetMultiTexImageEXT',
      'GetMultiTexParameterfvEXT',
      'GetMultiTexParameterivEXT',
      'GetMultiTexLevelParameterfvEXT',
      'GetMultiTexLevelParameterivEXT',
      'MultiTexImage3DEXT',
      'MultiTexSubImage3DEXT',
      'CopyMultiTexSubImage3DEXT',
      'EnableClientStateIndexedEXT',
      'DisableClientStateIndexedEXT',
      'GetFloatIndexedvEXT',
      'GetDoubleIndexedvEXT',
      'GetPointerIndexedvEXT',
      'EnableIndexedEXT',
      'DisableIndexedEXT',
      'IsEnabledIndexedEXT',
      'GetIntegerIndexedvEXT',
      'GetBooleanIndexedvEXT',
      'CompressedTextureImage3DEXT',
      'CompressedTextureImage2DEXT',
      'CompressedTextureImage1DEXT',
      'CompressedTextureSubImage3DEXT',
      'CompressedTextureSubImage2DEXT',
      'CompressedTextureSubImage1DEXT',
      'GetCompressedTextureImageEXT',
      'CompressedMultiTexImage3DEXT',
      'CompressedMultiTexImage2DEXT',
      'CompressedMultiTexImage1DEXT',
      'CompressedMultiTexSubImage3DEXT',
      'CompressedMultiTexSubImage2DEXT',
      'CompressedMultiTexSubImage1DEXT',
      'GetCompressedMultiTexImageEXT',
      'MatrixLoadTransposefEXT',
      'MatrixLoadTransposedEXT',
      'MatrixMultTransposefEXT',
      'MatrixMultTransposedEXT',
      'NamedBufferDataEXT',
      'NamedBufferSubDataEXT',
      'MapNamedBufferEXT',
      'UnmapNamedBufferEXT',
      'GetNamedBufferParameterivEXT',
      'GetNamedBufferPointervEXT',
      'GetNamedBufferSubDataEXT',
      'ProgramUniform1fEXT',
      'ProgramUniform2fEXT',
      'ProgramUniform3fEXT',
      'ProgramUniform4fEXT',
      'ProgramUniform1iEXT',
      'ProgramUniform2iEXT',
      'ProgramUniform3iEXT',
      'ProgramUniform4iEXT',
      'ProgramUniform1fvEXT',
      'ProgramUniform2fvEXT',
      'ProgramUniform3fvEXT',
      'ProgramUniform4fvEXT',
      'ProgramUniform1ivEXT',
      'ProgramUniform2ivEXT',
      'ProgramUniform3ivEXT',
      'ProgramUniform4ivEXT',
      'ProgramUniformMatrix2fvEXT',
      'ProgramUniformMatrix3fvEXT',
      'ProgramUniformMatrix4fvEXT',
      'ProgramUniformMatrix2x3fvEXT',
      'ProgramUniformMatrix3x2fvEXT',
      'ProgramUniformMatrix2x4fvEXT',
      'ProgramUniformMatrix4x2fvEXT',
      'ProgramUniformMatrix3x4fvEXT',
      'ProgramUniformMatrix4x3fvEXT',
      'TextureBufferEXT',
      'MultiTexBufferEXT',
      'TextureParameterIivEXT',
      'TextureParameterIuivEXT',
      'GetTextureParameterIivEXT',
      'GetTextureParameterIuivEXT',
      'MultiTexParameterIivEXT',
      'MultiTexParameterIuivEXT',
      'GetMultiTexParameterIivEXT',
      'GetMultiTexParameterIuivEXT',
      'ProgramUniform1uiEXT',
      'ProgramUniform2uiEXT',
      'ProgramUniform3uiEXT',
      'ProgramUniform4uiEXT',
      'ProgramUniform1uivEXT',
      'ProgramUniform2uivEXT',
      'ProgramUniform3uivEXT',
      'ProgramUniform4uivEXT',
      'NamedProgramLocalParameters4fvEXT',
      'NamedProgramLocalParameterI4iEXT',
      'NamedProgramLocalParameterI4ivEXT',
      'NamedProgramLocalParametersI4ivEXT',
      'NamedProgramLocalParameterI4uiEXT',
      'NamedProgramLocalParameterI4uivEXT',
      'NamedProgramLocalParametersI4uivEXT',
      'GetNamedProgramLocalParameterIivEXT',
      'GetNamedProgramLocalParameterIuivEXT',
      'EnableClientStateiEXT',
      'DisableClientStateiEXT',
      'GetFloati_vEXT',
      'GetDoublei_vEXT',
      'GetPointeri_vEXT',
      'NamedProgramStringEXT',
      'NamedProgramLocalParameter4dEXT',
      'NamedProgramLocalParameter4dvEXT',
      'NamedProgramLocalParameter4fEXT',
      'NamedProgramLocalParameter4fvEXT',
      'GetNamedProgramLocalParameterdvEXT',
      'GetNamedProgramLocalParameterfvEXT',
      'GetNamedProgramivEXT',
      'GetNamedProgramStringEXT',
      'NamedRenderbufferStorageEXT',
      'GetNamedRenderbufferParameterivEXT',
      'NamedRenderbufferStorageMultisampleEXT',
      'NamedRenderbufferStorageMultisampleCoverageEXT',
      'CheckNamedFramebufferStatusEXT',
      'NamedFramebufferTexture1DEXT',
      'NamedFramebufferTexture2DEXT',
      'NamedFramebufferTexture3DEXT',
      'NamedFramebufferRenderbufferEXT',
      'GetNamedFramebufferAttachmentParameterivEXT',
      'GenerateTextureMipmapEXT',
      'GenerateMultiTexMipmapEXT',
      'FramebufferDrawBufferEXT',
      'FramebufferDrawBuffersEXT',
      'FramebufferReadBufferEXT',
      'GetFramebufferParameterivEXT',
      'NamedCopyBufferSubDataEXT',
      'NamedFramebufferTextureEXT',
      'NamedFramebufferTextureLayerEXT',
      'NamedFramebufferTextureFaceEXT',
      'TextureRenderbufferEXT',
      'MultiTexRenderbufferEXT',
      'VertexArrayVertexOffsetEXT',
      'VertexArrayColorOffsetEXT',
      'VertexArrayEdgeFlagOffsetEXT',
      'VertexArrayIndexOffsetEXT',
      'VertexArrayNormalOffsetEXT',
      'VertexArrayTexCoordOffsetEXT',
      'VertexArrayMultiTexCoordOffsetEXT',
      'VertexArrayFogCoordOffsetEXT',
      'VertexArraySecondaryColorOffsetEXT',
      'VertexArrayVertexAttribOffsetEXT',
      'VertexArrayVertexAttribIOffsetEXT',
      'EnableVertexArrayEXT',
      'DisableVertexArrayEXT',
      'EnableVertexArrayAttribEXT',
      'DisableVertexArrayAttribEXT',
      'GetVertexArrayIntegervEXT',
      'GetVertexArrayPointervEXT',
      'GetVertexArrayIntegeri_vEXT',
      'GetVertexArrayPointeri_vEXT',
      'MapNamedBufferRangeEXT',
      'FlushMappedNamedBufferRangeEXT',
      'NamedBufferStorageEXT',
      'ClearNamedBufferDataEXT',
      'ClearNamedBufferSubDataEXT',
      'NamedFramebufferParameteriEXT',
      'GetNamedFramebufferParameterivEXT',
      'ProgramUniform1dEXT',
      'ProgramUniform2dEXT',
      'ProgramUniform3dEXT',
      'ProgramUniform4dEXT',
      'ProgramUniform1dvEXT',
      'ProgramUniform2dvEXT',
      'ProgramUniform3dvEXT',
      'ProgramUniform4dvEXT',
      'ProgramUniformMatrix2dvEXT',
      'ProgramUniformMatrix3dvEXT',
      'ProgramUniformMatrix4dvEXT',
      'ProgramUniformMatrix2x3dvEXT',
      'ProgramUniformMatrix2x4dvEXT',
      'ProgramUniformMatrix3x2dvEXT',
      'ProgramUniformMatrix3x4dvEXT',
      'ProgramUniformMatrix4x2dvEXT',
      'ProgramUniformMatrix4x3dvEXT',
      'TextureBufferRangeEXT',
      'TextureStorage1DEXT',
      'TextureStorage2DEXT',
      'TextureStorage3DEXT',
      'TextureStorage2DMultisampleEXT',
      'TextureStorage3DMultisampleEXT',
      'VertexArrayBindVertexBufferEXT',
      'VertexArrayVertexAttribFormatEXT',
      'VertexArrayVertexAttribIFormatEXT',
      'VertexArrayVertexAttribLFormatEXT',
      'VertexArrayVertexAttribBindingEXT',
      'VertexArrayVertexBindingDivisorEXT',
      'VertexArrayVertexAttribLOffsetEXT',
      'TexturePageCommitmentEXT',
      'VertexArrayVertexAttribDivisorEXT',
    ]
  end # self.get_ext_command_GL_EXT_direct_state_access


  def self.define_ext_command_GL_EXT_draw_buffers2
    GL::GL_FUNCTION_SYMBOLS << :ColorMaskIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorMaskIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorMaskIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorMaskIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.ColorMaskIndexedEXT(_index_, _r_, _g_, _b_, _a_)
        GL_FUNCTIONS_MAP[:ColorMaskIndexedEXT].call(_index_, _r_, _g_, _b_, _a_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetBooleanIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetBooleanIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetBooleanIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetBooleanIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetBooleanIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetBooleanIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetIntegerIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetIntegerIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetIntegerIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetIntegerIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetIntegerIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetIntegerIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.EnableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:EnableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.DisableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:DisableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsEnabledIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsEnabledIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsEnabledIndexedEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsEnabledIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.IsEnabledIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:IsEnabledIndexedEXT].call(_target_, _index_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_draw_buffers2

  def self.get_ext_command_GL_EXT_draw_buffers2
    [
      'ColorMaskIndexedEXT',
      'GetBooleanIndexedvEXT',
      'GetIntegerIndexedvEXT',
      'EnableIndexedEXT',
      'DisableIndexedEXT',
      'IsEnabledIndexedEXT',
    ]
  end # self.get_ext_command_GL_EXT_draw_buffers2


  def self.define_ext_command_GL_EXT_draw_instanced
    GL::GL_FUNCTION_SYMBOLS << :DrawArraysInstancedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawArraysInstancedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawArraysInstancedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawArraysInstancedEXT)
    GL.module_eval(<<-SRC)
      def self.DrawArraysInstancedEXT(_mode_, _start_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:DrawArraysInstancedEXT].call(_mode_, _start_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawElementsInstancedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawElementsInstancedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawElementsInstancedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawElementsInstancedEXT)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedEXT(_mode_, _count_, _type_, _indices_, _primcount_)
        GL_FUNCTIONS_MAP[:DrawElementsInstancedEXT].call(_mode_, _count_, _type_, _indices_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_draw_instanced

  def self.get_ext_command_GL_EXT_draw_instanced
    [
      'DrawArraysInstancedEXT',
      'DrawElementsInstancedEXT',
    ]
  end # self.get_ext_command_GL_EXT_draw_instanced


  def self.define_ext_command_GL_EXT_draw_range_elements
    GL::GL_FUNCTION_SYMBOLS << :DrawRangeElementsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawRangeElementsEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawRangeElementsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawRangeElementsEXT)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementsEXT(_mode_, _start_, _end_, _count_, _type_, _indices_)
        GL_FUNCTIONS_MAP[:DrawRangeElementsEXT].call(_mode_, _start_, _end_, _count_, _type_, _indices_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_draw_range_elements

  def self.get_ext_command_GL_EXT_draw_range_elements
    [
      'DrawRangeElementsEXT',
    ]
  end # self.get_ext_command_GL_EXT_draw_range_elements


  def self.define_ext_command_GL_EXT_external_buffer
    GL::GL_FUNCTION_SYMBOLS << :BufferStorageExternalEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferStorageExternalEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferStorageExternalEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferStorageExternalEXT)
    GL.module_eval(<<-SRC)
      def self.BufferStorageExternalEXT(_target_, _offset_, _size_, _clientBuffer_, _flags_)
        GL_FUNCTIONS_MAP[:BufferStorageExternalEXT].call(_target_, _offset_, _size_, _clientBuffer_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferStorageExternalEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferStorageExternalEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferStorageExternalEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferStorageExternalEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorageExternalEXT(_buffer_, _offset_, _size_, _clientBuffer_, _flags_)
        GL_FUNCTIONS_MAP[:NamedBufferStorageExternalEXT].call(_buffer_, _offset_, _size_, _clientBuffer_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_external_buffer

  def self.get_ext_command_GL_EXT_external_buffer
    [
      'BufferStorageExternalEXT',
      'NamedBufferStorageExternalEXT',
    ]
  end # self.get_ext_command_GL_EXT_external_buffer


  def self.define_ext_command_GL_EXT_fog_coord
    GL::GL_FUNCTION_SYMBOLS << :FogCoordfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordfEXT] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordfEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoordfEXT(_coord_)
        GL_FUNCTIONS_MAP[:FogCoordfEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoordfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordfvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordfvEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoordfvEXT(_coord_)
        GL_FUNCTIONS_MAP[:FogCoordfvEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoorddEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoorddEXT] = [Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoorddEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoorddEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoorddEXT(_coord_)
        GL_FUNCTIONS_MAP[:FogCoorddEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoorddvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoorddvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoorddvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoorddvEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoorddvEXT(_coord_)
        GL_FUNCTIONS_MAP[:FogCoorddvEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoordPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordPointerEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoordPointerEXT(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:FogCoordPointerEXT].call(_type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_fog_coord

  def self.get_ext_command_GL_EXT_fog_coord
    [
      'FogCoordfEXT',
      'FogCoordfvEXT',
      'FogCoorddEXT',
      'FogCoorddvEXT',
      'FogCoordPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_fog_coord


  def self.define_ext_command_GL_EXT_framebuffer_blit
    GL::GL_FUNCTION_SYMBOLS << :BlitFramebufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BlitFramebufferEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlitFramebufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BlitFramebufferEXT)
    GL.module_eval(<<-SRC)
      def self.BlitFramebufferEXT(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:BlitFramebufferEXT].call(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_framebuffer_blit

  def self.get_ext_command_GL_EXT_framebuffer_blit
    [
      'BlitFramebufferEXT',
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_blit


  def self.define_ext_command_GL_EXT_framebuffer_multisample
    GL::GL_FUNCTION_SYMBOLS << :RenderbufferStorageMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderbufferStorageMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderbufferStorageMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderbufferStorageMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisampleEXT(_target_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:RenderbufferStorageMultisampleEXT].call(_target_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_framebuffer_multisample

  def self.get_ext_command_GL_EXT_framebuffer_multisample
    [
      'RenderbufferStorageMultisampleEXT',
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_multisample


  def self.define_ext_command_GL_EXT_framebuffer_multisample_blit_scaled
  end # self.define_ext_command_GL_EXT_framebuffer_multisample_blit_scaled

  def self.get_ext_command_GL_EXT_framebuffer_multisample_blit_scaled
    [
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_multisample_blit_scaled


  def self.define_ext_command_GL_EXT_framebuffer_object
    GL::GL_FUNCTION_SYMBOLS << :IsRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsRenderbufferEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsRenderbufferEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.IsRenderbufferEXT(_renderbuffer_)
        GL_FUNCTIONS_MAP[:IsRenderbufferEXT].call(_renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.BindRenderbufferEXT(_target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:BindRenderbufferEXT].call(_target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteRenderbuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteRenderbuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteRenderbuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteRenderbuffersEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteRenderbuffersEXT(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:DeleteRenderbuffersEXT].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenRenderbuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenRenderbuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenRenderbuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenRenderbuffersEXT)
    GL.module_eval(<<-SRC)
      def self.GenRenderbuffersEXT(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:GenRenderbuffersEXT].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RenderbufferStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderbufferStorageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderbufferStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderbufferStorageEXT)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageEXT(_target_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:RenderbufferStorageEXT].call(_target_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetRenderbufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetRenderbufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetRenderbufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetRenderbufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetRenderbufferParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetRenderbufferParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsFramebufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsFramebufferEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsFramebufferEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsFramebufferEXT)
    GL.module_eval(<<-SRC)
      def self.IsFramebufferEXT(_framebuffer_)
        GL_FUNCTIONS_MAP[:IsFramebufferEXT].call(_framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindFramebufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindFramebufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindFramebufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindFramebufferEXT)
    GL.module_eval(<<-SRC)
      def self.BindFramebufferEXT(_target_, _framebuffer_)
        GL_FUNCTIONS_MAP[:BindFramebufferEXT].call(_target_, _framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteFramebuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteFramebuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteFramebuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteFramebuffersEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteFramebuffersEXT(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:DeleteFramebuffersEXT].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenFramebuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenFramebuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenFramebuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenFramebuffersEXT)
    GL.module_eval(<<-SRC)
      def self.GenFramebuffersEXT(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:GenFramebuffersEXT].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CheckFramebufferStatusEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CheckFramebufferStatusEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CheckFramebufferStatusEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:CheckFramebufferStatusEXT)
    GL.module_eval(<<-SRC)
      def self.CheckFramebufferStatusEXT(_target_)
        GL_FUNCTIONS_MAP[:CheckFramebufferStatusEXT].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTexture1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTexture1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTexture1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTexture1DEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture1DEXT(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:FramebufferTexture1DEXT].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTexture2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTexture2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTexture2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTexture2DEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture2DEXT(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:FramebufferTexture2DEXT].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTexture3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTexture3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTexture3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTexture3DEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture3DEXT(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
        GL_FUNCTIONS_MAP[:FramebufferTexture3DEXT].call(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferRenderbufferEXT(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:FramebufferRenderbufferEXT].call(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFramebufferAttachmentParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFramebufferAttachmentParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFramebufferAttachmentParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFramebufferAttachmentParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferAttachmentParameterivEXT(_target_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFramebufferAttachmentParameterivEXT].call(_target_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenerateMipmapEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenerateMipmapEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenerateMipmapEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenerateMipmapEXT)
    GL.module_eval(<<-SRC)
      def self.GenerateMipmapEXT(_target_)
        GL_FUNCTIONS_MAP[:GenerateMipmapEXT].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_framebuffer_object

  def self.get_ext_command_GL_EXT_framebuffer_object
    [
      'IsRenderbufferEXT',
      'BindRenderbufferEXT',
      'DeleteRenderbuffersEXT',
      'GenRenderbuffersEXT',
      'RenderbufferStorageEXT',
      'GetRenderbufferParameterivEXT',
      'IsFramebufferEXT',
      'BindFramebufferEXT',
      'DeleteFramebuffersEXT',
      'GenFramebuffersEXT',
      'CheckFramebufferStatusEXT',
      'FramebufferTexture1DEXT',
      'FramebufferTexture2DEXT',
      'FramebufferTexture3DEXT',
      'FramebufferRenderbufferEXT',
      'GetFramebufferAttachmentParameterivEXT',
      'GenerateMipmapEXT',
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_object


  def self.define_ext_command_GL_EXT_framebuffer_sRGB
  end # self.define_ext_command_GL_EXT_framebuffer_sRGB

  def self.get_ext_command_GL_EXT_framebuffer_sRGB
    [
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_sRGB


  def self.define_ext_command_GL_EXT_geometry_shader4
    GL::GL_FUNCTION_SYMBOLS << :ProgramParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteriEXT(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:ProgramParameteriEXT].call(_program_, _pname_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_geometry_shader4

  def self.get_ext_command_GL_EXT_geometry_shader4
    [
      'ProgramParameteriEXT',
    ]
  end # self.get_ext_command_GL_EXT_geometry_shader4


  def self.define_ext_command_GL_EXT_gpu_program_parameters
    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameters4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameters4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameters4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameters4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameters4fvEXT(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameters4fvEXT].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameters4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameters4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameters4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameters4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameters4fvEXT(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameters4fvEXT].call(_target_, _index_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_gpu_program_parameters

  def self.get_ext_command_GL_EXT_gpu_program_parameters
    [
      'ProgramEnvParameters4fvEXT',
      'ProgramLocalParameters4fvEXT',
    ]
  end # self.get_ext_command_GL_EXT_gpu_program_parameters


  def self.define_ext_command_GL_EXT_gpu_shader4
    GL::GL_FUNCTION_SYMBOLS << :GetUniformuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformuivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetUniformuivEXT(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformuivEXT].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindFragDataLocationEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindFragDataLocationEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindFragDataLocationEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindFragDataLocationEXT)
    GL.module_eval(<<-SRC)
      def self.BindFragDataLocationEXT(_program_, _color_, _name_)
        GL_FUNCTIONS_MAP[:BindFragDataLocationEXT].call(_program_, _color_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFragDataLocationEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFragDataLocationEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFragDataLocationEXT] = Fiddle::TYPE_INT
    GL.bind_command(:GetFragDataLocationEXT)
    GL.module_eval(<<-SRC)
      def self.GetFragDataLocationEXT(_program_, _name_)
        GL_FUNCTIONS_MAP[:GetFragDataLocationEXT].call(_program_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform1uiEXT(_location_, _v0_)
        GL_FUNCTIONS_MAP[:Uniform1uiEXT].call(_location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform2uiEXT(_location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:Uniform2uiEXT].call(_location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform3uiEXT(_location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:Uniform3uiEXT].call(_location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform4uiEXT(_location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:Uniform4uiEXT].call(_location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform1uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform2uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform3uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform4uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1iEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribI1iEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2iEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribI2iEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3iEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribI3iEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4iEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribI4iEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uiEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribI1uiEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uiEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribI2uiEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uiEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribI3uiEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uiEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribI4uiEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI1ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI2ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI3ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI1uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI2uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI3uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4bvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4bvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4bvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4bvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4svEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4svEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4svEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4svEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4ubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4ubvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4ubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4ubvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ubvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4ubvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4usvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4usvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4usvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4usvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4usvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4usvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribIPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribIPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribIPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribIPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIPointerEXT(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribIPointerEXT].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribIivEXT].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIuivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribIuivEXT].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_gpu_shader4

  def self.get_ext_command_GL_EXT_gpu_shader4
    [
      'GetUniformuivEXT',
      'BindFragDataLocationEXT',
      'GetFragDataLocationEXT',
      'Uniform1uiEXT',
      'Uniform2uiEXT',
      'Uniform3uiEXT',
      'Uniform4uiEXT',
      'Uniform1uivEXT',
      'Uniform2uivEXT',
      'Uniform3uivEXT',
      'Uniform4uivEXT',
      'VertexAttribI1iEXT',
      'VertexAttribI2iEXT',
      'VertexAttribI3iEXT',
      'VertexAttribI4iEXT',
      'VertexAttribI1uiEXT',
      'VertexAttribI2uiEXT',
      'VertexAttribI3uiEXT',
      'VertexAttribI4uiEXT',
      'VertexAttribI1ivEXT',
      'VertexAttribI2ivEXT',
      'VertexAttribI3ivEXT',
      'VertexAttribI4ivEXT',
      'VertexAttribI1uivEXT',
      'VertexAttribI2uivEXT',
      'VertexAttribI3uivEXT',
      'VertexAttribI4uivEXT',
      'VertexAttribI4bvEXT',
      'VertexAttribI4svEXT',
      'VertexAttribI4ubvEXT',
      'VertexAttribI4usvEXT',
      'VertexAttribIPointerEXT',
      'GetVertexAttribIivEXT',
      'GetVertexAttribIuivEXT',
    ]
  end # self.get_ext_command_GL_EXT_gpu_shader4


  def self.define_ext_command_GL_EXT_histogram
    GL::GL_FUNCTION_SYMBOLS << :GetHistogramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogramEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogramEXT)
    GL.module_eval(<<-SRC)
      def self.GetHistogramEXT(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:GetHistogramEXT].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHistogramParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogramParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogramParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogramParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetHistogramParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHistogramParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogramParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogramParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogramParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetHistogramParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMinmaxEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMinmaxEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMinmaxEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMinmaxEXT)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxEXT(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:GetMinmaxEXT].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMinmaxParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMinmaxParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMinmaxParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMinmaxParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMinmaxParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMinmaxParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMinmaxParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMinmaxParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMinmaxParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMinmaxParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :HistogramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:HistogramEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:HistogramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:HistogramEXT)
    GL.module_eval(<<-SRC)
      def self.HistogramEXT(_target_, _width_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:HistogramEXT].call(_target_, _width_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MinmaxEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MinmaxEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MinmaxEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MinmaxEXT)
    GL.module_eval(<<-SRC)
      def self.MinmaxEXT(_target_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:MinmaxEXT].call(_target_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResetHistogramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ResetHistogramEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResetHistogramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ResetHistogramEXT)
    GL.module_eval(<<-SRC)
      def self.ResetHistogramEXT(_target_)
        GL_FUNCTIONS_MAP[:ResetHistogramEXT].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResetMinmaxEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ResetMinmaxEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResetMinmaxEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ResetMinmaxEXT)
    GL.module_eval(<<-SRC)
      def self.ResetMinmaxEXT(_target_)
        GL_FUNCTIONS_MAP[:ResetMinmaxEXT].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_histogram

  def self.get_ext_command_GL_EXT_histogram
    [
      'GetHistogramEXT',
      'GetHistogramParameterfvEXT',
      'GetHistogramParameterivEXT',
      'GetMinmaxEXT',
      'GetMinmaxParameterfvEXT',
      'GetMinmaxParameterivEXT',
      'HistogramEXT',
      'MinmaxEXT',
      'ResetHistogramEXT',
      'ResetMinmaxEXT',
    ]
  end # self.get_ext_command_GL_EXT_histogram


  def self.define_ext_command_GL_EXT_index_array_formats
  end # self.define_ext_command_GL_EXT_index_array_formats

  def self.get_ext_command_GL_EXT_index_array_formats
    [
    ]
  end # self.get_ext_command_GL_EXT_index_array_formats


  def self.define_ext_command_GL_EXT_index_func
    GL::GL_FUNCTION_SYMBOLS << :IndexFuncEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexFuncEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexFuncEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexFuncEXT)
    GL.module_eval(<<-SRC)
      def self.IndexFuncEXT(_func_, _ref_)
        GL_FUNCTIONS_MAP[:IndexFuncEXT].call(_func_, _ref_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_index_func

  def self.get_ext_command_GL_EXT_index_func
    [
      'IndexFuncEXT',
    ]
  end # self.get_ext_command_GL_EXT_index_func


  def self.define_ext_command_GL_EXT_index_material
    GL::GL_FUNCTION_SYMBOLS << :IndexMaterialEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexMaterialEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexMaterialEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexMaterialEXT)
    GL.module_eval(<<-SRC)
      def self.IndexMaterialEXT(_face_, _mode_)
        GL_FUNCTIONS_MAP[:IndexMaterialEXT].call(_face_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_index_material

  def self.get_ext_command_GL_EXT_index_material
    [
      'IndexMaterialEXT',
    ]
  end # self.get_ext_command_GL_EXT_index_material


  def self.define_ext_command_GL_EXT_index_texture
  end # self.define_ext_command_GL_EXT_index_texture

  def self.get_ext_command_GL_EXT_index_texture
    [
    ]
  end # self.get_ext_command_GL_EXT_index_texture


  def self.define_ext_command_GL_EXT_light_texture
    GL::GL_FUNCTION_SYMBOLS << :ApplyTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ApplyTextureEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ApplyTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ApplyTextureEXT)
    GL.module_eval(<<-SRC)
      def self.ApplyTextureEXT(_mode_)
        GL_FUNCTIONS_MAP[:ApplyTextureEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureLightEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureLightEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureLightEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureLightEXT)
    GL.module_eval(<<-SRC)
      def self.TextureLightEXT(_pname_)
        GL_FUNCTIONS_MAP[:TextureLightEXT].call(_pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureMaterialEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureMaterialEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureMaterialEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureMaterialEXT)
    GL.module_eval(<<-SRC)
      def self.TextureMaterialEXT(_face_, _mode_)
        GL_FUNCTIONS_MAP[:TextureMaterialEXT].call(_face_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_light_texture

  def self.get_ext_command_GL_EXT_light_texture
    [
      'ApplyTextureEXT',
      'TextureLightEXT',
      'TextureMaterialEXT',
    ]
  end # self.get_ext_command_GL_EXT_light_texture


  def self.define_ext_command_GL_EXT_memory_object
    GL::GL_FUNCTION_SYMBOLS << :GetUnsignedBytevEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUnsignedBytevEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUnsignedBytevEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUnsignedBytevEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytevEXT(_pname_, _data_)
        GL_FUNCTIONS_MAP[:GetUnsignedBytevEXT].call(_pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUnsignedBytei_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUnsignedBytei_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUnsignedBytei_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUnsignedBytei_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytei_vEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetUnsignedBytei_vEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteMemoryObjectsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteMemoryObjectsEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteMemoryObjectsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteMemoryObjectsEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteMemoryObjectsEXT(_n_, _memoryObjects_)
        GL_FUNCTIONS_MAP[:DeleteMemoryObjectsEXT].call(_n_, _memoryObjects_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsMemoryObjectEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsMemoryObjectEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsMemoryObjectEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsMemoryObjectEXT)
    GL.module_eval(<<-SRC)
      def self.IsMemoryObjectEXT(_memoryObject_)
        GL_FUNCTIONS_MAP[:IsMemoryObjectEXT].call(_memoryObject_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateMemoryObjectsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateMemoryObjectsEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateMemoryObjectsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateMemoryObjectsEXT)
    GL.module_eval(<<-SRC)
      def self.CreateMemoryObjectsEXT(_n_, _memoryObjects_)
        GL_FUNCTIONS_MAP[:CreateMemoryObjectsEXT].call(_n_, _memoryObjects_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MemoryObjectParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MemoryObjectParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MemoryObjectParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MemoryObjectParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.MemoryObjectParameterivEXT(_memoryObject_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MemoryObjectParameterivEXT].call(_memoryObject_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMemoryObjectParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMemoryObjectParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMemoryObjectParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMemoryObjectParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMemoryObjectParameterivEXT(_memoryObject_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMemoryObjectParameterivEXT].call(_memoryObject_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorageMem2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorageMem2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorageMem2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorageMem2DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem2DEXT(_target_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TexStorageMem2DEXT].call(_target_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorageMem2DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorageMem2DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorageMem2DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorageMem2DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem2DMultisampleEXT(_target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TexStorageMem2DMultisampleEXT].call(_target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorageMem3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorageMem3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorageMem3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorageMem3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem3DEXT(_target_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TexStorageMem3DEXT].call(_target_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorageMem3DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorageMem3DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorageMem3DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorageMem3DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem3DMultisampleEXT(_target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TexStorageMem3DMultisampleEXT].call(_target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BufferStorageMemEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferStorageMemEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferStorageMemEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferStorageMemEXT)
    GL.module_eval(<<-SRC)
      def self.BufferStorageMemEXT(_target_, _size_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:BufferStorageMemEXT].call(_target_, _size_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorageMem2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorageMem2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorageMem2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorageMem2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem2DEXT(_texture_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TextureStorageMem2DEXT].call(_texture_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorageMem2DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorageMem2DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorageMem2DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorageMem2DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem2DMultisampleEXT(_texture_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TextureStorageMem2DMultisampleEXT].call(_texture_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorageMem3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorageMem3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorageMem3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorageMem3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem3DEXT(_texture_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TextureStorageMem3DEXT].call(_texture_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorageMem3DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorageMem3DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorageMem3DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorageMem3DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem3DMultisampleEXT(_texture_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TextureStorageMem3DMultisampleEXT].call(_texture_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferStorageMemEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferStorageMemEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferStorageMemEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferStorageMemEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorageMemEXT(_buffer_, _size_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:NamedBufferStorageMemEXT].call(_buffer_, _size_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorageMem1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorageMem1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorageMem1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorageMem1DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem1DEXT(_target_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TexStorageMem1DEXT].call(_target_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorageMem1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorageMem1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorageMem1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorageMem1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem1DEXT(_texture_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TextureStorageMem1DEXT].call(_texture_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_memory_object

  def self.get_ext_command_GL_EXT_memory_object
    [
      'GetUnsignedBytevEXT',
      'GetUnsignedBytei_vEXT',
      'DeleteMemoryObjectsEXT',
      'IsMemoryObjectEXT',
      'CreateMemoryObjectsEXT',
      'MemoryObjectParameterivEXT',
      'GetMemoryObjectParameterivEXT',
      'TexStorageMem2DEXT',
      'TexStorageMem2DMultisampleEXT',
      'TexStorageMem3DEXT',
      'TexStorageMem3DMultisampleEXT',
      'BufferStorageMemEXT',
      'TextureStorageMem2DEXT',
      'TextureStorageMem2DMultisampleEXT',
      'TextureStorageMem3DEXT',
      'TextureStorageMem3DMultisampleEXT',
      'NamedBufferStorageMemEXT',
      'TexStorageMem1DEXT',
      'TextureStorageMem1DEXT',
    ]
  end # self.get_ext_command_GL_EXT_memory_object


  def self.define_ext_command_GL_EXT_memory_object_fd
    GL::GL_FUNCTION_SYMBOLS << :ImportMemoryFdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportMemoryFdEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportMemoryFdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ImportMemoryFdEXT)
    GL.module_eval(<<-SRC)
      def self.ImportMemoryFdEXT(_memory_, _size_, _handleType_, _fd_)
        GL_FUNCTIONS_MAP[:ImportMemoryFdEXT].call(_memory_, _size_, _handleType_, _fd_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_memory_object_fd

  def self.get_ext_command_GL_EXT_memory_object_fd
    [
      'ImportMemoryFdEXT',
    ]
  end # self.get_ext_command_GL_EXT_memory_object_fd


  def self.define_ext_command_GL_EXT_memory_object_win32
    GL::GL_FUNCTION_SYMBOLS << :ImportMemoryWin32HandleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportMemoryWin32HandleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportMemoryWin32HandleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ImportMemoryWin32HandleEXT)
    GL.module_eval(<<-SRC)
      def self.ImportMemoryWin32HandleEXT(_memory_, _size_, _handleType_, _handle_)
        GL_FUNCTIONS_MAP[:ImportMemoryWin32HandleEXT].call(_memory_, _size_, _handleType_, _handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ImportMemoryWin32NameEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportMemoryWin32NameEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportMemoryWin32NameEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ImportMemoryWin32NameEXT)
    GL.module_eval(<<-SRC)
      def self.ImportMemoryWin32NameEXT(_memory_, _size_, _handleType_, _name_)
        GL_FUNCTIONS_MAP[:ImportMemoryWin32NameEXT].call(_memory_, _size_, _handleType_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_memory_object_win32

  def self.get_ext_command_GL_EXT_memory_object_win32
    [
      'ImportMemoryWin32HandleEXT',
      'ImportMemoryWin32NameEXT',
    ]
  end # self.get_ext_command_GL_EXT_memory_object_win32


  def self.define_ext_command_GL_EXT_misc_attribute
  end # self.define_ext_command_GL_EXT_misc_attribute

  def self.get_ext_command_GL_EXT_misc_attribute
    [
    ]
  end # self.get_ext_command_GL_EXT_misc_attribute


  def self.define_ext_command_GL_EXT_multi_draw_arrays
    GL::GL_FUNCTION_SYMBOLS << :MultiDrawArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawArraysEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawArraysEXT)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysEXT(_mode_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:MultiDrawArraysEXT].call(_mode_, _first_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsEXT)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsEXT(_mode_, _count_, _type_, _indices_, _primcount_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsEXT].call(_mode_, _count_, _type_, _indices_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_multi_draw_arrays

  def self.get_ext_command_GL_EXT_multi_draw_arrays
    [
      'MultiDrawArraysEXT',
      'MultiDrawElementsEXT',
    ]
  end # self.get_ext_command_GL_EXT_multi_draw_arrays


  def self.define_ext_command_GL_EXT_multisample
    GL::GL_FUNCTION_SYMBOLS << :SampleMaskEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleMaskEXT] = [Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleMaskEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleMaskEXT)
    GL.module_eval(<<-SRC)
      def self.SampleMaskEXT(_value_, _invert_)
        GL_FUNCTIONS_MAP[:SampleMaskEXT].call(_value_, _invert_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplePatternEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplePatternEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplePatternEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplePatternEXT)
    GL.module_eval(<<-SRC)
      def self.SamplePatternEXT(_pattern_)
        GL_FUNCTIONS_MAP[:SamplePatternEXT].call(_pattern_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_multisample

  def self.get_ext_command_GL_EXT_multisample
    [
      'SampleMaskEXT',
      'SamplePatternEXT',
    ]
  end # self.get_ext_command_GL_EXT_multisample


  def self.define_ext_command_GL_EXT_multiview_tessellation_geometry_shader
  end # self.define_ext_command_GL_EXT_multiview_tessellation_geometry_shader

  def self.get_ext_command_GL_EXT_multiview_tessellation_geometry_shader
    [
    ]
  end # self.get_ext_command_GL_EXT_multiview_tessellation_geometry_shader


  def self.define_ext_command_GL_EXT_multiview_texture_multisample
  end # self.define_ext_command_GL_EXT_multiview_texture_multisample

  def self.get_ext_command_GL_EXT_multiview_texture_multisample
    [
    ]
  end # self.get_ext_command_GL_EXT_multiview_texture_multisample


  def self.define_ext_command_GL_EXT_multiview_timer_query
  end # self.define_ext_command_GL_EXT_multiview_timer_query

  def self.get_ext_command_GL_EXT_multiview_timer_query
    [
    ]
  end # self.get_ext_command_GL_EXT_multiview_timer_query


  def self.define_ext_command_GL_EXT_packed_depth_stencil
  end # self.define_ext_command_GL_EXT_packed_depth_stencil

  def self.get_ext_command_GL_EXT_packed_depth_stencil
    [
    ]
  end # self.get_ext_command_GL_EXT_packed_depth_stencil


  def self.define_ext_command_GL_EXT_packed_float
  end # self.define_ext_command_GL_EXT_packed_float

  def self.get_ext_command_GL_EXT_packed_float
    [
    ]
  end # self.get_ext_command_GL_EXT_packed_float


  def self.define_ext_command_GL_EXT_packed_pixels
  end # self.define_ext_command_GL_EXT_packed_pixels

  def self.get_ext_command_GL_EXT_packed_pixels
    [
    ]
  end # self.get_ext_command_GL_EXT_packed_pixels


  def self.define_ext_command_GL_EXT_paletted_texture
    GL::GL_FUNCTION_SYMBOLS << :ColorTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTableEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTableEXT)
    GL.module_eval(<<-SRC)
      def self.ColorTableEXT(_target_, _internalFormat_, _width_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:ColorTableEXT].call(_target_, _internalFormat_, _width_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableEXT)
    GL.module_eval(<<-SRC)
      def self.GetColorTableEXT(_target_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:GetColorTableEXT].call(_target_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetColorTableParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetColorTableParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_paletted_texture

  def self.get_ext_command_GL_EXT_paletted_texture
    [
      'ColorTableEXT',
      'GetColorTableEXT',
      'GetColorTableParameterivEXT',
      'GetColorTableParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_paletted_texture


  def self.define_ext_command_GL_EXT_pixel_buffer_object
  end # self.define_ext_command_GL_EXT_pixel_buffer_object

  def self.get_ext_command_GL_EXT_pixel_buffer_object
    [
    ]
  end # self.get_ext_command_GL_EXT_pixel_buffer_object


  def self.define_ext_command_GL_EXT_pixel_transform
    GL::GL_FUNCTION_SYMBOLS << :PixelTransformParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTransformParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTransformParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTransformParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameteriEXT(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:PixelTransformParameteriEXT].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTransformParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTransformParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTransformParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTransformParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameterfEXT(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:PixelTransformParameterfEXT].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTransformParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTransformParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTransformParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTransformParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:PixelTransformParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTransformParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTransformParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTransformParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTransformParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:PixelTransformParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPixelTransformParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPixelTransformParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPixelTransformParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPixelTransformParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetPixelTransformParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPixelTransformParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPixelTransformParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPixelTransformParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPixelTransformParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPixelTransformParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetPixelTransformParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPixelTransformParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_pixel_transform

  def self.get_ext_command_GL_EXT_pixel_transform
    [
      'PixelTransformParameteriEXT',
      'PixelTransformParameterfEXT',
      'PixelTransformParameterivEXT',
      'PixelTransformParameterfvEXT',
      'GetPixelTransformParameterivEXT',
      'GetPixelTransformParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_pixel_transform


  def self.define_ext_command_GL_EXT_pixel_transform_color_table
  end # self.define_ext_command_GL_EXT_pixel_transform_color_table

  def self.get_ext_command_GL_EXT_pixel_transform_color_table
    [
    ]
  end # self.get_ext_command_GL_EXT_pixel_transform_color_table


  def self.define_ext_command_GL_EXT_point_parameters
    GL::GL_FUNCTION_SYMBOLS << :PointParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.PointParameterfEXT(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PointParameterfEXT].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterfvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.PointParameterfvEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PointParameterfvEXT].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_point_parameters

  def self.get_ext_command_GL_EXT_point_parameters
    [
      'PointParameterfEXT',
      'PointParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_point_parameters


  def self.define_ext_command_GL_EXT_polygon_offset
    GL::GL_FUNCTION_SYMBOLS << :PolygonOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PolygonOffsetEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PolygonOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PolygonOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetEXT(_factor_, _bias_)
        GL_FUNCTIONS_MAP[:PolygonOffsetEXT].call(_factor_, _bias_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_polygon_offset

  def self.get_ext_command_GL_EXT_polygon_offset
    [
      'PolygonOffsetEXT',
    ]
  end # self.get_ext_command_GL_EXT_polygon_offset


  def self.define_ext_command_GL_EXT_polygon_offset_clamp
    GL::GL_FUNCTION_SYMBOLS << :PolygonOffsetClampEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PolygonOffsetClampEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PolygonOffsetClampEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PolygonOffsetClampEXT)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetClampEXT(_factor_, _units_, _clamp_)
        GL_FUNCTIONS_MAP[:PolygonOffsetClampEXT].call(_factor_, _units_, _clamp_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_polygon_offset_clamp

  def self.get_ext_command_GL_EXT_polygon_offset_clamp
    [
      'PolygonOffsetClampEXT',
    ]
  end # self.get_ext_command_GL_EXT_polygon_offset_clamp


  def self.define_ext_command_GL_EXT_post_depth_coverage
  end # self.define_ext_command_GL_EXT_post_depth_coverage

  def self.get_ext_command_GL_EXT_post_depth_coverage
    [
    ]
  end # self.get_ext_command_GL_EXT_post_depth_coverage


  def self.define_ext_command_GL_EXT_provoking_vertex
    GL::GL_FUNCTION_SYMBOLS << :ProvokingVertexEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProvokingVertexEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProvokingVertexEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProvokingVertexEXT)
    GL.module_eval(<<-SRC)
      def self.ProvokingVertexEXT(_mode_)
        GL_FUNCTIONS_MAP[:ProvokingVertexEXT].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_provoking_vertex

  def self.get_ext_command_GL_EXT_provoking_vertex
    [
      'ProvokingVertexEXT',
    ]
  end # self.get_ext_command_GL_EXT_provoking_vertex


  def self.define_ext_command_GL_EXT_raster_multisample
    GL::GL_FUNCTION_SYMBOLS << :RasterSamplesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterSamplesEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterSamplesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterSamplesEXT)
    GL.module_eval(<<-SRC)
      def self.RasterSamplesEXT(_samples_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:RasterSamplesEXT].call(_samples_, _fixedsamplelocations_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_raster_multisample

  def self.get_ext_command_GL_EXT_raster_multisample
    [
      'RasterSamplesEXT',
    ]
  end # self.get_ext_command_GL_EXT_raster_multisample


  def self.define_ext_command_GL_EXT_rescale_normal
  end # self.define_ext_command_GL_EXT_rescale_normal

  def self.get_ext_command_GL_EXT_rescale_normal
    [
    ]
  end # self.get_ext_command_GL_EXT_rescale_normal


  def self.define_ext_command_GL_EXT_semaphore
    GL::GL_FUNCTION_SYMBOLS << :GetUnsignedBytevEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUnsignedBytevEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUnsignedBytevEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUnsignedBytevEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytevEXT(_pname_, _data_)
        GL_FUNCTIONS_MAP[:GetUnsignedBytevEXT].call(_pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUnsignedBytei_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUnsignedBytei_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUnsignedBytei_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUnsignedBytei_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytei_vEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:GetUnsignedBytei_vEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenSemaphoresEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenSemaphoresEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenSemaphoresEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenSemaphoresEXT)
    GL.module_eval(<<-SRC)
      def self.GenSemaphoresEXT(_n_, _semaphores_)
        GL_FUNCTIONS_MAP[:GenSemaphoresEXT].call(_n_, _semaphores_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteSemaphoresEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteSemaphoresEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteSemaphoresEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteSemaphoresEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteSemaphoresEXT(_n_, _semaphores_)
        GL_FUNCTIONS_MAP[:DeleteSemaphoresEXT].call(_n_, _semaphores_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsSemaphoreEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsSemaphoreEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsSemaphoreEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsSemaphoreEXT)
    GL.module_eval(<<-SRC)
      def self.IsSemaphoreEXT(_semaphore_)
        GL_FUNCTIONS_MAP[:IsSemaphoreEXT].call(_semaphore_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SemaphoreParameterui64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SemaphoreParameterui64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SemaphoreParameterui64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SemaphoreParameterui64vEXT)
    GL.module_eval(<<-SRC)
      def self.SemaphoreParameterui64vEXT(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:SemaphoreParameterui64vEXT].call(_semaphore_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSemaphoreParameterui64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSemaphoreParameterui64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSemaphoreParameterui64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSemaphoreParameterui64vEXT)
    GL.module_eval(<<-SRC)
      def self.GetSemaphoreParameterui64vEXT(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetSemaphoreParameterui64vEXT].call(_semaphore_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WaitSemaphoreEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:WaitSemaphoreEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WaitSemaphoreEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:WaitSemaphoreEXT)
    GL.module_eval(<<-SRC)
      def self.WaitSemaphoreEXT(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _srcLayouts_)
        GL_FUNCTIONS_MAP[:WaitSemaphoreEXT].call(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _srcLayouts_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SignalSemaphoreEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SignalSemaphoreEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SignalSemaphoreEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SignalSemaphoreEXT)
    GL.module_eval(<<-SRC)
      def self.SignalSemaphoreEXT(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _dstLayouts_)
        GL_FUNCTIONS_MAP[:SignalSemaphoreEXT].call(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _dstLayouts_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_semaphore

  def self.get_ext_command_GL_EXT_semaphore
    [
      'GetUnsignedBytevEXT',
      'GetUnsignedBytei_vEXT',
      'GenSemaphoresEXT',
      'DeleteSemaphoresEXT',
      'IsSemaphoreEXT',
      'SemaphoreParameterui64vEXT',
      'GetSemaphoreParameterui64vEXT',
      'WaitSemaphoreEXT',
      'SignalSemaphoreEXT',
    ]
  end # self.get_ext_command_GL_EXT_semaphore


  def self.define_ext_command_GL_EXT_semaphore_fd
    GL::GL_FUNCTION_SYMBOLS << :ImportSemaphoreFdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportSemaphoreFdEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportSemaphoreFdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ImportSemaphoreFdEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSemaphoreFdEXT(_semaphore_, _handleType_, _fd_)
        GL_FUNCTIONS_MAP[:ImportSemaphoreFdEXT].call(_semaphore_, _handleType_, _fd_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_semaphore_fd

  def self.get_ext_command_GL_EXT_semaphore_fd
    [
      'ImportSemaphoreFdEXT',
    ]
  end # self.get_ext_command_GL_EXT_semaphore_fd


  def self.define_ext_command_GL_EXT_semaphore_win32
    GL::GL_FUNCTION_SYMBOLS << :ImportSemaphoreWin32HandleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportSemaphoreWin32HandleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportSemaphoreWin32HandleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ImportSemaphoreWin32HandleEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSemaphoreWin32HandleEXT(_semaphore_, _handleType_, _handle_)
        GL_FUNCTIONS_MAP[:ImportSemaphoreWin32HandleEXT].call(_semaphore_, _handleType_, _handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ImportSemaphoreWin32NameEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportSemaphoreWin32NameEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportSemaphoreWin32NameEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ImportSemaphoreWin32NameEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSemaphoreWin32NameEXT(_semaphore_, _handleType_, _name_)
        GL_FUNCTIONS_MAP[:ImportSemaphoreWin32NameEXT].call(_semaphore_, _handleType_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_semaphore_win32

  def self.get_ext_command_GL_EXT_semaphore_win32
    [
      'ImportSemaphoreWin32HandleEXT',
      'ImportSemaphoreWin32NameEXT',
    ]
  end # self.get_ext_command_GL_EXT_semaphore_win32


  def self.define_ext_command_GL_EXT_secondary_color
    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3bEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3bEXT] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3bEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3bEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3bEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3bEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3bvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3bvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3bvEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3bvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3dEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3dEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3dEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3dEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3dvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3dvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3dvEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3dvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3fEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3fEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3fEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3fEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3fvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3fvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3fvEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3fvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3iEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3iEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3iEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3iEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3ivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3ivEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3ivEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3ivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3sEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3sEXT] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3sEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3sEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3sEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3sEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3svEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3svEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3svEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3svEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3ubEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3ubEXT] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3ubEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3ubEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3ubEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3ubEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3ubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3ubvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3ubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3ubvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3ubvEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3ubvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3uiEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3uiEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3uiEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3uivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3uivEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3uivEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3uivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3usEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3usEXT] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3usEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3usEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3usEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3usEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3usvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3usvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3usvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3usvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3usvEXT(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3usvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColorPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColorPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColorPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColorPointerEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorPointerEXT(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:SecondaryColorPointerEXT].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_secondary_color

  def self.get_ext_command_GL_EXT_secondary_color
    [
      'SecondaryColor3bEXT',
      'SecondaryColor3bvEXT',
      'SecondaryColor3dEXT',
      'SecondaryColor3dvEXT',
      'SecondaryColor3fEXT',
      'SecondaryColor3fvEXT',
      'SecondaryColor3iEXT',
      'SecondaryColor3ivEXT',
      'SecondaryColor3sEXT',
      'SecondaryColor3svEXT',
      'SecondaryColor3ubEXT',
      'SecondaryColor3ubvEXT',
      'SecondaryColor3uiEXT',
      'SecondaryColor3uivEXT',
      'SecondaryColor3usEXT',
      'SecondaryColor3usvEXT',
      'SecondaryColorPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_secondary_color


  def self.define_ext_command_GL_EXT_separate_shader_objects
    GL::GL_FUNCTION_SYMBOLS << :UseShaderProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:UseShaderProgramEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UseShaderProgramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:UseShaderProgramEXT)
    GL.module_eval(<<-SRC)
      def self.UseShaderProgramEXT(_type_, _program_)
        GL_FUNCTIONS_MAP[:UseShaderProgramEXT].call(_type_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ActiveProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ActiveProgramEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ActiveProgramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ActiveProgramEXT)
    GL.module_eval(<<-SRC)
      def self.ActiveProgramEXT(_program_)
        GL_FUNCTIONS_MAP[:ActiveProgramEXT].call(_program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateShaderProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateShaderProgramEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateShaderProgramEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:CreateShaderProgramEXT)
    GL.module_eval(<<-SRC)
      def self.CreateShaderProgramEXT(_type_, _string_)
        GL_FUNCTIONS_MAP[:CreateShaderProgramEXT].call(_type_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ActiveShaderProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ActiveShaderProgramEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ActiveShaderProgramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ActiveShaderProgramEXT)
    GL.module_eval(<<-SRC)
      def self.ActiveShaderProgramEXT(_pipeline_, _program_)
        GL_FUNCTIONS_MAP[:ActiveShaderProgramEXT].call(_pipeline_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindProgramPipelineEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindProgramPipelineEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindProgramPipelineEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindProgramPipelineEXT)
    GL.module_eval(<<-SRC)
      def self.BindProgramPipelineEXT(_pipeline_)
        GL_FUNCTIONS_MAP[:BindProgramPipelineEXT].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateShaderProgramvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateShaderProgramvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateShaderProgramvEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:CreateShaderProgramvEXT)
    GL.module_eval(<<-SRC)
      def self.CreateShaderProgramvEXT(_type_, _count_, _strings_)
        GL_FUNCTIONS_MAP[:CreateShaderProgramvEXT].call(_type_, _count_, _strings_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteProgramPipelinesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteProgramPipelinesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteProgramPipelinesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteProgramPipelinesEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramPipelinesEXT(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:DeleteProgramPipelinesEXT].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenProgramPipelinesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenProgramPipelinesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenProgramPipelinesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenProgramPipelinesEXT)
    GL.module_eval(<<-SRC)
      def self.GenProgramPipelinesEXT(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:GenProgramPipelinesEXT].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramPipelineInfoLogEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramPipelineInfoLogEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramPipelineInfoLogEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramPipelineInfoLogEXT)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineInfoLogEXT(_pipeline_, _bufSize_, _length_, _infoLog_)
        GL_FUNCTIONS_MAP[:GetProgramPipelineInfoLogEXT].call(_pipeline_, _bufSize_, _length_, _infoLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramPipelineivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramPipelineivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramPipelineivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramPipelineivEXT)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineivEXT(_pipeline_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramPipelineivEXT].call(_pipeline_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsProgramPipelineEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsProgramPipelineEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsProgramPipelineEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsProgramPipelineEXT)
    GL.module_eval(<<-SRC)
      def self.IsProgramPipelineEXT(_pipeline_)
        GL_FUNCTIONS_MAP[:IsProgramPipelineEXT].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteriEXT(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:ProgramParameteriEXT].call(_program_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1fEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1iEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1iEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2fEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2iEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2iEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3fEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3iEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3iEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4fEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4iEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4iEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UseProgramStagesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:UseProgramStagesEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UseProgramStagesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:UseProgramStagesEXT)
    GL.module_eval(<<-SRC)
      def self.UseProgramStagesEXT(_pipeline_, _stages_, _program_)
        GL_FUNCTIONS_MAP[:UseProgramStagesEXT].call(_pipeline_, _stages_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ValidateProgramPipelineEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ValidateProgramPipelineEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ValidateProgramPipelineEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ValidateProgramPipelineEXT)
    GL.module_eval(<<-SRC)
      def self.ValidateProgramPipelineEXT(_pipeline_)
        GL_FUNCTIONS_MAP[:ValidateProgramPipelineEXT].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uiEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:ProgramUniform1uiEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uiEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:ProgramUniform2uiEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uiEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:ProgramUniform3uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uiEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:ProgramUniform4uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix2x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix2x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix2x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix2x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix2x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix3x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix3x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix3x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix3x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix3x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformMatrix4x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformMatrix4x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformMatrix4x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformMatrix4x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformMatrix4x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_separate_shader_objects

  def self.get_ext_command_GL_EXT_separate_shader_objects
    [
      'UseShaderProgramEXT',
      'ActiveProgramEXT',
      'CreateShaderProgramEXT',
      'ActiveShaderProgramEXT',
      'BindProgramPipelineEXT',
      'CreateShaderProgramvEXT',
      'DeleteProgramPipelinesEXT',
      'GenProgramPipelinesEXT',
      'GetProgramPipelineInfoLogEXT',
      'GetProgramPipelineivEXT',
      'IsProgramPipelineEXT',
      'ProgramParameteriEXT',
      'ProgramUniform1fEXT',
      'ProgramUniform1fvEXT',
      'ProgramUniform1iEXT',
      'ProgramUniform1ivEXT',
      'ProgramUniform2fEXT',
      'ProgramUniform2fvEXT',
      'ProgramUniform2iEXT',
      'ProgramUniform2ivEXT',
      'ProgramUniform3fEXT',
      'ProgramUniform3fvEXT',
      'ProgramUniform3iEXT',
      'ProgramUniform3ivEXT',
      'ProgramUniform4fEXT',
      'ProgramUniform4fvEXT',
      'ProgramUniform4iEXT',
      'ProgramUniform4ivEXT',
      'ProgramUniformMatrix2fvEXT',
      'ProgramUniformMatrix3fvEXT',
      'ProgramUniformMatrix4fvEXT',
      'UseProgramStagesEXT',
      'ValidateProgramPipelineEXT',
      'ProgramUniform1uiEXT',
      'ProgramUniform2uiEXT',
      'ProgramUniform3uiEXT',
      'ProgramUniform4uiEXT',
      'ProgramUniform1uivEXT',
      'ProgramUniform2uivEXT',
      'ProgramUniform3uivEXT',
      'ProgramUniform4uivEXT',
      'ProgramUniformMatrix2x3fvEXT',
      'ProgramUniformMatrix3x2fvEXT',
      'ProgramUniformMatrix2x4fvEXT',
      'ProgramUniformMatrix4x2fvEXT',
      'ProgramUniformMatrix3x4fvEXT',
      'ProgramUniformMatrix4x3fvEXT',
    ]
  end # self.get_ext_command_GL_EXT_separate_shader_objects


  def self.define_ext_command_GL_EXT_separate_specular_color
  end # self.define_ext_command_GL_EXT_separate_specular_color

  def self.get_ext_command_GL_EXT_separate_specular_color
    [
    ]
  end # self.get_ext_command_GL_EXT_separate_specular_color


  def self.define_ext_command_GL_EXT_shader_framebuffer_fetch
  end # self.define_ext_command_GL_EXT_shader_framebuffer_fetch

  def self.get_ext_command_GL_EXT_shader_framebuffer_fetch
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_framebuffer_fetch


  def self.define_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent
    GL::GL_FUNCTION_SYMBOLS << :FramebufferFetchBarrierEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferFetchBarrierEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferFetchBarrierEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferFetchBarrierEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferFetchBarrierEXT()
        GL_FUNCTIONS_MAP[:FramebufferFetchBarrierEXT].call()
      end
    SRC
  end # self.define_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent

  def self.get_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent
    [
      'FramebufferFetchBarrierEXT',
    ]
  end # self.get_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent


  def self.define_ext_command_GL_EXT_shader_image_load_formatted
  end # self.define_ext_command_GL_EXT_shader_image_load_formatted

  def self.get_ext_command_GL_EXT_shader_image_load_formatted
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_image_load_formatted


  def self.define_ext_command_GL_EXT_shader_image_load_store
    GL::GL_FUNCTION_SYMBOLS << :BindImageTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindImageTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindImageTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindImageTextureEXT)
    GL.module_eval(<<-SRC)
      def self.BindImageTextureEXT(_index_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
        GL_FUNCTIONS_MAP[:BindImageTextureEXT].call(_index_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MemoryBarrierEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MemoryBarrierEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MemoryBarrierEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MemoryBarrierEXT)
    GL.module_eval(<<-SRC)
      def self.MemoryBarrierEXT(_barriers_)
        GL_FUNCTIONS_MAP[:MemoryBarrierEXT].call(_barriers_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_shader_image_load_store

  def self.get_ext_command_GL_EXT_shader_image_load_store
    [
      'BindImageTextureEXT',
      'MemoryBarrierEXT',
    ]
  end # self.get_ext_command_GL_EXT_shader_image_load_store


  def self.define_ext_command_GL_EXT_shader_integer_mix
  end # self.define_ext_command_GL_EXT_shader_integer_mix

  def self.get_ext_command_GL_EXT_shader_integer_mix
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_integer_mix


  def self.define_ext_command_GL_EXT_shadow_funcs
  end # self.define_ext_command_GL_EXT_shadow_funcs

  def self.get_ext_command_GL_EXT_shadow_funcs
    [
    ]
  end # self.get_ext_command_GL_EXT_shadow_funcs


  def self.define_ext_command_GL_EXT_shared_texture_palette
  end # self.define_ext_command_GL_EXT_shared_texture_palette

  def self.get_ext_command_GL_EXT_shared_texture_palette
    [
    ]
  end # self.get_ext_command_GL_EXT_shared_texture_palette


  def self.define_ext_command_GL_EXT_sparse_texture2
  end # self.define_ext_command_GL_EXT_sparse_texture2

  def self.get_ext_command_GL_EXT_sparse_texture2
    [
    ]
  end # self.get_ext_command_GL_EXT_sparse_texture2


  def self.define_ext_command_GL_EXT_stencil_clear_tag
    GL::GL_FUNCTION_SYMBOLS << :StencilClearTagEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilClearTagEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilClearTagEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilClearTagEXT)
    GL.module_eval(<<-SRC)
      def self.StencilClearTagEXT(_stencilTagBits_, _stencilClearTag_)
        GL_FUNCTIONS_MAP[:StencilClearTagEXT].call(_stencilTagBits_, _stencilClearTag_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_stencil_clear_tag

  def self.get_ext_command_GL_EXT_stencil_clear_tag
    [
      'StencilClearTagEXT',
    ]
  end # self.get_ext_command_GL_EXT_stencil_clear_tag


  def self.define_ext_command_GL_EXT_stencil_two_side
    GL::GL_FUNCTION_SYMBOLS << :ActiveStencilFaceEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ActiveStencilFaceEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ActiveStencilFaceEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ActiveStencilFaceEXT)
    GL.module_eval(<<-SRC)
      def self.ActiveStencilFaceEXT(_face_)
        GL_FUNCTIONS_MAP[:ActiveStencilFaceEXT].call(_face_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_stencil_two_side

  def self.get_ext_command_GL_EXT_stencil_two_side
    [
      'ActiveStencilFaceEXT',
    ]
  end # self.get_ext_command_GL_EXT_stencil_two_side


  def self.define_ext_command_GL_EXT_stencil_wrap
  end # self.define_ext_command_GL_EXT_stencil_wrap

  def self.get_ext_command_GL_EXT_stencil_wrap
    [
    ]
  end # self.get_ext_command_GL_EXT_stencil_wrap


  def self.define_ext_command_GL_EXT_subtexture
    GL::GL_FUNCTION_SYMBOLS << :TexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexSubImage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TexSubImage1DEXT(_target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TexSubImage1DEXT].call(_target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexSubImage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TexSubImage2DEXT(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TexSubImage2DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_subtexture

  def self.get_ext_command_GL_EXT_subtexture
    [
      'TexSubImage1DEXT',
      'TexSubImage2DEXT',
    ]
  end # self.get_ext_command_GL_EXT_subtexture


  def self.define_ext_command_GL_EXT_texture
  end # self.define_ext_command_GL_EXT_texture

  def self.get_ext_command_GL_EXT_texture
    [
    ]
  end # self.get_ext_command_GL_EXT_texture


  def self.define_ext_command_GL_EXT_texture3D
    GL::GL_FUNCTION_SYMBOLS << :TexImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexImage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexImage3DEXT(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TexImage3DEXT].call(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexSubImage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexSubImage3DEXT(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TexSubImage3DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture3D

  def self.get_ext_command_GL_EXT_texture3D
    [
      'TexImage3DEXT',
      'TexSubImage3DEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture3D


  def self.define_ext_command_GL_EXT_texture_array
    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureLayerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureLayerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureLayerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureLayerEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayerEXT(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:FramebufferTextureLayerEXT].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_array

  def self.get_ext_command_GL_EXT_texture_array
    [
      'FramebufferTextureLayerEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_array


  def self.define_ext_command_GL_EXT_texture_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :TexBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexBufferEXT)
    GL.module_eval(<<-SRC)
      def self.TexBufferEXT(_target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:TexBufferEXT].call(_target_, _internalformat_, _buffer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_buffer_object

  def self.get_ext_command_GL_EXT_texture_buffer_object
    [
      'TexBufferEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_buffer_object


  def self.define_ext_command_GL_EXT_texture_compression_latc
  end # self.define_ext_command_GL_EXT_texture_compression_latc

  def self.get_ext_command_GL_EXT_texture_compression_latc
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_compression_latc


  def self.define_ext_command_GL_EXT_texture_compression_rgtc
  end # self.define_ext_command_GL_EXT_texture_compression_rgtc

  def self.get_ext_command_GL_EXT_texture_compression_rgtc
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_compression_rgtc


  def self.define_ext_command_GL_EXT_texture_compression_s3tc
  end # self.define_ext_command_GL_EXT_texture_compression_s3tc

  def self.get_ext_command_GL_EXT_texture_compression_s3tc
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_compression_s3tc


  def self.define_ext_command_GL_EXT_texture_cube_map
  end # self.define_ext_command_GL_EXT_texture_cube_map

  def self.get_ext_command_GL_EXT_texture_cube_map
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_cube_map


  def self.define_ext_command_GL_EXT_texture_env_add
  end # self.define_ext_command_GL_EXT_texture_env_add

  def self.get_ext_command_GL_EXT_texture_env_add
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_env_add


  def self.define_ext_command_GL_EXT_texture_env_combine
  end # self.define_ext_command_GL_EXT_texture_env_combine

  def self.get_ext_command_GL_EXT_texture_env_combine
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_env_combine


  def self.define_ext_command_GL_EXT_texture_env_dot3
  end # self.define_ext_command_GL_EXT_texture_env_dot3

  def self.get_ext_command_GL_EXT_texture_env_dot3
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_env_dot3


  def self.define_ext_command_GL_EXT_texture_filter_anisotropic
  end # self.define_ext_command_GL_EXT_texture_filter_anisotropic

  def self.get_ext_command_GL_EXT_texture_filter_anisotropic
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_filter_anisotropic


  def self.define_ext_command_GL_EXT_texture_filter_minmax
  end # self.define_ext_command_GL_EXT_texture_filter_minmax

  def self.get_ext_command_GL_EXT_texture_filter_minmax
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_filter_minmax


  def self.define_ext_command_GL_EXT_texture_integer
    GL::GL_FUNCTION_SYMBOLS << :TexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.TexParameterIivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TexParameterIivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.TexParameterIuivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TexParameterIuivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterIivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexParameterIivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterIuivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexParameterIuivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearColorIiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearColorIiEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearColorIiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearColorIiEXT)
    GL.module_eval(<<-SRC)
      def self.ClearColorIiEXT(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:ClearColorIiEXT].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearColorIuiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearColorIuiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearColorIuiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearColorIuiEXT)
    GL.module_eval(<<-SRC)
      def self.ClearColorIuiEXT(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:ClearColorIuiEXT].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_integer

  def self.get_ext_command_GL_EXT_texture_integer
    [
      'TexParameterIivEXT',
      'TexParameterIuivEXT',
      'GetTexParameterIivEXT',
      'GetTexParameterIuivEXT',
      'ClearColorIiEXT',
      'ClearColorIuiEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_integer


  def self.define_ext_command_GL_EXT_texture_lod_bias
  end # self.define_ext_command_GL_EXT_texture_lod_bias

  def self.get_ext_command_GL_EXT_texture_lod_bias
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_lod_bias


  def self.define_ext_command_GL_EXT_texture_mirror_clamp
  end # self.define_ext_command_GL_EXT_texture_mirror_clamp

  def self.get_ext_command_GL_EXT_texture_mirror_clamp
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_mirror_clamp


  def self.define_ext_command_GL_EXT_texture_object
    GL::GL_FUNCTION_SYMBOLS << :AreTexturesResidentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:AreTexturesResidentEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AreTexturesResidentEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:AreTexturesResidentEXT)
    GL.module_eval(<<-SRC)
      def self.AreTexturesResidentEXT(_n_, _textures_, _residences_)
        GL_FUNCTIONS_MAP[:AreTexturesResidentEXT].call(_n_, _textures_, _residences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindTextureEXT)
    GL.module_eval(<<-SRC)
      def self.BindTextureEXT(_target_, _texture_)
        GL_FUNCTIONS_MAP[:BindTextureEXT].call(_target_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteTexturesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteTexturesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteTexturesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteTexturesEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteTexturesEXT(_n_, _textures_)
        GL_FUNCTIONS_MAP[:DeleteTexturesEXT].call(_n_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenTexturesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenTexturesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenTexturesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GenTexturesEXT)
    GL.module_eval(<<-SRC)
      def self.GenTexturesEXT(_n_, _textures_)
        GL_FUNCTIONS_MAP[:GenTexturesEXT].call(_n_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsTextureEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsTextureEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsTextureEXT)
    GL.module_eval(<<-SRC)
      def self.IsTextureEXT(_texture_)
        GL_FUNCTIONS_MAP[:IsTextureEXT].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PrioritizeTexturesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:PrioritizeTexturesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PrioritizeTexturesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:PrioritizeTexturesEXT)
    GL.module_eval(<<-SRC)
      def self.PrioritizeTexturesEXT(_n_, _textures_, _priorities_)
        GL_FUNCTIONS_MAP[:PrioritizeTexturesEXT].call(_n_, _textures_, _priorities_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_object

  def self.get_ext_command_GL_EXT_texture_object
    [
      'AreTexturesResidentEXT',
      'BindTextureEXT',
      'DeleteTexturesEXT',
      'GenTexturesEXT',
      'IsTextureEXT',
      'PrioritizeTexturesEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_object


  def self.define_ext_command_GL_EXT_texture_perturb_normal
    GL::GL_FUNCTION_SYMBOLS << :TextureNormalEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureNormalEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureNormalEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureNormalEXT)
    GL.module_eval(<<-SRC)
      def self.TextureNormalEXT(_mode_)
        GL_FUNCTIONS_MAP[:TextureNormalEXT].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_perturb_normal

  def self.get_ext_command_GL_EXT_texture_perturb_normal
    [
      'TextureNormalEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_perturb_normal


  def self.define_ext_command_GL_EXT_texture_sRGB
  end # self.define_ext_command_GL_EXT_texture_sRGB

  def self.get_ext_command_GL_EXT_texture_sRGB
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB


  def self.define_ext_command_GL_EXT_texture_sRGB_R8
  end # self.define_ext_command_GL_EXT_texture_sRGB_R8

  def self.get_ext_command_GL_EXT_texture_sRGB_R8
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB_R8


  def self.define_ext_command_GL_EXT_texture_sRGB_RG8
  end # self.define_ext_command_GL_EXT_texture_sRGB_RG8

  def self.get_ext_command_GL_EXT_texture_sRGB_RG8
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB_RG8


  def self.define_ext_command_GL_EXT_texture_sRGB_decode
  end # self.define_ext_command_GL_EXT_texture_sRGB_decode

  def self.get_ext_command_GL_EXT_texture_sRGB_decode
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB_decode


  def self.define_ext_command_GL_EXT_texture_shared_exponent
  end # self.define_ext_command_GL_EXT_texture_shared_exponent

  def self.get_ext_command_GL_EXT_texture_shared_exponent
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_shared_exponent


  def self.define_ext_command_GL_EXT_texture_snorm
  end # self.define_ext_command_GL_EXT_texture_snorm

  def self.get_ext_command_GL_EXT_texture_snorm
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_snorm


  def self.define_ext_command_GL_EXT_texture_storage
    GL::GL_FUNCTION_SYMBOLS << :TexStorage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorage1DEXT(_target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:TexStorage1DEXT].call(_target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorage2DEXT(_target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:TexStorage2DEXT].call(_target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexStorage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexStorage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexStorage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexStorage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorage3DEXT(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:TexStorage3DEXT].call(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage1DEXT(_texture_, _target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:TextureStorage1DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:TextureStorage2DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureStorage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureStorage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureStorage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureStorage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:TextureStorage3DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_storage

  def self.get_ext_command_GL_EXT_texture_storage
    [
      'TexStorage1DEXT',
      'TexStorage2DEXT',
      'TexStorage3DEXT',
      'TextureStorage1DEXT',
      'TextureStorage2DEXT',
      'TextureStorage3DEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_storage


  def self.define_ext_command_GL_EXT_texture_swizzle
  end # self.define_ext_command_GL_EXT_texture_swizzle

  def self.get_ext_command_GL_EXT_texture_swizzle
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_swizzle


  def self.define_ext_command_GL_NV_timeline_semaphore
    GL::GL_FUNCTION_SYMBOLS << :CreateSemaphoresNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateSemaphoresNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateSemaphoresNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateSemaphoresNV)
    GL.module_eval(<<-SRC)
      def self.CreateSemaphoresNV(_n_, _semaphores_)
        GL_FUNCTIONS_MAP[:CreateSemaphoresNV].call(_n_, _semaphores_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SemaphoreParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SemaphoreParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SemaphoreParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SemaphoreParameterivNV)
    GL.module_eval(<<-SRC)
      def self.SemaphoreParameterivNV(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:SemaphoreParameterivNV].call(_semaphore_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSemaphoreParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSemaphoreParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSemaphoreParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSemaphoreParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetSemaphoreParameterivNV(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetSemaphoreParameterivNV].call(_semaphore_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_timeline_semaphore

  def self.get_ext_command_GL_NV_timeline_semaphore
    [
      'CreateSemaphoresNV',
      'SemaphoreParameterivNV',
      'GetSemaphoreParameterivNV',
    ]
  end # self.get_ext_command_GL_NV_timeline_semaphore


  def self.define_ext_command_GL_EXT_timer_query
    GL::GL_FUNCTION_SYMBOLS << :GetQueryObjecti64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryObjecti64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryObjecti64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryObjecti64vEXT)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjecti64vEXT(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryObjecti64vEXT].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetQueryObjectui64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetQueryObjectui64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetQueryObjectui64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetQueryObjectui64vEXT)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectui64vEXT(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetQueryObjectui64vEXT].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_timer_query

  def self.get_ext_command_GL_EXT_timer_query
    [
      'GetQueryObjecti64vEXT',
      'GetQueryObjectui64vEXT',
    ]
  end # self.get_ext_command_GL_EXT_timer_query


  def self.define_ext_command_GL_EXT_transform_feedback
    GL::GL_FUNCTION_SYMBOLS << :BeginTransformFeedbackEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginTransformFeedbackEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginTransformFeedbackEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginTransformFeedbackEXT)
    GL.module_eval(<<-SRC)
      def self.BeginTransformFeedbackEXT(_primitiveMode_)
        GL_FUNCTIONS_MAP[:BeginTransformFeedbackEXT].call(_primitiveMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndTransformFeedbackEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EndTransformFeedbackEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndTransformFeedbackEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EndTransformFeedbackEXT)
    GL.module_eval(<<-SRC)
      def self.EndTransformFeedbackEXT()
        GL_FUNCTIONS_MAP[:EndTransformFeedbackEXT].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferRangeEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferRangeEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.BindBufferRangeEXT(_target_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:BindBufferRangeEXT].call(_target_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.BindBufferOffsetEXT(_target_, _index_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:BindBufferOffsetEXT].call(_target_, _index_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferBaseEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferBaseEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferBaseEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferBaseEXT)
    GL.module_eval(<<-SRC)
      def self.BindBufferBaseEXT(_target_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:BindBufferBaseEXT].call(_target_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformFeedbackVaryingsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformFeedbackVaryingsEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformFeedbackVaryingsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformFeedbackVaryingsEXT)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackVaryingsEXT(_program_, _count_, _varyings_, _bufferMode_)
        GL_FUNCTIONS_MAP[:TransformFeedbackVaryingsEXT].call(_program_, _count_, _varyings_, _bufferMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTransformFeedbackVaryingEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTransformFeedbackVaryingEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTransformFeedbackVaryingEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTransformFeedbackVaryingEXT)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbackVaryingEXT(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:GetTransformFeedbackVaryingEXT].call(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_transform_feedback

  def self.get_ext_command_GL_EXT_transform_feedback
    [
      'BeginTransformFeedbackEXT',
      'EndTransformFeedbackEXT',
      'BindBufferRangeEXT',
      'BindBufferOffsetEXT',
      'BindBufferBaseEXT',
      'TransformFeedbackVaryingsEXT',
      'GetTransformFeedbackVaryingEXT',
    ]
  end # self.get_ext_command_GL_EXT_transform_feedback


  def self.define_ext_command_GL_EXT_vertex_array
    GL::GL_FUNCTION_SYMBOLS << :ArrayElementEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ArrayElementEXT] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ArrayElementEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ArrayElementEXT)
    GL.module_eval(<<-SRC)
      def self.ArrayElementEXT(_i_)
        GL_FUNCTIONS_MAP[:ArrayElementEXT].call(_i_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorPointerEXT)
    GL.module_eval(<<-SRC)
      def self.ColorPointerEXT(_size_, _type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:ColorPointerEXT].call(_size_, _type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawArraysEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawArraysEXT)
    GL.module_eval(<<-SRC)
      def self.DrawArraysEXT(_mode_, _first_, _count_)
        GL_FUNCTIONS_MAP[:DrawArraysEXT].call(_mode_, _first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EdgeFlagPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EdgeFlagPointerEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EdgeFlagPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EdgeFlagPointerEXT)
    GL.module_eval(<<-SRC)
      def self.EdgeFlagPointerEXT(_stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:EdgeFlagPointerEXT].call(_stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPointervEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetPointervEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPointervEXT].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IndexPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexPointerEXT)
    GL.module_eval(<<-SRC)
      def self.IndexPointerEXT(_type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:IndexPointerEXT].call(_type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalPointerEXT)
    GL.module_eval(<<-SRC)
      def self.NormalPointerEXT(_type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:NormalPointerEXT].call(_type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordPointerEXT)
    GL.module_eval(<<-SRC)
      def self.TexCoordPointerEXT(_size_, _type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:TexCoordPointerEXT].call(_size_, _type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexPointerEXT(_size_, _type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexPointerEXT].call(_size_, _type_, _stride_, _count_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_array

  def self.get_ext_command_GL_EXT_vertex_array
    [
      'ArrayElementEXT',
      'ColorPointerEXT',
      'DrawArraysEXT',
      'EdgeFlagPointerEXT',
      'GetPointervEXT',
      'IndexPointerEXT',
      'NormalPointerEXT',
      'TexCoordPointerEXT',
      'VertexPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_array


  def self.define_ext_command_GL_EXT_vertex_array_bgra
  end # self.define_ext_command_GL_EXT_vertex_array_bgra

  def self.get_ext_command_GL_EXT_vertex_array_bgra
    [
    ]
  end # self.get_ext_command_GL_EXT_vertex_array_bgra


  def self.define_ext_command_GL_EXT_vertex_attrib_64bit
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1dEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribL1dEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2dEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribL2dEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3dEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribL3dEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4dEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribL4dEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL1dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL2dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL3dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL4dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribLPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribLPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribLPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribLPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLPointerEXT(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribLPointerEXT].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribLdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribLdvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribLdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribLdvEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLdvEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribLdvEXT].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_attrib_64bit

  def self.get_ext_command_GL_EXT_vertex_attrib_64bit
    [
      'VertexAttribL1dEXT',
      'VertexAttribL2dEXT',
      'VertexAttribL3dEXT',
      'VertexAttribL4dEXT',
      'VertexAttribL1dvEXT',
      'VertexAttribL2dvEXT',
      'VertexAttribL3dvEXT',
      'VertexAttribL4dvEXT',
      'VertexAttribLPointerEXT',
      'GetVertexAttribLdvEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_attrib_64bit


  def self.define_ext_command_GL_EXT_vertex_shader
    GL::GL_FUNCTION_SYMBOLS << :BeginVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginVertexShaderEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.BeginVertexShaderEXT()
        GL_FUNCTIONS_MAP[:BeginVertexShaderEXT].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EndVertexShaderEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EndVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.EndVertexShaderEXT()
        GL_FUNCTIONS_MAP[:EndVertexShaderEXT].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVertexShaderEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.BindVertexShaderEXT(_id_)
        GL_FUNCTIONS_MAP[:BindVertexShaderEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenVertexShadersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenVertexShadersEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenVertexShadersEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:GenVertexShadersEXT)
    GL.module_eval(<<-SRC)
      def self.GenVertexShadersEXT(_range_)
        GL_FUNCTIONS_MAP[:GenVertexShadersEXT].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteVertexShaderEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteVertexShaderEXT(_id_)
        GL_FUNCTIONS_MAP[:DeleteVertexShaderEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShaderOp1EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ShaderOp1EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShaderOp1EXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ShaderOp1EXT)
    GL.module_eval(<<-SRC)
      def self.ShaderOp1EXT(_op_, _res_, _arg1_)
        GL_FUNCTIONS_MAP[:ShaderOp1EXT].call(_op_, _res_, _arg1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShaderOp2EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ShaderOp2EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShaderOp2EXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ShaderOp2EXT)
    GL.module_eval(<<-SRC)
      def self.ShaderOp2EXT(_op_, _res_, _arg1_, _arg2_)
        GL_FUNCTIONS_MAP[:ShaderOp2EXT].call(_op_, _res_, _arg1_, _arg2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShaderOp3EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ShaderOp3EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShaderOp3EXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ShaderOp3EXT)
    GL.module_eval(<<-SRC)
      def self.ShaderOp3EXT(_op_, _res_, _arg1_, _arg2_, _arg3_)
        GL_FUNCTIONS_MAP[:ShaderOp3EXT].call(_op_, _res_, _arg1_, _arg2_, _arg3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SwizzleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SwizzleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SwizzleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SwizzleEXT)
    GL.module_eval(<<-SRC)
      def self.SwizzleEXT(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
        GL_FUNCTIONS_MAP[:SwizzleEXT].call(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WriteMaskEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:WriteMaskEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WriteMaskEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:WriteMaskEXT)
    GL.module_eval(<<-SRC)
      def self.WriteMaskEXT(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
        GL_FUNCTIONS_MAP[:WriteMaskEXT].call(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InsertComponentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:InsertComponentEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InsertComponentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:InsertComponentEXT)
    GL.module_eval(<<-SRC)
      def self.InsertComponentEXT(_res_, _src_, _num_)
        GL_FUNCTIONS_MAP[:InsertComponentEXT].call(_res_, _src_, _num_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ExtractComponentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ExtractComponentEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ExtractComponentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:ExtractComponentEXT)
    GL.module_eval(<<-SRC)
      def self.ExtractComponentEXT(_res_, _src_, _num_)
        GL_FUNCTIONS_MAP[:ExtractComponentEXT].call(_res_, _src_, _num_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenSymbolsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GenSymbolsEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenSymbolsEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:GenSymbolsEXT)
    GL.module_eval(<<-SRC)
      def self.GenSymbolsEXT(_datatype_, _storagetype_, _range_, _components_)
        GL_FUNCTIONS_MAP[:GenSymbolsEXT].call(_datatype_, _storagetype_, _range_, _components_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SetInvariantEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SetInvariantEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SetInvariantEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SetInvariantEXT)
    GL.module_eval(<<-SRC)
      def self.SetInvariantEXT(_id_, _type_, _addr_)
        GL_FUNCTIONS_MAP[:SetInvariantEXT].call(_id_, _type_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SetLocalConstantEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:SetLocalConstantEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SetLocalConstantEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:SetLocalConstantEXT)
    GL.module_eval(<<-SRC)
      def self.SetLocalConstantEXT(_id_, _type_, _addr_)
        GL_FUNCTIONS_MAP[:SetLocalConstantEXT].call(_id_, _type_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantbvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantbvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantbvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantbvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantbvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantbvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantsvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantsvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantsvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantsvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantsvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantsvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantivEXT)
    GL.module_eval(<<-SRC)
      def self.VariantivEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantivEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantfvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantfvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantfvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantfvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantdvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantdvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantdvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantdvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantubvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantubvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantubvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantubvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantusvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantusvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantusvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantusvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantusvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantusvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantuivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantuivEXT)
    GL.module_eval(<<-SRC)
      def self.VariantuivEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:VariantuivEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VariantPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VariantPointerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VariantPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VariantPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VariantPointerEXT(_id_, _type_, _stride_, _addr_)
        GL_FUNCTIONS_MAP[:VariantPointerEXT].call(_id_, _type_, _stride_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EnableVariantClientStateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:EnableVariantClientStateEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EnableVariantClientStateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:EnableVariantClientStateEXT)
    GL.module_eval(<<-SRC)
      def self.EnableVariantClientStateEXT(_id_)
        GL_FUNCTIONS_MAP[:EnableVariantClientStateEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DisableVariantClientStateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:DisableVariantClientStateEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DisableVariantClientStateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:DisableVariantClientStateEXT)
    GL.module_eval(<<-SRC)
      def self.DisableVariantClientStateEXT(_id_)
        GL_FUNCTIONS_MAP[:DisableVariantClientStateEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindLightParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindLightParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindLightParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:BindLightParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindLightParameterEXT(_light_, _value_)
        GL_FUNCTIONS_MAP[:BindLightParameterEXT].call(_light_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindMaterialParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindMaterialParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindMaterialParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:BindMaterialParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindMaterialParameterEXT(_face_, _value_)
        GL_FUNCTIONS_MAP[:BindMaterialParameterEXT].call(_face_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindTexGenParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTexGenParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTexGenParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:BindTexGenParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindTexGenParameterEXT(_unit_, _coord_, _value_)
        GL_FUNCTIONS_MAP[:BindTexGenParameterEXT].call(_unit_, _coord_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindTextureUnitParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTextureUnitParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTextureUnitParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:BindTextureUnitParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindTextureUnitParameterEXT(_unit_, _value_)
        GL_FUNCTIONS_MAP[:BindTextureUnitParameterEXT].call(_unit_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:BindParameterEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:BindParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindParameterEXT(_value_)
        GL_FUNCTIONS_MAP[:BindParameterEXT].call(_value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsVariantEnabledEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:IsVariantEnabledEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsVariantEnabledEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsVariantEnabledEXT)
    GL.module_eval(<<-SRC)
      def self.IsVariantEnabledEXT(_id_, _cap_)
        GL_FUNCTIONS_MAP[:IsVariantEnabledEXT].call(_id_, _cap_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVariantBooleanvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVariantBooleanvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVariantBooleanvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVariantBooleanvEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantBooleanvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetVariantBooleanvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVariantIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVariantIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVariantIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVariantIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantIntegervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetVariantIntegervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVariantFloatvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVariantFloatvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVariantFloatvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVariantFloatvEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantFloatvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetVariantFloatvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVariantPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVariantPointervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVariantPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVariantPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantPointervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetVariantPointervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetInvariantBooleanvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInvariantBooleanvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInvariantBooleanvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInvariantBooleanvEXT)
    GL.module_eval(<<-SRC)
      def self.GetInvariantBooleanvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetInvariantBooleanvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetInvariantIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInvariantIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInvariantIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInvariantIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetInvariantIntegervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetInvariantIntegervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetInvariantFloatvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInvariantFloatvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInvariantFloatvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInvariantFloatvEXT)
    GL.module_eval(<<-SRC)
      def self.GetInvariantFloatvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetInvariantFloatvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetLocalConstantBooleanvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetLocalConstantBooleanvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetLocalConstantBooleanvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetLocalConstantBooleanvEXT)
    GL.module_eval(<<-SRC)
      def self.GetLocalConstantBooleanvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetLocalConstantBooleanvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetLocalConstantIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetLocalConstantIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetLocalConstantIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetLocalConstantIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetLocalConstantIntegervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetLocalConstantIntegervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetLocalConstantFloatvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetLocalConstantFloatvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetLocalConstantFloatvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetLocalConstantFloatvEXT)
    GL.module_eval(<<-SRC)
      def self.GetLocalConstantFloatvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:GetLocalConstantFloatvEXT].call(_id_, _value_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_shader

  def self.get_ext_command_GL_EXT_vertex_shader
    [
      'BeginVertexShaderEXT',
      'EndVertexShaderEXT',
      'BindVertexShaderEXT',
      'GenVertexShadersEXT',
      'DeleteVertexShaderEXT',
      'ShaderOp1EXT',
      'ShaderOp2EXT',
      'ShaderOp3EXT',
      'SwizzleEXT',
      'WriteMaskEXT',
      'InsertComponentEXT',
      'ExtractComponentEXT',
      'GenSymbolsEXT',
      'SetInvariantEXT',
      'SetLocalConstantEXT',
      'VariantbvEXT',
      'VariantsvEXT',
      'VariantivEXT',
      'VariantfvEXT',
      'VariantdvEXT',
      'VariantubvEXT',
      'VariantusvEXT',
      'VariantuivEXT',
      'VariantPointerEXT',
      'EnableVariantClientStateEXT',
      'DisableVariantClientStateEXT',
      'BindLightParameterEXT',
      'BindMaterialParameterEXT',
      'BindTexGenParameterEXT',
      'BindTextureUnitParameterEXT',
      'BindParameterEXT',
      'IsVariantEnabledEXT',
      'GetVariantBooleanvEXT',
      'GetVariantIntegervEXT',
      'GetVariantFloatvEXT',
      'GetVariantPointervEXT',
      'GetInvariantBooleanvEXT',
      'GetInvariantIntegervEXT',
      'GetInvariantFloatvEXT',
      'GetLocalConstantBooleanvEXT',
      'GetLocalConstantIntegervEXT',
      'GetLocalConstantFloatvEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_shader


  def self.define_ext_command_GL_EXT_vertex_weighting
    GL::GL_FUNCTION_SYMBOLS << :VertexWeightfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexWeightfEXT] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexWeightfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexWeightfEXT)
    GL.module_eval(<<-SRC)
      def self.VertexWeightfEXT(_weight_)
        GL_FUNCTIONS_MAP[:VertexWeightfEXT].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexWeightfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexWeightfvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexWeightfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexWeightfvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexWeightfvEXT(_weight_)
        GL_FUNCTIONS_MAP[:VertexWeightfvEXT].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexWeightPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexWeightPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexWeightPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexWeightPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexWeightPointerEXT(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexWeightPointerEXT].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_weighting

  def self.get_ext_command_GL_EXT_vertex_weighting
    [
      'VertexWeightfEXT',
      'VertexWeightfvEXT',
      'VertexWeightPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_weighting


  def self.define_ext_command_GL_EXT_win32_keyed_mutex
    GL::GL_FUNCTION_SYMBOLS << :AcquireKeyedMutexWin32EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:AcquireKeyedMutexWin32EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AcquireKeyedMutexWin32EXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:AcquireKeyedMutexWin32EXT)
    GL.module_eval(<<-SRC)
      def self.AcquireKeyedMutexWin32EXT(_memory_, _key_, _timeout_)
        GL_FUNCTIONS_MAP[:AcquireKeyedMutexWin32EXT].call(_memory_, _key_, _timeout_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReleaseKeyedMutexWin32EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ReleaseKeyedMutexWin32EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReleaseKeyedMutexWin32EXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:ReleaseKeyedMutexWin32EXT)
    GL.module_eval(<<-SRC)
      def self.ReleaseKeyedMutexWin32EXT(_memory_, _key_)
        GL_FUNCTIONS_MAP[:ReleaseKeyedMutexWin32EXT].call(_memory_, _key_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_win32_keyed_mutex

  def self.get_ext_command_GL_EXT_win32_keyed_mutex
    [
      'AcquireKeyedMutexWin32EXT',
      'ReleaseKeyedMutexWin32EXT',
    ]
  end # self.get_ext_command_GL_EXT_win32_keyed_mutex


  def self.define_ext_command_GL_EXT_window_rectangles
    GL::GL_FUNCTION_SYMBOLS << :WindowRectanglesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowRectanglesEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowRectanglesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowRectanglesEXT)
    GL.module_eval(<<-SRC)
      def self.WindowRectanglesEXT(_mode_, _count_, _box_)
        GL_FUNCTIONS_MAP[:WindowRectanglesEXT].call(_mode_, _count_, _box_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_window_rectangles

  def self.get_ext_command_GL_EXT_window_rectangles
    [
      'WindowRectanglesEXT',
    ]
  end # self.get_ext_command_GL_EXT_window_rectangles


  def self.define_ext_command_GL_EXT_x11_sync_object
    GL::GL_FUNCTION_SYMBOLS << :ImportSyncEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:ImportSyncEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImportSyncEXT] = Fiddle::TYPE_VOIDP
    GL.bind_command(:ImportSyncEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSyncEXT(_external_sync_type_, _external_sync_, _flags_)
        GL_FUNCTIONS_MAP[:ImportSyncEXT].call(_external_sync_type_, _external_sync_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_x11_sync_object

  def self.get_ext_command_GL_EXT_x11_sync_object
    [
      'ImportSyncEXT',
    ]
  end # self.get_ext_command_GL_EXT_x11_sync_object


  def self.define_ext_command_GL_GREMEDY_frame_terminator
    GL::GL_FUNCTION_SYMBOLS << :FrameTerminatorGREMEDY
    GL::GL_FUNCTIONS_ARGS_MAP[:FrameTerminatorGREMEDY] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:FrameTerminatorGREMEDY] = Fiddle::TYPE_VOID
    GL.bind_command(:FrameTerminatorGREMEDY)
    GL.module_eval(<<-SRC)
      def self.FrameTerminatorGREMEDY()
        GL_FUNCTIONS_MAP[:FrameTerminatorGREMEDY].call()
      end
    SRC
  end # self.define_ext_command_GL_GREMEDY_frame_terminator

  def self.get_ext_command_GL_GREMEDY_frame_terminator
    [
      'FrameTerminatorGREMEDY',
    ]
  end # self.get_ext_command_GL_GREMEDY_frame_terminator


  def self.define_ext_command_GL_GREMEDY_string_marker
    GL::GL_FUNCTION_SYMBOLS << :StringMarkerGREMEDY
    GL::GL_FUNCTIONS_ARGS_MAP[:StringMarkerGREMEDY] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StringMarkerGREMEDY] = Fiddle::TYPE_VOID
    GL.bind_command(:StringMarkerGREMEDY)
    GL.module_eval(<<-SRC)
      def self.StringMarkerGREMEDY(_len_, _string_)
        GL_FUNCTIONS_MAP[:StringMarkerGREMEDY].call(_len_, _string_)
      end
    SRC
  end # self.define_ext_command_GL_GREMEDY_string_marker

  def self.get_ext_command_GL_GREMEDY_string_marker
    [
      'StringMarkerGREMEDY',
    ]
  end # self.get_ext_command_GL_GREMEDY_string_marker


  def self.define_ext_command_GL_HP_convolution_border_modes
  end # self.define_ext_command_GL_HP_convolution_border_modes

  def self.get_ext_command_GL_HP_convolution_border_modes
    [
    ]
  end # self.get_ext_command_GL_HP_convolution_border_modes


  def self.define_ext_command_GL_HP_image_transform
    GL::GL_FUNCTION_SYMBOLS << :ImageTransformParameteriHP
    GL::GL_FUNCTIONS_ARGS_MAP[:ImageTransformParameteriHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImageTransformParameteriHP] = Fiddle::TYPE_VOID
    GL.bind_command(:ImageTransformParameteriHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameteriHP(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:ImageTransformParameteriHP].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ImageTransformParameterfHP
    GL::GL_FUNCTIONS_ARGS_MAP[:ImageTransformParameterfHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImageTransformParameterfHP] = Fiddle::TYPE_VOID
    GL.bind_command(:ImageTransformParameterfHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameterfHP(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:ImageTransformParameterfHP].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ImageTransformParameterivHP
    GL::GL_FUNCTIONS_ARGS_MAP[:ImageTransformParameterivHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImageTransformParameterivHP] = Fiddle::TYPE_VOID
    GL.bind_command(:ImageTransformParameterivHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameterivHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ImageTransformParameterivHP].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ImageTransformParameterfvHP
    GL::GL_FUNCTIONS_ARGS_MAP[:ImageTransformParameterfvHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ImageTransformParameterfvHP] = Fiddle::TYPE_VOID
    GL.bind_command(:ImageTransformParameterfvHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameterfvHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ImageTransformParameterfvHP].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetImageTransformParameterivHP
    GL::GL_FUNCTIONS_ARGS_MAP[:GetImageTransformParameterivHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetImageTransformParameterivHP] = Fiddle::TYPE_VOID
    GL.bind_command(:GetImageTransformParameterivHP)
    GL.module_eval(<<-SRC)
      def self.GetImageTransformParameterivHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetImageTransformParameterivHP].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetImageTransformParameterfvHP
    GL::GL_FUNCTIONS_ARGS_MAP[:GetImageTransformParameterfvHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetImageTransformParameterfvHP] = Fiddle::TYPE_VOID
    GL.bind_command(:GetImageTransformParameterfvHP)
    GL.module_eval(<<-SRC)
      def self.GetImageTransformParameterfvHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetImageTransformParameterfvHP].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_HP_image_transform

  def self.get_ext_command_GL_HP_image_transform
    [
      'ImageTransformParameteriHP',
      'ImageTransformParameterfHP',
      'ImageTransformParameterivHP',
      'ImageTransformParameterfvHP',
      'GetImageTransformParameterivHP',
      'GetImageTransformParameterfvHP',
    ]
  end # self.get_ext_command_GL_HP_image_transform


  def self.define_ext_command_GL_HP_occlusion_test
  end # self.define_ext_command_GL_HP_occlusion_test

  def self.get_ext_command_GL_HP_occlusion_test
    [
    ]
  end # self.get_ext_command_GL_HP_occlusion_test


  def self.define_ext_command_GL_HP_texture_lighting
  end # self.define_ext_command_GL_HP_texture_lighting

  def self.get_ext_command_GL_HP_texture_lighting
    [
    ]
  end # self.get_ext_command_GL_HP_texture_lighting


  def self.define_ext_command_GL_IBM_cull_vertex
  end # self.define_ext_command_GL_IBM_cull_vertex

  def self.get_ext_command_GL_IBM_cull_vertex
    [
    ]
  end # self.get_ext_command_GL_IBM_cull_vertex


  def self.define_ext_command_GL_IBM_multimode_draw_arrays
    GL::GL_FUNCTION_SYMBOLS << :MultiModeDrawArraysIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiModeDrawArraysIBM] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiModeDrawArraysIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiModeDrawArraysIBM)
    GL.module_eval(<<-SRC)
      def self.MultiModeDrawArraysIBM(_mode_, _first_, _count_, _primcount_, _modestride_)
        GL_FUNCTIONS_MAP[:MultiModeDrawArraysIBM].call(_mode_, _first_, _count_, _primcount_, _modestride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiModeDrawElementsIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiModeDrawElementsIBM] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiModeDrawElementsIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiModeDrawElementsIBM)
    GL.module_eval(<<-SRC)
      def self.MultiModeDrawElementsIBM(_mode_, _count_, _type_, _indices_, _primcount_, _modestride_)
        GL_FUNCTIONS_MAP[:MultiModeDrawElementsIBM].call(_mode_, _count_, _type_, _indices_, _primcount_, _modestride_)
      end
    SRC
  end # self.define_ext_command_GL_IBM_multimode_draw_arrays

  def self.get_ext_command_GL_IBM_multimode_draw_arrays
    [
      'MultiModeDrawArraysIBM',
      'MultiModeDrawElementsIBM',
    ]
  end # self.get_ext_command_GL_IBM_multimode_draw_arrays


  def self.define_ext_command_GL_IBM_rasterpos_clip
  end # self.define_ext_command_GL_IBM_rasterpos_clip

  def self.get_ext_command_GL_IBM_rasterpos_clip
    [
    ]
  end # self.get_ext_command_GL_IBM_rasterpos_clip


  def self.define_ext_command_GL_IBM_static_data
    GL::GL_FUNCTION_SYMBOLS << :FlushStaticDataIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushStaticDataIBM] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushStaticDataIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushStaticDataIBM)
    GL.module_eval(<<-SRC)
      def self.FlushStaticDataIBM(_target_)
        GL_FUNCTIONS_MAP[:FlushStaticDataIBM].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_IBM_static_data

  def self.get_ext_command_GL_IBM_static_data
    [
      'FlushStaticDataIBM',
    ]
  end # self.get_ext_command_GL_IBM_static_data


  def self.define_ext_command_GL_IBM_texture_mirrored_repeat
  end # self.define_ext_command_GL_IBM_texture_mirrored_repeat

  def self.get_ext_command_GL_IBM_texture_mirrored_repeat
    [
    ]
  end # self.get_ext_command_GL_IBM_texture_mirrored_repeat


  def self.define_ext_command_GL_IBM_vertex_array_lists
    GL::GL_FUNCTION_SYMBOLS << :ColorPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.ColorPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:ColorPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColorPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColorPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColorPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColorPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:SecondaryColorPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EdgeFlagPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:EdgeFlagPointerListIBM] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EdgeFlagPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:EdgeFlagPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.EdgeFlagPointerListIBM(_stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:EdgeFlagPointerListIBM].call(_stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoordPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordPointerListIBM] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.FogCoordPointerListIBM(_type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:FogCoordPointerListIBM].call(_type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IndexPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexPointerListIBM] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.IndexPointerListIBM(_type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:IndexPointerListIBM].call(_type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalPointerListIBM] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.NormalPointerListIBM(_type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:NormalPointerListIBM].call(_type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.TexCoordPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:TexCoordPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.VertexPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:VertexPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC
  end # self.define_ext_command_GL_IBM_vertex_array_lists

  def self.get_ext_command_GL_IBM_vertex_array_lists
    [
      'ColorPointerListIBM',
      'SecondaryColorPointerListIBM',
      'EdgeFlagPointerListIBM',
      'FogCoordPointerListIBM',
      'IndexPointerListIBM',
      'NormalPointerListIBM',
      'TexCoordPointerListIBM',
      'VertexPointerListIBM',
    ]
  end # self.get_ext_command_GL_IBM_vertex_array_lists


  def self.define_ext_command_GL_INGR_blend_func_separate
    GL::GL_FUNCTION_SYMBOLS << :BlendFuncSeparateINGR
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendFuncSeparateINGR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendFuncSeparateINGR] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendFuncSeparateINGR)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateINGR(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
        GL_FUNCTIONS_MAP[:BlendFuncSeparateINGR].call(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_INGR_blend_func_separate

  def self.get_ext_command_GL_INGR_blend_func_separate
    [
      'BlendFuncSeparateINGR',
    ]
  end # self.get_ext_command_GL_INGR_blend_func_separate


  def self.define_ext_command_GL_INGR_color_clamp
  end # self.define_ext_command_GL_INGR_color_clamp

  def self.get_ext_command_GL_INGR_color_clamp
    [
    ]
  end # self.get_ext_command_GL_INGR_color_clamp


  def self.define_ext_command_GL_INGR_interlace_read
  end # self.define_ext_command_GL_INGR_interlace_read

  def self.get_ext_command_GL_INGR_interlace_read
    [
    ]
  end # self.get_ext_command_GL_INGR_interlace_read


  def self.define_ext_command_GL_INTEL_conservative_rasterization
  end # self.define_ext_command_GL_INTEL_conservative_rasterization

  def self.get_ext_command_GL_INTEL_conservative_rasterization
    [
    ]
  end # self.get_ext_command_GL_INTEL_conservative_rasterization


  def self.define_ext_command_GL_INTEL_fragment_shader_ordering
  end # self.define_ext_command_GL_INTEL_fragment_shader_ordering

  def self.get_ext_command_GL_INTEL_fragment_shader_ordering
    [
    ]
  end # self.get_ext_command_GL_INTEL_fragment_shader_ordering


  def self.define_ext_command_GL_INTEL_framebuffer_CMAA
    GL::GL_FUNCTION_SYMBOLS << :ApplyFramebufferAttachmentCMAAINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:ApplyFramebufferAttachmentCMAAINTEL] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:ApplyFramebufferAttachmentCMAAINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:ApplyFramebufferAttachmentCMAAINTEL)
    GL.module_eval(<<-SRC)
      def self.ApplyFramebufferAttachmentCMAAINTEL()
        GL_FUNCTIONS_MAP[:ApplyFramebufferAttachmentCMAAINTEL].call()
      end
    SRC
  end # self.define_ext_command_GL_INTEL_framebuffer_CMAA

  def self.get_ext_command_GL_INTEL_framebuffer_CMAA
    [
      'ApplyFramebufferAttachmentCMAAINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_framebuffer_CMAA


  def self.define_ext_command_GL_INTEL_map_texture
    GL::GL_FUNCTION_SYMBOLS << :SyncTextureINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:SyncTextureINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SyncTextureINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:SyncTextureINTEL)
    GL.module_eval(<<-SRC)
      def self.SyncTextureINTEL(_texture_)
        GL_FUNCTIONS_MAP[:SyncTextureINTEL].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UnmapTexture2DINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:UnmapTexture2DINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UnmapTexture2DINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:UnmapTexture2DINTEL)
    GL.module_eval(<<-SRC)
      def self.UnmapTexture2DINTEL(_texture_, _level_)
        GL_FUNCTIONS_MAP[:UnmapTexture2DINTEL].call(_texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapTexture2DINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:MapTexture2DINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapTexture2DINTEL] = Fiddle::TYPE_VOIDP
    GL.bind_command(:MapTexture2DINTEL)
    GL.module_eval(<<-SRC)
      def self.MapTexture2DINTEL(_texture_, _level_, _access_, _stride_, _layout_)
        GL_FUNCTIONS_MAP[:MapTexture2DINTEL].call(_texture_, _level_, _access_, _stride_, _layout_)
      end
    SRC
  end # self.define_ext_command_GL_INTEL_map_texture

  def self.get_ext_command_GL_INTEL_map_texture
    [
      'SyncTextureINTEL',
      'UnmapTexture2DINTEL',
      'MapTexture2DINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_map_texture


  def self.define_ext_command_GL_INTEL_blackhole_render
  end # self.define_ext_command_GL_INTEL_blackhole_render

  def self.get_ext_command_GL_INTEL_blackhole_render
    [
    ]
  end # self.get_ext_command_GL_INTEL_blackhole_render


  def self.define_ext_command_GL_INTEL_parallel_arrays
    GL::GL_FUNCTION_SYMBOLS << :VertexPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexPointervINTEL] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.VertexPointervINTEL(_size_, _type_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexPointervINTEL].call(_size_, _type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalPointervINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.NormalPointervINTEL(_type_, _pointer_)
        GL_FUNCTIONS_MAP[:NormalPointervINTEL].call(_type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorPointervINTEL] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.ColorPointervINTEL(_size_, _type_, _pointer_)
        GL_FUNCTIONS_MAP[:ColorPointervINTEL].call(_size_, _type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordPointervINTEL] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.TexCoordPointervINTEL(_size_, _type_, _pointer_)
        GL_FUNCTIONS_MAP[:TexCoordPointervINTEL].call(_size_, _type_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_INTEL_parallel_arrays

  def self.get_ext_command_GL_INTEL_parallel_arrays
    [
      'VertexPointervINTEL',
      'NormalPointervINTEL',
      'ColorPointervINTEL',
      'TexCoordPointervINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_parallel_arrays


  def self.define_ext_command_GL_INTEL_performance_query
    GL::GL_FUNCTION_SYMBOLS << :BeginPerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginPerfQueryINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginPerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginPerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.BeginPerfQueryINTEL(_queryHandle_)
        GL_FUNCTIONS_MAP[:BeginPerfQueryINTEL].call(_queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreatePerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:CreatePerfQueryINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreatePerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:CreatePerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.CreatePerfQueryINTEL(_queryId_, _queryHandle_)
        GL_FUNCTIONS_MAP[:CreatePerfQueryINTEL].call(_queryId_, _queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeletePerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:DeletePerfQueryINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeletePerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:DeletePerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.DeletePerfQueryINTEL(_queryHandle_)
        GL_FUNCTIONS_MAP[:DeletePerfQueryINTEL].call(_queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndPerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:EndPerfQueryINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndPerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:EndPerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.EndPerfQueryINTEL(_queryHandle_)
        GL_FUNCTIONS_MAP[:EndPerfQueryINTEL].call(_queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFirstPerfQueryIdINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFirstPerfQueryIdINTEL] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFirstPerfQueryIdINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFirstPerfQueryIdINTEL)
    GL.module_eval(<<-SRC)
      def self.GetFirstPerfQueryIdINTEL(_queryId_)
        GL_FUNCTIONS_MAP[:GetFirstPerfQueryIdINTEL].call(_queryId_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNextPerfQueryIdINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNextPerfQueryIdINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNextPerfQueryIdINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNextPerfQueryIdINTEL)
    GL.module_eval(<<-SRC)
      def self.GetNextPerfQueryIdINTEL(_queryId_, _nextQueryId_)
        GL_FUNCTIONS_MAP[:GetNextPerfQueryIdINTEL].call(_queryId_, _nextQueryId_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfCounterInfoINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfCounterInfoINTEL] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfCounterInfoINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfCounterInfoINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfCounterInfoINTEL(_queryId_, _counterId_, _counterNameLength_, _counterName_, _counterDescLength_, _counterDesc_, _counterOffset_, _counterDataSize_, _counterTypeEnum_, _counterDataTypeEnum_, _rawCounterMaxValue_)
        GL_FUNCTIONS_MAP[:GetPerfCounterInfoINTEL].call(_queryId_, _counterId_, _counterNameLength_, _counterName_, _counterDescLength_, _counterDesc_, _counterOffset_, _counterDataSize_, _counterTypeEnum_, _counterDataTypeEnum_, _rawCounterMaxValue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfQueryDataINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfQueryDataINTEL] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfQueryDataINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfQueryDataINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfQueryDataINTEL(_queryHandle_, _flags_, _dataSize_, _data_, _bytesWritten_)
        GL_FUNCTIONS_MAP[:GetPerfQueryDataINTEL].call(_queryHandle_, _flags_, _dataSize_, _data_, _bytesWritten_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfQueryIdByNameINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfQueryIdByNameINTEL] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfQueryIdByNameINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfQueryIdByNameINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfQueryIdByNameINTEL(_queryName_, _queryId_)
        GL_FUNCTIONS_MAP[:GetPerfQueryIdByNameINTEL].call(_queryName_, _queryId_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPerfQueryInfoINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPerfQueryInfoINTEL] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPerfQueryInfoINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPerfQueryInfoINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfQueryInfoINTEL(_queryId_, _queryNameLength_, _queryName_, _dataSize_, _noCounters_, _noInstances_, _capsMask_)
        GL_FUNCTIONS_MAP[:GetPerfQueryInfoINTEL].call(_queryId_, _queryNameLength_, _queryName_, _dataSize_, _noCounters_, _noInstances_, _capsMask_)
      end
    SRC
  end # self.define_ext_command_GL_INTEL_performance_query

  def self.get_ext_command_GL_INTEL_performance_query
    [
      'BeginPerfQueryINTEL',
      'CreatePerfQueryINTEL',
      'DeletePerfQueryINTEL',
      'EndPerfQueryINTEL',
      'GetFirstPerfQueryIdINTEL',
      'GetNextPerfQueryIdINTEL',
      'GetPerfCounterInfoINTEL',
      'GetPerfQueryDataINTEL',
      'GetPerfQueryIdByNameINTEL',
      'GetPerfQueryInfoINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_performance_query


  def self.define_ext_command_GL_KHR_blend_equation_advanced
    GL::GL_FUNCTION_SYMBOLS << :BlendBarrierKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendBarrierKHR] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendBarrierKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendBarrierKHR)
    GL.module_eval(<<-SRC)
      def self.BlendBarrierKHR()
        GL_FUNCTIONS_MAP[:BlendBarrierKHR].call()
      end
    SRC
  end # self.define_ext_command_GL_KHR_blend_equation_advanced

  def self.get_ext_command_GL_KHR_blend_equation_advanced
    [
      'BlendBarrierKHR',
    ]
  end # self.get_ext_command_GL_KHR_blend_equation_advanced


  def self.define_ext_command_GL_KHR_blend_equation_advanced_coherent
  end # self.define_ext_command_GL_KHR_blend_equation_advanced_coherent

  def self.get_ext_command_GL_KHR_blend_equation_advanced_coherent
    [
    ]
  end # self.get_ext_command_GL_KHR_blend_equation_advanced_coherent


  def self.define_ext_command_GL_KHR_context_flush_control
  end # self.define_ext_command_GL_KHR_context_flush_control

  def self.get_ext_command_GL_KHR_context_flush_control
    [
    ]
  end # self.get_ext_command_GL_KHR_context_flush_control


  def self.define_ext_command_GL_KHR_debug
    GL::GL_FUNCTION_SYMBOLS << :DebugMessageControl
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageControl] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageControl] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageControl)
    GL.module_eval(<<-SRC)
      def self.DebugMessageControl(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:DebugMessageControl].call(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageInsert
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageInsert] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageInsert] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageInsert)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsert(_source_, _type_, _id_, _severity_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:DebugMessageInsert].call(_source_, _type_, _id_, _severity_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageCallback
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageCallback] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageCallback] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageCallback)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallback(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:DebugMessageCallback].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDebugMessageLog
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDebugMessageLog] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDebugMessageLog] = -Fiddle::TYPE_INT
    GL.bind_command(:GetDebugMessageLog)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLog(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
        GL_FUNCTIONS_MAP[:GetDebugMessageLog].call(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PushDebugGroup
    GL::GL_FUNCTIONS_ARGS_MAP[:PushDebugGroup] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PushDebugGroup] = Fiddle::TYPE_VOID
    GL.bind_command(:PushDebugGroup)
    GL.module_eval(<<-SRC)
      def self.PushDebugGroup(_source_, _id_, _length_, _message_)
        GL_FUNCTIONS_MAP[:PushDebugGroup].call(_source_, _id_, _length_, _message_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PopDebugGroup
    GL::GL_FUNCTIONS_ARGS_MAP[:PopDebugGroup] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:PopDebugGroup] = Fiddle::TYPE_VOID
    GL.bind_command(:PopDebugGroup)
    GL.module_eval(<<-SRC)
      def self.PopDebugGroup()
        GL_FUNCTIONS_MAP[:PopDebugGroup].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ObjectLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:ObjectLabel] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ObjectLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:ObjectLabel)
    GL.module_eval(<<-SRC)
      def self.ObjectLabel(_identifier_, _name_, _length_, _label_)
        GL_FUNCTIONS_MAP[:ObjectLabel].call(_identifier_, _name_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectLabel] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectLabel)
    GL.module_eval(<<-SRC)
      def self.GetObjectLabel(_identifier_, _name_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:GetObjectLabel].call(_identifier_, _name_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ObjectPtrLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:ObjectPtrLabel] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ObjectPtrLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:ObjectPtrLabel)
    GL.module_eval(<<-SRC)
      def self.ObjectPtrLabel(_ptr_, _length_, _label_)
        GL_FUNCTIONS_MAP[:ObjectPtrLabel].call(_ptr_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectPtrLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectPtrLabel] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectPtrLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectPtrLabel)
    GL.module_eval(<<-SRC)
      def self.GetObjectPtrLabel(_ptr_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:GetObjectPtrLabel].call(_ptr_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPointerv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPointerv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPointerv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPointerv)
    GL.module_eval(<<-SRC)
      def self.GetPointerv(_pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPointerv].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageControlKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageControlKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageControlKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageControlKHR)
    GL.module_eval(<<-SRC)
      def self.DebugMessageControlKHR(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:DebugMessageControlKHR].call(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageInsertKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageInsertKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageInsertKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageInsertKHR)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsertKHR(_source_, _type_, _id_, _severity_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:DebugMessageInsertKHR].call(_source_, _type_, _id_, _severity_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DebugMessageCallbackKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:DebugMessageCallbackKHR] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DebugMessageCallbackKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:DebugMessageCallbackKHR)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallbackKHR(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:DebugMessageCallbackKHR].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDebugMessageLogKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDebugMessageLogKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDebugMessageLogKHR] = -Fiddle::TYPE_INT
    GL.bind_command(:GetDebugMessageLogKHR)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLogKHR(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
        GL_FUNCTIONS_MAP[:GetDebugMessageLogKHR].call(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PushDebugGroupKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:PushDebugGroupKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PushDebugGroupKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:PushDebugGroupKHR)
    GL.module_eval(<<-SRC)
      def self.PushDebugGroupKHR(_source_, _id_, _length_, _message_)
        GL_FUNCTIONS_MAP[:PushDebugGroupKHR].call(_source_, _id_, _length_, _message_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PopDebugGroupKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:PopDebugGroupKHR] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:PopDebugGroupKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:PopDebugGroupKHR)
    GL.module_eval(<<-SRC)
      def self.PopDebugGroupKHR()
        GL_FUNCTIONS_MAP[:PopDebugGroupKHR].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ObjectLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:ObjectLabelKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ObjectLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:ObjectLabelKHR)
    GL.module_eval(<<-SRC)
      def self.ObjectLabelKHR(_identifier_, _name_, _length_, _label_)
        GL_FUNCTIONS_MAP[:ObjectLabelKHR].call(_identifier_, _name_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectLabelKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectLabelKHR)
    GL.module_eval(<<-SRC)
      def self.GetObjectLabelKHR(_identifier_, _name_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:GetObjectLabelKHR].call(_identifier_, _name_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ObjectPtrLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:ObjectPtrLabelKHR] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ObjectPtrLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:ObjectPtrLabelKHR)
    GL.module_eval(<<-SRC)
      def self.ObjectPtrLabelKHR(_ptr_, _length_, _label_)
        GL_FUNCTIONS_MAP[:ObjectPtrLabelKHR].call(_ptr_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetObjectPtrLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetObjectPtrLabelKHR] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetObjectPtrLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:GetObjectPtrLabelKHR)
    GL.module_eval(<<-SRC)
      def self.GetObjectPtrLabelKHR(_ptr_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:GetObjectPtrLabelKHR].call(_ptr_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPointervKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPointervKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPointervKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPointervKHR)
    GL.module_eval(<<-SRC)
      def self.GetPointervKHR(_pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPointervKHR].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_KHR_debug

  def self.get_ext_command_GL_KHR_debug
    [
      'DebugMessageControl',
      'DebugMessageInsert',
      'DebugMessageCallback',
      'GetDebugMessageLog',
      'PushDebugGroup',
      'PopDebugGroup',
      'ObjectLabel',
      'GetObjectLabel',
      'ObjectPtrLabel',
      'GetObjectPtrLabel',
      'GetPointerv',
      'DebugMessageControlKHR',
      'DebugMessageInsertKHR',
      'DebugMessageCallbackKHR',
      'GetDebugMessageLogKHR',
      'PushDebugGroupKHR',
      'PopDebugGroupKHR',
      'ObjectLabelKHR',
      'GetObjectLabelKHR',
      'ObjectPtrLabelKHR',
      'GetObjectPtrLabelKHR',
      'GetPointervKHR',
    ]
  end # self.get_ext_command_GL_KHR_debug


  def self.define_ext_command_GL_KHR_no_error
  end # self.define_ext_command_GL_KHR_no_error

  def self.get_ext_command_GL_KHR_no_error
    [
    ]
  end # self.get_ext_command_GL_KHR_no_error


  def self.define_ext_command_GL_KHR_robust_buffer_access_behavior
  end # self.define_ext_command_GL_KHR_robust_buffer_access_behavior

  def self.get_ext_command_GL_KHR_robust_buffer_access_behavior
    [
    ]
  end # self.get_ext_command_GL_KHR_robust_buffer_access_behavior


  def self.define_ext_command_GL_KHR_robustness
    GL::GL_FUNCTION_SYMBOLS << :GetGraphicsResetStatus
    GL::GL_FUNCTIONS_ARGS_MAP[:GetGraphicsResetStatus] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetGraphicsResetStatus] = -Fiddle::TYPE_INT
    GL.bind_command(:GetGraphicsResetStatus)
    GL.module_eval(<<-SRC)
      def self.GetGraphicsResetStatus()
        GL_FUNCTIONS_MAP[:GetGraphicsResetStatus].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReadnPixels
    GL::GL_FUNCTIONS_ARGS_MAP[:ReadnPixels] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReadnPixels] = Fiddle::TYPE_VOID
    GL.bind_command(:ReadnPixels)
    GL.module_eval(<<-SRC)
      def self.ReadnPixels(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
        GL_FUNCTIONS_MAP[:ReadnPixels].call(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformfv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformfv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformfv)
    GL.module_eval(<<-SRC)
      def self.GetnUniformfv(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformfv].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformiv)
    GL.module_eval(<<-SRC)
      def self.GetnUniformiv(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformiv].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformuiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformuiv)
    GL.module_eval(<<-SRC)
      def self.GetnUniformuiv(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformuiv].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetGraphicsResetStatusKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetGraphicsResetStatusKHR] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetGraphicsResetStatusKHR] = -Fiddle::TYPE_INT
    GL.bind_command(:GetGraphicsResetStatusKHR)
    GL.module_eval(<<-SRC)
      def self.GetGraphicsResetStatusKHR()
        GL_FUNCTIONS_MAP[:GetGraphicsResetStatusKHR].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReadnPixelsKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:ReadnPixelsKHR] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReadnPixelsKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:ReadnPixelsKHR)
    GL.module_eval(<<-SRC)
      def self.ReadnPixelsKHR(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
        GL_FUNCTIONS_MAP[:ReadnPixelsKHR].call(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformfvKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformfvKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformfvKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformfvKHR)
    GL.module_eval(<<-SRC)
      def self.GetnUniformfvKHR(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformfvKHR].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformivKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformivKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformivKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformivKHR)
    GL.module_eval(<<-SRC)
      def self.GetnUniformivKHR(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformivKHR].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetnUniformuivKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:GetnUniformuivKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetnUniformuivKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:GetnUniformuivKHR)
    GL.module_eval(<<-SRC)
      def self.GetnUniformuivKHR(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:GetnUniformuivKHR].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_KHR_robustness

  def self.get_ext_command_GL_KHR_robustness
    [
      'GetGraphicsResetStatus',
      'ReadnPixels',
      'GetnUniformfv',
      'GetnUniformiv',
      'GetnUniformuiv',
      'GetGraphicsResetStatusKHR',
      'ReadnPixelsKHR',
      'GetnUniformfvKHR',
      'GetnUniformivKHR',
      'GetnUniformuivKHR',
    ]
  end # self.get_ext_command_GL_KHR_robustness


  def self.define_ext_command_GL_KHR_shader_subgroup
  end # self.define_ext_command_GL_KHR_shader_subgroup

  def self.get_ext_command_GL_KHR_shader_subgroup
    [
    ]
  end # self.get_ext_command_GL_KHR_shader_subgroup


  def self.define_ext_command_GL_KHR_texture_compression_astc_hdr
  end # self.define_ext_command_GL_KHR_texture_compression_astc_hdr

  def self.get_ext_command_GL_KHR_texture_compression_astc_hdr
    [
    ]
  end # self.get_ext_command_GL_KHR_texture_compression_astc_hdr


  def self.define_ext_command_GL_KHR_texture_compression_astc_ldr
  end # self.define_ext_command_GL_KHR_texture_compression_astc_ldr

  def self.get_ext_command_GL_KHR_texture_compression_astc_ldr
    [
    ]
  end # self.get_ext_command_GL_KHR_texture_compression_astc_ldr


  def self.define_ext_command_GL_KHR_texture_compression_astc_sliced_3d
  end # self.define_ext_command_GL_KHR_texture_compression_astc_sliced_3d

  def self.get_ext_command_GL_KHR_texture_compression_astc_sliced_3d
    [
    ]
  end # self.get_ext_command_GL_KHR_texture_compression_astc_sliced_3d


  def self.define_ext_command_GL_KHR_parallel_shader_compile
    GL::GL_FUNCTION_SYMBOLS << :MaxShaderCompilerThreadsKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:MaxShaderCompilerThreadsKHR] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MaxShaderCompilerThreadsKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:MaxShaderCompilerThreadsKHR)
    GL.module_eval(<<-SRC)
      def self.MaxShaderCompilerThreadsKHR(_count_)
        GL_FUNCTIONS_MAP[:MaxShaderCompilerThreadsKHR].call(_count_)
      end
    SRC
  end # self.define_ext_command_GL_KHR_parallel_shader_compile

  def self.get_ext_command_GL_KHR_parallel_shader_compile
    [
      'MaxShaderCompilerThreadsKHR',
    ]
  end # self.get_ext_command_GL_KHR_parallel_shader_compile


  def self.define_ext_command_GL_MESAX_texture_stack
  end # self.define_ext_command_GL_MESAX_texture_stack

  def self.get_ext_command_GL_MESAX_texture_stack
    [
    ]
  end # self.get_ext_command_GL_MESAX_texture_stack


  def self.define_ext_command_GL_MESA_framebuffer_flip_x
  end # self.define_ext_command_GL_MESA_framebuffer_flip_x

  def self.get_ext_command_GL_MESA_framebuffer_flip_x
    [
    ]
  end # self.get_ext_command_GL_MESA_framebuffer_flip_x


  def self.define_ext_command_GL_MESA_framebuffer_flip_y
    GL::GL_FUNCTION_SYMBOLS << :FramebufferParameteriMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferParameteriMESA] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferParameteriMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferParameteriMESA)
    GL.module_eval(<<-SRC)
      def self.FramebufferParameteriMESA(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:FramebufferParameteriMESA].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFramebufferParameterivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFramebufferParameterivMESA] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFramebufferParameterivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFramebufferParameterivMESA)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameterivMESA(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFramebufferParameterivMESA].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_MESA_framebuffer_flip_y

  def self.get_ext_command_GL_MESA_framebuffer_flip_y
    [
      'FramebufferParameteriMESA',
      'GetFramebufferParameterivMESA',
    ]
  end # self.get_ext_command_GL_MESA_framebuffer_flip_y


  def self.define_ext_command_GL_MESA_framebuffer_swap_xy
  end # self.define_ext_command_GL_MESA_framebuffer_swap_xy

  def self.get_ext_command_GL_MESA_framebuffer_swap_xy
    [
    ]
  end # self.get_ext_command_GL_MESA_framebuffer_swap_xy


  def self.define_ext_command_GL_MESA_pack_invert
  end # self.define_ext_command_GL_MESA_pack_invert

  def self.get_ext_command_GL_MESA_pack_invert
    [
    ]
  end # self.get_ext_command_GL_MESA_pack_invert


  def self.define_ext_command_GL_MESA_program_binary_formats
  end # self.define_ext_command_GL_MESA_program_binary_formats

  def self.get_ext_command_GL_MESA_program_binary_formats
    [
    ]
  end # self.get_ext_command_GL_MESA_program_binary_formats


  def self.define_ext_command_GL_MESA_resize_buffers
    GL::GL_FUNCTION_SYMBOLS << :ResizeBuffersMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:ResizeBuffersMESA] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResizeBuffersMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:ResizeBuffersMESA)
    GL.module_eval(<<-SRC)
      def self.ResizeBuffersMESA()
        GL_FUNCTIONS_MAP[:ResizeBuffersMESA].call()
      end
    SRC
  end # self.define_ext_command_GL_MESA_resize_buffers

  def self.get_ext_command_GL_MESA_resize_buffers
    [
      'ResizeBuffersMESA',
    ]
  end # self.get_ext_command_GL_MESA_resize_buffers


  def self.define_ext_command_GL_MESA_shader_integer_functions
  end # self.define_ext_command_GL_MESA_shader_integer_functions

  def self.get_ext_command_GL_MESA_shader_integer_functions
    [
    ]
  end # self.get_ext_command_GL_MESA_shader_integer_functions


  def self.define_ext_command_GL_MESA_tile_raster_order
  end # self.define_ext_command_GL_MESA_tile_raster_order

  def self.get_ext_command_GL_MESA_tile_raster_order
    [
    ]
  end # self.get_ext_command_GL_MESA_tile_raster_order


  def self.define_ext_command_GL_MESA_window_pos
    GL::GL_FUNCTION_SYMBOLS << :WindowPos2dMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2dMESA] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2dMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2dMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2dMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2dvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2dvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2dvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2dvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dvMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2dvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2fMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2fMESA] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2fMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2fMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2fMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2fvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2fvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2fvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2fvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fvMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2fvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2iMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2iMESA] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2iMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2iMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2iMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2iMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2ivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2ivMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2ivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2ivMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2ivMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2ivMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2sMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2sMESA] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2sMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2sMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2sMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:WindowPos2sMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos2svMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos2svMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos2svMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos2svMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2svMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos2svMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3dMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3dMESA] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3dMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3dMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3dMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3dvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3dvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3dvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3dvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dvMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3dvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3fMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3fMESA] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3fMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3fMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3fMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3fvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3fvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3fvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3fvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fvMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3fvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3iMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3iMESA] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3iMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3iMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3iMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3iMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3ivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3ivMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3ivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3ivMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3ivMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3ivMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3sMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3sMESA] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3sMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3sMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3sMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:WindowPos3sMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos3svMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos3svMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos3svMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos3svMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3svMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos3svMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4dMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4dMESA] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4dMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4dMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4dMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:WindowPos4dMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4dvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4dvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4dvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4dvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4dvMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos4dvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4fMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4fMESA] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4fMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4fMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4fMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:WindowPos4fMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4fvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4fvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4fvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4fvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4fvMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos4fvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4iMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4iMESA] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4iMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4iMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4iMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:WindowPos4iMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4ivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4ivMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4ivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4ivMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4ivMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos4ivMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4sMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4sMESA] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4sMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4sMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4sMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:WindowPos4sMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WindowPos4svMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:WindowPos4svMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WindowPos4svMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:WindowPos4svMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4svMESA(_v_)
        GL_FUNCTIONS_MAP[:WindowPos4svMESA].call(_v_)
      end
    SRC
  end # self.define_ext_command_GL_MESA_window_pos

  def self.get_ext_command_GL_MESA_window_pos
    [
      'WindowPos2dMESA',
      'WindowPos2dvMESA',
      'WindowPos2fMESA',
      'WindowPos2fvMESA',
      'WindowPos2iMESA',
      'WindowPos2ivMESA',
      'WindowPos2sMESA',
      'WindowPos2svMESA',
      'WindowPos3dMESA',
      'WindowPos3dvMESA',
      'WindowPos3fMESA',
      'WindowPos3fvMESA',
      'WindowPos3iMESA',
      'WindowPos3ivMESA',
      'WindowPos3sMESA',
      'WindowPos3svMESA',
      'WindowPos4dMESA',
      'WindowPos4dvMESA',
      'WindowPos4fMESA',
      'WindowPos4fvMESA',
      'WindowPos4iMESA',
      'WindowPos4ivMESA',
      'WindowPos4sMESA',
      'WindowPos4svMESA',
    ]
  end # self.get_ext_command_GL_MESA_window_pos


  def self.define_ext_command_GL_MESA_ycbcr_texture
  end # self.define_ext_command_GL_MESA_ycbcr_texture

  def self.get_ext_command_GL_MESA_ycbcr_texture
    [
    ]
  end # self.get_ext_command_GL_MESA_ycbcr_texture


  def self.define_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers
  end # self.define_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers

  def self.get_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers
    [
    ]
  end # self.get_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers


  def self.define_ext_command_GL_NVX_conditional_render
    GL::GL_FUNCTION_SYMBOLS << :BeginConditionalRenderNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginConditionalRenderNVX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginConditionalRenderNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginConditionalRenderNVX)
    GL.module_eval(<<-SRC)
      def self.BeginConditionalRenderNVX(_id_)
        GL_FUNCTIONS_MAP[:BeginConditionalRenderNVX].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndConditionalRenderNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:EndConditionalRenderNVX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndConditionalRenderNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:EndConditionalRenderNVX)
    GL.module_eval(<<-SRC)
      def self.EndConditionalRenderNVX()
        GL_FUNCTIONS_MAP[:EndConditionalRenderNVX].call()
      end
    SRC
  end # self.define_ext_command_GL_NVX_conditional_render

  def self.get_ext_command_GL_NVX_conditional_render
    [
      'BeginConditionalRenderNVX',
      'EndConditionalRenderNVX',
    ]
  end # self.get_ext_command_GL_NVX_conditional_render


  def self.define_ext_command_GL_NVX_gpu_memory_info
  end # self.define_ext_command_GL_NVX_gpu_memory_info

  def self.get_ext_command_GL_NVX_gpu_memory_info
    [
    ]
  end # self.get_ext_command_GL_NVX_gpu_memory_info


  def self.define_ext_command_GL_NVX_linked_gpu_multicast
    GL::GL_FUNCTION_SYMBOLS << :LGPUNamedBufferSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:LGPUNamedBufferSubDataNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LGPUNamedBufferSubDataNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:LGPUNamedBufferSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.LGPUNamedBufferSubDataNVX(_gpuMask_, _buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:LGPUNamedBufferSubDataNVX].call(_gpuMask_, _buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LGPUCopyImageSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:LGPUCopyImageSubDataNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LGPUCopyImageSubDataNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:LGPUCopyImageSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.LGPUCopyImageSubDataNVX(_sourceGpu_, _destinationGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srxY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:LGPUCopyImageSubDataNVX].call(_sourceGpu_, _destinationGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srxY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LGPUInterlockNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:LGPUInterlockNVX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:LGPUInterlockNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:LGPUInterlockNVX)
    GL.module_eval(<<-SRC)
      def self.LGPUInterlockNVX()
        GL_FUNCTIONS_MAP[:LGPUInterlockNVX].call()
      end
    SRC
  end # self.define_ext_command_GL_NVX_linked_gpu_multicast

  def self.get_ext_command_GL_NVX_linked_gpu_multicast
    [
      'LGPUNamedBufferSubDataNVX',
      'LGPUCopyImageSubDataNVX',
      'LGPUInterlockNVX',
    ]
  end # self.get_ext_command_GL_NVX_linked_gpu_multicast


  def self.define_ext_command_GL_NV_alpha_to_coverage_dither_control
    GL::GL_FUNCTION_SYMBOLS << :AlphaToCoverageDitherControlNV
    GL::GL_FUNCTIONS_ARGS_MAP[:AlphaToCoverageDitherControlNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AlphaToCoverageDitherControlNV] = Fiddle::TYPE_VOID
    GL.bind_command(:AlphaToCoverageDitherControlNV)
    GL.module_eval(<<-SRC)
      def self.AlphaToCoverageDitherControlNV(_mode_)
        GL_FUNCTIONS_MAP[:AlphaToCoverageDitherControlNV].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_NV_alpha_to_coverage_dither_control

  def self.get_ext_command_GL_NV_alpha_to_coverage_dither_control
    [
      'AlphaToCoverageDitherControlNV',
    ]
  end # self.get_ext_command_GL_NV_alpha_to_coverage_dither_control


  def self.define_ext_command_GL_NV_bindless_multi_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :MultiDrawArraysIndirectBindlessNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawArraysIndirectBindlessNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawArraysIndirectBindlessNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawArraysIndirectBindlessNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectBindlessNV(_mode_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:MultiDrawArraysIndirectBindlessNV].call(_mode_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsIndirectBindlessNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsIndirectBindlessNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsIndirectBindlessNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsIndirectBindlessNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectBindlessNV(_mode_, _type_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsIndirectBindlessNV].call(_mode_, _type_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
      end
    SRC
  end # self.define_ext_command_GL_NV_bindless_multi_draw_indirect

  def self.get_ext_command_GL_NV_bindless_multi_draw_indirect
    [
      'MultiDrawArraysIndirectBindlessNV',
      'MultiDrawElementsIndirectBindlessNV',
    ]
  end # self.get_ext_command_GL_NV_bindless_multi_draw_indirect


  def self.define_ext_command_GL_NV_bindless_multi_draw_indirect_count
    GL::GL_FUNCTION_SYMBOLS << :MultiDrawArraysIndirectBindlessCountNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawArraysIndirectBindlessCountNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawArraysIndirectBindlessCountNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawArraysIndirectBindlessCountNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectBindlessCountNV(_mode_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:MultiDrawArraysIndirectBindlessCountNV].call(_mode_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawElementsIndirectBindlessCountNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawElementsIndirectBindlessCountNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawElementsIndirectBindlessCountNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawElementsIndirectBindlessCountNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectBindlessCountNV(_mode_, _type_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:MultiDrawElementsIndirectBindlessCountNV].call(_mode_, _type_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
      end
    SRC
  end # self.define_ext_command_GL_NV_bindless_multi_draw_indirect_count

  def self.get_ext_command_GL_NV_bindless_multi_draw_indirect_count
    [
      'MultiDrawArraysIndirectBindlessCountNV',
      'MultiDrawElementsIndirectBindlessCountNV',
    ]
  end # self.get_ext_command_GL_NV_bindless_multi_draw_indirect_count


  def self.define_ext_command_GL_NV_bindless_texture
    GL::GL_FUNCTION_SYMBOLS << :GetTextureHandleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureHandleNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureHandleNV] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:GetTextureHandleNV)
    GL.module_eval(<<-SRC)
      def self.GetTextureHandleNV(_texture_)
        GL_FUNCTIONS_MAP[:GetTextureHandleNV].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTextureSamplerHandleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTextureSamplerHandleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTextureSamplerHandleNV] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:GetTextureSamplerHandleNV)
    GL.module_eval(<<-SRC)
      def self.GetTextureSamplerHandleNV(_texture_, _sampler_)
        GL_FUNCTIONS_MAP[:GetTextureSamplerHandleNV].call(_texture_, _sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeTextureHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeTextureHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeTextureHandleResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeTextureHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:MakeTextureHandleResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeTextureHandleNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeTextureHandleNonResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeTextureHandleNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeTextureHandleNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleNonResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:MakeTextureHandleNonResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetImageHandleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetImageHandleNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetImageHandleNV] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:GetImageHandleNV)
    GL.module_eval(<<-SRC)
      def self.GetImageHandleNV(_texture_, _level_, _layered_, _layer_, _format_)
        GL_FUNCTIONS_MAP[:GetImageHandleNV].call(_texture_, _level_, _layered_, _layer_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeImageHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeImageHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeImageHandleResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeImageHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleResidentNV(_handle_, _access_)
        GL_FUNCTIONS_MAP[:MakeImageHandleResidentNV].call(_handle_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeImageHandleNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeImageHandleNonResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeImageHandleNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeImageHandleNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleNonResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:MakeImageHandleNonResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformHandleui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformHandleui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformHandleui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformHandleui64NV)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64NV(_location_, _value_)
        GL_FUNCTIONS_MAP[:UniformHandleui64NV].call(_location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :UniformHandleui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:UniformHandleui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UniformHandleui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:UniformHandleui64vNV)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:UniformHandleui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformHandleui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformHandleui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformHandleui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformHandleui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64NV(_program_, _location_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformHandleui64NV].call(_program_, _location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformHandleui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformHandleui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformHandleui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformHandleui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64vNV(_program_, _location_, _count_, _values_)
        GL_FUNCTIONS_MAP[:ProgramUniformHandleui64vNV].call(_program_, _location_, _count_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsTextureHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsTextureHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsTextureHandleResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsTextureHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsTextureHandleResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:IsTextureHandleResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsImageHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsImageHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsImageHandleResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsImageHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsImageHandleResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:IsImageHandleResidentNV].call(_handle_)
      end
    SRC
  end # self.define_ext_command_GL_NV_bindless_texture

  def self.get_ext_command_GL_NV_bindless_texture
    [
      'GetTextureHandleNV',
      'GetTextureSamplerHandleNV',
      'MakeTextureHandleResidentNV',
      'MakeTextureHandleNonResidentNV',
      'GetImageHandleNV',
      'MakeImageHandleResidentNV',
      'MakeImageHandleNonResidentNV',
      'UniformHandleui64NV',
      'UniformHandleui64vNV',
      'ProgramUniformHandleui64NV',
      'ProgramUniformHandleui64vNV',
      'IsTextureHandleResidentNV',
      'IsImageHandleResidentNV',
    ]
  end # self.get_ext_command_GL_NV_bindless_texture


  def self.define_ext_command_GL_NV_blend_equation_advanced
    GL::GL_FUNCTION_SYMBOLS << :BlendParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendParameteriNV)
    GL.module_eval(<<-SRC)
      def self.BlendParameteriNV(_pname_, _value_)
        GL_FUNCTIONS_MAP[:BlendParameteriNV].call(_pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendBarrierNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendBarrierNV)
    GL.module_eval(<<-SRC)
      def self.BlendBarrierNV()
        GL_FUNCTIONS_MAP[:BlendBarrierNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_blend_equation_advanced

  def self.get_ext_command_GL_NV_blend_equation_advanced
    [
      'BlendParameteriNV',
      'BlendBarrierNV',
    ]
  end # self.get_ext_command_GL_NV_blend_equation_advanced


  def self.define_ext_command_GL_NV_blend_equation_advanced_coherent
  end # self.define_ext_command_GL_NV_blend_equation_advanced_coherent

  def self.get_ext_command_GL_NV_blend_equation_advanced_coherent
    [
    ]
  end # self.get_ext_command_GL_NV_blend_equation_advanced_coherent


  def self.define_ext_command_GL_NV_blend_minmax_factor
  end # self.define_ext_command_GL_NV_blend_minmax_factor

  def self.get_ext_command_GL_NV_blend_minmax_factor
    [
    ]
  end # self.get_ext_command_GL_NV_blend_minmax_factor


  def self.define_ext_command_GL_NV_blend_square
  end # self.define_ext_command_GL_NV_blend_square

  def self.get_ext_command_GL_NV_blend_square
    [
    ]
  end # self.get_ext_command_GL_NV_blend_square


  def self.define_ext_command_GL_NV_clip_space_w_scaling
    GL::GL_FUNCTION_SYMBOLS << :ViewportPositionWScaleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ViewportPositionWScaleNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ViewportPositionWScaleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ViewportPositionWScaleNV)
    GL.module_eval(<<-SRC)
      def self.ViewportPositionWScaleNV(_index_, _xcoeff_, _ycoeff_)
        GL_FUNCTIONS_MAP[:ViewportPositionWScaleNV].call(_index_, _xcoeff_, _ycoeff_)
      end
    SRC
  end # self.define_ext_command_GL_NV_clip_space_w_scaling

  def self.get_ext_command_GL_NV_clip_space_w_scaling
    [
      'ViewportPositionWScaleNV',
    ]
  end # self.get_ext_command_GL_NV_clip_space_w_scaling


  def self.define_ext_command_GL_NV_command_list
    GL::GL_FUNCTION_SYMBOLS << :CreateStatesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateStatesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateStatesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateStatesNV)
    GL.module_eval(<<-SRC)
      def self.CreateStatesNV(_n_, _states_)
        GL_FUNCTIONS_MAP[:CreateStatesNV].call(_n_, _states_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteStatesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteStatesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteStatesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteStatesNV)
    GL.module_eval(<<-SRC)
      def self.DeleteStatesNV(_n_, _states_)
        GL_FUNCTIONS_MAP[:DeleteStatesNV].call(_n_, _states_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsStateNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsStateNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsStateNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsStateNV)
    GL.module_eval(<<-SRC)
      def self.IsStateNV(_state_)
        GL_FUNCTIONS_MAP[:IsStateNV].call(_state_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StateCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StateCaptureNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StateCaptureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StateCaptureNV)
    GL.module_eval(<<-SRC)
      def self.StateCaptureNV(_state_, _mode_)
        GL_FUNCTIONS_MAP[:StateCaptureNV].call(_state_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCommandHeaderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCommandHeaderNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCommandHeaderNV] = -Fiddle::TYPE_INT
    GL.bind_command(:GetCommandHeaderNV)
    GL.module_eval(<<-SRC)
      def self.GetCommandHeaderNV(_tokenID_, _size_)
        GL_FUNCTIONS_MAP[:GetCommandHeaderNV].call(_tokenID_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetStageIndexNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetStageIndexNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetStageIndexNV] = -Fiddle::TYPE_SHORT
    GL.bind_command(:GetStageIndexNV)
    GL.module_eval(<<-SRC)
      def self.GetStageIndexNV(_shadertype_)
        GL_FUNCTIONS_MAP[:GetStageIndexNV].call(_shadertype_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawCommandsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawCommandsNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsNV(_primitiveMode_, _buffer_, _indirects_, _sizes_, _count_)
        GL_FUNCTIONS_MAP[:DrawCommandsNV].call(_primitiveMode_, _buffer_, _indirects_, _sizes_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawCommandsAddressNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawCommandsAddressNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawCommandsAddressNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawCommandsAddressNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsAddressNV(_primitiveMode_, _indirects_, _sizes_, _count_)
        GL_FUNCTIONS_MAP[:DrawCommandsAddressNV].call(_primitiveMode_, _indirects_, _sizes_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawCommandsStatesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawCommandsStatesNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawCommandsStatesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawCommandsStatesNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsStatesNV(_buffer_, _indirects_, _sizes_, _states_, _fbos_, _count_)
        GL_FUNCTIONS_MAP[:DrawCommandsStatesNV].call(_buffer_, _indirects_, _sizes_, _states_, _fbos_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawCommandsStatesAddressNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawCommandsStatesAddressNV] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawCommandsStatesAddressNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawCommandsStatesAddressNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsStatesAddressNV(_indirects_, _sizes_, _states_, _fbos_, _count_)
        GL_FUNCTIONS_MAP[:DrawCommandsStatesAddressNV].call(_indirects_, _sizes_, _states_, _fbos_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CreateCommandListsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateCommandListsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateCommandListsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CreateCommandListsNV)
    GL.module_eval(<<-SRC)
      def self.CreateCommandListsNV(_n_, _lists_)
        GL_FUNCTIONS_MAP[:CreateCommandListsNV].call(_n_, _lists_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteCommandListsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteCommandListsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteCommandListsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteCommandListsNV)
    GL.module_eval(<<-SRC)
      def self.DeleteCommandListsNV(_n_, _lists_)
        GL_FUNCTIONS_MAP[:DeleteCommandListsNV].call(_n_, _lists_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsCommandListNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsCommandListNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsCommandListNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsCommandListNV)
    GL.module_eval(<<-SRC)
      def self.IsCommandListNV(_list_)
        GL_FUNCTIONS_MAP[:IsCommandListNV].call(_list_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ListDrawCommandsStatesClientNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ListDrawCommandsStatesClientNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ListDrawCommandsStatesClientNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ListDrawCommandsStatesClientNV)
    GL.module_eval(<<-SRC)
      def self.ListDrawCommandsStatesClientNV(_list_, _segment_, _indirects_, _sizes_, _states_, _fbos_, _count_)
        GL_FUNCTIONS_MAP[:ListDrawCommandsStatesClientNV].call(_list_, _segment_, _indirects_, _sizes_, _states_, _fbos_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CommandListSegmentsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CommandListSegmentsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CommandListSegmentsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CommandListSegmentsNV)
    GL.module_eval(<<-SRC)
      def self.CommandListSegmentsNV(_list_, _segments_)
        GL_FUNCTIONS_MAP[:CommandListSegmentsNV].call(_list_, _segments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CompileCommandListNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CompileCommandListNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CompileCommandListNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CompileCommandListNV)
    GL.module_eval(<<-SRC)
      def self.CompileCommandListNV(_list_)
        GL_FUNCTIONS_MAP[:CompileCommandListNV].call(_list_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CallCommandListNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CallCommandListNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CallCommandListNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CallCommandListNV)
    GL.module_eval(<<-SRC)
      def self.CallCommandListNV(_list_)
        GL_FUNCTIONS_MAP[:CallCommandListNV].call(_list_)
      end
    SRC
  end # self.define_ext_command_GL_NV_command_list

  def self.get_ext_command_GL_NV_command_list
    [
      'CreateStatesNV',
      'DeleteStatesNV',
      'IsStateNV',
      'StateCaptureNV',
      'GetCommandHeaderNV',
      'GetStageIndexNV',
      'DrawCommandsNV',
      'DrawCommandsAddressNV',
      'DrawCommandsStatesNV',
      'DrawCommandsStatesAddressNV',
      'CreateCommandListsNV',
      'DeleteCommandListsNV',
      'IsCommandListNV',
      'ListDrawCommandsStatesClientNV',
      'CommandListSegmentsNV',
      'CompileCommandListNV',
      'CallCommandListNV',
    ]
  end # self.get_ext_command_GL_NV_command_list


  def self.define_ext_command_GL_NV_compute_program5
  end # self.define_ext_command_GL_NV_compute_program5

  def self.get_ext_command_GL_NV_compute_program5
    [
    ]
  end # self.get_ext_command_GL_NV_compute_program5


  def self.define_ext_command_GL_NV_compute_shader_derivatives
  end # self.define_ext_command_GL_NV_compute_shader_derivatives

  def self.get_ext_command_GL_NV_compute_shader_derivatives
    [
    ]
  end # self.get_ext_command_GL_NV_compute_shader_derivatives


  def self.define_ext_command_GL_NV_conditional_render
    GL::GL_FUNCTION_SYMBOLS << :BeginConditionalRenderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginConditionalRenderNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginConditionalRenderNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginConditionalRenderNV)
    GL.module_eval(<<-SRC)
      def self.BeginConditionalRenderNV(_id_, _mode_)
        GL_FUNCTIONS_MAP[:BeginConditionalRenderNV].call(_id_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndConditionalRenderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:EndConditionalRenderNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndConditionalRenderNV] = Fiddle::TYPE_VOID
    GL.bind_command(:EndConditionalRenderNV)
    GL.module_eval(<<-SRC)
      def self.EndConditionalRenderNV()
        GL_FUNCTIONS_MAP[:EndConditionalRenderNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_conditional_render

  def self.get_ext_command_GL_NV_conditional_render
    [
      'BeginConditionalRenderNV',
      'EndConditionalRenderNV',
    ]
  end # self.get_ext_command_GL_NV_conditional_render


  def self.define_ext_command_GL_NV_conservative_raster
    GL::GL_FUNCTION_SYMBOLS << :SubpixelPrecisionBiasNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SubpixelPrecisionBiasNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SubpixelPrecisionBiasNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SubpixelPrecisionBiasNV)
    GL.module_eval(<<-SRC)
      def self.SubpixelPrecisionBiasNV(_xbits_, _ybits_)
        GL_FUNCTIONS_MAP[:SubpixelPrecisionBiasNV].call(_xbits_, _ybits_)
      end
    SRC
  end # self.define_ext_command_GL_NV_conservative_raster

  def self.get_ext_command_GL_NV_conservative_raster
    [
      'SubpixelPrecisionBiasNV',
    ]
  end # self.get_ext_command_GL_NV_conservative_raster


  def self.define_ext_command_GL_NV_conservative_raster_dilate
    GL::GL_FUNCTION_SYMBOLS << :ConservativeRasterParameterfNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ConservativeRasterParameterfNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConservativeRasterParameterfNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ConservativeRasterParameterfNV)
    GL.module_eval(<<-SRC)
      def self.ConservativeRasterParameterfNV(_pname_, _value_)
        GL_FUNCTIONS_MAP[:ConservativeRasterParameterfNV].call(_pname_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_NV_conservative_raster_dilate

  def self.get_ext_command_GL_NV_conservative_raster_dilate
    [
      'ConservativeRasterParameterfNV',
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_dilate


  def self.define_ext_command_GL_NV_conservative_raster_pre_snap
  end # self.define_ext_command_GL_NV_conservative_raster_pre_snap

  def self.get_ext_command_GL_NV_conservative_raster_pre_snap
    [
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_pre_snap


  def self.define_ext_command_GL_NV_conservative_raster_pre_snap_triangles
    GL::GL_FUNCTION_SYMBOLS << :ConservativeRasterParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ConservativeRasterParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConservativeRasterParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ConservativeRasterParameteriNV)
    GL.module_eval(<<-SRC)
      def self.ConservativeRasterParameteriNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:ConservativeRasterParameteriNV].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_NV_conservative_raster_pre_snap_triangles

  def self.get_ext_command_GL_NV_conservative_raster_pre_snap_triangles
    [
      'ConservativeRasterParameteriNV',
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_pre_snap_triangles


  def self.define_ext_command_GL_NV_conservative_raster_underestimation
  end # self.define_ext_command_GL_NV_conservative_raster_underestimation

  def self.get_ext_command_GL_NV_conservative_raster_underestimation
    [
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_underestimation


  def self.define_ext_command_GL_NV_copy_depth_to_color
  end # self.define_ext_command_GL_NV_copy_depth_to_color

  def self.get_ext_command_GL_NV_copy_depth_to_color
    [
    ]
  end # self.get_ext_command_GL_NV_copy_depth_to_color


  def self.define_ext_command_GL_NV_copy_image
    GL::GL_FUNCTION_SYMBOLS << :CopyImageSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyImageSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyImageSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyImageSubDataNV)
    GL.module_eval(<<-SRC)
      def self.CopyImageSubDataNV(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:CopyImageSubDataNV].call(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_NV_copy_image

  def self.get_ext_command_GL_NV_copy_image
    [
      'CopyImageSubDataNV',
    ]
  end # self.get_ext_command_GL_NV_copy_image


  def self.define_ext_command_GL_NV_deep_texture3D
  end # self.define_ext_command_GL_NV_deep_texture3D

  def self.get_ext_command_GL_NV_deep_texture3D
    [
    ]
  end # self.get_ext_command_GL_NV_deep_texture3D


  def self.define_ext_command_GL_NV_depth_buffer_float
    GL::GL_FUNCTION_SYMBOLS << :DepthRangedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangedNV] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangedNV)
    GL.module_eval(<<-SRC)
      def self.DepthRangedNV(_zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:DepthRangedNV].call(_zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearDepthdNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearDepthdNV] = [Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearDepthdNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearDepthdNV)
    GL.module_eval(<<-SRC)
      def self.ClearDepthdNV(_depth_)
        GL_FUNCTIONS_MAP[:ClearDepthdNV].call(_depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthBoundsdNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthBoundsdNV] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthBoundsdNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthBoundsdNV)
    GL.module_eval(<<-SRC)
      def self.DepthBoundsdNV(_zmin_, _zmax_)
        GL_FUNCTIONS_MAP[:DepthBoundsdNV].call(_zmin_, _zmax_)
      end
    SRC
  end # self.define_ext_command_GL_NV_depth_buffer_float

  def self.get_ext_command_GL_NV_depth_buffer_float
    [
      'DepthRangedNV',
      'ClearDepthdNV',
      'DepthBoundsdNV',
    ]
  end # self.get_ext_command_GL_NV_depth_buffer_float


  def self.define_ext_command_GL_NV_depth_clamp
  end # self.define_ext_command_GL_NV_depth_clamp

  def self.get_ext_command_GL_NV_depth_clamp
    [
    ]
  end # self.get_ext_command_GL_NV_depth_clamp


  def self.define_ext_command_GL_NV_draw_texture
    GL::GL_FUNCTION_SYMBOLS << :DrawTextureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawTextureNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawTextureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawTextureNV)
    GL.module_eval(<<-SRC)
      def self.DrawTextureNV(_texture_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
        GL_FUNCTIONS_MAP[:DrawTextureNV].call(_texture_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
      end
    SRC
  end # self.define_ext_command_GL_NV_draw_texture

  def self.get_ext_command_GL_NV_draw_texture
    [
      'DrawTextureNV',
    ]
  end # self.get_ext_command_GL_NV_draw_texture


  def self.define_ext_command_GL_NV_draw_vulkan_image
    GL::GL_FUNCTION_SYMBOLS << :DrawVkImageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawVkImageNV] = [-Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawVkImageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawVkImageNV)
    GL.module_eval(<<-SRC)
      def self.DrawVkImageNV(_vkImage_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
        GL_FUNCTIONS_MAP[:DrawVkImageNV].call(_vkImage_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVkProcAddrNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVkProcAddrNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVkProcAddrNV] = Fiddle::TYPE_VOIDP
    GL.bind_command(:GetVkProcAddrNV)
    GL.module_eval(<<-SRC)
      def self.GetVkProcAddrNV(_name_)
        GL_FUNCTIONS_MAP[:GetVkProcAddrNV].call(_name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WaitVkSemaphoreNV
    GL::GL_FUNCTIONS_ARGS_MAP[:WaitVkSemaphoreNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WaitVkSemaphoreNV] = Fiddle::TYPE_VOID
    GL.bind_command(:WaitVkSemaphoreNV)
    GL.module_eval(<<-SRC)
      def self.WaitVkSemaphoreNV(_vkSemaphore_)
        GL_FUNCTIONS_MAP[:WaitVkSemaphoreNV].call(_vkSemaphore_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SignalVkSemaphoreNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SignalVkSemaphoreNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SignalVkSemaphoreNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SignalVkSemaphoreNV)
    GL.module_eval(<<-SRC)
      def self.SignalVkSemaphoreNV(_vkSemaphore_)
        GL_FUNCTIONS_MAP[:SignalVkSemaphoreNV].call(_vkSemaphore_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SignalVkFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SignalVkFenceNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SignalVkFenceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SignalVkFenceNV)
    GL.module_eval(<<-SRC)
      def self.SignalVkFenceNV(_vkFence_)
        GL_FUNCTIONS_MAP[:SignalVkFenceNV].call(_vkFence_)
      end
    SRC
  end # self.define_ext_command_GL_NV_draw_vulkan_image

  def self.get_ext_command_GL_NV_draw_vulkan_image
    [
      'DrawVkImageNV',
      'GetVkProcAddrNV',
      'WaitVkSemaphoreNV',
      'SignalVkSemaphoreNV',
      'SignalVkFenceNV',
    ]
  end # self.get_ext_command_GL_NV_draw_vulkan_image


  def self.define_ext_command_GL_NV_evaluators
    GL::GL_FUNCTION_SYMBOLS << :MapControlPointsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MapControlPointsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapControlPointsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MapControlPointsNV)
    GL.module_eval(<<-SRC)
      def self.MapControlPointsNV(_target_, _index_, _type_, _ustride_, _vstride_, _uorder_, _vorder_, _packed_, _points_)
        GL_FUNCTIONS_MAP[:MapControlPointsNV].call(_target_, _index_, _type_, _ustride_, _vstride_, _uorder_, _vorder_, _packed_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MapParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MapParameterivNV)
    GL.module_eval(<<-SRC)
      def self.MapParameterivNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MapParameterivNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MapParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MapParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.MapParameterfvNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MapParameterfvNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMapControlPointsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMapControlPointsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMapControlPointsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMapControlPointsNV)
    GL.module_eval(<<-SRC)
      def self.GetMapControlPointsNV(_target_, _index_, _type_, _ustride_, _vstride_, _packed_, _points_)
        GL_FUNCTIONS_MAP[:GetMapControlPointsNV].call(_target_, _index_, _type_, _ustride_, _vstride_, _packed_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMapParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMapParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMapParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMapParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetMapParameterivNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMapParameterivNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMapParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMapParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMapParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMapParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetMapParameterfvNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMapParameterfvNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMapAttribParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMapAttribParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMapAttribParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMapAttribParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetMapAttribParameterivNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMapAttribParameterivNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMapAttribParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMapAttribParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMapAttribParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMapAttribParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetMapAttribParameterfvNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMapAttribParameterfvNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EvalMapsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:EvalMapsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EvalMapsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:EvalMapsNV)
    GL.module_eval(<<-SRC)
      def self.EvalMapsNV(_target_, _mode_)
        GL_FUNCTIONS_MAP[:EvalMapsNV].call(_target_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_NV_evaluators

  def self.get_ext_command_GL_NV_evaluators
    [
      'MapControlPointsNV',
      'MapParameterivNV',
      'MapParameterfvNV',
      'GetMapControlPointsNV',
      'GetMapParameterivNV',
      'GetMapParameterfvNV',
      'GetMapAttribParameterivNV',
      'GetMapAttribParameterfvNV',
      'EvalMapsNV',
    ]
  end # self.get_ext_command_GL_NV_evaluators


  def self.define_ext_command_GL_NV_explicit_multisample
    GL::GL_FUNCTION_SYMBOLS << :GetMultisamplefvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMultisamplefvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMultisamplefvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMultisamplefvNV)
    GL.module_eval(<<-SRC)
      def self.GetMultisamplefvNV(_pname_, _index_, _val_)
        GL_FUNCTIONS_MAP[:GetMultisamplefvNV].call(_pname_, _index_, _val_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SampleMaskIndexedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleMaskIndexedNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleMaskIndexedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleMaskIndexedNV)
    GL.module_eval(<<-SRC)
      def self.SampleMaskIndexedNV(_index_, _mask_)
        GL_FUNCTIONS_MAP[:SampleMaskIndexedNV].call(_index_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexRenderbufferNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexRenderbufferNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexRenderbufferNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexRenderbufferNV)
    GL.module_eval(<<-SRC)
      def self.TexRenderbufferNV(_target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:TexRenderbufferNV].call(_target_, _renderbuffer_)
      end
    SRC
  end # self.define_ext_command_GL_NV_explicit_multisample

  def self.get_ext_command_GL_NV_explicit_multisample
    [
      'GetMultisamplefvNV',
      'SampleMaskIndexedNV',
      'TexRenderbufferNV',
    ]
  end # self.get_ext_command_GL_NV_explicit_multisample


  def self.define_ext_command_GL_NV_fence
    GL::GL_FUNCTION_SYMBOLS << :DeleteFencesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteFencesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteFencesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteFencesNV)
    GL.module_eval(<<-SRC)
      def self.DeleteFencesNV(_n_, _fences_)
        GL_FUNCTIONS_MAP[:DeleteFencesNV].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenFencesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GenFencesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenFencesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GenFencesNV)
    GL.module_eval(<<-SRC)
      def self.GenFencesNV(_n_, _fences_)
        GL_FUNCTIONS_MAP[:GenFencesNV].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsFenceNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsFenceNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsFenceNV)
    GL.module_eval(<<-SRC)
      def self.IsFenceNV(_fence_)
        GL_FUNCTIONS_MAP[:IsFenceNV].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TestFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TestFenceNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TestFenceNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:TestFenceNV)
    GL.module_eval(<<-SRC)
      def self.TestFenceNV(_fence_)
        GL_FUNCTIONS_MAP[:TestFenceNV].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFenceivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFenceivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFenceivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFenceivNV)
    GL.module_eval(<<-SRC)
      def self.GetFenceivNV(_fence_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFenceivNV].call(_fence_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FinishFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FinishFenceNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FinishFenceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FinishFenceNV)
    GL.module_eval(<<-SRC)
      def self.FinishFenceNV(_fence_)
        GL_FUNCTIONS_MAP[:FinishFenceNV].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SetFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SetFenceNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SetFenceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SetFenceNV)
    GL.module_eval(<<-SRC)
      def self.SetFenceNV(_fence_, _condition_)
        GL_FUNCTIONS_MAP[:SetFenceNV].call(_fence_, _condition_)
      end
    SRC
  end # self.define_ext_command_GL_NV_fence

  def self.get_ext_command_GL_NV_fence
    [
      'DeleteFencesNV',
      'GenFencesNV',
      'IsFenceNV',
      'TestFenceNV',
      'GetFenceivNV',
      'FinishFenceNV',
      'SetFenceNV',
    ]
  end # self.get_ext_command_GL_NV_fence


  def self.define_ext_command_GL_NV_fill_rectangle
  end # self.define_ext_command_GL_NV_fill_rectangle

  def self.get_ext_command_GL_NV_fill_rectangle
    [
    ]
  end # self.get_ext_command_GL_NV_fill_rectangle


  def self.define_ext_command_GL_NV_float_buffer
  end # self.define_ext_command_GL_NV_float_buffer

  def self.get_ext_command_GL_NV_float_buffer
    [
    ]
  end # self.get_ext_command_GL_NV_float_buffer


  def self.define_ext_command_GL_NV_fog_distance
  end # self.define_ext_command_GL_NV_fog_distance

  def self.get_ext_command_GL_NV_fog_distance
    [
    ]
  end # self.get_ext_command_GL_NV_fog_distance


  def self.define_ext_command_GL_NV_fragment_coverage_to_color
    GL::GL_FUNCTION_SYMBOLS << :FragmentCoverageColorNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentCoverageColorNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentCoverageColorNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentCoverageColorNV)
    GL.module_eval(<<-SRC)
      def self.FragmentCoverageColorNV(_color_)
        GL_FUNCTIONS_MAP[:FragmentCoverageColorNV].call(_color_)
      end
    SRC
  end # self.define_ext_command_GL_NV_fragment_coverage_to_color

  def self.get_ext_command_GL_NV_fragment_coverage_to_color
    [
      'FragmentCoverageColorNV',
    ]
  end # self.get_ext_command_GL_NV_fragment_coverage_to_color


  def self.define_ext_command_GL_NV_fragment_program
    GL::GL_FUNCTION_SYMBOLS << :ProgramNamedParameter4fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramNamedParameter4fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramNamedParameter4fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramNamedParameter4fNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4fNV(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramNamedParameter4fNV].call(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramNamedParameter4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramNamedParameter4fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramNamedParameter4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramNamedParameter4fvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4fvNV(_id_, _len_, _name_, _v_)
        GL_FUNCTIONS_MAP[:ProgramNamedParameter4fvNV].call(_id_, _len_, _name_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramNamedParameter4dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramNamedParameter4dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramNamedParameter4dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramNamedParameter4dNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4dNV(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramNamedParameter4dNV].call(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramNamedParameter4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramNamedParameter4dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramNamedParameter4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramNamedParameter4dvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4dvNV(_id_, _len_, _name_, _v_)
        GL_FUNCTIONS_MAP[:ProgramNamedParameter4dvNV].call(_id_, _len_, _name_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramNamedParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramNamedParameterfvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramNamedParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramNamedParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramNamedParameterfvNV(_id_, _len_, _name_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramNamedParameterfvNV].call(_id_, _len_, _name_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramNamedParameterdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramNamedParameterdvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramNamedParameterdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramNamedParameterdvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramNamedParameterdvNV(_id_, _len_, _name_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramNamedParameterdvNV].call(_id_, _len_, _name_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_fragment_program

  def self.get_ext_command_GL_NV_fragment_program
    [
      'ProgramNamedParameter4fNV',
      'ProgramNamedParameter4fvNV',
      'ProgramNamedParameter4dNV',
      'ProgramNamedParameter4dvNV',
      'GetProgramNamedParameterfvNV',
      'GetProgramNamedParameterdvNV',
    ]
  end # self.get_ext_command_GL_NV_fragment_program


  def self.define_ext_command_GL_NV_fragment_program2
  end # self.define_ext_command_GL_NV_fragment_program2

  def self.get_ext_command_GL_NV_fragment_program2
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_program2


  def self.define_ext_command_GL_NV_fragment_program4
  end # self.define_ext_command_GL_NV_fragment_program4

  def self.get_ext_command_GL_NV_fragment_program4
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_program4


  def self.define_ext_command_GL_NV_fragment_program_option
  end # self.define_ext_command_GL_NV_fragment_program_option

  def self.get_ext_command_GL_NV_fragment_program_option
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_program_option


  def self.define_ext_command_GL_NV_fragment_shader_barycentric
  end # self.define_ext_command_GL_NV_fragment_shader_barycentric

  def self.get_ext_command_GL_NV_fragment_shader_barycentric
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_shader_barycentric


  def self.define_ext_command_GL_NV_fragment_shader_interlock
  end # self.define_ext_command_GL_NV_fragment_shader_interlock

  def self.get_ext_command_GL_NV_fragment_shader_interlock
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_shader_interlock


  def self.define_ext_command_GL_NV_framebuffer_mixed_samples
    GL::GL_FUNCTION_SYMBOLS << :RasterSamplesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterSamplesEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterSamplesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterSamplesEXT)
    GL.module_eval(<<-SRC)
      def self.RasterSamplesEXT(_samples_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:RasterSamplesEXT].call(_samples_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CoverageModulationTableNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CoverageModulationTableNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CoverageModulationTableNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CoverageModulationTableNV)
    GL.module_eval(<<-SRC)
      def self.CoverageModulationTableNV(_n_, _v_)
        GL_FUNCTIONS_MAP[:CoverageModulationTableNV].call(_n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCoverageModulationTableNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCoverageModulationTableNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCoverageModulationTableNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCoverageModulationTableNV)
    GL.module_eval(<<-SRC)
      def self.GetCoverageModulationTableNV(_bufSize_, _v_)
        GL_FUNCTIONS_MAP[:GetCoverageModulationTableNV].call(_bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CoverageModulationNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CoverageModulationNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CoverageModulationNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CoverageModulationNV)
    GL.module_eval(<<-SRC)
      def self.CoverageModulationNV(_components_)
        GL_FUNCTIONS_MAP[:CoverageModulationNV].call(_components_)
      end
    SRC
  end # self.define_ext_command_GL_NV_framebuffer_mixed_samples

  def self.get_ext_command_GL_NV_framebuffer_mixed_samples
    [
      'RasterSamplesEXT',
      'CoverageModulationTableNV',
      'GetCoverageModulationTableNV',
      'CoverageModulationNV',
    ]
  end # self.get_ext_command_GL_NV_framebuffer_mixed_samples


  def self.define_ext_command_GL_NV_framebuffer_multisample_coverage
    GL::GL_FUNCTION_SYMBOLS << :RenderbufferStorageMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderbufferStorageMultisampleCoverageNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderbufferStorageMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderbufferStorageMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisampleCoverageNV(_target_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:RenderbufferStorageMultisampleCoverageNV].call(_target_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_NV_framebuffer_multisample_coverage

  def self.get_ext_command_GL_NV_framebuffer_multisample_coverage
    [
      'RenderbufferStorageMultisampleCoverageNV',
    ]
  end # self.get_ext_command_GL_NV_framebuffer_multisample_coverage


  def self.define_ext_command_GL_NV_geometry_program4
    GL::GL_FUNCTION_SYMBOLS << :ProgramVertexLimitNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramVertexLimitNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramVertexLimitNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramVertexLimitNV)
    GL.module_eval(<<-SRC)
      def self.ProgramVertexLimitNV(_target_, _limit_)
        GL_FUNCTIONS_MAP[:ProgramVertexLimitNV].call(_target_, _limit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureEXT(_target_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:FramebufferTextureEXT].call(_target_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureLayerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureLayerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureLayerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureLayerEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayerEXT(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:FramebufferTextureLayerEXT].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureFaceEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureFaceEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureFaceEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureFaceEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureFaceEXT(_target_, _attachment_, _texture_, _level_, _face_)
        GL_FUNCTIONS_MAP[:FramebufferTextureFaceEXT].call(_target_, _attachment_, _texture_, _level_, _face_)
      end
    SRC
  end # self.define_ext_command_GL_NV_geometry_program4

  def self.get_ext_command_GL_NV_geometry_program4
    [
      'ProgramVertexLimitNV',
      'FramebufferTextureEXT',
      'FramebufferTextureLayerEXT',
      'FramebufferTextureFaceEXT',
    ]
  end # self.get_ext_command_GL_NV_geometry_program4


  def self.define_ext_command_GL_NV_geometry_shader4
  end # self.define_ext_command_GL_NV_geometry_shader4

  def self.get_ext_command_GL_NV_geometry_shader4
    [
    ]
  end # self.get_ext_command_GL_NV_geometry_shader4


  def self.define_ext_command_GL_NV_geometry_shader_passthrough
  end # self.define_ext_command_GL_NV_geometry_shader_passthrough

  def self.get_ext_command_GL_NV_geometry_shader_passthrough
    [
    ]
  end # self.get_ext_command_GL_NV_geometry_shader_passthrough


  def self.define_ext_command_GL_NV_gpu_program4
    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameterI4iNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameterI4iNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameterI4iNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameterI4iNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4iNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameterI4iNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameterI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameterI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameterI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameterI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4ivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameterI4ivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParametersI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParametersI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParametersI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParametersI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParametersI4ivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParametersI4ivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameterI4uiNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameterI4uiNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameterI4uiNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameterI4uiNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4uiNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameterI4uiNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParameterI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParameterI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParameterI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParameterI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4uivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParameterI4uivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramLocalParametersI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramLocalParametersI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramLocalParametersI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramLocalParametersI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParametersI4uivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramLocalParametersI4uivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameterI4iNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameterI4iNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameterI4iNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameterI4iNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4iNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameterI4iNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameterI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameterI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameterI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameterI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4ivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameterI4ivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParametersI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParametersI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParametersI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParametersI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParametersI4ivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParametersI4ivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameterI4uiNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameterI4uiNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameterI4uiNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameterI4uiNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4uiNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameterI4uiNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParameterI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParameterI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParameterI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParameterI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4uivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParameterI4uivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramEnvParametersI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramEnvParametersI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramEnvParametersI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramEnvParametersI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParametersI4uivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramEnvParametersI4uivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramLocalParameterIivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramLocalParameterIivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramLocalParameterIivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramLocalParameterIivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterIivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramLocalParameterIivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramLocalParameterIuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramLocalParameterIuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramLocalParameterIuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramLocalParameterIuivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterIuivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramLocalParameterIuivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramEnvParameterIivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramEnvParameterIivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramEnvParameterIivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramEnvParameterIivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterIivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramEnvParameterIivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramEnvParameterIuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramEnvParameterIuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramEnvParameterIuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramEnvParameterIuivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterIuivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramEnvParameterIuivNV].call(_target_, _index_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_program4

  def self.get_ext_command_GL_NV_gpu_program4
    [
      'ProgramLocalParameterI4iNV',
      'ProgramLocalParameterI4ivNV',
      'ProgramLocalParametersI4ivNV',
      'ProgramLocalParameterI4uiNV',
      'ProgramLocalParameterI4uivNV',
      'ProgramLocalParametersI4uivNV',
      'ProgramEnvParameterI4iNV',
      'ProgramEnvParameterI4ivNV',
      'ProgramEnvParametersI4ivNV',
      'ProgramEnvParameterI4uiNV',
      'ProgramEnvParameterI4uivNV',
      'ProgramEnvParametersI4uivNV',
      'GetProgramLocalParameterIivNV',
      'GetProgramLocalParameterIuivNV',
      'GetProgramEnvParameterIivNV',
      'GetProgramEnvParameterIuivNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_program4


  def self.define_ext_command_GL_NV_gpu_program5
    GL::GL_FUNCTION_SYMBOLS << :ProgramSubroutineParametersuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramSubroutineParametersuivNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramSubroutineParametersuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramSubroutineParametersuivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramSubroutineParametersuivNV(_target_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramSubroutineParametersuivNV].call(_target_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramSubroutineParameteruivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramSubroutineParameteruivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramSubroutineParameteruivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramSubroutineParameteruivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramSubroutineParameteruivNV(_target_, _index_, _param_)
        GL_FUNCTIONS_MAP[:GetProgramSubroutineParameteruivNV].call(_target_, _index_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_program5

  def self.get_ext_command_GL_NV_gpu_program5
    [
      'ProgramSubroutineParametersuivNV',
      'GetProgramSubroutineParameteruivNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_program5


  def self.define_ext_command_GL_NV_gpu_program5_mem_extended
  end # self.define_ext_command_GL_NV_gpu_program5_mem_extended

  def self.get_ext_command_GL_NV_gpu_program5_mem_extended
    [
    ]
  end # self.get_ext_command_GL_NV_gpu_program5_mem_extended


  def self.define_ext_command_GL_NV_gpu_shader5
    GL::GL_FUNCTION_SYMBOLS << :Uniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1i64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2i64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3i64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4i64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:Uniform1ui64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Uniform2ui64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Uniform3ui64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Uniform4ui64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform1ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform1ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform2ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform2ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform3ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform3ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniform4ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniform4ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformi64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformi64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformi64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform1ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform1ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform2ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform2ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform3ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform3ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniform4ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniform4ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_shader5

  def self.get_ext_command_GL_NV_gpu_shader5
    [
      'Uniform1i64NV',
      'Uniform2i64NV',
      'Uniform3i64NV',
      'Uniform4i64NV',
      'Uniform1i64vNV',
      'Uniform2i64vNV',
      'Uniform3i64vNV',
      'Uniform4i64vNV',
      'Uniform1ui64NV',
      'Uniform2ui64NV',
      'Uniform3ui64NV',
      'Uniform4ui64NV',
      'Uniform1ui64vNV',
      'Uniform2ui64vNV',
      'Uniform3ui64vNV',
      'Uniform4ui64vNV',
      'GetUniformi64vNV',
      'ProgramUniform1i64NV',
      'ProgramUniform2i64NV',
      'ProgramUniform3i64NV',
      'ProgramUniform4i64NV',
      'ProgramUniform1i64vNV',
      'ProgramUniform2i64vNV',
      'ProgramUniform3i64vNV',
      'ProgramUniform4i64vNV',
      'ProgramUniform1ui64NV',
      'ProgramUniform2ui64NV',
      'ProgramUniform3ui64NV',
      'ProgramUniform4ui64NV',
      'ProgramUniform1ui64vNV',
      'ProgramUniform2ui64vNV',
      'ProgramUniform3ui64vNV',
      'ProgramUniform4ui64vNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_shader5


  def self.define_ext_command_GL_NV_half_float
    GL::GL_FUNCTION_SYMBOLS << :Vertex2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex2hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex2hNV)
    GL.module_eval(<<-SRC)
      def self.Vertex2hNV(_x_, _y_)
        GL_FUNCTIONS_MAP[:Vertex2hNV].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex2hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex2hvNV)
    GL.module_eval(<<-SRC)
      def self.Vertex2hvNV(_v_)
        GL_FUNCTIONS_MAP[:Vertex2hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex3hNV)
    GL.module_eval(<<-SRC)
      def self.Vertex3hNV(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Vertex3hNV].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex3hvNV)
    GL.module_eval(<<-SRC)
      def self.Vertex3hvNV(_v_)
        GL_FUNCTIONS_MAP[:Vertex3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex4hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex4hNV)
    GL.module_eval(<<-SRC)
      def self.Vertex4hNV(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Vertex4hNV].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex4hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex4hvNV)
    GL.module_eval(<<-SRC)
      def self.Vertex4hvNV(_v_)
        GL_FUNCTIONS_MAP[:Vertex4hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Normal3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Normal3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Normal3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Normal3hNV)
    GL.module_eval(<<-SRC)
      def self.Normal3hNV(_nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:Normal3hNV].call(_nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Normal3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Normal3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Normal3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Normal3hvNV)
    GL.module_eval(<<-SRC)
      def self.Normal3hvNV(_v_)
        GL_FUNCTIONS_MAP[:Normal3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Color3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Color3hNV)
    GL.module_eval(<<-SRC)
      def self.Color3hNV(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:Color3hNV].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Color3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Color3hvNV)
    GL.module_eval(<<-SRC)
      def self.Color3hvNV(_v_)
        GL_FUNCTIONS_MAP[:Color3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4hNV)
    GL.module_eval(<<-SRC)
      def self.Color4hNV(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:Color4hNV].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4hvNV)
    GL.module_eval(<<-SRC)
      def self.Color4hvNV(_v_)
        GL_FUNCTIONS_MAP[:Color4hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord1hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord1hNV] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord1hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord1hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord1hNV(_s_)
        GL_FUNCTIONS_MAP[:TexCoord1hNV].call(_s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord1hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord1hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord1hvNV(_v_)
        GL_FUNCTIONS_MAP[:TexCoord1hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord2hNV(_s_, _t_)
        GL_FUNCTIONS_MAP[:TexCoord2hNV].call(_s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord2hvNV(_v_)
        GL_FUNCTIONS_MAP[:TexCoord2hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord3hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord3hNV(_s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:TexCoord3hNV].call(_s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord3hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord3hvNV(_v_)
        GL_FUNCTIONS_MAP[:TexCoord3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord4hNV(_s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:TexCoord4hNV].call(_s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord4hvNV(_v_)
        GL_FUNCTIONS_MAP[:TexCoord4hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1hNV(_target_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1hNV].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2hNV(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2hNV].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3hNV(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3hNV].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4hNV(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4hNV].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoordhNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordhNV] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordhNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordhNV)
    GL.module_eval(<<-SRC)
      def self.FogCoordhNV(_fog_)
        GL_FUNCTIONS_MAP[:FogCoordhNV].call(_fog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoordhvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordhvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordhvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordhvNV)
    GL.module_eval(<<-SRC)
      def self.FogCoordhvNV(_fog_)
        GL_FUNCTIONS_MAP[:FogCoordhvNV].call(_fog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3hNV)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3hNV(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:SecondaryColor3hNV].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColor3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColor3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColor3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColor3hvNV)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3hvNV(_v_)
        GL_FUNCTIONS_MAP[:SecondaryColor3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexWeighthNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexWeighthNV] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexWeighthNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexWeighthNV)
    GL.module_eval(<<-SRC)
      def self.VertexWeighthNV(_weight_)
        GL_FUNCTIONS_MAP[:VertexWeighthNV].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexWeighthvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexWeighthvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexWeighthvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexWeighthvNV)
    GL.module_eval(<<-SRC)
      def self.VertexWeighthvNV(_weight_)
        GL_FUNCTIONS_MAP[:VertexWeighthvNV].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1hNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1hNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2hNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2hNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3hNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3hNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4hNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4hNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs1hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs1hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs1hvNV].call(_index_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs2hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs2hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs2hvNV].call(_index_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs3hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs3hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs3hvNV].call(_index_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs4hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs4hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs4hvNV].call(_index_, _n_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_NV_half_float

  def self.get_ext_command_GL_NV_half_float
    [
      'Vertex2hNV',
      'Vertex2hvNV',
      'Vertex3hNV',
      'Vertex3hvNV',
      'Vertex4hNV',
      'Vertex4hvNV',
      'Normal3hNV',
      'Normal3hvNV',
      'Color3hNV',
      'Color3hvNV',
      'Color4hNV',
      'Color4hvNV',
      'TexCoord1hNV',
      'TexCoord1hvNV',
      'TexCoord2hNV',
      'TexCoord2hvNV',
      'TexCoord3hNV',
      'TexCoord3hvNV',
      'TexCoord4hNV',
      'TexCoord4hvNV',
      'MultiTexCoord1hNV',
      'MultiTexCoord1hvNV',
      'MultiTexCoord2hNV',
      'MultiTexCoord2hvNV',
      'MultiTexCoord3hNV',
      'MultiTexCoord3hvNV',
      'MultiTexCoord4hNV',
      'MultiTexCoord4hvNV',
      'FogCoordhNV',
      'FogCoordhvNV',
      'SecondaryColor3hNV',
      'SecondaryColor3hvNV',
      'VertexWeighthNV',
      'VertexWeighthvNV',
      'VertexAttrib1hNV',
      'VertexAttrib1hvNV',
      'VertexAttrib2hNV',
      'VertexAttrib2hvNV',
      'VertexAttrib3hNV',
      'VertexAttrib3hvNV',
      'VertexAttrib4hNV',
      'VertexAttrib4hvNV',
      'VertexAttribs1hvNV',
      'VertexAttribs2hvNV',
      'VertexAttribs3hvNV',
      'VertexAttribs4hvNV',
    ]
  end # self.get_ext_command_GL_NV_half_float


  def self.define_ext_command_GL_NV_internalformat_sample_query
    GL::GL_FUNCTION_SYMBOLS << :GetInternalformatSampleivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInternalformatSampleivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInternalformatSampleivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetInternalformatSampleivNV)
    GL.module_eval(<<-SRC)
      def self.GetInternalformatSampleivNV(_target_, _internalformat_, _samples_, _pname_, _count_, _params_)
        GL_FUNCTIONS_MAP[:GetInternalformatSampleivNV].call(_target_, _internalformat_, _samples_, _pname_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_internalformat_sample_query

  def self.get_ext_command_GL_NV_internalformat_sample_query
    [
      'GetInternalformatSampleivNV',
    ]
  end # self.get_ext_command_GL_NV_internalformat_sample_query


  def self.define_ext_command_GL_NV_light_max_exponent
  end # self.define_ext_command_GL_NV_light_max_exponent

  def self.get_ext_command_GL_NV_light_max_exponent
    [
    ]
  end # self.get_ext_command_GL_NV_light_max_exponent


  def self.define_ext_command_GL_NV_gpu_multicast
    GL::GL_FUNCTION_SYMBOLS << :RenderGpuMaskNV
    GL::GL_FUNCTIONS_ARGS_MAP[:RenderGpuMaskNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RenderGpuMaskNV] = Fiddle::TYPE_VOID
    GL.bind_command(:RenderGpuMaskNV)
    GL.module_eval(<<-SRC)
      def self.RenderGpuMaskNV(_mask_)
        GL_FUNCTIONS_MAP[:RenderGpuMaskNV].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastBufferSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastBufferSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastBufferSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastBufferSubDataNV)
    GL.module_eval(<<-SRC)
      def self.MulticastBufferSubDataNV(_gpuMask_, _buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:MulticastBufferSubDataNV].call(_gpuMask_, _buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastCopyBufferSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastCopyBufferSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastCopyBufferSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastCopyBufferSubDataNV)
    GL.module_eval(<<-SRC)
      def self.MulticastCopyBufferSubDataNV(_readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:MulticastCopyBufferSubDataNV].call(_readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastCopyImageSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastCopyImageSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastCopyImageSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastCopyImageSubDataNV)
    GL.module_eval(<<-SRC)
      def self.MulticastCopyImageSubDataNV(_srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
        GL_FUNCTIONS_MAP[:MulticastCopyImageSubDataNV].call(_srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastBlitFramebufferNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastBlitFramebufferNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastBlitFramebufferNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastBlitFramebufferNV)
    GL.module_eval(<<-SRC)
      def self.MulticastBlitFramebufferNV(_srcGpu_, _dstGpu_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:MulticastBlitFramebufferNV].call(_srcGpu_, _dstGpu_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastFramebufferSampleLocationsfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastFramebufferSampleLocationsfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastFramebufferSampleLocationsfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastFramebufferSampleLocationsfvNV)
    GL.module_eval(<<-SRC)
      def self.MulticastFramebufferSampleLocationsfvNV(_gpu_, _framebuffer_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:MulticastFramebufferSampleLocationsfvNV].call(_gpu_, _framebuffer_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastBarrierNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastBarrierNV)
    GL.module_eval(<<-SRC)
      def self.MulticastBarrierNV()
        GL_FUNCTIONS_MAP[:MulticastBarrierNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastWaitSyncNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastWaitSyncNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastWaitSyncNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastWaitSyncNV)
    GL.module_eval(<<-SRC)
      def self.MulticastWaitSyncNV(_signalGpu_, _waitGpuMask_)
        GL_FUNCTIONS_MAP[:MulticastWaitSyncNV].call(_signalGpu_, _waitGpuMask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastGetQueryObjectivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastGetQueryObjectivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastGetQueryObjectivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastGetQueryObjectivNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjectivNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MulticastGetQueryObjectivNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastGetQueryObjectuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastGetQueryObjectuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastGetQueryObjectuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastGetQueryObjectuivNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjectuivNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MulticastGetQueryObjectuivNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastGetQueryObjecti64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastGetQueryObjecti64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastGetQueryObjecti64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastGetQueryObjecti64vNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjecti64vNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MulticastGetQueryObjecti64vNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastGetQueryObjectui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastGetQueryObjectui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastGetQueryObjectui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastGetQueryObjectui64vNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjectui64vNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:MulticastGetQueryObjectui64vNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_multicast

  def self.get_ext_command_GL_NV_gpu_multicast
    [
      'RenderGpuMaskNV',
      'MulticastBufferSubDataNV',
      'MulticastCopyBufferSubDataNV',
      'MulticastCopyImageSubDataNV',
      'MulticastBlitFramebufferNV',
      'MulticastFramebufferSampleLocationsfvNV',
      'MulticastBarrierNV',
      'MulticastWaitSyncNV',
      'MulticastGetQueryObjectivNV',
      'MulticastGetQueryObjectuivNV',
      'MulticastGetQueryObjecti64vNV',
      'MulticastGetQueryObjectui64vNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_multicast


  def self.define_ext_command_GL_NVX_gpu_multicast2
    GL::GL_FUNCTION_SYMBOLS << :UploadGpuMaskNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:UploadGpuMaskNVX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:UploadGpuMaskNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:UploadGpuMaskNVX)
    GL.module_eval(<<-SRC)
      def self.UploadGpuMaskNVX(_mask_)
        GL_FUNCTIONS_MAP[:UploadGpuMaskNVX].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastViewportArrayvNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastViewportArrayvNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastViewportArrayvNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastViewportArrayvNVX)
    GL.module_eval(<<-SRC)
      def self.MulticastViewportArrayvNVX(_gpu_, _first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:MulticastViewportArrayvNVX].call(_gpu_, _first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastViewportPositionWScaleNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastViewportPositionWScaleNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastViewportPositionWScaleNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastViewportPositionWScaleNVX)
    GL.module_eval(<<-SRC)
      def self.MulticastViewportPositionWScaleNVX(_gpu_, _index_, _xcoeff_, _ycoeff_)
        GL_FUNCTIONS_MAP[:MulticastViewportPositionWScaleNVX].call(_gpu_, _index_, _xcoeff_, _ycoeff_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MulticastScissorArrayvNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:MulticastScissorArrayvNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MulticastScissorArrayvNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:MulticastScissorArrayvNVX)
    GL.module_eval(<<-SRC)
      def self.MulticastScissorArrayvNVX(_gpu_, _first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:MulticastScissorArrayvNVX].call(_gpu_, _first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AsyncCopyBufferSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:AsyncCopyBufferSubDataNVX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AsyncCopyBufferSubDataNVX] = -Fiddle::TYPE_INT
    GL.bind_command(:AsyncCopyBufferSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.AsyncCopyBufferSubDataNVX(_waitSemaphoreCount_, _waitSemaphoreArray_, _fenceValueArray_, _readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
        GL_FUNCTIONS_MAP[:AsyncCopyBufferSubDataNVX].call(_waitSemaphoreCount_, _waitSemaphoreArray_, _fenceValueArray_, _readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AsyncCopyImageSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:AsyncCopyImageSubDataNVX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AsyncCopyImageSubDataNVX] = -Fiddle::TYPE_INT
    GL.bind_command(:AsyncCopyImageSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.AsyncCopyImageSubDataNVX(_waitSemaphoreCount_, _waitSemaphoreArray_, _waitValueArray_, _srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
        GL_FUNCTIONS_MAP[:AsyncCopyImageSubDataNVX].call(_waitSemaphoreCount_, _waitSemaphoreArray_, _waitValueArray_, _srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
      end
    SRC
  end # self.define_ext_command_GL_NVX_gpu_multicast2

  def self.get_ext_command_GL_NVX_gpu_multicast2
    [
      'UploadGpuMaskNVX',
      'MulticastViewportArrayvNVX',
      'MulticastViewportPositionWScaleNVX',
      'MulticastScissorArrayvNVX',
      'AsyncCopyBufferSubDataNVX',
      'AsyncCopyImageSubDataNVX',
    ]
  end # self.get_ext_command_GL_NVX_gpu_multicast2


  def self.define_ext_command_GL_NVX_progress_fence
    GL::GL_FUNCTION_SYMBOLS << :CreateProgressFenceNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:CreateProgressFenceNVX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:CreateProgressFenceNVX] = -Fiddle::TYPE_INT
    GL.bind_command(:CreateProgressFenceNVX)
    GL.module_eval(<<-SRC)
      def self.CreateProgressFenceNVX()
        GL_FUNCTIONS_MAP[:CreateProgressFenceNVX].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SignalSemaphoreui64NVX
    GL::GL_FUNCTIONS_ARGS_MAP[:SignalSemaphoreui64NVX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SignalSemaphoreui64NVX] = Fiddle::TYPE_VOID
    GL.bind_command(:SignalSemaphoreui64NVX)
    GL.module_eval(<<-SRC)
      def self.SignalSemaphoreui64NVX(_signalGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
        GL_FUNCTIONS_MAP[:SignalSemaphoreui64NVX].call(_signalGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WaitSemaphoreui64NVX
    GL::GL_FUNCTIONS_ARGS_MAP[:WaitSemaphoreui64NVX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WaitSemaphoreui64NVX] = Fiddle::TYPE_VOID
    GL.bind_command(:WaitSemaphoreui64NVX)
    GL.module_eval(<<-SRC)
      def self.WaitSemaphoreui64NVX(_waitGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
        GL_FUNCTIONS_MAP[:WaitSemaphoreui64NVX].call(_waitGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClientWaitSemaphoreui64NVX
    GL::GL_FUNCTIONS_ARGS_MAP[:ClientWaitSemaphoreui64NVX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClientWaitSemaphoreui64NVX] = Fiddle::TYPE_VOID
    GL.bind_command(:ClientWaitSemaphoreui64NVX)
    GL.module_eval(<<-SRC)
      def self.ClientWaitSemaphoreui64NVX(_fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
        GL_FUNCTIONS_MAP[:ClientWaitSemaphoreui64NVX].call(_fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
      end
    SRC
  end # self.define_ext_command_GL_NVX_progress_fence

  def self.get_ext_command_GL_NVX_progress_fence
    [
      'CreateProgressFenceNVX',
      'SignalSemaphoreui64NVX',
      'WaitSemaphoreui64NVX',
      'ClientWaitSemaphoreui64NVX',
    ]
  end # self.get_ext_command_GL_NVX_progress_fence


  def self.define_ext_command_GL_NV_memory_attachment
    GL::GL_FUNCTION_SYMBOLS << :GetMemoryObjectDetachedResourcesuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMemoryObjectDetachedResourcesuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMemoryObjectDetachedResourcesuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMemoryObjectDetachedResourcesuivNV)
    GL.module_eval(<<-SRC)
      def self.GetMemoryObjectDetachedResourcesuivNV(_memory_, _pname_, _first_, _count_, _params_)
        GL_FUNCTIONS_MAP[:GetMemoryObjectDetachedResourcesuivNV].call(_memory_, _pname_, _first_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResetMemoryObjectParameterNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ResetMemoryObjectParameterNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResetMemoryObjectParameterNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ResetMemoryObjectParameterNV)
    GL.module_eval(<<-SRC)
      def self.ResetMemoryObjectParameterNV(_memory_, _pname_)
        GL_FUNCTIONS_MAP[:ResetMemoryObjectParameterNV].call(_memory_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.TexAttachMemoryNV(_target_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TexAttachMemoryNV].call(_target_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BufferAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.BufferAttachMemoryNV(_target_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:BufferAttachMemoryNV].call(_target_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.TextureAttachMemoryNV(_texture_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:TextureAttachMemoryNV].call(_texture_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.NamedBufferAttachMemoryNV(_buffer_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:NamedBufferAttachMemoryNV].call(_buffer_, _memory_, _offset_)
      end
    SRC
  end # self.define_ext_command_GL_NV_memory_attachment

  def self.get_ext_command_GL_NV_memory_attachment
    [
      'GetMemoryObjectDetachedResourcesuivNV',
      'ResetMemoryObjectParameterNV',
      'TexAttachMemoryNV',
      'BufferAttachMemoryNV',
      'TextureAttachMemoryNV',
      'NamedBufferAttachMemoryNV',
    ]
  end # self.get_ext_command_GL_NV_memory_attachment


  def self.define_ext_command_GL_NV_memory_object_sparse
    GL::GL_FUNCTION_SYMBOLS << :BufferPageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferPageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferPageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferPageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.BufferPageCommitmentMemNV(_target_, _offset_, _size_, _memory_, _memOffset_, _commit_)
        GL_FUNCTIONS_MAP[:BufferPageCommitmentMemNV].call(_target_, _offset_, _size_, _memory_, _memOffset_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexPageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexPageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexPageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexPageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.TexPageCommitmentMemNV(_target_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
        GL_FUNCTIONS_MAP[:TexPageCommitmentMemNV].call(_target_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedBufferPageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedBufferPageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedBufferPageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedBufferPageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.NamedBufferPageCommitmentMemNV(_buffer_, _offset_, _size_, _memory_, _memOffset_, _commit_)
        GL_FUNCTIONS_MAP[:NamedBufferPageCommitmentMemNV].call(_buffer_, _offset_, _size_, _memory_, _memOffset_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexturePageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexturePageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexturePageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexturePageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.TexturePageCommitmentMemNV(_texture_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
        GL_FUNCTIONS_MAP[:TexturePageCommitmentMemNV].call(_texture_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
      end
    SRC
  end # self.define_ext_command_GL_NV_memory_object_sparse

  def self.get_ext_command_GL_NV_memory_object_sparse
    [
      'BufferPageCommitmentMemNV',
      'TexPageCommitmentMemNV',
      'NamedBufferPageCommitmentMemNV',
      'TexturePageCommitmentMemNV',
    ]
  end # self.get_ext_command_GL_NV_memory_object_sparse


  def self.define_ext_command_GL_NV_mesh_shader
    GL::GL_FUNCTION_SYMBOLS << :DrawMeshTasksNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawMeshTasksNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawMeshTasksNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawMeshTasksNV)
    GL.module_eval(<<-SRC)
      def self.DrawMeshTasksNV(_first_, _count_)
        GL_FUNCTIONS_MAP[:DrawMeshTasksNV].call(_first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawMeshTasksIndirectNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawMeshTasksIndirectNV] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawMeshTasksIndirectNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawMeshTasksIndirectNV)
    GL.module_eval(<<-SRC)
      def self.DrawMeshTasksIndirectNV(_indirect_)
        GL_FUNCTIONS_MAP[:DrawMeshTasksIndirectNV].call(_indirect_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawMeshTasksIndirectNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawMeshTasksIndirectNV] = [Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawMeshTasksIndirectNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawMeshTasksIndirectNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawMeshTasksIndirectNV(_indirect_, _drawcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawMeshTasksIndirectNV].call(_indirect_, _drawcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiDrawMeshTasksIndirectCountNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiDrawMeshTasksIndirectCountNV] = [Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiDrawMeshTasksIndirectCountNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiDrawMeshTasksIndirectCountNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawMeshTasksIndirectCountNV(_indirect_, _drawcount_, _maxdrawcount_, _stride_)
        GL_FUNCTIONS_MAP[:MultiDrawMeshTasksIndirectCountNV].call(_indirect_, _drawcount_, _maxdrawcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_NV_mesh_shader

  def self.get_ext_command_GL_NV_mesh_shader
    [
      'DrawMeshTasksNV',
      'DrawMeshTasksIndirectNV',
      'MultiDrawMeshTasksIndirectNV',
      'MultiDrawMeshTasksIndirectCountNV',
    ]
  end # self.get_ext_command_GL_NV_mesh_shader


  def self.define_ext_command_GL_NV_multisample_coverage
  end # self.define_ext_command_GL_NV_multisample_coverage

  def self.get_ext_command_GL_NV_multisample_coverage
    [
    ]
  end # self.get_ext_command_GL_NV_multisample_coverage


  def self.define_ext_command_GL_NV_multisample_filter_hint
  end # self.define_ext_command_GL_NV_multisample_filter_hint

  def self.get_ext_command_GL_NV_multisample_filter_hint
    [
    ]
  end # self.get_ext_command_GL_NV_multisample_filter_hint


  def self.define_ext_command_GL_NV_occlusion_query
    GL::GL_FUNCTION_SYMBOLS << :GenOcclusionQueriesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GenOcclusionQueriesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenOcclusionQueriesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GenOcclusionQueriesNV)
    GL.module_eval(<<-SRC)
      def self.GenOcclusionQueriesNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:GenOcclusionQueriesNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteOcclusionQueriesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteOcclusionQueriesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteOcclusionQueriesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteOcclusionQueriesNV)
    GL.module_eval(<<-SRC)
      def self.DeleteOcclusionQueriesNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:DeleteOcclusionQueriesNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsOcclusionQueryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsOcclusionQueryNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsOcclusionQueryNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsOcclusionQueryNV)
    GL.module_eval(<<-SRC)
      def self.IsOcclusionQueryNV(_id_)
        GL_FUNCTIONS_MAP[:IsOcclusionQueryNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BeginOcclusionQueryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginOcclusionQueryNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginOcclusionQueryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginOcclusionQueryNV)
    GL.module_eval(<<-SRC)
      def self.BeginOcclusionQueryNV(_id_)
        GL_FUNCTIONS_MAP[:BeginOcclusionQueryNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndOcclusionQueryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:EndOcclusionQueryNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndOcclusionQueryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:EndOcclusionQueryNV)
    GL.module_eval(<<-SRC)
      def self.EndOcclusionQueryNV()
        GL_FUNCTIONS_MAP[:EndOcclusionQueryNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetOcclusionQueryivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetOcclusionQueryivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetOcclusionQueryivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetOcclusionQueryivNV)
    GL.module_eval(<<-SRC)
      def self.GetOcclusionQueryivNV(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetOcclusionQueryivNV].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetOcclusionQueryuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetOcclusionQueryuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetOcclusionQueryuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetOcclusionQueryuivNV)
    GL.module_eval(<<-SRC)
      def self.GetOcclusionQueryuivNV(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetOcclusionQueryuivNV].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_occlusion_query

  def self.get_ext_command_GL_NV_occlusion_query
    [
      'GenOcclusionQueriesNV',
      'DeleteOcclusionQueriesNV',
      'IsOcclusionQueryNV',
      'BeginOcclusionQueryNV',
      'EndOcclusionQueryNV',
      'GetOcclusionQueryivNV',
      'GetOcclusionQueryuivNV',
    ]
  end # self.get_ext_command_GL_NV_occlusion_query


  def self.define_ext_command_GL_NV_packed_depth_stencil
  end # self.define_ext_command_GL_NV_packed_depth_stencil

  def self.get_ext_command_GL_NV_packed_depth_stencil
    [
    ]
  end # self.get_ext_command_GL_NV_packed_depth_stencil


  def self.define_ext_command_GL_NV_parameter_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :ProgramBufferParametersfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramBufferParametersfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramBufferParametersfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramBufferParametersfvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramBufferParametersfvNV(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramBufferParametersfvNV].call(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramBufferParametersIivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramBufferParametersIivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramBufferParametersIivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramBufferParametersIivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramBufferParametersIivNV(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramBufferParametersIivNV].call(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramBufferParametersIuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramBufferParametersIuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramBufferParametersIuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramBufferParametersIuivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramBufferParametersIuivNV(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
        GL_FUNCTIONS_MAP[:ProgramBufferParametersIuivNV].call(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_parameter_buffer_object

  def self.get_ext_command_GL_NV_parameter_buffer_object
    [
      'ProgramBufferParametersfvNV',
      'ProgramBufferParametersIivNV',
      'ProgramBufferParametersIuivNV',
    ]
  end # self.get_ext_command_GL_NV_parameter_buffer_object


  def self.define_ext_command_GL_NV_parameter_buffer_object2
  end # self.define_ext_command_GL_NV_parameter_buffer_object2

  def self.get_ext_command_GL_NV_parameter_buffer_object2
    [
    ]
  end # self.get_ext_command_GL_NV_parameter_buffer_object2


  def self.define_ext_command_GL_NV_path_rendering
    GL::GL_FUNCTION_SYMBOLS << :GenPathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GenPathsNV] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenPathsNV] = -Fiddle::TYPE_INT
    GL.bind_command(:GenPathsNV)
    GL.module_eval(<<-SRC)
      def self.GenPathsNV(_range_)
        GL_FUNCTIONS_MAP[:GenPathsNV].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeletePathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeletePathsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeletePathsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeletePathsNV)
    GL.module_eval(<<-SRC)
      def self.DeletePathsNV(_path_, _range_)
        GL_FUNCTIONS_MAP[:DeletePathsNV].call(_path_, _range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsPathNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsPathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsPathNV)
    GL.module_eval(<<-SRC)
      def self.IsPathNV(_path_)
        GL_FUNCTIONS_MAP[:IsPathNV].call(_path_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathCommandsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathCommandsNV)
    GL.module_eval(<<-SRC)
      def self.PathCommandsNV(_path_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:PathCommandsNV].call(_path_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathCoordsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathCoordsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathCoordsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathCoordsNV)
    GL.module_eval(<<-SRC)
      def self.PathCoordsNV(_path_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:PathCoordsNV].call(_path_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathSubCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathSubCommandsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathSubCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathSubCommandsNV)
    GL.module_eval(<<-SRC)
      def self.PathSubCommandsNV(_path_, _commandStart_, _commandsToDelete_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:PathSubCommandsNV].call(_path_, _commandStart_, _commandsToDelete_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathSubCoordsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathSubCoordsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathSubCoordsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathSubCoordsNV)
    GL.module_eval(<<-SRC)
      def self.PathSubCoordsNV(_path_, _coordStart_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:PathSubCoordsNV].call(_path_, _coordStart_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathStringNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathStringNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathStringNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathStringNV)
    GL.module_eval(<<-SRC)
      def self.PathStringNV(_path_, _format_, _length_, _pathString_)
        GL_FUNCTIONS_MAP[:PathStringNV].call(_path_, _format_, _length_, _pathString_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathGlyphsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathGlyphsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathGlyphsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathGlyphsNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphsNV(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _numGlyphs_, _type_, _charcodes_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:PathGlyphsNV].call(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _numGlyphs_, _type_, _charcodes_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathGlyphRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathGlyphRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathGlyphRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathGlyphRangeNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphRangeNV(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyph_, _numGlyphs_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:PathGlyphRangeNV].call(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyph_, _numGlyphs_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :WeightPathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:WeightPathsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:WeightPathsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:WeightPathsNV)
    GL.module_eval(<<-SRC)
      def self.WeightPathsNV(_resultPath_, _numPaths_, _paths_, _weights_)
        GL_FUNCTIONS_MAP[:WeightPathsNV].call(_resultPath_, _numPaths_, _paths_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyPathNV)
    GL.module_eval(<<-SRC)
      def self.CopyPathNV(_resultPath_, _srcPath_)
        GL_FUNCTIONS_MAP[:CopyPathNV].call(_resultPath_, _srcPath_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InterpolatePathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:InterpolatePathsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InterpolatePathsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:InterpolatePathsNV)
    GL.module_eval(<<-SRC)
      def self.InterpolatePathsNV(_resultPath_, _pathA_, _pathB_, _weight_)
        GL_FUNCTIONS_MAP[:InterpolatePathsNV].call(_resultPath_, _pathA_, _pathB_, _weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformPathNV)
    GL.module_eval(<<-SRC)
      def self.TransformPathNV(_resultPath_, _srcPath_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:TransformPathNV].call(_resultPath_, _srcPath_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathParameterivNV)
    GL.module_eval(<<-SRC)
      def self.PathParameterivNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:PathParameterivNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathParameteriNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathParameteriNV)
    GL.module_eval(<<-SRC)
      def self.PathParameteriNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:PathParameteriNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.PathParameterfvNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:PathParameterfvNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathParameterfNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathParameterfNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathParameterfNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathParameterfNV)
    GL.module_eval(<<-SRC)
      def self.PathParameterfNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:PathParameterfNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathDashArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathDashArrayNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathDashArrayNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathDashArrayNV)
    GL.module_eval(<<-SRC)
      def self.PathDashArrayNV(_path_, _dashCount_, _dashArray_)
        GL_FUNCTIONS_MAP[:PathDashArrayNV].call(_path_, _dashCount_, _dashArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathStencilFuncNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathStencilFuncNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathStencilFuncNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathStencilFuncNV)
    GL.module_eval(<<-SRC)
      def self.PathStencilFuncNV(_func_, _ref_, _mask_)
        GL_FUNCTIONS_MAP[:PathStencilFuncNV].call(_func_, _ref_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathStencilDepthOffsetNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathStencilDepthOffsetNV] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathStencilDepthOffsetNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathStencilDepthOffsetNV)
    GL.module_eval(<<-SRC)
      def self.PathStencilDepthOffsetNV(_factor_, _units_)
        GL_FUNCTIONS_MAP[:PathStencilDepthOffsetNV].call(_factor_, _units_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilFillPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilFillPathNV)
    GL.module_eval(<<-SRC)
      def self.StencilFillPathNV(_path_, _fillMode_, _mask_)
        GL_FUNCTIONS_MAP[:StencilFillPathNV].call(_path_, _fillMode_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilStrokePathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilStrokePathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.StencilStrokePathNV(_path_, _reference_, _mask_)
        GL_FUNCTIONS_MAP[:StencilStrokePathNV].call(_path_, _reference_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilFillPathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilFillPathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilFillPathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilFillPathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilFillPathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:StencilFillPathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilStrokePathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilStrokePathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilStrokePathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilStrokePathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilStrokePathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:StencilStrokePathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathCoverDepthFuncNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathCoverDepthFuncNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathCoverDepthFuncNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathCoverDepthFuncNV)
    GL.module_eval(<<-SRC)
      def self.PathCoverDepthFuncNV(_func_)
        GL_FUNCTIONS_MAP[:PathCoverDepthFuncNV].call(_func_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CoverFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CoverFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CoverFillPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CoverFillPathNV)
    GL.module_eval(<<-SRC)
      def self.CoverFillPathNV(_path_, _coverMode_)
        GL_FUNCTIONS_MAP[:CoverFillPathNV].call(_path_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CoverStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CoverStrokePathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CoverStrokePathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CoverStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.CoverStrokePathNV(_path_, _coverMode_)
        GL_FUNCTIONS_MAP[:CoverStrokePathNV].call(_path_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CoverFillPathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CoverFillPathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CoverFillPathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CoverFillPathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.CoverFillPathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:CoverFillPathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CoverStrokePathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CoverStrokePathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CoverStrokePathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CoverStrokePathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.CoverStrokePathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:CoverStrokePathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetPathParameterivNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:GetPathParameterivNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetPathParameterfvNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:GetPathParameterfvNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathCommandsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathCommandsNV)
    GL.module_eval(<<-SRC)
      def self.GetPathCommandsNV(_path_, _commands_)
        GL_FUNCTIONS_MAP[:GetPathCommandsNV].call(_path_, _commands_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathCoordsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathCoordsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathCoordsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathCoordsNV)
    GL.module_eval(<<-SRC)
      def self.GetPathCoordsNV(_path_, _coords_)
        GL_FUNCTIONS_MAP[:GetPathCoordsNV].call(_path_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathDashArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathDashArrayNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathDashArrayNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathDashArrayNV)
    GL.module_eval(<<-SRC)
      def self.GetPathDashArrayNV(_path_, _dashArray_)
        GL_FUNCTIONS_MAP[:GetPathDashArrayNV].call(_path_, _dashArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathMetricsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathMetricsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathMetricsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathMetricsNV)
    GL.module_eval(<<-SRC)
      def self.GetPathMetricsNV(_metricQueryMask_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _stride_, _metrics_)
        GL_FUNCTIONS_MAP[:GetPathMetricsNV].call(_metricQueryMask_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _stride_, _metrics_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathMetricRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathMetricRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathMetricRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathMetricRangeNV)
    GL.module_eval(<<-SRC)
      def self.GetPathMetricRangeNV(_metricQueryMask_, _firstPathName_, _numPaths_, _stride_, _metrics_)
        GL_FUNCTIONS_MAP[:GetPathMetricRangeNV].call(_metricQueryMask_, _firstPathName_, _numPaths_, _stride_, _metrics_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathSpacingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathSpacingNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathSpacingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathSpacingNV)
    GL.module_eval(<<-SRC)
      def self.GetPathSpacingNV(_pathListMode_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _advanceScale_, _kerningScale_, _transformType_, _returnedSpacing_)
        GL_FUNCTIONS_MAP[:GetPathSpacingNV].call(_pathListMode_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _advanceScale_, _kerningScale_, _transformType_, _returnedSpacing_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsPointInFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsPointInFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsPointInFillPathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsPointInFillPathNV)
    GL.module_eval(<<-SRC)
      def self.IsPointInFillPathNV(_path_, _mask_, _x_, _y_)
        GL_FUNCTIONS_MAP[:IsPointInFillPathNV].call(_path_, _mask_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsPointInStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsPointInStrokePathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsPointInStrokePathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsPointInStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.IsPointInStrokePathNV(_path_, _x_, _y_)
        GL_FUNCTIONS_MAP[:IsPointInStrokePathNV].call(_path_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathLengthNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathLengthNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathLengthNV] = Fiddle::TYPE_FLOAT
    GL.bind_command(:GetPathLengthNV)
    GL.module_eval(<<-SRC)
      def self.GetPathLengthNV(_path_, _startSegment_, _numSegments_)
        GL_FUNCTIONS_MAP[:GetPathLengthNV].call(_path_, _startSegment_, _numSegments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointAlongPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PointAlongPathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointAlongPathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:PointAlongPathNV)
    GL.module_eval(<<-SRC)
      def self.PointAlongPathNV(_path_, _startSegment_, _numSegments_, _distance_, _x_, _y_, _tangentX_, _tangentY_)
        GL_FUNCTIONS_MAP[:PointAlongPathNV].call(_path_, _startSegment_, _numSegments_, _distance_, _x_, _y_, _tangentX_, _tangentY_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoad3x2fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoad3x2fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoad3x2fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoad3x2fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixLoad3x2fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoad3x2fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoad3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoad3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoad3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoad3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixLoad3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoad3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadTranspose3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadTranspose3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadTranspose3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadTranspose3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTranspose3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadTranspose3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMult3x2fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMult3x2fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMult3x2fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMult3x2fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixMult3x2fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMult3x2fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMult3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMult3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMult3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMult3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixMult3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMult3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultTranspose3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultTranspose3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultTranspose3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultTranspose3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTranspose3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultTranspose3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilThenCoverFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilThenCoverFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilThenCoverFillPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilThenCoverFillPathNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverFillPathNV(_path_, _fillMode_, _mask_, _coverMode_)
        GL_FUNCTIONS_MAP[:StencilThenCoverFillPathNV].call(_path_, _fillMode_, _mask_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilThenCoverStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilThenCoverStrokePathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilThenCoverStrokePathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilThenCoverStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverStrokePathNV(_path_, _reference_, _mask_, _coverMode_)
        GL_FUNCTIONS_MAP[:StencilThenCoverStrokePathNV].call(_path_, _reference_, _mask_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilThenCoverFillPathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilThenCoverFillPathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilThenCoverFillPathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilThenCoverFillPathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverFillPathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:StencilThenCoverFillPathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StencilThenCoverStrokePathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:StencilThenCoverStrokePathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StencilThenCoverStrokePathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:StencilThenCoverStrokePathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverStrokePathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:StencilThenCoverStrokePathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathGlyphIndexRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathGlyphIndexRangeNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathGlyphIndexRangeNV] = -Fiddle::TYPE_INT
    GL.bind_command(:PathGlyphIndexRangeNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphIndexRangeNV(_fontTarget_, _fontName_, _fontStyle_, _pathParameterTemplate_, _emScale_, _baseAndCount_)
        GL_FUNCTIONS_MAP[:PathGlyphIndexRangeNV].call(_fontTarget_, _fontName_, _fontStyle_, _pathParameterTemplate_, _emScale_, _baseAndCount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathGlyphIndexArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathGlyphIndexArrayNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathGlyphIndexArrayNV] = -Fiddle::TYPE_INT
    GL.bind_command(:PathGlyphIndexArrayNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphIndexArrayNV(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:PathGlyphIndexArrayNV].call(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathMemoryGlyphIndexArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathMemoryGlyphIndexArrayNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathMemoryGlyphIndexArrayNV] = -Fiddle::TYPE_INT
    GL.bind_command(:PathMemoryGlyphIndexArrayNV)
    GL.module_eval(<<-SRC)
      def self.PathMemoryGlyphIndexArrayNV(_firstPathName_, _fontTarget_, _fontSize_, _fontData_, _faceIndex_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:PathMemoryGlyphIndexArrayNV].call(_firstPathName_, _fontTarget_, _fontSize_, _fontData_, _faceIndex_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramPathFragmentInputGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramPathFragmentInputGenNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramPathFragmentInputGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramPathFragmentInputGenNV)
    GL.module_eval(<<-SRC)
      def self.ProgramPathFragmentInputGenNV(_program_, _location_, _genMode_, _components_, _coeffs_)
        GL_FUNCTIONS_MAP[:ProgramPathFragmentInputGenNV].call(_program_, _location_, _genMode_, _components_, _coeffs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramResourcefvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramResourcefvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramResourcefvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramResourcefvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourcefvNV(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramResourcefvNV].call(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathColorGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathColorGenNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathColorGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathColorGenNV)
    GL.module_eval(<<-SRC)
      def self.PathColorGenNV(_color_, _genMode_, _colorFormat_, _coeffs_)
        GL_FUNCTIONS_MAP[:PathColorGenNV].call(_color_, _genMode_, _colorFormat_, _coeffs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathTexGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathTexGenNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathTexGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathTexGenNV)
    GL.module_eval(<<-SRC)
      def self.PathTexGenNV(_texCoordSet_, _genMode_, _components_, _coeffs_)
        GL_FUNCTIONS_MAP[:PathTexGenNV].call(_texCoordSet_, _genMode_, _components_, _coeffs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PathFogGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PathFogGenNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PathFogGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PathFogGenNV)
    GL.module_eval(<<-SRC)
      def self.PathFogGenNV(_genMode_)
        GL_FUNCTIONS_MAP[:PathFogGenNV].call(_genMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathColorGenivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathColorGenivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathColorGenivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathColorGenivNV)
    GL.module_eval(<<-SRC)
      def self.GetPathColorGenivNV(_color_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:GetPathColorGenivNV].call(_color_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathColorGenfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathColorGenfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathColorGenfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathColorGenfvNV)
    GL.module_eval(<<-SRC)
      def self.GetPathColorGenfvNV(_color_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:GetPathColorGenfvNV].call(_color_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathTexGenivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathTexGenivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathTexGenivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathTexGenivNV)
    GL.module_eval(<<-SRC)
      def self.GetPathTexGenivNV(_texCoordSet_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:GetPathTexGenivNV].call(_texCoordSet_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPathTexGenfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPathTexGenfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPathTexGenfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPathTexGenfvNV)
    GL.module_eval(<<-SRC)
      def self.GetPathTexGenfvNV(_texCoordSet_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:GetPathTexGenfvNV].call(_texCoordSet_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixFrustumEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixFrustumEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixFrustumEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixFrustumEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixFrustumEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:MatrixFrustumEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadIdentityEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadIdentityEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadIdentityEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadIdentityEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadIdentityEXT(_mode_)
        GL_FUNCTIONS_MAP[:MatrixLoadIdentityEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoadfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoadfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoadfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoadfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoadfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixLoaddEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixLoaddEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixLoaddEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixLoaddEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoaddEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixLoaddEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixMultdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixMultdEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixMultdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixMultdEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultdEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:MatrixMultdEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixOrthoEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixOrthoEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixOrthoEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixOrthoEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixOrthoEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:MatrixOrthoEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixPopEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixPopEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixPopEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixPopEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPopEXT(_mode_)
        GL_FUNCTIONS_MAP[:MatrixPopEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixPushEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixPushEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixPushEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixPushEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPushEXT(_mode_)
        GL_FUNCTIONS_MAP[:MatrixPushEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixRotatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixRotatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixRotatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixRotatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatefEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixRotatefEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixRotatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixRotatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixRotatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixRotatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatedEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixRotatedEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixScalefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixScalefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixScalefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixScalefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScalefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixScalefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixScaledEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixScaledEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixScaledEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixScaledEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScaledEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixScaledEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixTranslatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixTranslatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixTranslatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixTranslatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixTranslatefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MatrixTranslatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:MatrixTranslatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MatrixTranslatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:MatrixTranslatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatedEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:MatrixTranslatedEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC
  end # self.define_ext_command_GL_NV_path_rendering

  def self.get_ext_command_GL_NV_path_rendering
    [
      'GenPathsNV',
      'DeletePathsNV',
      'IsPathNV',
      'PathCommandsNV',
      'PathCoordsNV',
      'PathSubCommandsNV',
      'PathSubCoordsNV',
      'PathStringNV',
      'PathGlyphsNV',
      'PathGlyphRangeNV',
      'WeightPathsNV',
      'CopyPathNV',
      'InterpolatePathsNV',
      'TransformPathNV',
      'PathParameterivNV',
      'PathParameteriNV',
      'PathParameterfvNV',
      'PathParameterfNV',
      'PathDashArrayNV',
      'PathStencilFuncNV',
      'PathStencilDepthOffsetNV',
      'StencilFillPathNV',
      'StencilStrokePathNV',
      'StencilFillPathInstancedNV',
      'StencilStrokePathInstancedNV',
      'PathCoverDepthFuncNV',
      'CoverFillPathNV',
      'CoverStrokePathNV',
      'CoverFillPathInstancedNV',
      'CoverStrokePathInstancedNV',
      'GetPathParameterivNV',
      'GetPathParameterfvNV',
      'GetPathCommandsNV',
      'GetPathCoordsNV',
      'GetPathDashArrayNV',
      'GetPathMetricsNV',
      'GetPathMetricRangeNV',
      'GetPathSpacingNV',
      'IsPointInFillPathNV',
      'IsPointInStrokePathNV',
      'GetPathLengthNV',
      'PointAlongPathNV',
      'MatrixLoad3x2fNV',
      'MatrixLoad3x3fNV',
      'MatrixLoadTranspose3x3fNV',
      'MatrixMult3x2fNV',
      'MatrixMult3x3fNV',
      'MatrixMultTranspose3x3fNV',
      'StencilThenCoverFillPathNV',
      'StencilThenCoverStrokePathNV',
      'StencilThenCoverFillPathInstancedNV',
      'StencilThenCoverStrokePathInstancedNV',
      'PathGlyphIndexRangeNV',
      'PathGlyphIndexArrayNV',
      'PathMemoryGlyphIndexArrayNV',
      'ProgramPathFragmentInputGenNV',
      'GetProgramResourcefvNV',
      'PathColorGenNV',
      'PathTexGenNV',
      'PathFogGenNV',
      'GetPathColorGenivNV',
      'GetPathColorGenfvNV',
      'GetPathTexGenivNV',
      'GetPathTexGenfvNV',
      'MatrixFrustumEXT',
      'MatrixLoadIdentityEXT',
      'MatrixLoadTransposefEXT',
      'MatrixLoadTransposedEXT',
      'MatrixLoadfEXT',
      'MatrixLoaddEXT',
      'MatrixMultTransposefEXT',
      'MatrixMultTransposedEXT',
      'MatrixMultfEXT',
      'MatrixMultdEXT',
      'MatrixOrthoEXT',
      'MatrixPopEXT',
      'MatrixPushEXT',
      'MatrixRotatefEXT',
      'MatrixRotatedEXT',
      'MatrixScalefEXT',
      'MatrixScaledEXT',
      'MatrixTranslatefEXT',
      'MatrixTranslatedEXT',
    ]
  end # self.get_ext_command_GL_NV_path_rendering


  def self.define_ext_command_GL_NV_path_rendering_shared_edge
  end # self.define_ext_command_GL_NV_path_rendering_shared_edge

  def self.get_ext_command_GL_NV_path_rendering_shared_edge
    [
    ]
  end # self.get_ext_command_GL_NV_path_rendering_shared_edge


  def self.define_ext_command_GL_NV_pixel_data_range
    GL::GL_FUNCTION_SYMBOLS << :PixelDataRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelDataRangeNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelDataRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelDataRangeNV)
    GL.module_eval(<<-SRC)
      def self.PixelDataRangeNV(_target_, _length_, _pointer_)
        GL_FUNCTIONS_MAP[:PixelDataRangeNV].call(_target_, _length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FlushPixelDataRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushPixelDataRangeNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushPixelDataRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushPixelDataRangeNV)
    GL.module_eval(<<-SRC)
      def self.FlushPixelDataRangeNV(_target_)
        GL_FUNCTIONS_MAP[:FlushPixelDataRangeNV].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_NV_pixel_data_range

  def self.get_ext_command_GL_NV_pixel_data_range
    [
      'PixelDataRangeNV',
      'FlushPixelDataRangeNV',
    ]
  end # self.get_ext_command_GL_NV_pixel_data_range


  def self.define_ext_command_GL_NV_point_sprite
    GL::GL_FUNCTION_SYMBOLS << :PointParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameteriNV)
    GL.module_eval(<<-SRC)
      def self.PointParameteriNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PointParameteriNV].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterivNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterivNV)
    GL.module_eval(<<-SRC)
      def self.PointParameterivNV(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PointParameterivNV].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_point_sprite

  def self.get_ext_command_GL_NV_point_sprite
    [
      'PointParameteriNV',
      'PointParameterivNV',
    ]
  end # self.get_ext_command_GL_NV_point_sprite


  def self.define_ext_command_GL_NV_present_video
    GL::GL_FUNCTION_SYMBOLS << :PresentFrameKeyedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PresentFrameKeyedNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PresentFrameKeyedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PresentFrameKeyedNV)
    GL.module_eval(<<-SRC)
      def self.PresentFrameKeyedNV(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _key0_, _target1_, _fill1_, _key1_)
        GL_FUNCTIONS_MAP[:PresentFrameKeyedNV].call(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _key0_, _target1_, _fill1_, _key1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PresentFrameDualFillNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PresentFrameDualFillNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PresentFrameDualFillNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PresentFrameDualFillNV)
    GL.module_eval(<<-SRC)
      def self.PresentFrameDualFillNV(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _target1_, _fill1_, _target2_, _fill2_, _target3_, _fill3_)
        GL_FUNCTIONS_MAP[:PresentFrameDualFillNV].call(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _target1_, _fill1_, _target2_, _fill2_, _target3_, _fill3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoivNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoivNV].call(_video_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideouivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideouivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideouivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideouivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideouivNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideouivNV].call(_video_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoi64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoi64vNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoi64vNV].call(_video_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoui64vNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoui64vNV].call(_video_slot_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_present_video

  def self.get_ext_command_GL_NV_present_video
    [
      'PresentFrameKeyedNV',
      'PresentFrameDualFillNV',
      'GetVideoivNV',
      'GetVideouivNV',
      'GetVideoi64vNV',
      'GetVideoui64vNV',
    ]
  end # self.get_ext_command_GL_NV_present_video


  def self.define_ext_command_GL_NV_primitive_restart
    GL::GL_FUNCTION_SYMBOLS << :PrimitiveRestartNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PrimitiveRestartNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:PrimitiveRestartNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PrimitiveRestartNV)
    GL.module_eval(<<-SRC)
      def self.PrimitiveRestartNV()
        GL_FUNCTIONS_MAP[:PrimitiveRestartNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PrimitiveRestartIndexNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PrimitiveRestartIndexNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PrimitiveRestartIndexNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PrimitiveRestartIndexNV)
    GL.module_eval(<<-SRC)
      def self.PrimitiveRestartIndexNV(_index_)
        GL_FUNCTIONS_MAP[:PrimitiveRestartIndexNV].call(_index_)
      end
    SRC
  end # self.define_ext_command_GL_NV_primitive_restart

  def self.get_ext_command_GL_NV_primitive_restart
    [
      'PrimitiveRestartNV',
      'PrimitiveRestartIndexNV',
    ]
  end # self.get_ext_command_GL_NV_primitive_restart


  def self.define_ext_command_GL_NV_primitive_shading_rate
  end # self.define_ext_command_GL_NV_primitive_shading_rate

  def self.get_ext_command_GL_NV_primitive_shading_rate
    [
    ]
  end # self.get_ext_command_GL_NV_primitive_shading_rate


  def self.define_ext_command_GL_NV_query_resource
    GL::GL_FUNCTION_SYMBOLS << :QueryResourceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:QueryResourceNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:QueryResourceNV] = Fiddle::TYPE_INT
    GL.bind_command(:QueryResourceNV)
    GL.module_eval(<<-SRC)
      def self.QueryResourceNV(_queryType_, _tagId_, _count_, _buffer_)
        GL_FUNCTIONS_MAP[:QueryResourceNV].call(_queryType_, _tagId_, _count_, _buffer_)
      end
    SRC
  end # self.define_ext_command_GL_NV_query_resource

  def self.get_ext_command_GL_NV_query_resource
    [
      'QueryResourceNV',
    ]
  end # self.get_ext_command_GL_NV_query_resource


  def self.define_ext_command_GL_NV_query_resource_tag
    GL::GL_FUNCTION_SYMBOLS << :GenQueryResourceTagNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GenQueryResourceTagNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenQueryResourceTagNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GenQueryResourceTagNV)
    GL.module_eval(<<-SRC)
      def self.GenQueryResourceTagNV(_n_, _tagIds_)
        GL_FUNCTIONS_MAP[:GenQueryResourceTagNV].call(_n_, _tagIds_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteQueryResourceTagNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteQueryResourceTagNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteQueryResourceTagNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteQueryResourceTagNV)
    GL.module_eval(<<-SRC)
      def self.DeleteQueryResourceTagNV(_n_, _tagIds_)
        GL_FUNCTIONS_MAP[:DeleteQueryResourceTagNV].call(_n_, _tagIds_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :QueryResourceTagNV
    GL::GL_FUNCTIONS_ARGS_MAP[:QueryResourceTagNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:QueryResourceTagNV] = Fiddle::TYPE_VOID
    GL.bind_command(:QueryResourceTagNV)
    GL.module_eval(<<-SRC)
      def self.QueryResourceTagNV(_tagId_, _tagString_)
        GL_FUNCTIONS_MAP[:QueryResourceTagNV].call(_tagId_, _tagString_)
      end
    SRC
  end # self.define_ext_command_GL_NV_query_resource_tag

  def self.get_ext_command_GL_NV_query_resource_tag
    [
      'GenQueryResourceTagNV',
      'DeleteQueryResourceTagNV',
      'QueryResourceTagNV',
    ]
  end # self.get_ext_command_GL_NV_query_resource_tag


  def self.define_ext_command_GL_NV_register_combiners
    GL::GL_FUNCTION_SYMBOLS << :CombinerParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerParameterfvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameterfvNV(_pname_, _params_)
        GL_FUNCTIONS_MAP[:CombinerParameterfvNV].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CombinerParameterfNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerParameterfNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerParameterfNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerParameterfNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameterfNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:CombinerParameterfNV].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CombinerParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerParameterivNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerParameterivNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameterivNV(_pname_, _params_)
        GL_FUNCTIONS_MAP[:CombinerParameterivNV].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CombinerParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerParameteriNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameteriNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:CombinerParameteriNV].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CombinerInputNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerInputNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerInputNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerInputNV)
    GL.module_eval(<<-SRC)
      def self.CombinerInputNV(_stage_, _portion_, _variable_, _input_, _mapping_, _componentUsage_)
        GL_FUNCTIONS_MAP[:CombinerInputNV].call(_stage_, _portion_, _variable_, _input_, _mapping_, _componentUsage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CombinerOutputNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerOutputNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerOutputNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerOutputNV)
    GL.module_eval(<<-SRC)
      def self.CombinerOutputNV(_stage_, _portion_, _abOutput_, _cdOutput_, _sumOutput_, _scale_, _bias_, _abDotProduct_, _cdDotProduct_, _muxSum_)
        GL_FUNCTIONS_MAP[:CombinerOutputNV].call(_stage_, _portion_, _abOutput_, _cdOutput_, _sumOutput_, _scale_, _bias_, _abDotProduct_, _cdDotProduct_, _muxSum_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FinalCombinerInputNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FinalCombinerInputNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FinalCombinerInputNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FinalCombinerInputNV)
    GL.module_eval(<<-SRC)
      def self.FinalCombinerInputNV(_variable_, _input_, _mapping_, _componentUsage_)
        GL_FUNCTIONS_MAP[:FinalCombinerInputNV].call(_variable_, _input_, _mapping_, _componentUsage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCombinerInputParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCombinerInputParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCombinerInputParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCombinerInputParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerInputParameterfvNV(_stage_, _portion_, _variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetCombinerInputParameterfvNV].call(_stage_, _portion_, _variable_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCombinerInputParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCombinerInputParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCombinerInputParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCombinerInputParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerInputParameterivNV(_stage_, _portion_, _variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetCombinerInputParameterivNV].call(_stage_, _portion_, _variable_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCombinerOutputParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCombinerOutputParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCombinerOutputParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCombinerOutputParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerOutputParameterfvNV(_stage_, _portion_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetCombinerOutputParameterfvNV].call(_stage_, _portion_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCombinerOutputParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCombinerOutputParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCombinerOutputParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCombinerOutputParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerOutputParameterivNV(_stage_, _portion_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetCombinerOutputParameterivNV].call(_stage_, _portion_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFinalCombinerInputParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFinalCombinerInputParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFinalCombinerInputParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFinalCombinerInputParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetFinalCombinerInputParameterfvNV(_variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFinalCombinerInputParameterfvNV].call(_variable_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFinalCombinerInputParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFinalCombinerInputParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFinalCombinerInputParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFinalCombinerInputParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetFinalCombinerInputParameterivNV(_variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFinalCombinerInputParameterivNV].call(_variable_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_register_combiners

  def self.get_ext_command_GL_NV_register_combiners
    [
      'CombinerParameterfvNV',
      'CombinerParameterfNV',
      'CombinerParameterivNV',
      'CombinerParameteriNV',
      'CombinerInputNV',
      'CombinerOutputNV',
      'FinalCombinerInputNV',
      'GetCombinerInputParameterfvNV',
      'GetCombinerInputParameterivNV',
      'GetCombinerOutputParameterfvNV',
      'GetCombinerOutputParameterivNV',
      'GetFinalCombinerInputParameterfvNV',
      'GetFinalCombinerInputParameterivNV',
    ]
  end # self.get_ext_command_GL_NV_register_combiners


  def self.define_ext_command_GL_NV_register_combiners2
    GL::GL_FUNCTION_SYMBOLS << :CombinerStageParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:CombinerStageParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CombinerStageParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:CombinerStageParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.CombinerStageParameterfvNV(_stage_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:CombinerStageParameterfvNV].call(_stage_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetCombinerStageParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetCombinerStageParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetCombinerStageParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetCombinerStageParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerStageParameterfvNV(_stage_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetCombinerStageParameterfvNV].call(_stage_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_register_combiners2

  def self.get_ext_command_GL_NV_register_combiners2
    [
      'CombinerStageParameterfvNV',
      'GetCombinerStageParameterfvNV',
    ]
  end # self.get_ext_command_GL_NV_register_combiners2


  def self.define_ext_command_GL_NV_representative_fragment_test
  end # self.define_ext_command_GL_NV_representative_fragment_test

  def self.get_ext_command_GL_NV_representative_fragment_test
    [
    ]
  end # self.get_ext_command_GL_NV_representative_fragment_test


  def self.define_ext_command_GL_NV_robustness_video_memory_purge
  end # self.define_ext_command_GL_NV_robustness_video_memory_purge

  def self.get_ext_command_GL_NV_robustness_video_memory_purge
    [
    ]
  end # self.get_ext_command_GL_NV_robustness_video_memory_purge


  def self.define_ext_command_GL_NV_sample_locations
    GL::GL_FUNCTION_SYMBOLS << :FramebufferSampleLocationsfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferSampleLocationsfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferSampleLocationsfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferSampleLocationsfvNV)
    GL.module_eval(<<-SRC)
      def self.FramebufferSampleLocationsfvNV(_target_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:FramebufferSampleLocationsfvNV].call(_target_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NamedFramebufferSampleLocationsfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:NamedFramebufferSampleLocationsfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NamedFramebufferSampleLocationsfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:NamedFramebufferSampleLocationsfvNV)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferSampleLocationsfvNV(_framebuffer_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:NamedFramebufferSampleLocationsfvNV].call(_framebuffer_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResolveDepthValuesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ResolveDepthValuesNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResolveDepthValuesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ResolveDepthValuesNV)
    GL.module_eval(<<-SRC)
      def self.ResolveDepthValuesNV()
        GL_FUNCTIONS_MAP[:ResolveDepthValuesNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_sample_locations

  def self.get_ext_command_GL_NV_sample_locations
    [
      'FramebufferSampleLocationsfvNV',
      'NamedFramebufferSampleLocationsfvNV',
      'ResolveDepthValuesNV',
    ]
  end # self.get_ext_command_GL_NV_sample_locations


  def self.define_ext_command_GL_NV_sample_mask_override_coverage
  end # self.define_ext_command_GL_NV_sample_mask_override_coverage

  def self.get_ext_command_GL_NV_sample_mask_override_coverage
    [
    ]
  end # self.get_ext_command_GL_NV_sample_mask_override_coverage


  def self.define_ext_command_GL_NV_scissor_exclusive
    GL::GL_FUNCTION_SYMBOLS << :ScissorExclusiveNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ScissorExclusiveNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ScissorExclusiveNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ScissorExclusiveNV)
    GL.module_eval(<<-SRC)
      def self.ScissorExclusiveNV(_x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:ScissorExclusiveNV].call(_x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ScissorExclusiveArrayvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ScissorExclusiveArrayvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ScissorExclusiveArrayvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ScissorExclusiveArrayvNV)
    GL.module_eval(<<-SRC)
      def self.ScissorExclusiveArrayvNV(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:ScissorExclusiveArrayvNV].call(_first_, _count_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_NV_scissor_exclusive

  def self.get_ext_command_GL_NV_scissor_exclusive
    [
      'ScissorExclusiveNV',
      'ScissorExclusiveArrayvNV',
    ]
  end # self.get_ext_command_GL_NV_scissor_exclusive


  def self.define_ext_command_GL_NV_shader_atomic_counters
  end # self.define_ext_command_GL_NV_shader_atomic_counters

  def self.get_ext_command_GL_NV_shader_atomic_counters
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_counters


  def self.define_ext_command_GL_NV_shader_atomic_float
  end # self.define_ext_command_GL_NV_shader_atomic_float

  def self.get_ext_command_GL_NV_shader_atomic_float
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_float


  def self.define_ext_command_GL_NV_shader_atomic_float64
  end # self.define_ext_command_GL_NV_shader_atomic_float64

  def self.get_ext_command_GL_NV_shader_atomic_float64
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_float64


  def self.define_ext_command_GL_NV_shader_atomic_fp16_vector
  end # self.define_ext_command_GL_NV_shader_atomic_fp16_vector

  def self.get_ext_command_GL_NV_shader_atomic_fp16_vector
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_fp16_vector


  def self.define_ext_command_GL_NV_shader_atomic_int64
  end # self.define_ext_command_GL_NV_shader_atomic_int64

  def self.get_ext_command_GL_NV_shader_atomic_int64
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_int64


  def self.define_ext_command_GL_NV_shader_buffer_load
    GL::GL_FUNCTION_SYMBOLS << :MakeBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeBufferResidentNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeBufferResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeBufferResidentNV(_target_, _access_)
        GL_FUNCTIONS_MAP[:MakeBufferResidentNV].call(_target_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeBufferNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeBufferNonResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeBufferNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeBufferNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeBufferNonResidentNV(_target_)
        GL_FUNCTIONS_MAP[:MakeBufferNonResidentNV].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsBufferResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsBufferResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsBufferResidentNV(_target_)
        GL_FUNCTIONS_MAP[:IsBufferResidentNV].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeNamedBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeNamedBufferResidentNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeNamedBufferResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeNamedBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeNamedBufferResidentNV(_buffer_, _access_)
        GL_FUNCTIONS_MAP[:MakeNamedBufferResidentNV].call(_buffer_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MakeNamedBufferNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:MakeNamedBufferNonResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MakeNamedBufferNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:MakeNamedBufferNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeNamedBufferNonResidentNV(_buffer_)
        GL_FUNCTIONS_MAP[:MakeNamedBufferNonResidentNV].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsNamedBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsNamedBufferResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsNamedBufferResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsNamedBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsNamedBufferResidentNV(_buffer_)
        GL_FUNCTIONS_MAP[:IsNamedBufferResidentNV].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetBufferParameterui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetBufferParameterui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetBufferParameterui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetBufferParameterui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetBufferParameterui64vNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetBufferParameterui64vNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetNamedBufferParameterui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetNamedBufferParameterui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetNamedBufferParameterui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetNamedBufferParameterui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameterui64vNV(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetNamedBufferParameterui64vNV].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetIntegerui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetIntegerui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetIntegerui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetIntegerui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetIntegerui64vNV(_value_, _result_)
        GL_FUNCTIONS_MAP[:GetIntegerui64vNV].call(_value_, _result_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniformui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniformui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniformui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniformui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniformui64NV(_location_, _value_)
        GL_FUNCTIONS_MAP[:Uniformui64NV].call(_location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Uniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:Uniformui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Uniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:Uniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniformui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:Uniformui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetUniformui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformui64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:GetUniformui64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformui64NV(_program_, _location_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformui64NV].call(_program_, _location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramUniformui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:ProgramUniformui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_NV_shader_buffer_load

  def self.get_ext_command_GL_NV_shader_buffer_load
    [
      'MakeBufferResidentNV',
      'MakeBufferNonResidentNV',
      'IsBufferResidentNV',
      'MakeNamedBufferResidentNV',
      'MakeNamedBufferNonResidentNV',
      'IsNamedBufferResidentNV',
      'GetBufferParameterui64vNV',
      'GetNamedBufferParameterui64vNV',
      'GetIntegerui64vNV',
      'Uniformui64NV',
      'Uniformui64vNV',
      'GetUniformui64vNV',
      'ProgramUniformui64NV',
      'ProgramUniformui64vNV',
    ]
  end # self.get_ext_command_GL_NV_shader_buffer_load


  def self.define_ext_command_GL_NV_shader_buffer_store
  end # self.define_ext_command_GL_NV_shader_buffer_store

  def self.get_ext_command_GL_NV_shader_buffer_store
    [
    ]
  end # self.get_ext_command_GL_NV_shader_buffer_store


  def self.define_ext_command_GL_NV_shader_storage_buffer_object
  end # self.define_ext_command_GL_NV_shader_storage_buffer_object

  def self.get_ext_command_GL_NV_shader_storage_buffer_object
    [
    ]
  end # self.get_ext_command_GL_NV_shader_storage_buffer_object


  def self.define_ext_command_GL_NV_shader_subgroup_partitioned
  end # self.define_ext_command_GL_NV_shader_subgroup_partitioned

  def self.get_ext_command_GL_NV_shader_subgroup_partitioned
    [
    ]
  end # self.get_ext_command_GL_NV_shader_subgroup_partitioned


  def self.define_ext_command_GL_NV_shader_texture_footprint
  end # self.define_ext_command_GL_NV_shader_texture_footprint

  def self.get_ext_command_GL_NV_shader_texture_footprint
    [
    ]
  end # self.get_ext_command_GL_NV_shader_texture_footprint


  def self.define_ext_command_GL_NV_shader_thread_group
  end # self.define_ext_command_GL_NV_shader_thread_group

  def self.get_ext_command_GL_NV_shader_thread_group
    [
    ]
  end # self.get_ext_command_GL_NV_shader_thread_group


  def self.define_ext_command_GL_NV_shader_thread_shuffle
  end # self.define_ext_command_GL_NV_shader_thread_shuffle

  def self.get_ext_command_GL_NV_shader_thread_shuffle
    [
    ]
  end # self.get_ext_command_GL_NV_shader_thread_shuffle


  def self.define_ext_command_GL_NV_shading_rate_image
    GL::GL_FUNCTION_SYMBOLS << :BindShadingRateImageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindShadingRateImageNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindShadingRateImageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindShadingRateImageNV)
    GL.module_eval(<<-SRC)
      def self.BindShadingRateImageNV(_texture_)
        GL_FUNCTIONS_MAP[:BindShadingRateImageNV].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetShadingRateImagePaletteNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetShadingRateImagePaletteNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetShadingRateImagePaletteNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetShadingRateImagePaletteNV)
    GL.module_eval(<<-SRC)
      def self.GetShadingRateImagePaletteNV(_viewport_, _entry_, _rate_)
        GL_FUNCTIONS_MAP[:GetShadingRateImagePaletteNV].call(_viewport_, _entry_, _rate_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetShadingRateSampleLocationivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetShadingRateSampleLocationivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetShadingRateSampleLocationivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetShadingRateSampleLocationivNV)
    GL.module_eval(<<-SRC)
      def self.GetShadingRateSampleLocationivNV(_rate_, _samples_, _index_, _location_)
        GL_FUNCTIONS_MAP[:GetShadingRateSampleLocationivNV].call(_rate_, _samples_, _index_, _location_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShadingRateImageBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ShadingRateImageBarrierNV] = [-Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShadingRateImageBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ShadingRateImageBarrierNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateImageBarrierNV(_synchronize_)
        GL_FUNCTIONS_MAP[:ShadingRateImageBarrierNV].call(_synchronize_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShadingRateImagePaletteNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ShadingRateImagePaletteNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShadingRateImagePaletteNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ShadingRateImagePaletteNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateImagePaletteNV(_viewport_, _first_, _count_, _rates_)
        GL_FUNCTIONS_MAP[:ShadingRateImagePaletteNV].call(_viewport_, _first_, _count_, _rates_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShadingRateSampleOrderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ShadingRateSampleOrderNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShadingRateSampleOrderNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ShadingRateSampleOrderNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateSampleOrderNV(_order_)
        GL_FUNCTIONS_MAP[:ShadingRateSampleOrderNV].call(_order_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ShadingRateSampleOrderCustomNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ShadingRateSampleOrderCustomNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ShadingRateSampleOrderCustomNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ShadingRateSampleOrderCustomNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateSampleOrderCustomNV(_rate_, _samples_, _locations_)
        GL_FUNCTIONS_MAP[:ShadingRateSampleOrderCustomNV].call(_rate_, _samples_, _locations_)
      end
    SRC
  end # self.define_ext_command_GL_NV_shading_rate_image

  def self.get_ext_command_GL_NV_shading_rate_image
    [
      'BindShadingRateImageNV',
      'GetShadingRateImagePaletteNV',
      'GetShadingRateSampleLocationivNV',
      'ShadingRateImageBarrierNV',
      'ShadingRateImagePaletteNV',
      'ShadingRateSampleOrderNV',
      'ShadingRateSampleOrderCustomNV',
    ]
  end # self.get_ext_command_GL_NV_shading_rate_image


  def self.define_ext_command_GL_NV_stereo_view_rendering
  end # self.define_ext_command_GL_NV_stereo_view_rendering

  def self.get_ext_command_GL_NV_stereo_view_rendering
    [
    ]
  end # self.get_ext_command_GL_NV_stereo_view_rendering


  def self.define_ext_command_GL_NV_tessellation_program5
  end # self.define_ext_command_GL_NV_tessellation_program5

  def self.get_ext_command_GL_NV_tessellation_program5
    [
    ]
  end # self.get_ext_command_GL_NV_tessellation_program5


  def self.define_ext_command_GL_NV_texgen_emboss
  end # self.define_ext_command_GL_NV_texgen_emboss

  def self.get_ext_command_GL_NV_texgen_emboss
    [
    ]
  end # self.get_ext_command_GL_NV_texgen_emboss


  def self.define_ext_command_GL_NV_texgen_reflection
  end # self.define_ext_command_GL_NV_texgen_reflection

  def self.get_ext_command_GL_NV_texgen_reflection
    [
    ]
  end # self.get_ext_command_GL_NV_texgen_reflection


  def self.define_ext_command_GL_NV_texture_barrier
    GL::GL_FUNCTION_SYMBOLS << :TextureBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureBarrierNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureBarrierNV)
    GL.module_eval(<<-SRC)
      def self.TextureBarrierNV()
        GL_FUNCTIONS_MAP[:TextureBarrierNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_texture_barrier

  def self.get_ext_command_GL_NV_texture_barrier
    [
      'TextureBarrierNV',
    ]
  end # self.get_ext_command_GL_NV_texture_barrier


  def self.define_ext_command_GL_NV_texture_compression_vtc
  end # self.define_ext_command_GL_NV_texture_compression_vtc

  def self.get_ext_command_GL_NV_texture_compression_vtc
    [
    ]
  end # self.get_ext_command_GL_NV_texture_compression_vtc


  def self.define_ext_command_GL_NV_texture_env_combine4
  end # self.define_ext_command_GL_NV_texture_env_combine4

  def self.get_ext_command_GL_NV_texture_env_combine4
    [
    ]
  end # self.get_ext_command_GL_NV_texture_env_combine4


  def self.define_ext_command_GL_NV_texture_expand_normal
  end # self.define_ext_command_GL_NV_texture_expand_normal

  def self.get_ext_command_GL_NV_texture_expand_normal
    [
    ]
  end # self.get_ext_command_GL_NV_texture_expand_normal


  def self.define_ext_command_GL_NV_texture_multisample
    GL::GL_FUNCTION_SYMBOLS << :TexImage2DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexImage2DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexImage2DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexImage2DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TexImage2DMultisampleCoverageNV(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:TexImage2DMultisampleCoverageNV].call(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexImage3DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexImage3DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexImage3DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexImage3DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TexImage3DMultisampleCoverageNV(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:TexImage3DMultisampleCoverageNV].call(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage2DMultisampleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage2DMultisampleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage2DMultisampleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage2DMultisampleNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage2DMultisampleNV(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:TextureImage2DMultisampleNV].call(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage3DMultisampleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage3DMultisampleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage3DMultisampleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage3DMultisampleNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage3DMultisampleNV(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:TextureImage3DMultisampleNV].call(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage2DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage2DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage2DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage2DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage2DMultisampleCoverageNV(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:TextureImage2DMultisampleCoverageNV].call(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TextureImage3DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureImage3DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureImage3DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureImage3DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage3DMultisampleCoverageNV(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:TextureImage3DMultisampleCoverageNV].call(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
      end
    SRC
  end # self.define_ext_command_GL_NV_texture_multisample

  def self.get_ext_command_GL_NV_texture_multisample
    [
      'TexImage2DMultisampleCoverageNV',
      'TexImage3DMultisampleCoverageNV',
      'TextureImage2DMultisampleNV',
      'TextureImage3DMultisampleNV',
      'TextureImage2DMultisampleCoverageNV',
      'TextureImage3DMultisampleCoverageNV',
    ]
  end # self.get_ext_command_GL_NV_texture_multisample


  def self.define_ext_command_GL_NV_texture_rectangle
  end # self.define_ext_command_GL_NV_texture_rectangle

  def self.get_ext_command_GL_NV_texture_rectangle
    [
    ]
  end # self.get_ext_command_GL_NV_texture_rectangle


  def self.define_ext_command_GL_NV_texture_rectangle_compressed
  end # self.define_ext_command_GL_NV_texture_rectangle_compressed

  def self.get_ext_command_GL_NV_texture_rectangle_compressed
    [
    ]
  end # self.get_ext_command_GL_NV_texture_rectangle_compressed


  def self.define_ext_command_GL_NV_texture_shader
  end # self.define_ext_command_GL_NV_texture_shader

  def self.get_ext_command_GL_NV_texture_shader
    [
    ]
  end # self.get_ext_command_GL_NV_texture_shader


  def self.define_ext_command_GL_NV_texture_shader2
  end # self.define_ext_command_GL_NV_texture_shader2

  def self.get_ext_command_GL_NV_texture_shader2
    [
    ]
  end # self.get_ext_command_GL_NV_texture_shader2


  def self.define_ext_command_GL_NV_texture_shader3
  end # self.define_ext_command_GL_NV_texture_shader3

  def self.get_ext_command_GL_NV_texture_shader3
    [
    ]
  end # self.get_ext_command_GL_NV_texture_shader3


  def self.define_ext_command_GL_NV_transform_feedback
    GL::GL_FUNCTION_SYMBOLS << :BeginTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginTransformFeedbackNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.BeginTransformFeedbackNV(_primitiveMode_)
        GL_FUNCTIONS_MAP[:BeginTransformFeedbackNV].call(_primitiveMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:EndTransformFeedbackNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:EndTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.EndTransformFeedbackNV()
        GL_FUNCTIONS_MAP[:EndTransformFeedbackNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformFeedbackAttribsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformFeedbackAttribsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformFeedbackAttribsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformFeedbackAttribsNV)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackAttribsNV(_count_, _attribs_, _bufferMode_)
        GL_FUNCTIONS_MAP[:TransformFeedbackAttribsNV].call(_count_, _attribs_, _bufferMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferRangeNV)
    GL.module_eval(<<-SRC)
      def self.BindBufferRangeNV(_target_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:BindBufferRangeNV].call(_target_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferOffsetNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferOffsetNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferOffsetNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferOffsetNV)
    GL.module_eval(<<-SRC)
      def self.BindBufferOffsetNV(_target_, _index_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:BindBufferOffsetNV].call(_target_, _index_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindBufferBaseNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindBufferBaseNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindBufferBaseNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindBufferBaseNV)
    GL.module_eval(<<-SRC)
      def self.BindBufferBaseNV(_target_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:BindBufferBaseNV].call(_target_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformFeedbackVaryingsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformFeedbackVaryingsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformFeedbackVaryingsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformFeedbackVaryingsNV)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackVaryingsNV(_program_, _count_, _locations_, _bufferMode_)
        GL_FUNCTIONS_MAP[:TransformFeedbackVaryingsNV].call(_program_, _count_, _locations_, _bufferMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ActiveVaryingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ActiveVaryingNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ActiveVaryingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ActiveVaryingNV)
    GL.module_eval(<<-SRC)
      def self.ActiveVaryingNV(_program_, _name_)
        GL_FUNCTIONS_MAP[:ActiveVaryingNV].call(_program_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVaryingLocationNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVaryingLocationNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVaryingLocationNV] = Fiddle::TYPE_INT
    GL.bind_command(:GetVaryingLocationNV)
    GL.module_eval(<<-SRC)
      def self.GetVaryingLocationNV(_program_, _name_)
        GL_FUNCTIONS_MAP[:GetVaryingLocationNV].call(_program_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetActiveVaryingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetActiveVaryingNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetActiveVaryingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetActiveVaryingNV)
    GL.module_eval(<<-SRC)
      def self.GetActiveVaryingNV(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:GetActiveVaryingNV].call(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTransformFeedbackVaryingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTransformFeedbackVaryingNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTransformFeedbackVaryingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTransformFeedbackVaryingNV)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbackVaryingNV(_program_, _index_, _location_)
        GL_FUNCTIONS_MAP[:GetTransformFeedbackVaryingNV].call(_program_, _index_, _location_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TransformFeedbackStreamAttribsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TransformFeedbackStreamAttribsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TransformFeedbackStreamAttribsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TransformFeedbackStreamAttribsNV)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackStreamAttribsNV(_count_, _attribs_, _nbuffers_, _bufstreams_, _bufferMode_)
        GL_FUNCTIONS_MAP[:TransformFeedbackStreamAttribsNV].call(_count_, _attribs_, _nbuffers_, _bufstreams_, _bufferMode_)
      end
    SRC
  end # self.define_ext_command_GL_NV_transform_feedback

  def self.get_ext_command_GL_NV_transform_feedback
    [
      'BeginTransformFeedbackNV',
      'EndTransformFeedbackNV',
      'TransformFeedbackAttribsNV',
      'BindBufferRangeNV',
      'BindBufferOffsetNV',
      'BindBufferBaseNV',
      'TransformFeedbackVaryingsNV',
      'ActiveVaryingNV',
      'GetVaryingLocationNV',
      'GetActiveVaryingNV',
      'GetTransformFeedbackVaryingNV',
      'TransformFeedbackStreamAttribsNV',
    ]
  end # self.get_ext_command_GL_NV_transform_feedback


  def self.define_ext_command_GL_NV_transform_feedback2
    GL::GL_FUNCTION_SYMBOLS << :BindTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindTransformFeedbackNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.BindTransformFeedbackNV(_target_, _id_)
        GL_FUNCTIONS_MAP[:BindTransformFeedbackNV].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteTransformFeedbacksNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteTransformFeedbacksNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteTransformFeedbacksNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteTransformFeedbacksNV)
    GL.module_eval(<<-SRC)
      def self.DeleteTransformFeedbacksNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:DeleteTransformFeedbacksNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenTransformFeedbacksNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GenTransformFeedbacksNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenTransformFeedbacksNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GenTransformFeedbacksNV)
    GL.module_eval(<<-SRC)
      def self.GenTransformFeedbacksNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:GenTransformFeedbacksNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsTransformFeedbackNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsTransformFeedbackNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.IsTransformFeedbackNV(_id_)
        GL_FUNCTIONS_MAP[:IsTransformFeedbackNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PauseTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:PauseTransformFeedbackNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:PauseTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:PauseTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.PauseTransformFeedbackNV()
        GL_FUNCTIONS_MAP[:PauseTransformFeedbackNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ResumeTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ResumeTransformFeedbackNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:ResumeTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ResumeTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.ResumeTransformFeedbackNV()
        GL_FUNCTIONS_MAP[:ResumeTransformFeedbackNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DrawTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawTransformFeedbackNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackNV(_mode_, _id_)
        GL_FUNCTIONS_MAP[:DrawTransformFeedbackNV].call(_mode_, _id_)
      end
    SRC
  end # self.define_ext_command_GL_NV_transform_feedback2

  def self.get_ext_command_GL_NV_transform_feedback2
    [
      'BindTransformFeedbackNV',
      'DeleteTransformFeedbacksNV',
      'GenTransformFeedbacksNV',
      'IsTransformFeedbackNV',
      'PauseTransformFeedbackNV',
      'ResumeTransformFeedbackNV',
      'DrawTransformFeedbackNV',
    ]
  end # self.get_ext_command_GL_NV_transform_feedback2


  def self.define_ext_command_GL_NV_uniform_buffer_unified_memory
  end # self.define_ext_command_GL_NV_uniform_buffer_unified_memory

  def self.get_ext_command_GL_NV_uniform_buffer_unified_memory
    [
    ]
  end # self.get_ext_command_GL_NV_uniform_buffer_unified_memory


  def self.define_ext_command_GL_NV_vdpau_interop
    GL::GL_FUNCTION_SYMBOLS << :VDPAUInitNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUInitNV] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUInitNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUInitNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUInitNV(_vdpDevice_, _getProcAddress_)
        GL_FUNCTIONS_MAP[:VDPAUInitNV].call(_vdpDevice_, _getProcAddress_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUFiniNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUFiniNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUFiniNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUFiniNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUFiniNV()
        GL_FUNCTIONS_MAP[:VDPAUFiniNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAURegisterVideoSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAURegisterVideoSurfaceNV] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAURegisterVideoSurfaceNV] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:VDPAURegisterVideoSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAURegisterVideoSurfaceNV(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
        GL_FUNCTIONS_MAP[:VDPAURegisterVideoSurfaceNV].call(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAURegisterOutputSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAURegisterOutputSurfaceNV] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAURegisterOutputSurfaceNV] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:VDPAURegisterOutputSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAURegisterOutputSurfaceNV(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
        GL_FUNCTIONS_MAP[:VDPAURegisterOutputSurfaceNV].call(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUIsSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUIsSurfaceNV] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUIsSurfaceNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:VDPAUIsSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUIsSurfaceNV(_surface_)
        GL_FUNCTIONS_MAP[:VDPAUIsSurfaceNV].call(_surface_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUUnregisterSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUUnregisterSurfaceNV] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUUnregisterSurfaceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUUnregisterSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUUnregisterSurfaceNV(_surface_)
        GL_FUNCTIONS_MAP[:VDPAUUnregisterSurfaceNV].call(_surface_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUGetSurfaceivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUGetSurfaceivNV] = [Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUGetSurfaceivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUGetSurfaceivNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUGetSurfaceivNV(_surface_, _pname_, _count_, _length_, _values_)
        GL_FUNCTIONS_MAP[:VDPAUGetSurfaceivNV].call(_surface_, _pname_, _count_, _length_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUSurfaceAccessNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUSurfaceAccessNV] = [Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUSurfaceAccessNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUSurfaceAccessNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUSurfaceAccessNV(_surface_, _access_)
        GL_FUNCTIONS_MAP[:VDPAUSurfaceAccessNV].call(_surface_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUMapSurfacesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUMapSurfacesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUMapSurfacesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUMapSurfacesNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUMapSurfacesNV(_numSurfaces_, _surfaces_)
        GL_FUNCTIONS_MAP[:VDPAUMapSurfacesNV].call(_numSurfaces_, _surfaces_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VDPAUUnmapSurfacesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAUUnmapSurfacesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAUUnmapSurfacesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VDPAUUnmapSurfacesNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUUnmapSurfacesNV(_numSurface_, _surfaces_)
        GL_FUNCTIONS_MAP[:VDPAUUnmapSurfacesNV].call(_numSurface_, _surfaces_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vdpau_interop

  def self.get_ext_command_GL_NV_vdpau_interop
    [
      'VDPAUInitNV',
      'VDPAUFiniNV',
      'VDPAURegisterVideoSurfaceNV',
      'VDPAURegisterOutputSurfaceNV',
      'VDPAUIsSurfaceNV',
      'VDPAUUnregisterSurfaceNV',
      'VDPAUGetSurfaceivNV',
      'VDPAUSurfaceAccessNV',
      'VDPAUMapSurfacesNV',
      'VDPAUUnmapSurfacesNV',
    ]
  end # self.get_ext_command_GL_NV_vdpau_interop


  def self.define_ext_command_GL_NV_vdpau_interop2
    GL::GL_FUNCTION_SYMBOLS << :VDPAURegisterVideoSurfaceWithPictureStructureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VDPAURegisterVideoSurfaceWithPictureStructureNV] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VDPAURegisterVideoSurfaceWithPictureStructureNV] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:VDPAURegisterVideoSurfaceWithPictureStructureNV)
    GL.module_eval(<<-SRC)
      def self.VDPAURegisterVideoSurfaceWithPictureStructureNV(_vdpSurface_, _target_, _numTextureNames_, _textureNames_, _isFrameStructure_)
        GL_FUNCTIONS_MAP[:VDPAURegisterVideoSurfaceWithPictureStructureNV].call(_vdpSurface_, _target_, _numTextureNames_, _textureNames_, _isFrameStructure_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vdpau_interop2

  def self.get_ext_command_GL_NV_vdpau_interop2
    [
      'VDPAURegisterVideoSurfaceWithPictureStructureNV',
    ]
  end # self.get_ext_command_GL_NV_vdpau_interop2


  def self.define_ext_command_GL_NV_vertex_array_range
    GL::GL_FUNCTION_SYMBOLS << :FlushVertexArrayRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushVertexArrayRangeNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushVertexArrayRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushVertexArrayRangeNV)
    GL.module_eval(<<-SRC)
      def self.FlushVertexArrayRangeNV()
        GL_FUNCTIONS_MAP[:FlushVertexArrayRangeNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexArrayRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexArrayRangeNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexArrayRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexArrayRangeNV)
    GL.module_eval(<<-SRC)
      def self.VertexArrayRangeNV(_length_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexArrayRangeNV].call(_length_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_array_range

  def self.get_ext_command_GL_NV_vertex_array_range
    [
      'FlushVertexArrayRangeNV',
      'VertexArrayRangeNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_array_range


  def self.define_ext_command_GL_NV_vertex_array_range2
  end # self.define_ext_command_GL_NV_vertex_array_range2

  def self.get_ext_command_GL_NV_vertex_array_range2
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_array_range2


  def self.define_ext_command_GL_NV_vertex_attrib_integer_64bit
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1i64NV(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribL1i64NV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2i64NV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribL2i64NV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3i64NV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribL3i64NV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4i64NV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribL4i64NV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL1i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL2i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL3i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL4i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64NV(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribL1ui64NV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2ui64NV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribL2ui64NV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3ui64NV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribL3ui64NV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4ui64NV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribL4ui64NV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL1ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL1ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL2ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL2ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL3ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL3ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribL4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribL4ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribL4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribL4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribL4ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribLi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribLi64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribLi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribLi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLi64vNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribLi64vNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribLui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribLui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribLui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribLui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLui64vNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribLui64vNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribLFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribLFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribLFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribLFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLFormatNV(_index_, _size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:VertexAttribLFormatNV].call(_index_, _size_, _type_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_attrib_integer_64bit

  def self.get_ext_command_GL_NV_vertex_attrib_integer_64bit
    [
      'VertexAttribL1i64NV',
      'VertexAttribL2i64NV',
      'VertexAttribL3i64NV',
      'VertexAttribL4i64NV',
      'VertexAttribL1i64vNV',
      'VertexAttribL2i64vNV',
      'VertexAttribL3i64vNV',
      'VertexAttribL4i64vNV',
      'VertexAttribL1ui64NV',
      'VertexAttribL2ui64NV',
      'VertexAttribL3ui64NV',
      'VertexAttribL4ui64NV',
      'VertexAttribL1ui64vNV',
      'VertexAttribL2ui64vNV',
      'VertexAttribL3ui64vNV',
      'VertexAttribL4ui64vNV',
      'GetVertexAttribLi64vNV',
      'GetVertexAttribLui64vNV',
      'VertexAttribLFormatNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_attrib_integer_64bit


  def self.define_ext_command_GL_NV_vertex_buffer_unified_memory
    GL::GL_FUNCTION_SYMBOLS << :BufferAddressRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BufferAddressRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BufferAddressRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BufferAddressRangeNV)
    GL.module_eval(<<-SRC)
      def self.BufferAddressRangeNV(_pname_, _index_, _address_, _length_)
        GL_FUNCTIONS_MAP[:BufferAddressRangeNV].call(_pname_, _index_, _address_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:VertexFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :NormalFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:NormalFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:NormalFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:NormalFormatNV)
    GL.module_eval(<<-SRC)
      def self.NormalFormatNV(_type_, _stride_)
        GL_FUNCTIONS_MAP[:NormalFormatNV].call(_type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorFormatNV)
    GL.module_eval(<<-SRC)
      def self.ColorFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:ColorFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IndexFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexFormatNV)
    GL.module_eval(<<-SRC)
      def self.IndexFormatNV(_type_, _stride_)
        GL_FUNCTIONS_MAP[:IndexFormatNV].call(_type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoordFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoordFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoordFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoordFormatNV)
    GL.module_eval(<<-SRC)
      def self.TexCoordFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:TexCoordFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EdgeFlagFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:EdgeFlagFormatNV] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EdgeFlagFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:EdgeFlagFormatNV)
    GL.module_eval(<<-SRC)
      def self.EdgeFlagFormatNV(_stride_)
        GL_FUNCTIONS_MAP[:EdgeFlagFormatNV].call(_stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SecondaryColorFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:SecondaryColorFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SecondaryColorFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:SecondaryColorFormatNV)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:SecondaryColorFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogCoordFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:FogCoordFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogCoordFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:FogCoordFormatNV)
    GL.module_eval(<<-SRC)
      def self.FogCoordFormatNV(_type_, _stride_)
        GL_FUNCTIONS_MAP[:FogCoordFormatNV].call(_type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribFormatNV(_index_, _size_, _type_, _normalized_, _stride_)
        GL_FUNCTIONS_MAP[:VertexAttribFormatNV].call(_index_, _size_, _type_, _normalized_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribIFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribIFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribIFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribIFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIFormatNV(_index_, _size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:VertexAttribIFormatNV].call(_index_, _size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetIntegerui64i_vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetIntegerui64i_vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetIntegerui64i_vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetIntegerui64i_vNV)
    GL.module_eval(<<-SRC)
      def self.GetIntegerui64i_vNV(_value_, _index_, _result_)
        GL_FUNCTIONS_MAP[:GetIntegerui64i_vNV].call(_value_, _index_, _result_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_buffer_unified_memory

  def self.get_ext_command_GL_NV_vertex_buffer_unified_memory
    [
      'BufferAddressRangeNV',
      'VertexFormatNV',
      'NormalFormatNV',
      'ColorFormatNV',
      'IndexFormatNV',
      'TexCoordFormatNV',
      'EdgeFlagFormatNV',
      'SecondaryColorFormatNV',
      'FogCoordFormatNV',
      'VertexAttribFormatNV',
      'VertexAttribIFormatNV',
      'GetIntegerui64i_vNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_buffer_unified_memory


  def self.define_ext_command_GL_NV_vertex_program
    GL::GL_FUNCTION_SYMBOLS << :AreProgramsResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:AreProgramsResidentNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AreProgramsResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:AreProgramsResidentNV)
    GL.module_eval(<<-SRC)
      def self.AreProgramsResidentNV(_n_, _programs_, _residences_)
        GL_FUNCTIONS_MAP[:AreProgramsResidentNV].call(_n_, _programs_, _residences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindProgramNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindProgramNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindProgramNV)
    GL.module_eval(<<-SRC)
      def self.BindProgramNV(_target_, _id_)
        GL_FUNCTIONS_MAP[:BindProgramNV].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteProgramsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteProgramsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteProgramsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteProgramsNV)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramsNV(_n_, _programs_)
        GL_FUNCTIONS_MAP[:DeleteProgramsNV].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ExecuteProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ExecuteProgramNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ExecuteProgramNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ExecuteProgramNV)
    GL.module_eval(<<-SRC)
      def self.ExecuteProgramNV(_target_, _id_, _params_)
        GL_FUNCTIONS_MAP[:ExecuteProgramNV].call(_target_, _id_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenProgramsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GenProgramsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenProgramsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GenProgramsNV)
    GL.module_eval(<<-SRC)
      def self.GenProgramsNV(_n_, _programs_)
        GL_FUNCTIONS_MAP[:GenProgramsNV].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramParameterdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramParameterdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramParameterdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramParameterdvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramParameterdvNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramParameterdvNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramParameterfvNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramParameterfvNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramivNV(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetProgramivNV].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetProgramStringNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetProgramStringNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetProgramStringNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetProgramStringNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramStringNV(_id_, _pname_, _program_)
        GL_FUNCTIONS_MAP[:GetProgramStringNV].call(_id_, _pname_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTrackMatrixivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTrackMatrixivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTrackMatrixivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTrackMatrixivNV)
    GL.module_eval(<<-SRC)
      def self.GetTrackMatrixivNV(_target_, _address_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTrackMatrixivNV].call(_target_, _address_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribdvNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribdvNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribdvNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribfvNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribfvNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribfvNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribivNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribivNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribivNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribPointervNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribPointervNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribPointervNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribPointervNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribPointervNV(_index_, _pname_, _pointer_)
        GL_FUNCTIONS_MAP[:GetVertexAttribPointervNV].call(_index_, _pname_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:IsProgramNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsProgramNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsProgramNV)
    GL.module_eval(<<-SRC)
      def self.IsProgramNV(_id_)
        GL_FUNCTIONS_MAP[:IsProgramNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LoadProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:LoadProgramNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LoadProgramNV] = Fiddle::TYPE_VOID
    GL.bind_command(:LoadProgramNV)
    GL.module_eval(<<-SRC)
      def self.LoadProgramNV(_target_, _id_, _len_, _program_)
        GL_FUNCTIONS_MAP[:LoadProgramNV].call(_target_, _id_, _len_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameter4dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameter4dNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameter4dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameter4dNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4dNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramParameter4dNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameter4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameter4dvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameter4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameter4dvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4dvNV(_target_, _index_, _v_)
        GL_FUNCTIONS_MAP[:ProgramParameter4dvNV].call(_target_, _index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameter4fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameter4fNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameter4fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameter4fNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4fNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:ProgramParameter4fNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameter4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameter4fvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameter4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameter4fvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4fvNV(_target_, _index_, _v_)
        GL_FUNCTIONS_MAP[:ProgramParameter4fvNV].call(_target_, _index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameters4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameters4dvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameters4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameters4dvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameters4dvNV(_target_, _index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:ProgramParameters4dvNV].call(_target_, _index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ProgramParameters4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ProgramParameters4fvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ProgramParameters4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ProgramParameters4fvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameters4fvNV(_target_, _index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:ProgramParameters4fvNV].call(_target_, _index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RequestResidentProgramsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:RequestResidentProgramsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RequestResidentProgramsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:RequestResidentProgramsNV)
    GL.module_eval(<<-SRC)
      def self.RequestResidentProgramsNV(_n_, _programs_)
        GL_FUNCTIONS_MAP[:RequestResidentProgramsNV].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TrackMatrixNV
    GL::GL_FUNCTIONS_ARGS_MAP[:TrackMatrixNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TrackMatrixNV] = Fiddle::TYPE_VOID
    GL.bind_command(:TrackMatrixNV)
    GL.module_eval(<<-SRC)
      def self.TrackMatrixNV(_target_, _address_, _matrix_, _transform_)
        GL_FUNCTIONS_MAP[:TrackMatrixNV].call(_target_, _address_, _matrix_, _transform_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribPointerNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribPointerNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribPointerNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribPointerNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribPointerNV(_index_, _fsize_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribPointerNV].call(_index_, _fsize_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1dNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1fNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1sNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttrib1sNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib1svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib1svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib1svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib1svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib1svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2dNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2fNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2sNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttrib2sNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib2svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib2svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib2svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib2svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib2svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3dNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3fNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3sNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttrib3sNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib3svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib3svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib3svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib3svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib3svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4dNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4fNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4sNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4sNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4ubNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4ubNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4ubNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4ubNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttrib4ubNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttrib4ubvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttrib4ubvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttrib4ubvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttrib4ubvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttrib4ubvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs1dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs1dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs1dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs1dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs1dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs1fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs1fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs1fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs1fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs1fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs1svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs1svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs1svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs1svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs1svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs2dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs2dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs2dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs2dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs2dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs2fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs2fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs2fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs2fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs2fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs2svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs2svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs2svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs2svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs2svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs3dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs3dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs3dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs3dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs3dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs3fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs3fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs3fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs3fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs3fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs3svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs3svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs3svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs3svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs3svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs4dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs4dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs4dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs4fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs4fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs4fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs4svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs4svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs4svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs4svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs4svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribs4ubvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribs4ubvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribs4ubvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribs4ubvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4ubvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribs4ubvNV].call(_index_, _count_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_program

  def self.get_ext_command_GL_NV_vertex_program
    [
      'AreProgramsResidentNV',
      'BindProgramNV',
      'DeleteProgramsNV',
      'ExecuteProgramNV',
      'GenProgramsNV',
      'GetProgramParameterdvNV',
      'GetProgramParameterfvNV',
      'GetProgramivNV',
      'GetProgramStringNV',
      'GetTrackMatrixivNV',
      'GetVertexAttribdvNV',
      'GetVertexAttribfvNV',
      'GetVertexAttribivNV',
      'GetVertexAttribPointervNV',
      'IsProgramNV',
      'LoadProgramNV',
      'ProgramParameter4dNV',
      'ProgramParameter4dvNV',
      'ProgramParameter4fNV',
      'ProgramParameter4fvNV',
      'ProgramParameters4dvNV',
      'ProgramParameters4fvNV',
      'RequestResidentProgramsNV',
      'TrackMatrixNV',
      'VertexAttribPointerNV',
      'VertexAttrib1dNV',
      'VertexAttrib1dvNV',
      'VertexAttrib1fNV',
      'VertexAttrib1fvNV',
      'VertexAttrib1sNV',
      'VertexAttrib1svNV',
      'VertexAttrib2dNV',
      'VertexAttrib2dvNV',
      'VertexAttrib2fNV',
      'VertexAttrib2fvNV',
      'VertexAttrib2sNV',
      'VertexAttrib2svNV',
      'VertexAttrib3dNV',
      'VertexAttrib3dvNV',
      'VertexAttrib3fNV',
      'VertexAttrib3fvNV',
      'VertexAttrib3sNV',
      'VertexAttrib3svNV',
      'VertexAttrib4dNV',
      'VertexAttrib4dvNV',
      'VertexAttrib4fNV',
      'VertexAttrib4fvNV',
      'VertexAttrib4sNV',
      'VertexAttrib4svNV',
      'VertexAttrib4ubNV',
      'VertexAttrib4ubvNV',
      'VertexAttribs1dvNV',
      'VertexAttribs1fvNV',
      'VertexAttribs1svNV',
      'VertexAttribs2dvNV',
      'VertexAttribs2fvNV',
      'VertexAttribs2svNV',
      'VertexAttribs3dvNV',
      'VertexAttribs3fvNV',
      'VertexAttribs3svNV',
      'VertexAttribs4dvNV',
      'VertexAttribs4fvNV',
      'VertexAttribs4svNV',
      'VertexAttribs4ubvNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_program


  def self.define_ext_command_GL_NV_vertex_program1_1
  end # self.define_ext_command_GL_NV_vertex_program1_1

  def self.get_ext_command_GL_NV_vertex_program1_1
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program1_1


  def self.define_ext_command_GL_NV_vertex_program2
  end # self.define_ext_command_GL_NV_vertex_program2

  def self.get_ext_command_GL_NV_vertex_program2
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program2


  def self.define_ext_command_GL_NV_vertex_program2_option
  end # self.define_ext_command_GL_NV_vertex_program2_option

  def self.get_ext_command_GL_NV_vertex_program2_option
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program2_option


  def self.define_ext_command_GL_NV_vertex_program3
  end # self.define_ext_command_GL_NV_vertex_program3

  def self.get_ext_command_GL_NV_vertex_program3
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program3


  def self.define_ext_command_GL_NV_vertex_program4
    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1iEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribI1iEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2iEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribI2iEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3iEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribI3iEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4iEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribI4iEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uiEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:VertexAttribI1uiEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uiEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:VertexAttribI2uiEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uiEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:VertexAttribI3uiEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uiEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:VertexAttribI4uiEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI1ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI2ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI3ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI1uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI1uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI2uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI2uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI3uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI3uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4bvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4bvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4bvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4bvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4svEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4svEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4svEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4svEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4ubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4ubvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4ubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4ubvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ubvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4ubvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribI4usvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribI4usvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribI4usvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribI4usvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4usvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:VertexAttribI4usvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VertexAttribIPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:VertexAttribIPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VertexAttribIPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:VertexAttribIPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIPointerEXT(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:VertexAttribIPointerEXT].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribIivEXT].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVertexAttribIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVertexAttribIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVertexAttribIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVertexAttribIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIuivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVertexAttribIuivEXT].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_program4

  def self.get_ext_command_GL_NV_vertex_program4
    [
      'VertexAttribI1iEXT',
      'VertexAttribI2iEXT',
      'VertexAttribI3iEXT',
      'VertexAttribI4iEXT',
      'VertexAttribI1uiEXT',
      'VertexAttribI2uiEXT',
      'VertexAttribI3uiEXT',
      'VertexAttribI4uiEXT',
      'VertexAttribI1ivEXT',
      'VertexAttribI2ivEXT',
      'VertexAttribI3ivEXT',
      'VertexAttribI4ivEXT',
      'VertexAttribI1uivEXT',
      'VertexAttribI2uivEXT',
      'VertexAttribI3uivEXT',
      'VertexAttribI4uivEXT',
      'VertexAttribI4bvEXT',
      'VertexAttribI4svEXT',
      'VertexAttribI4ubvEXT',
      'VertexAttribI4usvEXT',
      'VertexAttribIPointerEXT',
      'GetVertexAttribIivEXT',
      'GetVertexAttribIuivEXT',
    ]
  end # self.get_ext_command_GL_NV_vertex_program4


  def self.define_ext_command_GL_NV_video_capture
    GL::GL_FUNCTION_SYMBOLS << :BeginVideoCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BeginVideoCaptureNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BeginVideoCaptureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BeginVideoCaptureNV)
    GL.module_eval(<<-SRC)
      def self.BeginVideoCaptureNV(_video_capture_slot_)
        GL_FUNCTIONS_MAP[:BeginVideoCaptureNV].call(_video_capture_slot_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindVideoCaptureStreamBufferNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVideoCaptureStreamBufferNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVideoCaptureStreamBufferNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVideoCaptureStreamBufferNV)
    GL.module_eval(<<-SRC)
      def self.BindVideoCaptureStreamBufferNV(_video_capture_slot_, _stream_, _frame_region_, _offset_)
        GL_FUNCTIONS_MAP[:BindVideoCaptureStreamBufferNV].call(_video_capture_slot_, _stream_, _frame_region_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BindVideoCaptureStreamTextureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:BindVideoCaptureStreamTextureNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BindVideoCaptureStreamTextureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:BindVideoCaptureStreamTextureNV)
    GL.module_eval(<<-SRC)
      def self.BindVideoCaptureStreamTextureNV(_video_capture_slot_, _stream_, _frame_region_, _target_, _texture_)
        GL_FUNCTIONS_MAP[:BindVideoCaptureStreamTextureNV].call(_video_capture_slot_, _stream_, _frame_region_, _target_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EndVideoCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:EndVideoCaptureNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EndVideoCaptureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:EndVideoCaptureNV)
    GL.module_eval(<<-SRC)
      def self.EndVideoCaptureNV(_video_capture_slot_)
        GL_FUNCTIONS_MAP[:EndVideoCaptureNV].call(_video_capture_slot_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoCaptureivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoCaptureivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoCaptureivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoCaptureivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureivNV(_video_capture_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoCaptureivNV].call(_video_capture_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoCaptureStreamivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoCaptureStreamivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoCaptureStreamivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoCaptureStreamivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureStreamivNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoCaptureStreamivNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoCaptureStreamfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoCaptureStreamfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoCaptureStreamfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoCaptureStreamfvNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureStreamfvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoCaptureStreamfvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetVideoCaptureStreamdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:GetVideoCaptureStreamdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetVideoCaptureStreamdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:GetVideoCaptureStreamdvNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureStreamdvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetVideoCaptureStreamdvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VideoCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VideoCaptureNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VideoCaptureNV] = -Fiddle::TYPE_INT
    GL.bind_command(:VideoCaptureNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureNV(_video_capture_slot_, _sequence_num_, _capture_time_)
        GL_FUNCTIONS_MAP[:VideoCaptureNV].call(_video_capture_slot_, _sequence_num_, _capture_time_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VideoCaptureStreamParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VideoCaptureStreamParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VideoCaptureStreamParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VideoCaptureStreamParameterivNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureStreamParameterivNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:VideoCaptureStreamParameterivNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VideoCaptureStreamParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VideoCaptureStreamParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VideoCaptureStreamParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VideoCaptureStreamParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureStreamParameterfvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:VideoCaptureStreamParameterfvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :VideoCaptureStreamParameterdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:VideoCaptureStreamParameterdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:VideoCaptureStreamParameterdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:VideoCaptureStreamParameterdvNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureStreamParameterdvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:VideoCaptureStreamParameterdvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_video_capture

  def self.get_ext_command_GL_NV_video_capture
    [
      'BeginVideoCaptureNV',
      'BindVideoCaptureStreamBufferNV',
      'BindVideoCaptureStreamTextureNV',
      'EndVideoCaptureNV',
      'GetVideoCaptureivNV',
      'GetVideoCaptureStreamivNV',
      'GetVideoCaptureStreamfvNV',
      'GetVideoCaptureStreamdvNV',
      'VideoCaptureNV',
      'VideoCaptureStreamParameterivNV',
      'VideoCaptureStreamParameterfvNV',
      'VideoCaptureStreamParameterdvNV',
    ]
  end # self.get_ext_command_GL_NV_video_capture


  def self.define_ext_command_GL_NV_viewport_array2
  end # self.define_ext_command_GL_NV_viewport_array2

  def self.get_ext_command_GL_NV_viewport_array2
    [
    ]
  end # self.get_ext_command_GL_NV_viewport_array2


  def self.define_ext_command_GL_NV_viewport_swizzle
    GL::GL_FUNCTION_SYMBOLS << :ViewportSwizzleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:ViewportSwizzleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ViewportSwizzleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:ViewportSwizzleNV)
    GL.module_eval(<<-SRC)
      def self.ViewportSwizzleNV(_index_, _swizzlex_, _swizzley_, _swizzlez_, _swizzlew_)
        GL_FUNCTIONS_MAP[:ViewportSwizzleNV].call(_index_, _swizzlex_, _swizzley_, _swizzlez_, _swizzlew_)
      end
    SRC
  end # self.define_ext_command_GL_NV_viewport_swizzle

  def self.get_ext_command_GL_NV_viewport_swizzle
    [
      'ViewportSwizzleNV',
    ]
  end # self.get_ext_command_GL_NV_viewport_swizzle


  def self.define_ext_command_GL_OES_byte_coordinates
    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1bOES(_texture_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1bOES].call(_texture_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2bOES(_texture_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2bOES].call(_texture_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3bOES(_texture_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3bOES].call(_texture_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4bOES(_texture_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4bOES].call(_texture_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord1bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord1bOES] = [Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord1bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord1bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1bOES(_s_)
        GL_FUNCTIONS_MAP[:TexCoord1bOES].call(_s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord1bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord1bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord1bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord1bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1bvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord1bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2bOES(_s_, _t_)
        GL_FUNCTIONS_MAP[:TexCoord2bOES].call(_s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2bvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord2bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord3bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord3bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord3bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord3bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3bOES(_s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:TexCoord3bOES].call(_s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord3bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord3bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord3bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord3bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3bvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord3bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4bOES(_s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:TexCoord4bOES].call(_s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4bvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord4bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex2bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex2bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex2bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex2bOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2bOES(_x_, _y_)
        GL_FUNCTIONS_MAP[:Vertex2bOES].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex2bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex2bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex2bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex2bvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2bvOES(_coords_)
        GL_FUNCTIONS_MAP[:Vertex2bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex3bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex3bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex3bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex3bOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3bOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Vertex3bOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex3bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex3bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex3bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex3bvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3bvOES(_coords_)
        GL_FUNCTIONS_MAP[:Vertex3bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex4bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex4bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex4bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex4bOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4bOES(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:Vertex4bOES].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex4bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex4bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex4bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex4bvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4bvOES(_coords_)
        GL_FUNCTIONS_MAP[:Vertex4bvOES].call(_coords_)
      end
    SRC
  end # self.define_ext_command_GL_OES_byte_coordinates

  def self.get_ext_command_GL_OES_byte_coordinates
    [
      'MultiTexCoord1bOES',
      'MultiTexCoord1bvOES',
      'MultiTexCoord2bOES',
      'MultiTexCoord2bvOES',
      'MultiTexCoord3bOES',
      'MultiTexCoord3bvOES',
      'MultiTexCoord4bOES',
      'MultiTexCoord4bvOES',
      'TexCoord1bOES',
      'TexCoord1bvOES',
      'TexCoord2bOES',
      'TexCoord2bvOES',
      'TexCoord3bOES',
      'TexCoord3bvOES',
      'TexCoord4bOES',
      'TexCoord4bvOES',
      'Vertex2bOES',
      'Vertex2bvOES',
      'Vertex3bOES',
      'Vertex3bvOES',
      'Vertex4bOES',
      'Vertex4bvOES',
    ]
  end # self.get_ext_command_GL_OES_byte_coordinates


  def self.define_ext_command_GL_OES_compressed_paletted_texture
  end # self.define_ext_command_GL_OES_compressed_paletted_texture

  def self.get_ext_command_GL_OES_compressed_paletted_texture
    [
    ]
  end # self.get_ext_command_GL_OES_compressed_paletted_texture


  def self.define_ext_command_GL_OES_fixed_point
    GL::GL_FUNCTION_SYMBOLS << :AlphaFuncxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:AlphaFuncxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AlphaFuncxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:AlphaFuncxOES)
    GL.module_eval(<<-SRC)
      def self.AlphaFuncxOES(_func_, _ref_)
        GL_FUNCTIONS_MAP[:AlphaFuncxOES].call(_func_, _ref_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearColorxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearColorxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearColorxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearColorxOES)
    GL.module_eval(<<-SRC)
      def self.ClearColorxOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:ClearColorxOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearDepthxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearDepthxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearDepthxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearDepthxOES)
    GL.module_eval(<<-SRC)
      def self.ClearDepthxOES(_depth_)
        GL_FUNCTIONS_MAP[:ClearDepthxOES].call(_depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClipPlanexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ClipPlanexOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClipPlanexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ClipPlanexOES)
    GL.module_eval(<<-SRC)
      def self.ClipPlanexOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:ClipPlanexOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4xOES)
    GL.module_eval(<<-SRC)
      def self.Color4xOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:Color4xOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangexOES)
    GL.module_eval(<<-SRC)
      def self.DepthRangexOES(_n_, _f_)
        GL_FUNCTIONS_MAP[:DepthRangexOES].call(_n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:FogxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:FogxOES)
    GL.module_eval(<<-SRC)
      def self.FogxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:FogxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FogxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:FogxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:FogxvOES)
    GL.module_eval(<<-SRC)
      def self.FogxvOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:FogxvOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FrustumxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:FrustumxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FrustumxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:FrustumxOES)
    GL.module_eval(<<-SRC)
      def self.FrustumxOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:FrustumxOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetClipPlanexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetClipPlanexOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetClipPlanexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetClipPlanexOES)
    GL.module_eval(<<-SRC)
      def self.GetClipPlanexOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:GetClipPlanexOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFixedvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFixedvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFixedvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFixedvOES)
    GL.module_eval(<<-SRC)
      def self.GetFixedvOES(_pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFixedvOES].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexEnvxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexEnvxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexEnvxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexEnvxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexEnvxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexEnvxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LightModelxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LightModelxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LightModelxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LightModelxOES)
    GL.module_eval(<<-SRC)
      def self.LightModelxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:LightModelxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LightModelxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LightModelxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LightModelxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LightModelxvOES)
    GL.module_eval(<<-SRC)
      def self.LightModelxvOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:LightModelxvOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LightxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LightxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LightxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LightxOES)
    GL.module_eval(<<-SRC)
      def self.LightxOES(_light_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:LightxOES].call(_light_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LightxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LightxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LightxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LightxvOES)
    GL.module_eval(<<-SRC)
      def self.LightxvOES(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:LightxvOES].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LineWidthxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LineWidthxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LineWidthxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LineWidthxOES)
    GL.module_eval(<<-SRC)
      def self.LineWidthxOES(_width_)
        GL_FUNCTIONS_MAP[:LineWidthxOES].call(_width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LoadMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LoadMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LoadMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LoadMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.LoadMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:LoadMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MaterialxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MaterialxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MaterialxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MaterialxOES)
    GL.module_eval(<<-SRC)
      def self.MaterialxOES(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MaterialxOES].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MaterialxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MaterialxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MaterialxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MaterialxvOES)
    GL.module_eval(<<-SRC)
      def self.MaterialxvOES(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:MaterialxvOES].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.MultMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:MultMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4xOES(_texture_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4xOES].call(_texture_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Normal3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Normal3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Normal3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Normal3xOES)
    GL.module_eval(<<-SRC)
      def self.Normal3xOES(_nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:Normal3xOES].call(_nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :OrthoxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:OrthoxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:OrthoxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:OrthoxOES)
    GL.module_eval(<<-SRC)
      def self.OrthoxOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:OrthoxOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.PointParameterxvOES(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PointParameterxvOES].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointSizexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PointSizexOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointSizexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PointSizexOES)
    GL.module_eval(<<-SRC)
      def self.PointSizexOES(_size_)
        GL_FUNCTIONS_MAP[:PointSizexOES].call(_size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PolygonOffsetxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PolygonOffsetxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PolygonOffsetxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PolygonOffsetxOES)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetxOES(_factor_, _units_)
        GL_FUNCTIONS_MAP[:PolygonOffsetxOES].call(_factor_, _units_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RotatexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RotatexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RotatexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RotatexOES)
    GL.module_eval(<<-SRC)
      def self.RotatexOES(_angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:RotatexOES].call(_angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ScalexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ScalexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ScalexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ScalexOES)
    GL.module_eval(<<-SRC)
      def self.ScalexOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ScalexOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexEnvxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexEnvxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexEnvxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexEnvxOES)
    GL.module_eval(<<-SRC)
      def self.TexEnvxOES(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TexEnvxOES].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexEnvxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexEnvxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexEnvxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexEnvxvOES)
    GL.module_eval(<<-SRC)
      def self.TexEnvxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TexEnvxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexParameterxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexParameterxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexParameterxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexParameterxOES)
    GL.module_eval(<<-SRC)
      def self.TexParameterxOES(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TexParameterxOES].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.TexParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TexParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TranslatexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TranslatexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TranslatexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TranslatexOES)
    GL.module_eval(<<-SRC)
      def self.TranslatexOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:TranslatexOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetLightxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetLightxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetLightxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetLightxvOES)
    GL.module_eval(<<-SRC)
      def self.GetLightxvOES(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetLightxvOES].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMaterialxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMaterialxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMaterialxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMaterialxvOES)
    GL.module_eval(<<-SRC)
      def self.GetMaterialxvOES(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetMaterialxvOES].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointParameterxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterxOES)
    GL.module_eval(<<-SRC)
      def self.PointParameterxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PointParameterxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SampleCoveragexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleCoveragexOES] = [Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleCoveragexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleCoveragexOES)
    GL.module_eval(<<-SRC)
      def self.SampleCoveragexOES(_value_, _invert_)
        GL_FUNCTIONS_MAP[:SampleCoveragexOES].call(_value_, _invert_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :AccumxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:AccumxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AccumxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:AccumxOES)
    GL.module_eval(<<-SRC)
      def self.AccumxOES(_op_, _value_)
        GL_FUNCTIONS_MAP[:AccumxOES].call(_op_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BitmapxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:BitmapxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BitmapxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:BitmapxOES)
    GL.module_eval(<<-SRC)
      def self.BitmapxOES(_width_, _height_, _xorig_, _yorig_, _xmove_, _ymove_, _bitmap_)
        GL_FUNCTIONS_MAP[:BitmapxOES].call(_width_, _height_, _xorig_, _yorig_, _xmove_, _ymove_, _bitmap_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :BlendColorxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:BlendColorxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:BlendColorxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:BlendColorxOES)
    GL.module_eval(<<-SRC)
      def self.BlendColorxOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:BlendColorxOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClearAccumxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearAccumxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearAccumxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearAccumxOES)
    GL.module_eval(<<-SRC)
      def self.ClearAccumxOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:ClearAccumxOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Color3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Color3xOES)
    GL.module_eval(<<-SRC)
      def self.Color3xOES(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:Color3xOES].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Color3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Color3xvOES)
    GL.module_eval(<<-SRC)
      def self.Color3xvOES(_components_)
        GL_FUNCTIONS_MAP[:Color3xvOES].call(_components_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4xvOES)
    GL.module_eval(<<-SRC)
      def self.Color4xvOES(_components_)
        GL_FUNCTIONS_MAP[:Color4xvOES].call(_components_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterxOES)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterxOES(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterxOES].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ConvolutionParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ConvolutionParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ConvolutionParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ConvolutionParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ConvolutionParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EvalCoord1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:EvalCoord1xOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EvalCoord1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:EvalCoord1xOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord1xOES(_u_)
        GL_FUNCTIONS_MAP[:EvalCoord1xOES].call(_u_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EvalCoord1xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:EvalCoord1xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EvalCoord1xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:EvalCoord1xvOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord1xvOES(_coords_)
        GL_FUNCTIONS_MAP[:EvalCoord1xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EvalCoord2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:EvalCoord2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EvalCoord2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:EvalCoord2xOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord2xOES(_u_, _v_)
        GL_FUNCTIONS_MAP[:EvalCoord2xOES].call(_u_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :EvalCoord2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:EvalCoord2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:EvalCoord2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:EvalCoord2xvOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:EvalCoord2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FeedbackBufferxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:FeedbackBufferxOES] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FeedbackBufferxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:FeedbackBufferxOES)
    GL.module_eval(<<-SRC)
      def self.FeedbackBufferxOES(_n_, _type_, _buffer_)
        GL_FUNCTIONS_MAP[:FeedbackBufferxOES].call(_n_, _type_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetConvolutionParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetConvolutionParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetConvolutionParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetConvolutionParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetConvolutionParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetHistogramParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetHistogramParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetHistogramParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetHistogramParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetHistogramParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetLightxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetLightxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetLightxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetLightxOES)
    GL.module_eval(<<-SRC)
      def self.GetLightxOES(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetLightxOES].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMapxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMapxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMapxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMapxvOES)
    GL.module_eval(<<-SRC)
      def self.GetMapxvOES(_target_, _query_, _v_)
        GL_FUNCTIONS_MAP[:GetMapxvOES].call(_target_, _query_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetMaterialxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetMaterialxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetMaterialxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetMaterialxOES)
    GL.module_eval(<<-SRC)
      def self.GetMaterialxOES(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:GetMaterialxOES].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPixelMapxv
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPixelMapxv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPixelMapxv] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPixelMapxv)
    GL.module_eval(<<-SRC)
      def self.GetPixelMapxv(_map_, _size_, _values_)
        GL_FUNCTIONS_MAP[:GetPixelMapxv].call(_map_, _size_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexGenxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexGenxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexGenxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexGenxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexGenxvOES(_coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexGenxvOES].call(_coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetTexLevelParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexLevelParameterxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexLevelParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexLevelParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexLevelParameterxvOES(_target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetTexLevelParameterxvOES].call(_target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IndexxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexxOES)
    GL.module_eval(<<-SRC)
      def self.IndexxOES(_component_)
        GL_FUNCTIONS_MAP[:IndexxOES].call(_component_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IndexxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:IndexxvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IndexxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:IndexxvOES)
    GL.module_eval(<<-SRC)
      def self.IndexxvOES(_component_)
        GL_FUNCTIONS_MAP[:IndexxvOES].call(_component_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LoadTransposeMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:LoadTransposeMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LoadTransposeMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:LoadTransposeMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.LoadTransposeMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:LoadTransposeMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Map1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Map1xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Map1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Map1xOES)
    GL.module_eval(<<-SRC)
      def self.Map1xOES(_target_, _u1_, _u2_, _stride_, _order_, _points_)
        GL_FUNCTIONS_MAP[:Map1xOES].call(_target_, _u1_, _u2_, _stride_, _order_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Map2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Map2xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Map2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Map2xOES)
    GL.module_eval(<<-SRC)
      def self.Map2xOES(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
        GL_FUNCTIONS_MAP[:Map2xOES].call(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapGrid1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MapGrid1xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapGrid1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MapGrid1xOES)
    GL.module_eval(<<-SRC)
      def self.MapGrid1xOES(_n_, _u1_, _u2_)
        GL_FUNCTIONS_MAP[:MapGrid1xOES].call(_n_, _u1_, _u2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MapGrid2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MapGrid2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MapGrid2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MapGrid2xOES)
    GL.module_eval(<<-SRC)
      def self.MapGrid2xOES(_n_, _u1_, _u2_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:MapGrid2xOES].call(_n_, _u1_, _u2_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultTransposeMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultTransposeMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultTransposeMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultTransposeMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.MultTransposeMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:MultTransposeMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1xOES(_texture_, _s_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1xOES].call(_texture_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord1xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord1xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord1xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord1xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord1xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2xOES(_texture_, _s_, _t_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2xOES].call(_texture_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord2xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord2xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord2xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3xOES(_texture_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3xOES].call(_texture_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord3xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord3xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord3xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :MultiTexCoord4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:MultiTexCoord4xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:MultiTexCoord4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:MultiTexCoord4xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:MultiTexCoord4xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Normal3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Normal3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Normal3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Normal3xvOES)
    GL.module_eval(<<-SRC)
      def self.Normal3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:Normal3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PassThroughxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PassThroughxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PassThroughxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PassThroughxOES)
    GL.module_eval(<<-SRC)
      def self.PassThroughxOES(_token_)
        GL_FUNCTIONS_MAP[:PassThroughxOES].call(_token_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelMapx
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelMapx] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelMapx] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelMapx)
    GL.module_eval(<<-SRC)
      def self.PixelMapx(_map_, _size_, _values_)
        GL_FUNCTIONS_MAP[:PixelMapx].call(_map_, _size_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelStorex
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelStorex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelStorex] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelStorex)
    GL.module_eval(<<-SRC)
      def self.PixelStorex(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PixelStorex].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTransferxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTransferxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTransferxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTransferxOES)
    GL.module_eval(<<-SRC)
      def self.PixelTransferxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PixelTransferxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelZoomxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelZoomxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelZoomxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelZoomxOES)
    GL.module_eval(<<-SRC)
      def self.PixelZoomxOES(_xfactor_, _yfactor_)
        GL_FUNCTIONS_MAP[:PixelZoomxOES].call(_xfactor_, _yfactor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PrioritizeTexturesxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:PrioritizeTexturesxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PrioritizeTexturesxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:PrioritizeTexturesxOES)
    GL.module_eval(<<-SRC)
      def self.PrioritizeTexturesxOES(_n_, _textures_, _priorities_)
        GL_FUNCTIONS_MAP[:PrioritizeTexturesxOES].call(_n_, _textures_, _priorities_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RasterPos2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterPos2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterPos2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterPos2xOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos2xOES(_x_, _y_)
        GL_FUNCTIONS_MAP[:RasterPos2xOES].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RasterPos2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterPos2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterPos2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterPos2xvOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:RasterPos2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RasterPos3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterPos3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterPos3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterPos3xOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos3xOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:RasterPos3xOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RasterPos3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterPos3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterPos3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterPos3xvOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:RasterPos3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RasterPos4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterPos4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterPos4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterPos4xOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos4xOES(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:RasterPos4xOES].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RasterPos4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RasterPos4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RasterPos4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RasterPos4xvOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos4xvOES(_coords_)
        GL_FUNCTIONS_MAP[:RasterPos4xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RectxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RectxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RectxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RectxOES)
    GL.module_eval(<<-SRC)
      def self.RectxOES(_x1_, _y1_, _x2_, _y2_)
        GL_FUNCTIONS_MAP[:RectxOES].call(_x1_, _y1_, _x2_, _y2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :RectxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:RectxvOES] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:RectxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:RectxvOES)
    GL.module_eval(<<-SRC)
      def self.RectxvOES(_v1_, _v2_)
        GL_FUNCTIONS_MAP[:RectxvOES].call(_v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord1xOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord1xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1xOES(_s_)
        GL_FUNCTIONS_MAP[:TexCoord1xOES].call(_s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord1xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord1xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord1xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord1xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1xvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord1xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2xOES(_s_, _t_)
        GL_FUNCTIONS_MAP[:TexCoord2xOES].call(_s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord3xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3xOES(_s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:TexCoord3xOES].call(_s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord3xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4xOES(_s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:TexCoord4xOES].call(_s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4xvOES(_coords_)
        GL_FUNCTIONS_MAP[:TexCoord4xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexGenxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexGenxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexGenxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexGenxOES)
    GL.module_eval(<<-SRC)
      def self.TexGenxOES(_coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:TexGenxOES].call(_coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexGenxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:TexGenxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexGenxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:TexGenxvOES)
    GL.module_eval(<<-SRC)
      def self.TexGenxvOES(_coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:TexGenxvOES].call(_coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex2xOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex2xOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2xOES(_x_)
        GL_FUNCTIONS_MAP[:Vertex2xOES].call(_x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex2xvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:Vertex2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex3xOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3xOES(_x_, _y_)
        GL_FUNCTIONS_MAP[:Vertex3xOES].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex3xvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:Vertex3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex4xOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4xOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Vertex4xOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Vertex4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:Vertex4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Vertex4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:Vertex4xvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4xvOES(_coords_)
        GL_FUNCTIONS_MAP[:Vertex4xvOES].call(_coords_)
      end
    SRC
  end # self.define_ext_command_GL_OES_fixed_point

  def self.get_ext_command_GL_OES_fixed_point
    [
      'AlphaFuncxOES',
      'ClearColorxOES',
      'ClearDepthxOES',
      'ClipPlanexOES',
      'Color4xOES',
      'DepthRangexOES',
      'FogxOES',
      'FogxvOES',
      'FrustumxOES',
      'GetClipPlanexOES',
      'GetFixedvOES',
      'GetTexEnvxvOES',
      'GetTexParameterxvOES',
      'LightModelxOES',
      'LightModelxvOES',
      'LightxOES',
      'LightxvOES',
      'LineWidthxOES',
      'LoadMatrixxOES',
      'MaterialxOES',
      'MaterialxvOES',
      'MultMatrixxOES',
      'MultiTexCoord4xOES',
      'Normal3xOES',
      'OrthoxOES',
      'PointParameterxvOES',
      'PointSizexOES',
      'PolygonOffsetxOES',
      'RotatexOES',
      'ScalexOES',
      'TexEnvxOES',
      'TexEnvxvOES',
      'TexParameterxOES',
      'TexParameterxvOES',
      'TranslatexOES',
      'GetLightxvOES',
      'GetMaterialxvOES',
      'PointParameterxOES',
      'SampleCoveragexOES',
      'AccumxOES',
      'BitmapxOES',
      'BlendColorxOES',
      'ClearAccumxOES',
      'Color3xOES',
      'Color3xvOES',
      'Color4xvOES',
      'ConvolutionParameterxOES',
      'ConvolutionParameterxvOES',
      'EvalCoord1xOES',
      'EvalCoord1xvOES',
      'EvalCoord2xOES',
      'EvalCoord2xvOES',
      'FeedbackBufferxOES',
      'GetConvolutionParameterxvOES',
      'GetHistogramParameterxvOES',
      'GetLightxOES',
      'GetMapxvOES',
      'GetMaterialxOES',
      'GetPixelMapxv',
      'GetTexGenxvOES',
      'GetTexLevelParameterxvOES',
      'IndexxOES',
      'IndexxvOES',
      'LoadTransposeMatrixxOES',
      'Map1xOES',
      'Map2xOES',
      'MapGrid1xOES',
      'MapGrid2xOES',
      'MultTransposeMatrixxOES',
      'MultiTexCoord1xOES',
      'MultiTexCoord1xvOES',
      'MultiTexCoord2xOES',
      'MultiTexCoord2xvOES',
      'MultiTexCoord3xOES',
      'MultiTexCoord3xvOES',
      'MultiTexCoord4xvOES',
      'Normal3xvOES',
      'PassThroughxOES',
      'PixelMapx',
      'PixelStorex',
      'PixelTransferxOES',
      'PixelZoomxOES',
      'PrioritizeTexturesxOES',
      'RasterPos2xOES',
      'RasterPos2xvOES',
      'RasterPos3xOES',
      'RasterPos3xvOES',
      'RasterPos4xOES',
      'RasterPos4xvOES',
      'RectxOES',
      'RectxvOES',
      'TexCoord1xOES',
      'TexCoord1xvOES',
      'TexCoord2xOES',
      'TexCoord2xvOES',
      'TexCoord3xOES',
      'TexCoord3xvOES',
      'TexCoord4xOES',
      'TexCoord4xvOES',
      'TexGenxOES',
      'TexGenxvOES',
      'Vertex2xOES',
      'Vertex2xvOES',
      'Vertex3xOES',
      'Vertex3xvOES',
      'Vertex4xOES',
      'Vertex4xvOES',
    ]
  end # self.get_ext_command_GL_OES_fixed_point


  def self.define_ext_command_GL_OES_query_matrix
    GL::GL_FUNCTION_SYMBOLS << :QueryMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:QueryMatrixxOES] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:QueryMatrixxOES] = -Fiddle::TYPE_INT
    GL.bind_command(:QueryMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.QueryMatrixxOES(_mantissa_, _exponent_)
        GL_FUNCTIONS_MAP[:QueryMatrixxOES].call(_mantissa_, _exponent_)
      end
    SRC
  end # self.define_ext_command_GL_OES_query_matrix

  def self.get_ext_command_GL_OES_query_matrix
    [
      'QueryMatrixxOES',
    ]
  end # self.get_ext_command_GL_OES_query_matrix


  def self.define_ext_command_GL_OES_read_format
  end # self.define_ext_command_GL_OES_read_format

  def self.get_ext_command_GL_OES_read_format
    [
    ]
  end # self.get_ext_command_GL_OES_read_format


  def self.define_ext_command_GL_OES_single_precision
    GL::GL_FUNCTION_SYMBOLS << :ClearDepthfOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ClearDepthfOES] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClearDepthfOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ClearDepthfOES)
    GL.module_eval(<<-SRC)
      def self.ClearDepthfOES(_depth_)
        GL_FUNCTIONS_MAP[:ClearDepthfOES].call(_depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ClipPlanefOES
    GL::GL_FUNCTIONS_ARGS_MAP[:ClipPlanefOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ClipPlanefOES] = Fiddle::TYPE_VOID
    GL.bind_command(:ClipPlanefOES)
    GL.module_eval(<<-SRC)
      def self.ClipPlanefOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:ClipPlanefOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DepthRangefOES
    GL::GL_FUNCTIONS_ARGS_MAP[:DepthRangefOES] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DepthRangefOES] = Fiddle::TYPE_VOID
    GL.bind_command(:DepthRangefOES)
    GL.module_eval(<<-SRC)
      def self.DepthRangefOES(_n_, _f_)
        GL_FUNCTIONS_MAP[:DepthRangefOES].call(_n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FrustumfOES
    GL::GL_FUNCTIONS_ARGS_MAP[:FrustumfOES] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FrustumfOES] = Fiddle::TYPE_VOID
    GL.bind_command(:FrustumfOES)
    GL.module_eval(<<-SRC)
      def self.FrustumfOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:FrustumfOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetClipPlanefOES
    GL::GL_FUNCTIONS_ARGS_MAP[:GetClipPlanefOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetClipPlanefOES] = Fiddle::TYPE_VOID
    GL.bind_command(:GetClipPlanefOES)
    GL.module_eval(<<-SRC)
      def self.GetClipPlanefOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:GetClipPlanefOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :OrthofOES
    GL::GL_FUNCTIONS_ARGS_MAP[:OrthofOES] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:OrthofOES] = Fiddle::TYPE_VOID
    GL.bind_command(:OrthofOES)
    GL.module_eval(<<-SRC)
      def self.OrthofOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:OrthofOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC
  end # self.define_ext_command_GL_OES_single_precision

  def self.get_ext_command_GL_OES_single_precision
    [
      'ClearDepthfOES',
      'ClipPlanefOES',
      'DepthRangefOES',
      'FrustumfOES',
      'GetClipPlanefOES',
      'OrthofOES',
    ]
  end # self.get_ext_command_GL_OES_single_precision


  def self.define_ext_command_GL_OML_interlace
  end # self.define_ext_command_GL_OML_interlace

  def self.get_ext_command_GL_OML_interlace
    [
    ]
  end # self.get_ext_command_GL_OML_interlace


  def self.define_ext_command_GL_OML_resample
  end # self.define_ext_command_GL_OML_resample

  def self.get_ext_command_GL_OML_resample
    [
    ]
  end # self.get_ext_command_GL_OML_resample


  def self.define_ext_command_GL_OML_subsample
  end # self.define_ext_command_GL_OML_subsample

  def self.get_ext_command_GL_OML_subsample
    [
    ]
  end # self.get_ext_command_GL_OML_subsample


  def self.define_ext_command_GL_OVR_multiview
    GL::GL_FUNCTION_SYMBOLS << :FramebufferTextureMultiviewOVR
    GL::GL_FUNCTIONS_ARGS_MAP[:FramebufferTextureMultiviewOVR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FramebufferTextureMultiviewOVR] = Fiddle::TYPE_VOID
    GL.bind_command(:FramebufferTextureMultiviewOVR)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureMultiviewOVR(_target_, _attachment_, _texture_, _level_, _baseViewIndex_, _numViews_)
        GL_FUNCTIONS_MAP[:FramebufferTextureMultiviewOVR].call(_target_, _attachment_, _texture_, _level_, _baseViewIndex_, _numViews_)
      end
    SRC
  end # self.define_ext_command_GL_OVR_multiview

  def self.get_ext_command_GL_OVR_multiview
    [
      'FramebufferTextureMultiviewOVR',
    ]
  end # self.get_ext_command_GL_OVR_multiview


  def self.define_ext_command_GL_OVR_multiview2
  end # self.define_ext_command_GL_OVR_multiview2

  def self.get_ext_command_GL_OVR_multiview2
    [
    ]
  end # self.get_ext_command_GL_OVR_multiview2


  def self.define_ext_command_GL_PGI_misc_hints
    GL::GL_FUNCTION_SYMBOLS << :HintPGI
    GL::GL_FUNCTIONS_ARGS_MAP[:HintPGI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:HintPGI] = Fiddle::TYPE_VOID
    GL.bind_command(:HintPGI)
    GL.module_eval(<<-SRC)
      def self.HintPGI(_target_, _mode_)
        GL_FUNCTIONS_MAP[:HintPGI].call(_target_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_PGI_misc_hints

  def self.get_ext_command_GL_PGI_misc_hints
    [
      'HintPGI',
    ]
  end # self.get_ext_command_GL_PGI_misc_hints


  def self.define_ext_command_GL_PGI_vertex_hints
  end # self.define_ext_command_GL_PGI_vertex_hints

  def self.get_ext_command_GL_PGI_vertex_hints
    [
    ]
  end # self.get_ext_command_GL_PGI_vertex_hints


  def self.define_ext_command_GL_REND_screen_coordinates
  end # self.define_ext_command_GL_REND_screen_coordinates

  def self.get_ext_command_GL_REND_screen_coordinates
    [
    ]
  end # self.get_ext_command_GL_REND_screen_coordinates


  def self.define_ext_command_GL_S3_s3tc
  end # self.define_ext_command_GL_S3_s3tc

  def self.get_ext_command_GL_S3_s3tc
    [
    ]
  end # self.get_ext_command_GL_S3_s3tc


  def self.define_ext_command_GL_SGIS_detail_texture
    GL::GL_FUNCTION_SYMBOLS << :DetailTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:DetailTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DetailTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:DetailTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.DetailTexFuncSGIS(_target_, _n_, _points_)
        GL_FUNCTIONS_MAP[:DetailTexFuncSGIS].call(_target_, _n_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetDetailTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:GetDetailTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetDetailTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:GetDetailTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetDetailTexFuncSGIS(_target_, _points_)
        GL_FUNCTIONS_MAP[:GetDetailTexFuncSGIS].call(_target_, _points_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_detail_texture

  def self.get_ext_command_GL_SGIS_detail_texture
    [
      'DetailTexFuncSGIS',
      'GetDetailTexFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_detail_texture


  def self.define_ext_command_GL_SGIS_fog_function
    GL::GL_FUNCTION_SYMBOLS << :FogFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:FogFuncSGIS] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FogFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:FogFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.FogFuncSGIS(_n_, _points_)
        GL_FUNCTIONS_MAP[:FogFuncSGIS].call(_n_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFogFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFogFuncSGIS] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFogFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFogFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetFogFuncSGIS(_points_)
        GL_FUNCTIONS_MAP[:GetFogFuncSGIS].call(_points_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_fog_function

  def self.get_ext_command_GL_SGIS_fog_function
    [
      'FogFuncSGIS',
      'GetFogFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_fog_function


  def self.define_ext_command_GL_SGIS_generate_mipmap
  end # self.define_ext_command_GL_SGIS_generate_mipmap

  def self.get_ext_command_GL_SGIS_generate_mipmap
    [
    ]
  end # self.get_ext_command_GL_SGIS_generate_mipmap


  def self.define_ext_command_GL_SGIS_multisample
    GL::GL_FUNCTION_SYMBOLS << :SampleMaskSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:SampleMaskSGIS] = [Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SampleMaskSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:SampleMaskSGIS)
    GL.module_eval(<<-SRC)
      def self.SampleMaskSGIS(_value_, _invert_)
        GL_FUNCTIONS_MAP[:SampleMaskSGIS].call(_value_, _invert_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SamplePatternSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:SamplePatternSGIS] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SamplePatternSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:SamplePatternSGIS)
    GL.module_eval(<<-SRC)
      def self.SamplePatternSGIS(_pattern_)
        GL_FUNCTIONS_MAP[:SamplePatternSGIS].call(_pattern_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_multisample

  def self.get_ext_command_GL_SGIS_multisample
    [
      'SampleMaskSGIS',
      'SamplePatternSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_multisample


  def self.define_ext_command_GL_SGIS_pixel_texture
    GL::GL_FUNCTION_SYMBOLS << :PixelTexGenParameteriSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTexGenParameteriSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTexGenParameteriSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTexGenParameteriSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameteriSGIS(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PixelTexGenParameteriSGIS].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTexGenParameterivSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTexGenParameterivSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTexGenParameterivSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTexGenParameterivSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameterivSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PixelTexGenParameterivSGIS].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTexGenParameterfSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTexGenParameterfSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTexGenParameterfSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTexGenParameterfSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameterfSGIS(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PixelTexGenParameterfSGIS].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PixelTexGenParameterfvSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTexGenParameterfvSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTexGenParameterfvSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTexGenParameterfvSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameterfvSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PixelTexGenParameterfvSGIS].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPixelTexGenParameterivSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPixelTexGenParameterivSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPixelTexGenParameterivSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPixelTexGenParameterivSGIS)
    GL.module_eval(<<-SRC)
      def self.GetPixelTexGenParameterivSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPixelTexGenParameterivSGIS].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetPixelTexGenParameterfvSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:GetPixelTexGenParameterfvSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetPixelTexGenParameterfvSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:GetPixelTexGenParameterfvSGIS)
    GL.module_eval(<<-SRC)
      def self.GetPixelTexGenParameterfvSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:GetPixelTexGenParameterfvSGIS].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_pixel_texture

  def self.get_ext_command_GL_SGIS_pixel_texture
    [
      'PixelTexGenParameteriSGIS',
      'PixelTexGenParameterivSGIS',
      'PixelTexGenParameterfSGIS',
      'PixelTexGenParameterfvSGIS',
      'GetPixelTexGenParameterivSGIS',
      'GetPixelTexGenParameterfvSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_pixel_texture


  def self.define_ext_command_GL_SGIS_point_line_texgen
  end # self.define_ext_command_GL_SGIS_point_line_texgen

  def self.get_ext_command_GL_SGIS_point_line_texgen
    [
    ]
  end # self.get_ext_command_GL_SGIS_point_line_texgen


  def self.define_ext_command_GL_SGIS_point_parameters
    GL::GL_FUNCTION_SYMBOLS << :PointParameterfSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterfSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterfSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterfSGIS)
    GL.module_eval(<<-SRC)
      def self.PointParameterfSGIS(_pname_, _param_)
        GL_FUNCTIONS_MAP[:PointParameterfSGIS].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PointParameterfvSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:PointParameterfvSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PointParameterfvSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:PointParameterfvSGIS)
    GL.module_eval(<<-SRC)
      def self.PointParameterfvSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:PointParameterfvSGIS].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_point_parameters

  def self.get_ext_command_GL_SGIS_point_parameters
    [
      'PointParameterfSGIS',
      'PointParameterfvSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_point_parameters


  def self.define_ext_command_GL_SGIS_sharpen_texture
    GL::GL_FUNCTION_SYMBOLS << :SharpenTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:SharpenTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SharpenTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:SharpenTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.SharpenTexFuncSGIS(_target_, _n_, _points_)
        GL_FUNCTIONS_MAP[:SharpenTexFuncSGIS].call(_target_, _n_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetSharpenTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:GetSharpenTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetSharpenTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:GetSharpenTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetSharpenTexFuncSGIS(_target_, _points_)
        GL_FUNCTIONS_MAP[:GetSharpenTexFuncSGIS].call(_target_, _points_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_sharpen_texture

  def self.get_ext_command_GL_SGIS_sharpen_texture
    [
      'SharpenTexFuncSGIS',
      'GetSharpenTexFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_sharpen_texture


  def self.define_ext_command_GL_SGIS_texture4D
    GL::GL_FUNCTION_SYMBOLS << :TexImage4DSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:TexImage4DSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexImage4DSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:TexImage4DSGIS)
    GL.module_eval(<<-SRC)
      def self.TexImage4DSGIS(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _size4d_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TexImage4DSGIS].call(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _size4d_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexSubImage4DSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:TexSubImage4DSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexSubImage4DSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:TexSubImage4DSGIS)
    GL.module_eval(<<-SRC)
      def self.TexSubImage4DSGIS(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _woffset_, _width_, _height_, _depth_, _size4d_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:TexSubImage4DSGIS].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _woffset_, _width_, _height_, _depth_, _size4d_, _format_, _type_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_texture4D

  def self.get_ext_command_GL_SGIS_texture4D
    [
      'TexImage4DSGIS',
      'TexSubImage4DSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_texture4D


  def self.define_ext_command_GL_SGIS_texture_border_clamp
  end # self.define_ext_command_GL_SGIS_texture_border_clamp

  def self.get_ext_command_GL_SGIS_texture_border_clamp
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_border_clamp


  def self.define_ext_command_GL_SGIS_texture_color_mask
    GL::GL_FUNCTION_SYMBOLS << :TextureColorMaskSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:TextureColorMaskSGIS] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TextureColorMaskSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:TextureColorMaskSGIS)
    GL.module_eval(<<-SRC)
      def self.TextureColorMaskSGIS(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:TextureColorMaskSGIS].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_texture_color_mask

  def self.get_ext_command_GL_SGIS_texture_color_mask
    [
      'TextureColorMaskSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_texture_color_mask


  def self.define_ext_command_GL_SGIS_texture_edge_clamp
  end # self.define_ext_command_GL_SGIS_texture_edge_clamp

  def self.get_ext_command_GL_SGIS_texture_edge_clamp
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_edge_clamp


  def self.define_ext_command_GL_SGIS_texture_filter4
    GL::GL_FUNCTION_SYMBOLS << :GetTexFilterFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:GetTexFilterFuncSGIS] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetTexFilterFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:GetTexFilterFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetTexFilterFuncSGIS(_target_, _filter_, _weights_)
        GL_FUNCTIONS_MAP[:GetTexFilterFuncSGIS].call(_target_, _filter_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexFilterFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:TexFilterFuncSGIS] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexFilterFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:TexFilterFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.TexFilterFuncSGIS(_target_, _filter_, _n_, _weights_)
        GL_FUNCTIONS_MAP[:TexFilterFuncSGIS].call(_target_, _filter_, _n_, _weights_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_texture_filter4

  def self.get_ext_command_GL_SGIS_texture_filter4
    [
      'GetTexFilterFuncSGIS',
      'TexFilterFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_texture_filter4


  def self.define_ext_command_GL_SGIS_texture_lod
  end # self.define_ext_command_GL_SGIS_texture_lod

  def self.get_ext_command_GL_SGIS_texture_lod
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_lod


  def self.define_ext_command_GL_SGIS_texture_select
  end # self.define_ext_command_GL_SGIS_texture_select

  def self.get_ext_command_GL_SGIS_texture_select
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_select


  def self.define_ext_command_GL_SGIX_async
    GL::GL_FUNCTION_SYMBOLS << :AsyncMarkerSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:AsyncMarkerSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:AsyncMarkerSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:AsyncMarkerSGIX)
    GL.module_eval(<<-SRC)
      def self.AsyncMarkerSGIX(_marker_)
        GL_FUNCTIONS_MAP[:AsyncMarkerSGIX].call(_marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FinishAsyncSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FinishAsyncSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FinishAsyncSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:FinishAsyncSGIX)
    GL.module_eval(<<-SRC)
      def self.FinishAsyncSGIX(_markerp_)
        GL_FUNCTIONS_MAP[:FinishAsyncSGIX].call(_markerp_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PollAsyncSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:PollAsyncSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PollAsyncSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:PollAsyncSGIX)
    GL.module_eval(<<-SRC)
      def self.PollAsyncSGIX(_markerp_)
        GL_FUNCTIONS_MAP[:PollAsyncSGIX].call(_markerp_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GenAsyncMarkersSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GenAsyncMarkersSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GenAsyncMarkersSGIX] = -Fiddle::TYPE_INT
    GL.bind_command(:GenAsyncMarkersSGIX)
    GL.module_eval(<<-SRC)
      def self.GenAsyncMarkersSGIX(_range_)
        GL_FUNCTIONS_MAP[:GenAsyncMarkersSGIX].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeleteAsyncMarkersSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:DeleteAsyncMarkersSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeleteAsyncMarkersSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:DeleteAsyncMarkersSGIX)
    GL.module_eval(<<-SRC)
      def self.DeleteAsyncMarkersSGIX(_marker_, _range_)
        GL_FUNCTIONS_MAP[:DeleteAsyncMarkersSGIX].call(_marker_, _range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :IsAsyncMarkerSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:IsAsyncMarkerSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IsAsyncMarkerSGIX] = -Fiddle::TYPE_CHAR
    GL.bind_command(:IsAsyncMarkerSGIX)
    GL.module_eval(<<-SRC)
      def self.IsAsyncMarkerSGIX(_marker_)
        GL_FUNCTIONS_MAP[:IsAsyncMarkerSGIX].call(_marker_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_async

  def self.get_ext_command_GL_SGIX_async
    [
      'AsyncMarkerSGIX',
      'FinishAsyncSGIX',
      'PollAsyncSGIX',
      'GenAsyncMarkersSGIX',
      'DeleteAsyncMarkersSGIX',
      'IsAsyncMarkerSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_async


  def self.define_ext_command_GL_SGIX_async_histogram
  end # self.define_ext_command_GL_SGIX_async_histogram

  def self.get_ext_command_GL_SGIX_async_histogram
    [
    ]
  end # self.get_ext_command_GL_SGIX_async_histogram


  def self.define_ext_command_GL_SGIX_async_pixel
  end # self.define_ext_command_GL_SGIX_async_pixel

  def self.get_ext_command_GL_SGIX_async_pixel
    [
    ]
  end # self.get_ext_command_GL_SGIX_async_pixel


  def self.define_ext_command_GL_SGIX_blend_alpha_minmax
  end # self.define_ext_command_GL_SGIX_blend_alpha_minmax

  def self.get_ext_command_GL_SGIX_blend_alpha_minmax
    [
    ]
  end # self.get_ext_command_GL_SGIX_blend_alpha_minmax


  def self.define_ext_command_GL_SGIX_calligraphic_fragment
  end # self.define_ext_command_GL_SGIX_calligraphic_fragment

  def self.get_ext_command_GL_SGIX_calligraphic_fragment
    [
    ]
  end # self.get_ext_command_GL_SGIX_calligraphic_fragment


  def self.define_ext_command_GL_SGIX_clipmap
  end # self.define_ext_command_GL_SGIX_clipmap

  def self.get_ext_command_GL_SGIX_clipmap
    [
    ]
  end # self.get_ext_command_GL_SGIX_clipmap


  def self.define_ext_command_GL_SGIX_convolution_accuracy
  end # self.define_ext_command_GL_SGIX_convolution_accuracy

  def self.get_ext_command_GL_SGIX_convolution_accuracy
    [
    ]
  end # self.get_ext_command_GL_SGIX_convolution_accuracy


  def self.define_ext_command_GL_SGIX_depth_pass_instrument
  end # self.define_ext_command_GL_SGIX_depth_pass_instrument

  def self.get_ext_command_GL_SGIX_depth_pass_instrument
    [
    ]
  end # self.get_ext_command_GL_SGIX_depth_pass_instrument


  def self.define_ext_command_GL_SGIX_depth_texture
  end # self.define_ext_command_GL_SGIX_depth_texture

  def self.get_ext_command_GL_SGIX_depth_texture
    [
    ]
  end # self.get_ext_command_GL_SGIX_depth_texture


  def self.define_ext_command_GL_SGIX_flush_raster
    GL::GL_FUNCTION_SYMBOLS << :FlushRasterSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FlushRasterSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:FlushRasterSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FlushRasterSGIX)
    GL.module_eval(<<-SRC)
      def self.FlushRasterSGIX()
        GL_FUNCTIONS_MAP[:FlushRasterSGIX].call()
      end
    SRC
  end # self.define_ext_command_GL_SGIX_flush_raster

  def self.get_ext_command_GL_SGIX_flush_raster
    [
      'FlushRasterSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_flush_raster


  def self.define_ext_command_GL_SGIX_fog_offset
  end # self.define_ext_command_GL_SGIX_fog_offset

  def self.get_ext_command_GL_SGIX_fog_offset
    [
    ]
  end # self.get_ext_command_GL_SGIX_fog_offset


  def self.define_ext_command_GL_SGIX_fragment_lighting
    GL::GL_FUNCTION_SYMBOLS << :FragmentColorMaterialSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentColorMaterialSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentColorMaterialSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentColorMaterialSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentColorMaterialSGIX(_face_, _mode_)
        GL_FUNCTIONS_MAP[:FragmentColorMaterialSGIX].call(_face_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightfSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightfSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightfSGIX(_light_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:FragmentLightfSGIX].call(_light_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightfvSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightfvSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:FragmentLightfvSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightiSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightiSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightiSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightiSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightiSGIX(_light_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:FragmentLightiSGIX].call(_light_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightivSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightivSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:FragmentLightivSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightModelfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightModelfSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightModelfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightModelfSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModelfSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:FragmentLightModelfSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightModelfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightModelfvSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightModelfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightModelfvSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModelfvSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:FragmentLightModelfvSGIX].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightModeliSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightModeliSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightModeliSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightModeliSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModeliSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:FragmentLightModeliSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentLightModelivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentLightModelivSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentLightModelivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentLightModelivSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModelivSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:FragmentLightModelivSGIX].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentMaterialfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentMaterialfSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentMaterialfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentMaterialfSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialfSGIX(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:FragmentMaterialfSGIX].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentMaterialfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentMaterialfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentMaterialfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentMaterialfvSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialfvSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:FragmentMaterialfvSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentMaterialiSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentMaterialiSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentMaterialiSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentMaterialiSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialiSGIX(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:FragmentMaterialiSGIX].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :FragmentMaterialivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FragmentMaterialivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FragmentMaterialivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FragmentMaterialivSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialivSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:FragmentMaterialivSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFragmentLightfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFragmentLightfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFragmentLightfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFragmentLightfvSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentLightfvSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFragmentLightfvSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFragmentLightivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFragmentLightivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFragmentLightivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFragmentLightivSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentLightivSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFragmentLightivSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFragmentMaterialfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFragmentMaterialfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFragmentMaterialfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFragmentMaterialfvSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentMaterialfvSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFragmentMaterialfvSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetFragmentMaterialivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetFragmentMaterialivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetFragmentMaterialivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:GetFragmentMaterialivSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentMaterialivSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetFragmentMaterialivSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LightEnviSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:LightEnviSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LightEnviSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:LightEnviSGIX)
    GL.module_eval(<<-SRC)
      def self.LightEnviSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:LightEnviSGIX].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_fragment_lighting

  def self.get_ext_command_GL_SGIX_fragment_lighting
    [
      'FragmentColorMaterialSGIX',
      'FragmentLightfSGIX',
      'FragmentLightfvSGIX',
      'FragmentLightiSGIX',
      'FragmentLightivSGIX',
      'FragmentLightModelfSGIX',
      'FragmentLightModelfvSGIX',
      'FragmentLightModeliSGIX',
      'FragmentLightModelivSGIX',
      'FragmentMaterialfSGIX',
      'FragmentMaterialfvSGIX',
      'FragmentMaterialiSGIX',
      'FragmentMaterialivSGIX',
      'GetFragmentLightfvSGIX',
      'GetFragmentLightivSGIX',
      'GetFragmentMaterialfvSGIX',
      'GetFragmentMaterialivSGIX',
      'LightEnviSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_fragment_lighting


  def self.define_ext_command_GL_SGIX_framezoom
    GL::GL_FUNCTION_SYMBOLS << :FrameZoomSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:FrameZoomSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:FrameZoomSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:FrameZoomSGIX)
    GL.module_eval(<<-SRC)
      def self.FrameZoomSGIX(_factor_)
        GL_FUNCTIONS_MAP[:FrameZoomSGIX].call(_factor_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_framezoom

  def self.get_ext_command_GL_SGIX_framezoom
    [
      'FrameZoomSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_framezoom


  def self.define_ext_command_GL_SGIX_igloo_interface
    GL::GL_FUNCTION_SYMBOLS << :IglooInterfaceSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:IglooInterfaceSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:IglooInterfaceSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:IglooInterfaceSGIX)
    GL.module_eval(<<-SRC)
      def self.IglooInterfaceSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:IglooInterfaceSGIX].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_igloo_interface

  def self.get_ext_command_GL_SGIX_igloo_interface
    [
      'IglooInterfaceSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_igloo_interface


  def self.define_ext_command_GL_SGIX_instruments
    GL::GL_FUNCTION_SYMBOLS << :GetInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetInstrumentsSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetInstrumentsSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:GetInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.GetInstrumentsSGIX()
        GL_FUNCTIONS_MAP[:GetInstrumentsSGIX].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :InstrumentsBufferSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:InstrumentsBufferSGIX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:InstrumentsBufferSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:InstrumentsBufferSGIX)
    GL.module_eval(<<-SRC)
      def self.InstrumentsBufferSGIX(_size_, _buffer_)
        GL_FUNCTIONS_MAP[:InstrumentsBufferSGIX].call(_size_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :PollInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:PollInstrumentsSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PollInstrumentsSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:PollInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.PollInstrumentsSGIX(_marker_p_)
        GL_FUNCTIONS_MAP[:PollInstrumentsSGIX].call(_marker_p_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReadInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:ReadInstrumentsSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReadInstrumentsSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:ReadInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.ReadInstrumentsSGIX(_marker_)
        GL_FUNCTIONS_MAP[:ReadInstrumentsSGIX].call(_marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StartInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:StartInstrumentsSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:StartInstrumentsSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:StartInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.StartInstrumentsSGIX()
        GL_FUNCTIONS_MAP[:StartInstrumentsSGIX].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :StopInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:StopInstrumentsSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:StopInstrumentsSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:StopInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.StopInstrumentsSGIX(_marker_)
        GL_FUNCTIONS_MAP[:StopInstrumentsSGIX].call(_marker_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_instruments

  def self.get_ext_command_GL_SGIX_instruments
    [
      'GetInstrumentsSGIX',
      'InstrumentsBufferSGIX',
      'PollInstrumentsSGIX',
      'ReadInstrumentsSGIX',
      'StartInstrumentsSGIX',
      'StopInstrumentsSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_instruments


  def self.define_ext_command_GL_SGIX_interlace
  end # self.define_ext_command_GL_SGIX_interlace

  def self.get_ext_command_GL_SGIX_interlace
    [
    ]
  end # self.get_ext_command_GL_SGIX_interlace


  def self.define_ext_command_GL_SGIX_ir_instrument1
  end # self.define_ext_command_GL_SGIX_ir_instrument1

  def self.get_ext_command_GL_SGIX_ir_instrument1
    [
    ]
  end # self.get_ext_command_GL_SGIX_ir_instrument1


  def self.define_ext_command_GL_SGIX_list_priority
    GL::GL_FUNCTION_SYMBOLS << :GetListParameterfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetListParameterfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetListParameterfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:GetListParameterfvSGIX)
    GL.module_eval(<<-SRC)
      def self.GetListParameterfvSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetListParameterfvSGIX].call(_list_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetListParameterivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:GetListParameterivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetListParameterivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:GetListParameterivSGIX)
    GL.module_eval(<<-SRC)
      def self.GetListParameterivSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetListParameterivSGIX].call(_list_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ListParameterfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:ListParameterfSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ListParameterfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:ListParameterfSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameterfSGIX(_list_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:ListParameterfSGIX].call(_list_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ListParameterfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:ListParameterfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ListParameterfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:ListParameterfvSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameterfvSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ListParameterfvSGIX].call(_list_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ListParameteriSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:ListParameteriSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ListParameteriSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:ListParameteriSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameteriSGIX(_list_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:ListParameteriSGIX].call(_list_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ListParameterivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:ListParameterivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ListParameterivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:ListParameterivSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameterivSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ListParameterivSGIX].call(_list_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_list_priority

  def self.get_ext_command_GL_SGIX_list_priority
    [
      'GetListParameterfvSGIX',
      'GetListParameterivSGIX',
      'ListParameterfSGIX',
      'ListParameterfvSGIX',
      'ListParameteriSGIX',
      'ListParameterivSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_list_priority


  def self.define_ext_command_GL_SGIX_pixel_texture
    GL::GL_FUNCTION_SYMBOLS << :PixelTexGenSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:PixelTexGenSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:PixelTexGenSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:PixelTexGenSGIX)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenSGIX(_mode_)
        GL_FUNCTIONS_MAP[:PixelTexGenSGIX].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_pixel_texture

  def self.get_ext_command_GL_SGIX_pixel_texture
    [
      'PixelTexGenSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_pixel_texture


  def self.define_ext_command_GL_SGIX_pixel_tiles
  end # self.define_ext_command_GL_SGIX_pixel_tiles

  def self.get_ext_command_GL_SGIX_pixel_tiles
    [
    ]
  end # self.get_ext_command_GL_SGIX_pixel_tiles


  def self.define_ext_command_GL_SGIX_polynomial_ffd
    GL::GL_FUNCTION_SYMBOLS << :DeformationMap3dSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:DeformationMap3dSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeformationMap3dSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:DeformationMap3dSGIX)
    GL.module_eval(<<-SRC)
      def self.DeformationMap3dSGIX(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
        GL_FUNCTIONS_MAP[:DeformationMap3dSGIX].call(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeformationMap3fSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:DeformationMap3fSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeformationMap3fSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:DeformationMap3fSGIX)
    GL.module_eval(<<-SRC)
      def self.DeformationMap3fSGIX(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
        GL_FUNCTIONS_MAP[:DeformationMap3fSGIX].call(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :DeformSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:DeformSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DeformSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:DeformSGIX)
    GL.module_eval(<<-SRC)
      def self.DeformSGIX(_mask_)
        GL_FUNCTIONS_MAP[:DeformSGIX].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :LoadIdentityDeformationMapSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:LoadIdentityDeformationMapSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:LoadIdentityDeformationMapSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:LoadIdentityDeformationMapSGIX)
    GL.module_eval(<<-SRC)
      def self.LoadIdentityDeformationMapSGIX(_mask_)
        GL_FUNCTIONS_MAP[:LoadIdentityDeformationMapSGIX].call(_mask_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_polynomial_ffd

  def self.get_ext_command_GL_SGIX_polynomial_ffd
    [
      'DeformationMap3dSGIX',
      'DeformationMap3fSGIX',
      'DeformSGIX',
      'LoadIdentityDeformationMapSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_polynomial_ffd


  def self.define_ext_command_GL_SGIX_reference_plane
    GL::GL_FUNCTION_SYMBOLS << :ReferencePlaneSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:ReferencePlaneSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReferencePlaneSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:ReferencePlaneSGIX)
    GL.module_eval(<<-SRC)
      def self.ReferencePlaneSGIX(_equation_)
        GL_FUNCTIONS_MAP[:ReferencePlaneSGIX].call(_equation_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_reference_plane

  def self.get_ext_command_GL_SGIX_reference_plane
    [
      'ReferencePlaneSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_reference_plane


  def self.define_ext_command_GL_SGIX_resample
  end # self.define_ext_command_GL_SGIX_resample

  def self.get_ext_command_GL_SGIX_resample
    [
    ]
  end # self.get_ext_command_GL_SGIX_resample


  def self.define_ext_command_GL_SGIX_scalebias_hint
  end # self.define_ext_command_GL_SGIX_scalebias_hint

  def self.get_ext_command_GL_SGIX_scalebias_hint
    [
    ]
  end # self.get_ext_command_GL_SGIX_scalebias_hint


  def self.define_ext_command_GL_SGIX_shadow
  end # self.define_ext_command_GL_SGIX_shadow

  def self.get_ext_command_GL_SGIX_shadow
    [
    ]
  end # self.get_ext_command_GL_SGIX_shadow


  def self.define_ext_command_GL_SGIX_shadow_ambient
  end # self.define_ext_command_GL_SGIX_shadow_ambient

  def self.get_ext_command_GL_SGIX_shadow_ambient
    [
    ]
  end # self.get_ext_command_GL_SGIX_shadow_ambient


  def self.define_ext_command_GL_SGIX_sprite
    GL::GL_FUNCTION_SYMBOLS << :SpriteParameterfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:SpriteParameterfSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SpriteParameterfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:SpriteParameterfSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameterfSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:SpriteParameterfSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SpriteParameterfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:SpriteParameterfvSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SpriteParameterfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:SpriteParameterfvSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameterfvSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:SpriteParameterfvSGIX].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SpriteParameteriSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:SpriteParameteriSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SpriteParameteriSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:SpriteParameteriSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameteriSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:SpriteParameteriSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :SpriteParameterivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:SpriteParameterivSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:SpriteParameterivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:SpriteParameterivSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameterivSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:SpriteParameterivSGIX].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_sprite

  def self.get_ext_command_GL_SGIX_sprite
    [
      'SpriteParameterfSGIX',
      'SpriteParameterfvSGIX',
      'SpriteParameteriSGIX',
      'SpriteParameterivSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_sprite


  def self.define_ext_command_GL_SGIX_subsample
  end # self.define_ext_command_GL_SGIX_subsample

  def self.get_ext_command_GL_SGIX_subsample
    [
    ]
  end # self.get_ext_command_GL_SGIX_subsample


  def self.define_ext_command_GL_SGIX_tag_sample_buffer
    GL::GL_FUNCTION_SYMBOLS << :TagSampleBufferSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:TagSampleBufferSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:TagSampleBufferSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:TagSampleBufferSGIX)
    GL.module_eval(<<-SRC)
      def self.TagSampleBufferSGIX()
        GL_FUNCTIONS_MAP[:TagSampleBufferSGIX].call()
      end
    SRC
  end # self.define_ext_command_GL_SGIX_tag_sample_buffer

  def self.get_ext_command_GL_SGIX_tag_sample_buffer
    [
      'TagSampleBufferSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_tag_sample_buffer


  def self.define_ext_command_GL_SGIX_texture_add_env
  end # self.define_ext_command_GL_SGIX_texture_add_env

  def self.get_ext_command_GL_SGIX_texture_add_env
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_add_env


  def self.define_ext_command_GL_SGIX_texture_coordinate_clamp
  end # self.define_ext_command_GL_SGIX_texture_coordinate_clamp

  def self.get_ext_command_GL_SGIX_texture_coordinate_clamp
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_coordinate_clamp


  def self.define_ext_command_GL_SGIX_texture_lod_bias
  end # self.define_ext_command_GL_SGIX_texture_lod_bias

  def self.get_ext_command_GL_SGIX_texture_lod_bias
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_lod_bias


  def self.define_ext_command_GL_SGIX_texture_multi_buffer
  end # self.define_ext_command_GL_SGIX_texture_multi_buffer

  def self.get_ext_command_GL_SGIX_texture_multi_buffer
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_multi_buffer


  def self.define_ext_command_GL_SGIX_texture_scale_bias
  end # self.define_ext_command_GL_SGIX_texture_scale_bias

  def self.get_ext_command_GL_SGIX_texture_scale_bias
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_scale_bias


  def self.define_ext_command_GL_SGIX_vertex_preclip
  end # self.define_ext_command_GL_SGIX_vertex_preclip

  def self.get_ext_command_GL_SGIX_vertex_preclip
    [
    ]
  end # self.get_ext_command_GL_SGIX_vertex_preclip


  def self.define_ext_command_GL_SGIX_ycrcb
  end # self.define_ext_command_GL_SGIX_ycrcb

  def self.get_ext_command_GL_SGIX_ycrcb
    [
    ]
  end # self.get_ext_command_GL_SGIX_ycrcb


  def self.define_ext_command_GL_SGIX_ycrcb_subsample
  end # self.define_ext_command_GL_SGIX_ycrcb_subsample

  def self.get_ext_command_GL_SGIX_ycrcb_subsample
    [
    ]
  end # self.get_ext_command_GL_SGIX_ycrcb_subsample


  def self.define_ext_command_GL_SGIX_ycrcba
  end # self.define_ext_command_GL_SGIX_ycrcba

  def self.get_ext_command_GL_SGIX_ycrcba
    [
    ]
  end # self.get_ext_command_GL_SGIX_ycrcba


  def self.define_ext_command_GL_SGI_color_matrix
  end # self.define_ext_command_GL_SGI_color_matrix

  def self.get_ext_command_GL_SGI_color_matrix
    [
    ]
  end # self.get_ext_command_GL_SGI_color_matrix


  def self.define_ext_command_GL_SGI_color_table
    GL::GL_FUNCTION_SYMBOLS << :ColorTableSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTableSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTableSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTableSGI)
    GL.module_eval(<<-SRC)
      def self.ColorTableSGI(_target_, _internalformat_, _width_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:ColorTableSGI].call(_target_, _internalformat_, _width_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorTableParameterfvSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTableParameterfvSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTableParameterfvSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTableParameterfvSGI)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameterfvSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ColorTableParameterfvSGI].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ColorTableParameterivSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:ColorTableParameterivSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ColorTableParameterivSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:ColorTableParameterivSGI)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameterivSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:ColorTableParameterivSGI].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :CopyColorTableSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:CopyColorTableSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:CopyColorTableSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:CopyColorTableSGI)
    GL.module_eval(<<-SRC)
      def self.CopyColorTableSGI(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:CopyColorTableSGI].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableSGI)
    GL.module_eval(<<-SRC)
      def self.GetColorTableSGI(_target_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:GetColorTableSGI].call(_target_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableParameterfvSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableParameterfvSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableParameterfvSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableParameterfvSGI)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterfvSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetColorTableParameterfvSGI].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GetColorTableParameterivSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:GetColorTableParameterivSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GetColorTableParameterivSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:GetColorTableParameterivSGI)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterivSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:GetColorTableParameterivSGI].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGI_color_table

  def self.get_ext_command_GL_SGI_color_table
    [
      'ColorTableSGI',
      'ColorTableParameterfvSGI',
      'ColorTableParameterivSGI',
      'CopyColorTableSGI',
      'GetColorTableSGI',
      'GetColorTableParameterfvSGI',
      'GetColorTableParameterivSGI',
    ]
  end # self.get_ext_command_GL_SGI_color_table


  def self.define_ext_command_GL_SGI_texture_color_table
  end # self.define_ext_command_GL_SGI_texture_color_table

  def self.get_ext_command_GL_SGI_texture_color_table
    [
    ]
  end # self.get_ext_command_GL_SGI_texture_color_table


  def self.define_ext_command_GL_SUNX_constant_data
    GL::GL_FUNCTION_SYMBOLS << :FinishTextureSUNX
    GL::GL_FUNCTIONS_ARGS_MAP[:FinishTextureSUNX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:FinishTextureSUNX] = Fiddle::TYPE_VOID
    GL.bind_command(:FinishTextureSUNX)
    GL.module_eval(<<-SRC)
      def self.FinishTextureSUNX()
        GL_FUNCTIONS_MAP[:FinishTextureSUNX].call()
      end
    SRC
  end # self.define_ext_command_GL_SUNX_constant_data

  def self.get_ext_command_GL_SUNX_constant_data
    [
      'FinishTextureSUNX',
    ]
  end # self.get_ext_command_GL_SUNX_constant_data


  def self.define_ext_command_GL_SUN_convolution_border_modes
  end # self.define_ext_command_GL_SUN_convolution_border_modes

  def self.get_ext_command_GL_SUN_convolution_border_modes
    [
    ]
  end # self.get_ext_command_GL_SUN_convolution_border_modes


  def self.define_ext_command_GL_SUN_global_alpha
    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactorbSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactorbSUN] = [Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactorbSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactorbSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorbSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactorbSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactorsSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactorsSUN] = [Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactorsSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactorsSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorsSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactorsSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactoriSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactoriSUN] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactoriSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactoriSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactoriSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactoriSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactorfSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactorfSUN] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactorfSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactorfSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorfSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactorfSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactordSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactordSUN] = [Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactordSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactordSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactordSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactordSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactorubSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactorubSUN] = [-Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactorubSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactorubSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorubSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactorubSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactorusSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactorusSUN] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactorusSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactorusSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorusSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactorusSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :GlobalAlphaFactoruiSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:GlobalAlphaFactoruiSUN] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:GlobalAlphaFactoruiSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:GlobalAlphaFactoruiSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactoruiSUN(_factor_)
        GL_FUNCTIONS_MAP[:GlobalAlphaFactoruiSUN].call(_factor_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_global_alpha

  def self.get_ext_command_GL_SUN_global_alpha
    [
      'GlobalAlphaFactorbSUN',
      'GlobalAlphaFactorsSUN',
      'GlobalAlphaFactoriSUN',
      'GlobalAlphaFactorfSUN',
      'GlobalAlphaFactordSUN',
      'GlobalAlphaFactorubSUN',
      'GlobalAlphaFactorusSUN',
      'GlobalAlphaFactoruiSUN',
    ]
  end # self.get_ext_command_GL_SUN_global_alpha


  def self.define_ext_command_GL_SUN_mesh_array
    GL::GL_FUNCTION_SYMBOLS << :DrawMeshArraysSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:DrawMeshArraysSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:DrawMeshArraysSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:DrawMeshArraysSUN)
    GL.module_eval(<<-SRC)
      def self.DrawMeshArraysSUN(_mode_, _first_, _count_, _width_)
        GL_FUNCTIONS_MAP[:DrawMeshArraysSUN].call(_mode_, _first_, _count_, _width_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_mesh_array

  def self.get_ext_command_GL_SUN_mesh_array
    [
      'DrawMeshArraysSUN',
    ]
  end # self.get_ext_command_GL_SUN_mesh_array


  def self.define_ext_command_GL_SUN_slice_accum
  end # self.define_ext_command_GL_SUN_slice_accum

  def self.get_ext_command_GL_SUN_slice_accum
    [
    ]
  end # self.get_ext_command_GL_SUN_slice_accum


  def self.define_ext_command_GL_SUN_triangle_list
    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiSUN] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiSUN(_code_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeusSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeusSUN] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeusSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeusSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeusSUN(_code_)
        GL_FUNCTIONS_MAP[:ReplacementCodeusSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeubSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeubSUN] = [-Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeubSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeubSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeubSUN(_code_)
        GL_FUNCTIONS_MAP[:ReplacementCodeubSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuivSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuivSUN] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuivSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuivSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuivSUN(_code_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuivSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeusvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeusvSUN] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeusvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeusvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeusvSUN(_code_)
        GL_FUNCTIONS_MAP[:ReplacementCodeusvSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeubvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeubvSUN] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeubvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeubvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeubvSUN(_code_)
        GL_FUNCTIONS_MAP[:ReplacementCodeubvSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodePointerSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodePointerSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodePointerSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodePointerSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodePointerSUN(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:ReplacementCodePointerSUN].call(_type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_triangle_list

  def self.get_ext_command_GL_SUN_triangle_list
    [
      'ReplacementCodeuiSUN',
      'ReplacementCodeusSUN',
      'ReplacementCodeubSUN',
      'ReplacementCodeuivSUN',
      'ReplacementCodeusvSUN',
      'ReplacementCodeubvSUN',
      'ReplacementCodePointerSUN',
    ]
  end # self.get_ext_command_GL_SUN_triangle_list


  def self.define_ext_command_GL_SUN_vertex
    GL::GL_FUNCTION_SYMBOLS << :Color4ubVertex2fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4ubVertex2fSUN] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4ubVertex2fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4ubVertex2fSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex2fSUN(_r_, _g_, _b_, _a_, _x_, _y_)
        GL_FUNCTIONS_MAP[:Color4ubVertex2fSUN].call(_r_, _g_, _b_, _a_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4ubVertex2fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4ubVertex2fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4ubVertex2fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4ubVertex2fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex2fvSUN(_c_, _v_)
        GL_FUNCTIONS_MAP[:Color4ubVertex2fvSUN].call(_c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4ubVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4ubVertex3fSUN] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4ubVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4ubVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex3fSUN(_r_, _g_, _b_, _a_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Color4ubVertex3fSUN].call(_r_, _g_, _b_, _a_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4ubVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4ubVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4ubVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4ubVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex3fvSUN(_c_, _v_)
        GL_FUNCTIONS_MAP[:Color4ubVertex3fvSUN].call(_c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Color3fVertex3fSUN(_r_, _g_, _b_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Color3fVertex3fSUN].call(_r_, _g_, _b_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color3fVertex3fvSUN(_c_, _v_)
        GL_FUNCTIONS_MAP[:Color3fVertex3fvSUN].call(_c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Normal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Normal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Normal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Normal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Normal3fVertex3fSUN(_nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Normal3fVertex3fSUN].call(_nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Normal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Normal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Normal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Normal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Normal3fVertex3fvSUN(_n_, _v_)
        GL_FUNCTIONS_MAP[:Normal3fVertex3fvSUN].call(_n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4fNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Color4fNormal3fVertex3fSUN(_r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:Color4fNormal3fVertex3fSUN].call(_r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :Color4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:Color4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:Color4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:Color4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color4fNormal3fVertex3fvSUN(_c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:Color4fNormal3fVertex3fvSUN].call(_c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fVertex3fSUN(_s_, _t_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:TexCoord2fVertex3fSUN].call(_s_, _t_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fVertex3fvSUN(_tc_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord2fVertex3fvSUN].call(_tc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4fVertex4fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4fVertex4fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4fVertex4fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4fVertex4fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fVertex4fSUN(_s_, _t_, _p_, _q_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:TexCoord4fVertex4fSUN].call(_s_, _t_, _p_, _q_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4fVertex4fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4fVertex4fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4fVertex4fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4fVertex4fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fVertex4fvSUN(_tc_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord4fVertex4fvSUN].call(_tc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fColor4ubVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fColor4ubVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fColor4ubVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fColor4ubVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4ubVertex3fSUN(_s_, _t_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:TexCoord2fColor4ubVertex3fSUN].call(_s_, _t_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fColor4ubVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fColor4ubVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fColor4ubVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fColor4ubVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4ubVertex3fvSUN(_tc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord2fColor4ubVertex3fvSUN].call(_tc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fColor3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fColor3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fColor3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fColor3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor3fVertex3fSUN(_s_, _t_, _r_, _g_, _b_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:TexCoord2fColor3fVertex3fSUN].call(_s_, _t_, _r_, _g_, _b_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fColor3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fColor3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fColor3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fColor3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor3fVertex3fvSUN(_tc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord2fColor3fVertex3fvSUN].call(_tc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fNormal3fVertex3fSUN(_s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:TexCoord2fNormal3fVertex3fSUN].call(_s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fNormal3fVertex3fvSUN(_tc_, _n_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord2fNormal3fVertex3fvSUN].call(_tc_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fColor4fNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4fNormal3fVertex3fSUN(_s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:TexCoord2fColor4fNormal3fVertex3fSUN].call(_s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord2fColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord2fColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord2fColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord2fColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4fNormal3fVertex3fvSUN(_tc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord2fColor4fNormal3fVertex3fvSUN].call(_tc_, _c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4fColor4fNormal3fVertex4fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4fColor4fNormal3fVertex4fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4fColor4fNormal3fVertex4fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4fColor4fNormal3fVertex4fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fColor4fNormal3fVertex4fSUN(_s_, _t_, _p_, _q_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:TexCoord4fColor4fNormal3fVertex4fSUN].call(_s_, _t_, _p_, _q_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :TexCoord4fColor4fNormal3fVertex4fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:TexCoord4fColor4fNormal3fVertex4fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:TexCoord4fColor4fNormal3fVertex4fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:TexCoord4fColor4fNormal3fVertex4fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fColor4fNormal3fVertex4fvSUN(_tc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:TexCoord4fColor4fNormal3fVertex4fvSUN].call(_tc_, _c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiVertex3fSUN(_rc_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiVertex3fSUN].call(_rc_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiVertex3fvSUN(_rc_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiVertex3fvSUN].call(_rc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiColor4ubVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiColor4ubVertex3fSUN] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiColor4ubVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiColor4ubVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4ubVertex3fSUN(_rc_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiColor4ubVertex3fSUN].call(_rc_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiColor4ubVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiColor4ubVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiColor4ubVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiColor4ubVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4ubVertex3fvSUN(_rc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiColor4ubVertex3fvSUN].call(_rc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiColor3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiColor3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiColor3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiColor3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor3fVertex3fSUN(_rc_, _r_, _g_, _b_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiColor3fVertex3fSUN].call(_rc_, _r_, _g_, _b_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiColor3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiColor3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiColor3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiColor3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor3fVertex3fvSUN(_rc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiColor3fVertex3fvSUN].call(_rc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiNormal3fVertex3fSUN(_rc_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiNormal3fVertex3fSUN].call(_rc_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiNormal3fVertex3fvSUN(_rc_, _n_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiNormal3fVertex3fvSUN].call(_rc_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiColor4fNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4fNormal3fVertex3fSUN(_rc_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiColor4fNormal3fVertex3fSUN].call(_rc_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4fNormal3fVertex3fvSUN(_rc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiColor4fNormal3fVertex3fvSUN].call(_rc_, _c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiTexCoord2fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiTexCoord2fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiTexCoord2fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiTexCoord2fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fVertex3fSUN(_rc_, _s_, _t_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiTexCoord2fVertex3fSUN].call(_rc_, _s_, _t_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiTexCoord2fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiTexCoord2fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiTexCoord2fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiTexCoord2fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fVertex3fvSUN(_rc_, _tc_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiTexCoord2fVertex3fvSUN].call(_rc_, _tc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(_rc_, _s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN].call(_rc_, _s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(_rc_, _tc_, _n_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN].call(_rc_, _tc_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(_rc_, _s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN].call(_rc_, _s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(_rc_, _tc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN].call(_rc_, _tc_, _c_, _n_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_vertex

  def self.get_ext_command_GL_SUN_vertex
    [
      'Color4ubVertex2fSUN',
      'Color4ubVertex2fvSUN',
      'Color4ubVertex3fSUN',
      'Color4ubVertex3fvSUN',
      'Color3fVertex3fSUN',
      'Color3fVertex3fvSUN',
      'Normal3fVertex3fSUN',
      'Normal3fVertex3fvSUN',
      'Color4fNormal3fVertex3fSUN',
      'Color4fNormal3fVertex3fvSUN',
      'TexCoord2fVertex3fSUN',
      'TexCoord2fVertex3fvSUN',
      'TexCoord4fVertex4fSUN',
      'TexCoord4fVertex4fvSUN',
      'TexCoord2fColor4ubVertex3fSUN',
      'TexCoord2fColor4ubVertex3fvSUN',
      'TexCoord2fColor3fVertex3fSUN',
      'TexCoord2fColor3fVertex3fvSUN',
      'TexCoord2fNormal3fVertex3fSUN',
      'TexCoord2fNormal3fVertex3fvSUN',
      'TexCoord2fColor4fNormal3fVertex3fSUN',
      'TexCoord2fColor4fNormal3fVertex3fvSUN',
      'TexCoord4fColor4fNormal3fVertex4fSUN',
      'TexCoord4fColor4fNormal3fVertex4fvSUN',
      'ReplacementCodeuiVertex3fSUN',
      'ReplacementCodeuiVertex3fvSUN',
      'ReplacementCodeuiColor4ubVertex3fSUN',
      'ReplacementCodeuiColor4ubVertex3fvSUN',
      'ReplacementCodeuiColor3fVertex3fSUN',
      'ReplacementCodeuiColor3fVertex3fvSUN',
      'ReplacementCodeuiNormal3fVertex3fSUN',
      'ReplacementCodeuiNormal3fVertex3fvSUN',
      'ReplacementCodeuiColor4fNormal3fVertex3fSUN',
      'ReplacementCodeuiColor4fNormal3fVertex3fvSUN',
      'ReplacementCodeuiTexCoord2fVertex3fSUN',
      'ReplacementCodeuiTexCoord2fVertex3fvSUN',
      'ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN',
      'ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN',
      'ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN',
      'ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN',
    ]
  end # self.get_ext_command_GL_SUN_vertex


  def self.define_ext_command_GL_WIN_phong_shading
  end # self.define_ext_command_GL_WIN_phong_shading

  def self.get_ext_command_GL_WIN_phong_shading
    [
    ]
  end # self.get_ext_command_GL_WIN_phong_shading


  def self.define_ext_command_GL_WIN_specular_fog
  end # self.define_ext_command_GL_WIN_specular_fog

  def self.get_ext_command_GL_WIN_specular_fog
    [
    ]
  end # self.get_ext_command_GL_WIN_specular_fog


  def self.define_ext_command_GL_EXT_texture_shadow_lod
  end # self.define_ext_command_GL_EXT_texture_shadow_lod

  def self.get_ext_command_GL_EXT_texture_shadow_lod
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_shadow_lod


end
