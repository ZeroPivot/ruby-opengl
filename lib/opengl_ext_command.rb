# opengl-bindings
# * http://rubygems.org/gems/opengl-bindings
# * http://github.com/vaiorabbit/ruby-opengl
#
# [NOTICE] This is an automatically generated file.

require 'fiddle'

module GLExt

  def self.define_ext_command_GL_3DFX_multisample
  end # self.define_ext_command_GL_3DFX_multisample

  def self.get_ext_command_GL_3DFX_multisample
    [
    ]
  end # self.get_ext_command_GL_3DFX_multisample


  def self.define_ext_command_GL_3DFX_tbuffer
    GL::GL_FUNCTION_SYMBOLS << :glTbufferMask3DFX
    GL::GL_FUNCTIONS_ARGS_MAP[:glTbufferMask3DFX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTbufferMask3DFX] = Fiddle::TYPE_VOID
    GL.bind_command(:glTbufferMask3DFX)
    GL.module_eval(<<-SRC)
      def self.TbufferMask3DFX(_mask_)
        GL_FUNCTIONS_MAP[:glTbufferMask3DFX].call(_mask_)
      end
    SRC
  end # self.define_ext_command_GL_3DFX_tbuffer

  def self.get_ext_command_GL_3DFX_tbuffer
    [
      'glTbufferMask3DFX',
    ]
  end # self.get_ext_command_GL_3DFX_tbuffer


  def self.define_ext_command_GL_3DFX_texture_compression_FXT1
  end # self.define_ext_command_GL_3DFX_texture_compression_FXT1

  def self.get_ext_command_GL_3DFX_texture_compression_FXT1
    [
    ]
  end # self.get_ext_command_GL_3DFX_texture_compression_FXT1


  def self.define_ext_command_GL_AMD_blend_minmax_factor
  end # self.define_ext_command_GL_AMD_blend_minmax_factor

  def self.get_ext_command_GL_AMD_blend_minmax_factor
    [
    ]
  end # self.get_ext_command_GL_AMD_blend_minmax_factor


  def self.define_ext_command_GL_AMD_conservative_depth
  end # self.define_ext_command_GL_AMD_conservative_depth

  def self.get_ext_command_GL_AMD_conservative_depth
    [
    ]
  end # self.get_ext_command_GL_AMD_conservative_depth


  def self.define_ext_command_GL_AMD_debug_output
    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageEnableAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageEnableAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageEnableAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageEnableAMD)
    GL.module_eval(<<-SRC)
      def self.DebugMessageEnableAMD(_category_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:glDebugMessageEnableAMD].call(_category_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageInsertAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageInsertAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageInsertAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageInsertAMD)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsertAMD(_category_, _severity_, _id_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:glDebugMessageInsertAMD].call(_category_, _severity_, _id_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageCallbackAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageCallbackAMD] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageCallbackAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageCallbackAMD)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallbackAMD(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:glDebugMessageCallbackAMD].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDebugMessageLogAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDebugMessageLogAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDebugMessageLogAMD] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetDebugMessageLogAMD)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLogAMD(_count_, _bufSize_, _categories_, _severities_, _ids_, _lengths_, _message_)
        GL_FUNCTIONS_MAP[:glGetDebugMessageLogAMD].call(_count_, _bufSize_, _categories_, _severities_, _ids_, _lengths_, _message_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_debug_output

  def self.get_ext_command_GL_AMD_debug_output
    [
      'glDebugMessageEnableAMD',
      'glDebugMessageInsertAMD',
      'glDebugMessageCallbackAMD',
      'glGetDebugMessageLogAMD',
    ]
  end # self.get_ext_command_GL_AMD_debug_output


  def self.define_ext_command_GL_AMD_depth_clamp_separate
  end # self.define_ext_command_GL_AMD_depth_clamp_separate

  def self.get_ext_command_GL_AMD_depth_clamp_separate
    [
    ]
  end # self.get_ext_command_GL_AMD_depth_clamp_separate


  def self.define_ext_command_GL_AMD_draw_buffers_blend
    GL::GL_FUNCTION_SYMBOLS << :glBlendFuncIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendFuncIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendFuncIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendFuncIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendFuncIndexedAMD(_buf_, _src_, _dst_)
        GL_FUNCTIONS_MAP[:glBlendFuncIndexedAMD].call(_buf_, _src_, _dst_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendFuncSeparateIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendFuncSeparateIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendFuncSeparateIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendFuncSeparateIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateIndexedAMD(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
        GL_FUNCTIONS_MAP[:glBlendFuncSeparateIndexedAMD].call(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendEquationIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquationIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquationIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquationIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendEquationIndexedAMD(_buf_, _mode_)
        GL_FUNCTIONS_MAP[:glBlendEquationIndexedAMD].call(_buf_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendEquationSeparateIndexedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquationSeparateIndexedAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquationSeparateIndexedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquationSeparateIndexedAMD)
    GL.module_eval(<<-SRC)
      def self.BlendEquationSeparateIndexedAMD(_buf_, _modeRGB_, _modeAlpha_)
        GL_FUNCTIONS_MAP[:glBlendEquationSeparateIndexedAMD].call(_buf_, _modeRGB_, _modeAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_draw_buffers_blend

  def self.get_ext_command_GL_AMD_draw_buffers_blend
    [
      'glBlendFuncIndexedAMD',
      'glBlendFuncSeparateIndexedAMD',
      'glBlendEquationIndexedAMD',
      'glBlendEquationSeparateIndexedAMD',
    ]
  end # self.get_ext_command_GL_AMD_draw_buffers_blend


  def self.define_ext_command_GL_AMD_framebuffer_multisample_advanced
    GL::GL_FUNCTION_SYMBOLS << :glRenderbufferStorageMultisampleAdvancedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderbufferStorageMultisampleAdvancedAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderbufferStorageMultisampleAdvancedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderbufferStorageMultisampleAdvancedAMD)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisampleAdvancedAMD(_target_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glRenderbufferStorageMultisampleAdvancedAMD].call(_target_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedRenderbufferStorageMultisampleAdvancedAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedRenderbufferStorageMultisampleAdvancedAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedRenderbufferStorageMultisampleAdvancedAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedRenderbufferStorageMultisampleAdvancedAMD)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisampleAdvancedAMD(_renderbuffer_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glNamedRenderbufferStorageMultisampleAdvancedAMD].call(_renderbuffer_, _samples_, _storageSamples_, _internalformat_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_framebuffer_multisample_advanced

  def self.get_ext_command_GL_AMD_framebuffer_multisample_advanced
    [
      'glRenderbufferStorageMultisampleAdvancedAMD',
      'glNamedRenderbufferStorageMultisampleAdvancedAMD',
    ]
  end # self.get_ext_command_GL_AMD_framebuffer_multisample_advanced


  def self.define_ext_command_GL_AMD_framebuffer_sample_positions
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferSamplePositionsfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferSamplePositionsfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferSamplePositionsfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferSamplePositionsfvAMD)
    GL.module_eval(<<-SRC)
      def self.FramebufferSamplePositionsfvAMD(_target_, _numsamples_, _pixelindex_, _values_)
        GL_FUNCTIONS_MAP[:glFramebufferSamplePositionsfvAMD].call(_target_, _numsamples_, _pixelindex_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferSamplePositionsfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferSamplePositionsfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferSamplePositionsfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferSamplePositionsfvAMD)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferSamplePositionsfvAMD(_framebuffer_, _numsamples_, _pixelindex_, _values_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferSamplePositionsfvAMD].call(_framebuffer_, _numsamples_, _pixelindex_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFramebufferParameterfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFramebufferParameterfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFramebufferParameterfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFramebufferParameterfvAMD)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameterfvAMD(_target_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
        GL_FUNCTIONS_MAP[:glGetFramebufferParameterfvAMD].call(_target_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedFramebufferParameterfvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedFramebufferParameterfvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedFramebufferParameterfvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedFramebufferParameterfvAMD)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferParameterfvAMD(_framebuffer_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
        GL_FUNCTIONS_MAP[:glGetNamedFramebufferParameterfvAMD].call(_framebuffer_, _pname_, _numsamples_, _pixelindex_, _size_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_framebuffer_sample_positions

  def self.get_ext_command_GL_AMD_framebuffer_sample_positions
    [
      'glFramebufferSamplePositionsfvAMD',
      'glNamedFramebufferSamplePositionsfvAMD',
      'glGetFramebufferParameterfvAMD',
      'glGetNamedFramebufferParameterfvAMD',
    ]
  end # self.get_ext_command_GL_AMD_framebuffer_sample_positions


  def self.define_ext_command_GL_AMD_gcn_shader
  end # self.define_ext_command_GL_AMD_gcn_shader

  def self.get_ext_command_GL_AMD_gcn_shader
    [
    ]
  end # self.get_ext_command_GL_AMD_gcn_shader


  def self.define_ext_command_GL_AMD_gpu_shader_half_float
  end # self.define_ext_command_GL_AMD_gpu_shader_half_float

  def self.get_ext_command_GL_AMD_gpu_shader_half_float
    [
    ]
  end # self.get_ext_command_GL_AMD_gpu_shader_half_float


  def self.define_ext_command_GL_AMD_gpu_shader_int16
  end # self.define_ext_command_GL_AMD_gpu_shader_int16

  def self.get_ext_command_GL_AMD_gpu_shader_int16
    [
    ]
  end # self.get_ext_command_GL_AMD_gpu_shader_int16


  def self.define_ext_command_GL_AMD_gpu_shader_int64
    GL::GL_FUNCTION_SYMBOLS << :glUniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1i64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2i64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3i64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4i64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1ui64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2ui64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3ui64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4ui64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformi64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformi64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformi64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformui64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformui64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_gpu_shader_int64

  def self.get_ext_command_GL_AMD_gpu_shader_int64
    [
      'glUniform1i64NV',
      'glUniform2i64NV',
      'glUniform3i64NV',
      'glUniform4i64NV',
      'glUniform1i64vNV',
      'glUniform2i64vNV',
      'glUniform3i64vNV',
      'glUniform4i64vNV',
      'glUniform1ui64NV',
      'glUniform2ui64NV',
      'glUniform3ui64NV',
      'glUniform4ui64NV',
      'glUniform1ui64vNV',
      'glUniform2ui64vNV',
      'glUniform3ui64vNV',
      'glUniform4ui64vNV',
      'glGetUniformi64vNV',
      'glGetUniformui64vNV',
      'glProgramUniform1i64NV',
      'glProgramUniform2i64NV',
      'glProgramUniform3i64NV',
      'glProgramUniform4i64NV',
      'glProgramUniform1i64vNV',
      'glProgramUniform2i64vNV',
      'glProgramUniform3i64vNV',
      'glProgramUniform4i64vNV',
      'glProgramUniform1ui64NV',
      'glProgramUniform2ui64NV',
      'glProgramUniform3ui64NV',
      'glProgramUniform4ui64NV',
      'glProgramUniform1ui64vNV',
      'glProgramUniform2ui64vNV',
      'glProgramUniform3ui64vNV',
      'glProgramUniform4ui64vNV',
    ]
  end # self.get_ext_command_GL_AMD_gpu_shader_int64


  def self.define_ext_command_GL_AMD_interleaved_elements
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribParameteriAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribParameteriAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribParameteriAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribParameteriAMD)
    GL.module_eval(<<-SRC)
      def self.VertexAttribParameteriAMD(_index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glVertexAttribParameteriAMD].call(_index_, _pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_interleaved_elements

  def self.get_ext_command_GL_AMD_interleaved_elements
    [
      'glVertexAttribParameteriAMD',
    ]
  end # self.get_ext_command_GL_AMD_interleaved_elements


  def self.define_ext_command_GL_AMD_multi_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawArraysIndirectAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawArraysIndirectAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawArraysIndirectAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawArraysIndirectAMD)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectAMD(_mode_, _indirect_, _primcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawArraysIndirectAMD].call(_mode_, _indirect_, _primcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsIndirectAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsIndirectAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsIndirectAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsIndirectAMD)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectAMD(_mode_, _type_, _indirect_, _primcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsIndirectAMD].call(_mode_, _type_, _indirect_, _primcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_multi_draw_indirect

  def self.get_ext_command_GL_AMD_multi_draw_indirect
    [
      'glMultiDrawArraysIndirectAMD',
      'glMultiDrawElementsIndirectAMD',
    ]
  end # self.get_ext_command_GL_AMD_multi_draw_indirect


  def self.define_ext_command_GL_AMD_name_gen_delete
    GL::GL_FUNCTION_SYMBOLS << :glGenNamesAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenNamesAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenNamesAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenNamesAMD)
    GL.module_eval(<<-SRC)
      def self.GenNamesAMD(_identifier_, _num_, _names_)
        GL_FUNCTIONS_MAP[:glGenNamesAMD].call(_identifier_, _num_, _names_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteNamesAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteNamesAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteNamesAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteNamesAMD)
    GL.module_eval(<<-SRC)
      def self.DeleteNamesAMD(_identifier_, _num_, _names_)
        GL_FUNCTIONS_MAP[:glDeleteNamesAMD].call(_identifier_, _num_, _names_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsNameAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsNameAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsNameAMD] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsNameAMD)
    GL.module_eval(<<-SRC)
      def self.IsNameAMD(_identifier_, _name_)
        GL_FUNCTIONS_MAP[:glIsNameAMD].call(_identifier_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_name_gen_delete

  def self.get_ext_command_GL_AMD_name_gen_delete
    [
      'glGenNamesAMD',
      'glDeleteNamesAMD',
      'glIsNameAMD',
    ]
  end # self.get_ext_command_GL_AMD_name_gen_delete


  def self.define_ext_command_GL_AMD_occlusion_query_event
    GL::GL_FUNCTION_SYMBOLS << :glQueryObjectParameteruiAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glQueryObjectParameteruiAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glQueryObjectParameteruiAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glQueryObjectParameteruiAMD)
    GL.module_eval(<<-SRC)
      def self.QueryObjectParameteruiAMD(_target_, _id_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glQueryObjectParameteruiAMD].call(_target_, _id_, _pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_occlusion_query_event

  def self.get_ext_command_GL_AMD_occlusion_query_event
    [
      'glQueryObjectParameteruiAMD',
    ]
  end # self.get_ext_command_GL_AMD_occlusion_query_event


  def self.define_ext_command_GL_AMD_performance_monitor
    GL::GL_FUNCTION_SYMBOLS << :glGetPerfMonitorGroupsAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfMonitorGroupsAMD] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfMonitorGroupsAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfMonitorGroupsAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorGroupsAMD(_numGroups_, _groupsSize_, _groups_)
        GL_FUNCTIONS_MAP[:glGetPerfMonitorGroupsAMD].call(_numGroups_, _groupsSize_, _groups_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfMonitorCountersAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfMonitorCountersAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfMonitorCountersAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfMonitorCountersAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCountersAMD(_group_, _numCounters_, _maxActiveCounters_, _counterSize_, _counters_)
        GL_FUNCTIONS_MAP[:glGetPerfMonitorCountersAMD].call(_group_, _numCounters_, _maxActiveCounters_, _counterSize_, _counters_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfMonitorGroupStringAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfMonitorGroupStringAMD] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfMonitorGroupStringAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfMonitorGroupStringAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorGroupStringAMD(_group_, _bufSize_, _length_, _groupString_)
        GL_FUNCTIONS_MAP[:glGetPerfMonitorGroupStringAMD].call(_group_, _bufSize_, _length_, _groupString_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfMonitorCounterStringAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfMonitorCounterStringAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfMonitorCounterStringAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfMonitorCounterStringAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCounterStringAMD(_group_, _counter_, _bufSize_, _length_, _counterString_)
        GL_FUNCTIONS_MAP[:glGetPerfMonitorCounterStringAMD].call(_group_, _counter_, _bufSize_, _length_, _counterString_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfMonitorCounterInfoAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfMonitorCounterInfoAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfMonitorCounterInfoAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfMonitorCounterInfoAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCounterInfoAMD(_group_, _counter_, _pname_, _data_)
        GL_FUNCTIONS_MAP[:glGetPerfMonitorCounterInfoAMD].call(_group_, _counter_, _pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenPerfMonitorsAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenPerfMonitorsAMD] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenPerfMonitorsAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenPerfMonitorsAMD)
    GL.module_eval(<<-SRC)
      def self.GenPerfMonitorsAMD(_n_, _monitors_)
        GL_FUNCTIONS_MAP[:glGenPerfMonitorsAMD].call(_n_, _monitors_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeletePerfMonitorsAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeletePerfMonitorsAMD] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeletePerfMonitorsAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeletePerfMonitorsAMD)
    GL.module_eval(<<-SRC)
      def self.DeletePerfMonitorsAMD(_n_, _monitors_)
        GL_FUNCTIONS_MAP[:glDeletePerfMonitorsAMD].call(_n_, _monitors_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSelectPerfMonitorCountersAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glSelectPerfMonitorCountersAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSelectPerfMonitorCountersAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glSelectPerfMonitorCountersAMD)
    GL.module_eval(<<-SRC)
      def self.SelectPerfMonitorCountersAMD(_monitor_, _enable_, _group_, _numCounters_, _counterList_)
        GL_FUNCTIONS_MAP[:glSelectPerfMonitorCountersAMD].call(_monitor_, _enable_, _group_, _numCounters_, _counterList_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBeginPerfMonitorAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginPerfMonitorAMD] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginPerfMonitorAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginPerfMonitorAMD)
    GL.module_eval(<<-SRC)
      def self.BeginPerfMonitorAMD(_monitor_)
        GL_FUNCTIONS_MAP[:glBeginPerfMonitorAMD].call(_monitor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndPerfMonitorAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndPerfMonitorAMD] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndPerfMonitorAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndPerfMonitorAMD)
    GL.module_eval(<<-SRC)
      def self.EndPerfMonitorAMD(_monitor_)
        GL_FUNCTIONS_MAP[:glEndPerfMonitorAMD].call(_monitor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfMonitorCounterDataAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfMonitorCounterDataAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfMonitorCounterDataAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfMonitorCounterDataAMD)
    GL.module_eval(<<-SRC)
      def self.GetPerfMonitorCounterDataAMD(_monitor_, _pname_, _dataSize_, _data_, _bytesWritten_)
        GL_FUNCTIONS_MAP[:glGetPerfMonitorCounterDataAMD].call(_monitor_, _pname_, _dataSize_, _data_, _bytesWritten_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_performance_monitor

  def self.get_ext_command_GL_AMD_performance_monitor
    [
      'glGetPerfMonitorGroupsAMD',
      'glGetPerfMonitorCountersAMD',
      'glGetPerfMonitorGroupStringAMD',
      'glGetPerfMonitorCounterStringAMD',
      'glGetPerfMonitorCounterInfoAMD',
      'glGenPerfMonitorsAMD',
      'glDeletePerfMonitorsAMD',
      'glSelectPerfMonitorCountersAMD',
      'glBeginPerfMonitorAMD',
      'glEndPerfMonitorAMD',
      'glGetPerfMonitorCounterDataAMD',
    ]
  end # self.get_ext_command_GL_AMD_performance_monitor


  def self.define_ext_command_GL_AMD_pinned_memory
  end # self.define_ext_command_GL_AMD_pinned_memory

  def self.get_ext_command_GL_AMD_pinned_memory
    [
    ]
  end # self.get_ext_command_GL_AMD_pinned_memory


  def self.define_ext_command_GL_AMD_query_buffer_object
  end # self.define_ext_command_GL_AMD_query_buffer_object

  def self.get_ext_command_GL_AMD_query_buffer_object
    [
    ]
  end # self.get_ext_command_GL_AMD_query_buffer_object


  def self.define_ext_command_GL_AMD_sample_positions
    GL::GL_FUNCTION_SYMBOLS << :glSetMultisamplefvAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glSetMultisamplefvAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSetMultisamplefvAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glSetMultisamplefvAMD)
    GL.module_eval(<<-SRC)
      def self.SetMultisamplefvAMD(_pname_, _index_, _val_)
        GL_FUNCTIONS_MAP[:glSetMultisamplefvAMD].call(_pname_, _index_, _val_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_sample_positions

  def self.get_ext_command_GL_AMD_sample_positions
    [
      'glSetMultisamplefvAMD',
    ]
  end # self.get_ext_command_GL_AMD_sample_positions


  def self.define_ext_command_GL_AMD_seamless_cubemap_per_texture
  end # self.define_ext_command_GL_AMD_seamless_cubemap_per_texture

  def self.get_ext_command_GL_AMD_seamless_cubemap_per_texture
    [
    ]
  end # self.get_ext_command_GL_AMD_seamless_cubemap_per_texture


  def self.define_ext_command_GL_AMD_shader_atomic_counter_ops
  end # self.define_ext_command_GL_AMD_shader_atomic_counter_ops

  def self.get_ext_command_GL_AMD_shader_atomic_counter_ops
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_atomic_counter_ops


  def self.define_ext_command_GL_AMD_shader_ballot
  end # self.define_ext_command_GL_AMD_shader_ballot

  def self.get_ext_command_GL_AMD_shader_ballot
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_ballot


  def self.define_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch
  end # self.define_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch

  def self.get_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_gpu_shader_half_float_fetch


  def self.define_ext_command_GL_AMD_shader_image_load_store_lod
  end # self.define_ext_command_GL_AMD_shader_image_load_store_lod

  def self.get_ext_command_GL_AMD_shader_image_load_store_lod
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_image_load_store_lod


  def self.define_ext_command_GL_AMD_shader_stencil_export
  end # self.define_ext_command_GL_AMD_shader_stencil_export

  def self.get_ext_command_GL_AMD_shader_stencil_export
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_stencil_export


  def self.define_ext_command_GL_AMD_shader_trinary_minmax
  end # self.define_ext_command_GL_AMD_shader_trinary_minmax

  def self.get_ext_command_GL_AMD_shader_trinary_minmax
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_trinary_minmax


  def self.define_ext_command_GL_AMD_shader_explicit_vertex_parameter
  end # self.define_ext_command_GL_AMD_shader_explicit_vertex_parameter

  def self.get_ext_command_GL_AMD_shader_explicit_vertex_parameter
    [
    ]
  end # self.get_ext_command_GL_AMD_shader_explicit_vertex_parameter


  def self.define_ext_command_GL_AMD_sparse_texture
    GL::GL_FUNCTION_SYMBOLS << :glTexStorageSparseAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorageSparseAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorageSparseAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorageSparseAMD)
    GL.module_eval(<<-SRC)
      def self.TexStorageSparseAMD(_target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
        GL_FUNCTIONS_MAP[:glTexStorageSparseAMD].call(_target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorageSparseAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorageSparseAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorageSparseAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorageSparseAMD)
    GL.module_eval(<<-SRC)
      def self.TextureStorageSparseAMD(_texture_, _target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
        GL_FUNCTIONS_MAP[:glTextureStorageSparseAMD].call(_texture_, _target_, _internalFormat_, _width_, _height_, _depth_, _layers_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_sparse_texture

  def self.get_ext_command_GL_AMD_sparse_texture
    [
      'glTexStorageSparseAMD',
      'glTextureStorageSparseAMD',
    ]
  end # self.get_ext_command_GL_AMD_sparse_texture


  def self.define_ext_command_GL_AMD_stencil_operation_extended
    GL::GL_FUNCTION_SYMBOLS << :glStencilOpValueAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilOpValueAMD] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilOpValueAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilOpValueAMD)
    GL.module_eval(<<-SRC)
      def self.StencilOpValueAMD(_face_, _value_)
        GL_FUNCTIONS_MAP[:glStencilOpValueAMD].call(_face_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_stencil_operation_extended

  def self.get_ext_command_GL_AMD_stencil_operation_extended
    [
      'glStencilOpValueAMD',
    ]
  end # self.get_ext_command_GL_AMD_stencil_operation_extended


  def self.define_ext_command_GL_AMD_texture_gather_bias_lod
  end # self.define_ext_command_GL_AMD_texture_gather_bias_lod

  def self.get_ext_command_GL_AMD_texture_gather_bias_lod
    [
    ]
  end # self.get_ext_command_GL_AMD_texture_gather_bias_lod


  def self.define_ext_command_GL_AMD_texture_texture4
  end # self.define_ext_command_GL_AMD_texture_texture4

  def self.get_ext_command_GL_AMD_texture_texture4
    [
    ]
  end # self.get_ext_command_GL_AMD_texture_texture4


  def self.define_ext_command_GL_AMD_transform_feedback3_lines_triangles
  end # self.define_ext_command_GL_AMD_transform_feedback3_lines_triangles

  def self.get_ext_command_GL_AMD_transform_feedback3_lines_triangles
    [
    ]
  end # self.get_ext_command_GL_AMD_transform_feedback3_lines_triangles


  def self.define_ext_command_GL_AMD_transform_feedback4
  end # self.define_ext_command_GL_AMD_transform_feedback4

  def self.get_ext_command_GL_AMD_transform_feedback4
    [
    ]
  end # self.get_ext_command_GL_AMD_transform_feedback4


  def self.define_ext_command_GL_AMD_vertex_shader_layer
  end # self.define_ext_command_GL_AMD_vertex_shader_layer

  def self.get_ext_command_GL_AMD_vertex_shader_layer
    [
    ]
  end # self.get_ext_command_GL_AMD_vertex_shader_layer


  def self.define_ext_command_GL_AMD_vertex_shader_tessellator
    GL::GL_FUNCTION_SYMBOLS << :glTessellationFactorAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glTessellationFactorAMD] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTessellationFactorAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glTessellationFactorAMD)
    GL.module_eval(<<-SRC)
      def self.TessellationFactorAMD(_factor_)
        GL_FUNCTIONS_MAP[:glTessellationFactorAMD].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTessellationModeAMD
    GL::GL_FUNCTIONS_ARGS_MAP[:glTessellationModeAMD] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTessellationModeAMD] = Fiddle::TYPE_VOID
    GL.bind_command(:glTessellationModeAMD)
    GL.module_eval(<<-SRC)
      def self.TessellationModeAMD(_mode_)
        GL_FUNCTIONS_MAP[:glTessellationModeAMD].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_AMD_vertex_shader_tessellator

  def self.get_ext_command_GL_AMD_vertex_shader_tessellator
    [
      'glTessellationFactorAMD',
      'glTessellationModeAMD',
    ]
  end # self.get_ext_command_GL_AMD_vertex_shader_tessellator


  def self.define_ext_command_GL_AMD_vertex_shader_viewport_index
  end # self.define_ext_command_GL_AMD_vertex_shader_viewport_index

  def self.get_ext_command_GL_AMD_vertex_shader_viewport_index
    [
    ]
  end # self.get_ext_command_GL_AMD_vertex_shader_viewport_index


  def self.define_ext_command_GL_APPLE_aux_depth_stencil
  end # self.define_ext_command_GL_APPLE_aux_depth_stencil

  def self.get_ext_command_GL_APPLE_aux_depth_stencil
    [
    ]
  end # self.get_ext_command_GL_APPLE_aux_depth_stencil


  def self.define_ext_command_GL_APPLE_client_storage
  end # self.define_ext_command_GL_APPLE_client_storage

  def self.get_ext_command_GL_APPLE_client_storage
    [
    ]
  end # self.get_ext_command_GL_APPLE_client_storage


  def self.define_ext_command_GL_APPLE_element_array
    GL::GL_FUNCTION_SYMBOLS << :glElementPointerAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glElementPointerAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glElementPointerAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glElementPointerAPPLE)
    GL.module_eval(<<-SRC)
      def self.ElementPointerAPPLE(_type_, _pointer_)
        GL_FUNCTIONS_MAP[:glElementPointerAPPLE].call(_type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementArrayAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.DrawElementArrayAPPLE(_mode_, _first_, _count_)
        GL_FUNCTIONS_MAP[:glDrawElementArrayAPPLE].call(_mode_, _first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawRangeElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawRangeElementArrayAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawRangeElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawRangeElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementArrayAPPLE(_mode_, _start_, _end_, _first_, _count_)
        GL_FUNCTIONS_MAP[:glDrawRangeElementArrayAPPLE].call(_mode_, _start_, _end_, _first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementArrayAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementArrayAPPLE(_mode_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementArrayAPPLE].call(_mode_, _first_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawRangeElementArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawRangeElementArrayAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawRangeElementArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawRangeElementArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.MultiDrawRangeElementArrayAPPLE(_mode_, _start_, _end_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:glMultiDrawRangeElementArrayAPPLE].call(_mode_, _start_, _end_, _first_, _count_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_element_array

  def self.get_ext_command_GL_APPLE_element_array
    [
      'glElementPointerAPPLE',
      'glDrawElementArrayAPPLE',
      'glDrawRangeElementArrayAPPLE',
      'glMultiDrawElementArrayAPPLE',
      'glMultiDrawRangeElementArrayAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_element_array


  def self.define_ext_command_GL_APPLE_fence
    GL::GL_FUNCTION_SYMBOLS << :glGenFencesAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenFencesAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenFencesAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenFencesAPPLE)
    GL.module_eval(<<-SRC)
      def self.GenFencesAPPLE(_n_, _fences_)
        GL_FUNCTIONS_MAP[:glGenFencesAPPLE].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteFencesAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteFencesAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteFencesAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteFencesAPPLE)
    GL.module_eval(<<-SRC)
      def self.DeleteFencesAPPLE(_n_, _fences_)
        GL_FUNCTIONS_MAP[:glDeleteFencesAPPLE].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSetFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glSetFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSetFenceAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glSetFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.SetFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:glSetFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsFenceAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.IsFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:glIsFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTestFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glTestFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTestFenceAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glTestFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.TestFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:glTestFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFinishFenceAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glFinishFenceAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFinishFenceAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glFinishFenceAPPLE)
    GL.module_eval(<<-SRC)
      def self.FinishFenceAPPLE(_fence_)
        GL_FUNCTIONS_MAP[:glFinishFenceAPPLE].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTestObjectAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glTestObjectAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTestObjectAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glTestObjectAPPLE)
    GL.module_eval(<<-SRC)
      def self.TestObjectAPPLE(_object_, _name_)
        GL_FUNCTIONS_MAP[:glTestObjectAPPLE].call(_object_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFinishObjectAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glFinishObjectAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFinishObjectAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glFinishObjectAPPLE)
    GL.module_eval(<<-SRC)
      def self.FinishObjectAPPLE(_object_, _name_)
        GL_FUNCTIONS_MAP[:glFinishObjectAPPLE].call(_object_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_fence

  def self.get_ext_command_GL_APPLE_fence
    [
      'glGenFencesAPPLE',
      'glDeleteFencesAPPLE',
      'glSetFenceAPPLE',
      'glIsFenceAPPLE',
      'glTestFenceAPPLE',
      'glFinishFenceAPPLE',
      'glTestObjectAPPLE',
      'glFinishObjectAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_fence


  def self.define_ext_command_GL_APPLE_float_pixels
  end # self.define_ext_command_GL_APPLE_float_pixels

  def self.get_ext_command_GL_APPLE_float_pixels
    [
    ]
  end # self.get_ext_command_GL_APPLE_float_pixels


  def self.define_ext_command_GL_APPLE_flush_buffer_range
    GL::GL_FUNCTION_SYMBOLS << :glBufferParameteriAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferParameteriAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferParameteriAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferParameteriAPPLE)
    GL.module_eval(<<-SRC)
      def self.BufferParameteriAPPLE(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glBufferParameteriAPPLE].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFlushMappedBufferRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushMappedBufferRangeAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushMappedBufferRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushMappedBufferRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.FlushMappedBufferRangeAPPLE(_target_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glFlushMappedBufferRangeAPPLE].call(_target_, _offset_, _size_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_flush_buffer_range

  def self.get_ext_command_GL_APPLE_flush_buffer_range
    [
      'glBufferParameteriAPPLE',
      'glFlushMappedBufferRangeAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_flush_buffer_range


  def self.define_ext_command_GL_APPLE_object_purgeable
    GL::GL_FUNCTION_SYMBOLS << :glObjectPurgeableAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glObjectPurgeableAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glObjectPurgeableAPPLE] = -Fiddle::TYPE_INT
    GL.bind_command(:glObjectPurgeableAPPLE)
    GL.module_eval(<<-SRC)
      def self.ObjectPurgeableAPPLE(_objectType_, _name_, _option_)
        GL_FUNCTIONS_MAP[:glObjectPurgeableAPPLE].call(_objectType_, _name_, _option_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glObjectUnpurgeableAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glObjectUnpurgeableAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glObjectUnpurgeableAPPLE] = -Fiddle::TYPE_INT
    GL.bind_command(:glObjectUnpurgeableAPPLE)
    GL.module_eval(<<-SRC)
      def self.ObjectUnpurgeableAPPLE(_objectType_, _name_, _option_)
        GL_FUNCTIONS_MAP[:glObjectUnpurgeableAPPLE].call(_objectType_, _name_, _option_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectParameterivAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectParameterivAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectParameterivAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectParameterivAPPLE)
    GL.module_eval(<<-SRC)
      def self.GetObjectParameterivAPPLE(_objectType_, _name_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetObjectParameterivAPPLE].call(_objectType_, _name_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_object_purgeable

  def self.get_ext_command_GL_APPLE_object_purgeable
    [
      'glObjectPurgeableAPPLE',
      'glObjectUnpurgeableAPPLE',
      'glGetObjectParameterivAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_object_purgeable


  def self.define_ext_command_GL_APPLE_rgb_422
  end # self.define_ext_command_GL_APPLE_rgb_422

  def self.get_ext_command_GL_APPLE_rgb_422
    [
    ]
  end # self.get_ext_command_GL_APPLE_rgb_422


  def self.define_ext_command_GL_APPLE_row_bytes
  end # self.define_ext_command_GL_APPLE_row_bytes

  def self.get_ext_command_GL_APPLE_row_bytes
    [
    ]
  end # self.get_ext_command_GL_APPLE_row_bytes


  def self.define_ext_command_GL_APPLE_specular_vector
  end # self.define_ext_command_GL_APPLE_specular_vector

  def self.get_ext_command_GL_APPLE_specular_vector
    [
    ]
  end # self.get_ext_command_GL_APPLE_specular_vector


  def self.define_ext_command_GL_APPLE_texture_range
    GL::GL_FUNCTION_SYMBOLS << :glTextureRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureRangeAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.TextureRangeAPPLE(_target_, _length_, _pointer_)
        GL_FUNCTIONS_MAP[:glTextureRangeAPPLE].call(_target_, _length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexParameterPointervAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexParameterPointervAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexParameterPointervAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexParameterPointervAPPLE)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterPointervAPPLE(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexParameterPointervAPPLE].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_texture_range

  def self.get_ext_command_GL_APPLE_texture_range
    [
      'glTextureRangeAPPLE',
      'glGetTexParameterPointervAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_texture_range


  def self.define_ext_command_GL_APPLE_transform_hint
  end # self.define_ext_command_GL_APPLE_transform_hint

  def self.get_ext_command_GL_APPLE_transform_hint
    [
    ]
  end # self.get_ext_command_GL_APPLE_transform_hint


  def self.define_ext_command_GL_APPLE_vertex_array_object
    GL::GL_FUNCTION_SYMBOLS << :glBindVertexArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVertexArrayAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVertexArrayAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVertexArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.BindVertexArrayAPPLE(_array_)
        GL_FUNCTIONS_MAP[:glBindVertexArrayAPPLE].call(_array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteVertexArraysAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteVertexArraysAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteVertexArraysAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteVertexArraysAPPLE)
    GL.module_eval(<<-SRC)
      def self.DeleteVertexArraysAPPLE(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:glDeleteVertexArraysAPPLE].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenVertexArraysAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenVertexArraysAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenVertexArraysAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenVertexArraysAPPLE)
    GL.module_eval(<<-SRC)
      def self.GenVertexArraysAPPLE(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:glGenVertexArraysAPPLE].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsVertexArrayAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsVertexArrayAPPLE] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsVertexArrayAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsVertexArrayAPPLE)
    GL.module_eval(<<-SRC)
      def self.IsVertexArrayAPPLE(_array_)
        GL_FUNCTIONS_MAP[:glIsVertexArrayAPPLE].call(_array_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_vertex_array_object

  def self.get_ext_command_GL_APPLE_vertex_array_object
    [
      'glBindVertexArrayAPPLE',
      'glDeleteVertexArraysAPPLE',
      'glGenVertexArraysAPPLE',
      'glIsVertexArrayAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_vertex_array_object


  def self.define_ext_command_GL_APPLE_vertex_array_range
    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayRangeAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.VertexArrayRangeAPPLE(_length_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexArrayRangeAPPLE].call(_length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFlushVertexArrayRangeAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushVertexArrayRangeAPPLE] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushVertexArrayRangeAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushVertexArrayRangeAPPLE)
    GL.module_eval(<<-SRC)
      def self.FlushVertexArrayRangeAPPLE(_length_, _pointer_)
        GL_FUNCTIONS_MAP[:glFlushVertexArrayRangeAPPLE].call(_length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayParameteriAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayParameteriAPPLE] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayParameteriAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayParameteriAPPLE)
    GL.module_eval(<<-SRC)
      def self.VertexArrayParameteriAPPLE(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glVertexArrayParameteriAPPLE].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_vertex_array_range

  def self.get_ext_command_GL_APPLE_vertex_array_range
    [
      'glVertexArrayRangeAPPLE',
      'glFlushVertexArrayRangeAPPLE',
      'glVertexArrayParameteriAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_vertex_array_range


  def self.define_ext_command_GL_APPLE_vertex_program_evaluators
    GL::GL_FUNCTION_SYMBOLS << :glEnableVertexAttribAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVertexAttribAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVertexAttribAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVertexAttribAPPLE)
    GL.module_eval(<<-SRC)
      def self.EnableVertexAttribAPPLE(_index_, _pname_)
        GL_FUNCTIONS_MAP[:glEnableVertexAttribAPPLE].call(_index_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVertexAttribAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVertexAttribAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVertexAttribAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVertexAttribAPPLE)
    GL.module_eval(<<-SRC)
      def self.DisableVertexAttribAPPLE(_index_, _pname_)
        GL_FUNCTIONS_MAP[:glDisableVertexAttribAPPLE].call(_index_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsVertexAttribEnabledAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsVertexAttribEnabledAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsVertexAttribEnabledAPPLE] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsVertexAttribEnabledAPPLE)
    GL.module_eval(<<-SRC)
      def self.IsVertexAttribEnabledAPPLE(_index_, _pname_)
        GL_FUNCTIONS_MAP[:glIsVertexAttribEnabledAPPLE].call(_index_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapVertexAttrib1dAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapVertexAttrib1dAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapVertexAttrib1dAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapVertexAttrib1dAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib1dAPPLE(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
        GL_FUNCTIONS_MAP[:glMapVertexAttrib1dAPPLE].call(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapVertexAttrib1fAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapVertexAttrib1fAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapVertexAttrib1fAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapVertexAttrib1fAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib1fAPPLE(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
        GL_FUNCTIONS_MAP[:glMapVertexAttrib1fAPPLE].call(_index_, _size_, _u1_, _u2_, _stride_, _order_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapVertexAttrib2dAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapVertexAttrib2dAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapVertexAttrib2dAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapVertexAttrib2dAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib2dAPPLE(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
        GL_FUNCTIONS_MAP[:glMapVertexAttrib2dAPPLE].call(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapVertexAttrib2fAPPLE
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapVertexAttrib2fAPPLE] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapVertexAttrib2fAPPLE] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapVertexAttrib2fAPPLE)
    GL.module_eval(<<-SRC)
      def self.MapVertexAttrib2fAPPLE(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
        GL_FUNCTIONS_MAP[:glMapVertexAttrib2fAPPLE].call(_index_, _size_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
      end
    SRC
  end # self.define_ext_command_GL_APPLE_vertex_program_evaluators

  def self.get_ext_command_GL_APPLE_vertex_program_evaluators
    [
      'glEnableVertexAttribAPPLE',
      'glDisableVertexAttribAPPLE',
      'glIsVertexAttribEnabledAPPLE',
      'glMapVertexAttrib1dAPPLE',
      'glMapVertexAttrib1fAPPLE',
      'glMapVertexAttrib2dAPPLE',
      'glMapVertexAttrib2fAPPLE',
    ]
  end # self.get_ext_command_GL_APPLE_vertex_program_evaluators


  def self.define_ext_command_GL_APPLE_ycbcr_422
  end # self.define_ext_command_GL_APPLE_ycbcr_422

  def self.get_ext_command_GL_APPLE_ycbcr_422
    [
    ]
  end # self.get_ext_command_GL_APPLE_ycbcr_422


  def self.define_ext_command_GL_ARB_ES2_compatibility
    GL::GL_FUNCTION_SYMBOLS << :glReleaseShaderCompiler
    GL::GL_FUNCTIONS_ARGS_MAP[:glReleaseShaderCompiler] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReleaseShaderCompiler] = Fiddle::TYPE_VOID
    GL.bind_command(:glReleaseShaderCompiler)
    GL.module_eval(<<-SRC)
      def self.ReleaseShaderCompiler()
        GL_FUNCTIONS_MAP[:glReleaseShaderCompiler].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShaderBinary
    GL::GL_FUNCTIONS_ARGS_MAP[:glShaderBinary] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShaderBinary] = Fiddle::TYPE_VOID
    GL.bind_command(:glShaderBinary)
    GL.module_eval(<<-SRC)
      def self.ShaderBinary(_count_, _shaders_, _binaryFormat_, _binary_, _length_)
        GL_FUNCTIONS_MAP[:glShaderBinary].call(_count_, _shaders_, _binaryFormat_, _binary_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetShaderPrecisionFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetShaderPrecisionFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetShaderPrecisionFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetShaderPrecisionFormat)
    GL.module_eval(<<-SRC)
      def self.GetShaderPrecisionFormat(_shadertype_, _precisiontype_, _range_, _precision_)
        GL_FUNCTIONS_MAP[:glGetShaderPrecisionFormat].call(_shadertype_, _precisiontype_, _range_, _precision_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangef
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangef] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangef] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangef)
    GL.module_eval(<<-SRC)
      def self.DepthRangef(_n_, _f_)
        GL_FUNCTIONS_MAP[:glDepthRangef].call(_n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearDepthf
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearDepthf] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearDepthf] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearDepthf)
    GL.module_eval(<<-SRC)
      def self.ClearDepthf(_d_)
        GL_FUNCTIONS_MAP[:glClearDepthf].call(_d_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_ES2_compatibility

  def self.get_ext_command_GL_ARB_ES2_compatibility
    [
      'glReleaseShaderCompiler',
      'glShaderBinary',
      'glGetShaderPrecisionFormat',
      'glDepthRangef',
      'glClearDepthf',
    ]
  end # self.get_ext_command_GL_ARB_ES2_compatibility


  def self.define_ext_command_GL_ARB_ES3_1_compatibility
    GL::GL_FUNCTION_SYMBOLS << :glMemoryBarrierByRegion
    GL::GL_FUNCTIONS_ARGS_MAP[:glMemoryBarrierByRegion] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMemoryBarrierByRegion] = Fiddle::TYPE_VOID
    GL.bind_command(:glMemoryBarrierByRegion)
    GL.module_eval(<<-SRC)
      def self.MemoryBarrierByRegion(_barriers_)
        GL_FUNCTIONS_MAP[:glMemoryBarrierByRegion].call(_barriers_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_ES3_1_compatibility

  def self.get_ext_command_GL_ARB_ES3_1_compatibility
    [
      'glMemoryBarrierByRegion',
    ]
  end # self.get_ext_command_GL_ARB_ES3_1_compatibility


  def self.define_ext_command_GL_ARB_ES3_2_compatibility
    GL::GL_FUNCTION_SYMBOLS << :glPrimitiveBoundingBoxARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glPrimitiveBoundingBoxARB] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPrimitiveBoundingBoxARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glPrimitiveBoundingBoxARB)
    GL.module_eval(<<-SRC)
      def self.PrimitiveBoundingBoxARB(_minX_, _minY_, _minZ_, _minW_, _maxX_, _maxY_, _maxZ_, _maxW_)
        GL_FUNCTIONS_MAP[:glPrimitiveBoundingBoxARB].call(_minX_, _minY_, _minZ_, _minW_, _maxX_, _maxY_, _maxZ_, _maxW_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_ES3_2_compatibility

  def self.get_ext_command_GL_ARB_ES3_2_compatibility
    [
      'glPrimitiveBoundingBoxARB',
    ]
  end # self.get_ext_command_GL_ARB_ES3_2_compatibility


  def self.define_ext_command_GL_ARB_ES3_compatibility
  end # self.define_ext_command_GL_ARB_ES3_compatibility

  def self.get_ext_command_GL_ARB_ES3_compatibility
    [
    ]
  end # self.get_ext_command_GL_ARB_ES3_compatibility


  def self.define_ext_command_GL_ARB_arrays_of_arrays
  end # self.define_ext_command_GL_ARB_arrays_of_arrays

  def self.get_ext_command_GL_ARB_arrays_of_arrays
    [
    ]
  end # self.get_ext_command_GL_ARB_arrays_of_arrays


  def self.define_ext_command_GL_ARB_base_instance
    GL::GL_FUNCTION_SYMBOLS << :glDrawArraysInstancedBaseInstance
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawArraysInstancedBaseInstance] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawArraysInstancedBaseInstance] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawArraysInstancedBaseInstance)
    GL.module_eval(<<-SRC)
      def self.DrawArraysInstancedBaseInstance(_mode_, _first_, _count_, _instancecount_, _baseinstance_)
        GL_FUNCTIONS_MAP[:glDrawArraysInstancedBaseInstance].call(_mode_, _first_, _count_, _instancecount_, _baseinstance_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsInstancedBaseInstance
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsInstancedBaseInstance] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsInstancedBaseInstance] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsInstancedBaseInstance)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedBaseInstance(_mode_, _count_, _type_, _indices_, _instancecount_, _baseinstance_)
        GL_FUNCTIONS_MAP[:glDrawElementsInstancedBaseInstance].call(_mode_, _count_, _type_, _indices_, _instancecount_, _baseinstance_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsInstancedBaseVertexBaseInstance
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsInstancedBaseVertexBaseInstance] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsInstancedBaseVertexBaseInstance] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsInstancedBaseVertexBaseInstance)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedBaseVertexBaseInstance(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_, _baseinstance_)
        GL_FUNCTIONS_MAP[:glDrawElementsInstancedBaseVertexBaseInstance].call(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_, _baseinstance_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_base_instance

  def self.get_ext_command_GL_ARB_base_instance
    [
      'glDrawArraysInstancedBaseInstance',
      'glDrawElementsInstancedBaseInstance',
      'glDrawElementsInstancedBaseVertexBaseInstance',
    ]
  end # self.get_ext_command_GL_ARB_base_instance


  def self.define_ext_command_GL_ARB_bindless_texture
    GL::GL_FUNCTION_SYMBOLS << :glGetTextureHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureHandleARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureHandleARB] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:glGetTextureHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetTextureHandleARB(_texture_)
        GL_FUNCTIONS_MAP[:glGetTextureHandleARB].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureSamplerHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureSamplerHandleARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureSamplerHandleARB] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:glGetTextureSamplerHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetTextureSamplerHandleARB(_texture_, _sampler_)
        GL_FUNCTIONS_MAP[:glGetTextureSamplerHandleARB].call(_texture_, _sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeTextureHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeTextureHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeTextureHandleResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeTextureHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:glMakeTextureHandleResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeTextureHandleNonResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeTextureHandleNonResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeTextureHandleNonResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeTextureHandleNonResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleNonResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:glMakeTextureHandleNonResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetImageHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetImageHandleARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetImageHandleARB] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:glGetImageHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetImageHandleARB(_texture_, _level_, _layered_, _layer_, _format_)
        GL_FUNCTIONS_MAP[:glGetImageHandleARB].call(_texture_, _level_, _layered_, _layer_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeImageHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeImageHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeImageHandleResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeImageHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleResidentARB(_handle_, _access_)
        GL_FUNCTIONS_MAP[:glMakeImageHandleResidentARB].call(_handle_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeImageHandleNonResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeImageHandleNonResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeImageHandleNonResidentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeImageHandleNonResidentARB)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleNonResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:glMakeImageHandleNonResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformHandleui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformHandleui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformHandleui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformHandleui64ARB)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64ARB(_location_, _value_)
        GL_FUNCTIONS_MAP[:glUniformHandleui64ARB].call(_location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformHandleui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformHandleui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformHandleui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformHandleui64vARB)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniformHandleui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformHandleui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformHandleui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformHandleui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformHandleui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64ARB(_program_, _location_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformHandleui64ARB].call(_program_, _location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformHandleui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformHandleui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformHandleui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformHandleui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64vARB(_program_, _location_, _count_, _values_)
        GL_FUNCTIONS_MAP[:glProgramUniformHandleui64vARB].call(_program_, _location_, _count_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsTextureHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsTextureHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsTextureHandleResidentARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsTextureHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.IsTextureHandleResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:glIsTextureHandleResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsImageHandleResidentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsImageHandleResidentARB] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsImageHandleResidentARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsImageHandleResidentARB)
    GL.module_eval(<<-SRC)
      def self.IsImageHandleResidentARB(_handle_)
        GL_FUNCTIONS_MAP[:glIsImageHandleResidentARB].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1ui64ARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1ui64ARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64ARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1ui64ARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1ui64vARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64vARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1ui64vARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribLui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribLui64vARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribLui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribLui64vARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLui64vARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribLui64vARB].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_bindless_texture

  def self.get_ext_command_GL_ARB_bindless_texture
    [
      'glGetTextureHandleARB',
      'glGetTextureSamplerHandleARB',
      'glMakeTextureHandleResidentARB',
      'glMakeTextureHandleNonResidentARB',
      'glGetImageHandleARB',
      'glMakeImageHandleResidentARB',
      'glMakeImageHandleNonResidentARB',
      'glUniformHandleui64ARB',
      'glUniformHandleui64vARB',
      'glProgramUniformHandleui64ARB',
      'glProgramUniformHandleui64vARB',
      'glIsTextureHandleResidentARB',
      'glIsImageHandleResidentARB',
      'glVertexAttribL1ui64ARB',
      'glVertexAttribL1ui64vARB',
      'glGetVertexAttribLui64vARB',
    ]
  end # self.get_ext_command_GL_ARB_bindless_texture


  def self.define_ext_command_GL_ARB_blend_func_extended
    GL::GL_FUNCTION_SYMBOLS << :glBindFragDataLocationIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindFragDataLocationIndexed] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindFragDataLocationIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindFragDataLocationIndexed)
    GL.module_eval(<<-SRC)
      def self.BindFragDataLocationIndexed(_program_, _colorNumber_, _index_, _name_)
        GL_FUNCTIONS_MAP[:glBindFragDataLocationIndexed].call(_program_, _colorNumber_, _index_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFragDataIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFragDataIndex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFragDataIndex] = Fiddle::TYPE_INT
    GL.bind_command(:glGetFragDataIndex)
    GL.module_eval(<<-SRC)
      def self.GetFragDataIndex(_program_, _name_)
        GL_FUNCTIONS_MAP[:glGetFragDataIndex].call(_program_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_blend_func_extended

  def self.get_ext_command_GL_ARB_blend_func_extended
    [
      'glBindFragDataLocationIndexed',
      'glGetFragDataIndex',
    ]
  end # self.get_ext_command_GL_ARB_blend_func_extended


  def self.define_ext_command_GL_ARB_buffer_storage
    GL::GL_FUNCTION_SYMBOLS << :glBufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferStorage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferStorage)
    GL.module_eval(<<-SRC)
      def self.BufferStorage(_target_, _size_, _data_, _flags_)
        GL_FUNCTIONS_MAP[:glBufferStorage].call(_target_, _size_, _data_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_buffer_storage

  def self.get_ext_command_GL_ARB_buffer_storage
    [
      'glBufferStorage',
    ]
  end # self.get_ext_command_GL_ARB_buffer_storage


  def self.define_ext_command_GL_ARB_cl_event
    GL::GL_FUNCTION_SYMBOLS << :glCreateSyncFromCLeventARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateSyncFromCLeventARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateSyncFromCLeventARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glCreateSyncFromCLeventARB)
    GL.module_eval(<<-SRC)
      def self.CreateSyncFromCLeventARB(_context_, _event_, _flags_)
        GL_FUNCTIONS_MAP[:glCreateSyncFromCLeventARB].call(_context_, _event_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_cl_event

  def self.get_ext_command_GL_ARB_cl_event
    [
      'glCreateSyncFromCLeventARB',
    ]
  end # self.get_ext_command_GL_ARB_cl_event


  def self.define_ext_command_GL_ARB_clear_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glClearBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearBufferData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearBufferData)
    GL.module_eval(<<-SRC)
      def self.ClearBufferData(_target_, _internalformat_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearBufferData].call(_target_, _internalformat_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearBufferSubData)
    GL.module_eval(<<-SRC)
      def self.ClearBufferSubData(_target_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearBufferSubData].call(_target_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_clear_buffer_object

  def self.get_ext_command_GL_ARB_clear_buffer_object
    [
      'glClearBufferData',
      'glClearBufferSubData',
    ]
  end # self.get_ext_command_GL_ARB_clear_buffer_object


  def self.define_ext_command_GL_ARB_clear_texture
    GL::GL_FUNCTION_SYMBOLS << :glClearTexImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearTexImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearTexImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearTexImage)
    GL.module_eval(<<-SRC)
      def self.ClearTexImage(_texture_, _level_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearTexImage].call(_texture_, _level_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearTexSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearTexSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearTexSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearTexSubImage)
    GL.module_eval(<<-SRC)
      def self.ClearTexSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearTexSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_clear_texture

  def self.get_ext_command_GL_ARB_clear_texture
    [
      'glClearTexImage',
      'glClearTexSubImage',
    ]
  end # self.get_ext_command_GL_ARB_clear_texture


  def self.define_ext_command_GL_ARB_clip_control
    GL::GL_FUNCTION_SYMBOLS << :glClipControl
    GL::GL_FUNCTIONS_ARGS_MAP[:glClipControl] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClipControl] = Fiddle::TYPE_VOID
    GL.bind_command(:glClipControl)
    GL.module_eval(<<-SRC)
      def self.ClipControl(_origin_, _depth_)
        GL_FUNCTIONS_MAP[:glClipControl].call(_origin_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_clip_control

  def self.get_ext_command_GL_ARB_clip_control
    [
      'glClipControl',
    ]
  end # self.get_ext_command_GL_ARB_clip_control


  def self.define_ext_command_GL_ARB_color_buffer_float
    GL::GL_FUNCTION_SYMBOLS << :glClampColorARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glClampColorARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClampColorARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glClampColorARB)
    GL.module_eval(<<-SRC)
      def self.ClampColorARB(_target_, _clamp_)
        GL_FUNCTIONS_MAP[:glClampColorARB].call(_target_, _clamp_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_color_buffer_float

  def self.get_ext_command_GL_ARB_color_buffer_float
    [
      'glClampColorARB',
    ]
  end # self.get_ext_command_GL_ARB_color_buffer_float


  def self.define_ext_command_GL_ARB_compatibility
  end # self.define_ext_command_GL_ARB_compatibility

  def self.get_ext_command_GL_ARB_compatibility
    [
    ]
  end # self.get_ext_command_GL_ARB_compatibility


  def self.define_ext_command_GL_ARB_compressed_texture_pixel_storage
  end # self.define_ext_command_GL_ARB_compressed_texture_pixel_storage

  def self.get_ext_command_GL_ARB_compressed_texture_pixel_storage
    [
    ]
  end # self.get_ext_command_GL_ARB_compressed_texture_pixel_storage


  def self.define_ext_command_GL_ARB_compute_shader
    GL::GL_FUNCTION_SYMBOLS << :glDispatchCompute
    GL::GL_FUNCTIONS_ARGS_MAP[:glDispatchCompute] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDispatchCompute] = Fiddle::TYPE_VOID
    GL.bind_command(:glDispatchCompute)
    GL.module_eval(<<-SRC)
      def self.DispatchCompute(_num_groups_x_, _num_groups_y_, _num_groups_z_)
        GL_FUNCTIONS_MAP[:glDispatchCompute].call(_num_groups_x_, _num_groups_y_, _num_groups_z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDispatchComputeIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:glDispatchComputeIndirect] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDispatchComputeIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:glDispatchComputeIndirect)
    GL.module_eval(<<-SRC)
      def self.DispatchComputeIndirect(_indirect_)
        GL_FUNCTIONS_MAP[:glDispatchComputeIndirect].call(_indirect_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_compute_shader

  def self.get_ext_command_GL_ARB_compute_shader
    [
      'glDispatchCompute',
      'glDispatchComputeIndirect',
    ]
  end # self.get_ext_command_GL_ARB_compute_shader


  def self.define_ext_command_GL_ARB_compute_variable_group_size
    GL::GL_FUNCTION_SYMBOLS << :glDispatchComputeGroupSizeARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDispatchComputeGroupSizeARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDispatchComputeGroupSizeARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDispatchComputeGroupSizeARB)
    GL.module_eval(<<-SRC)
      def self.DispatchComputeGroupSizeARB(_num_groups_x_, _num_groups_y_, _num_groups_z_, _group_size_x_, _group_size_y_, _group_size_z_)
        GL_FUNCTIONS_MAP[:glDispatchComputeGroupSizeARB].call(_num_groups_x_, _num_groups_y_, _num_groups_z_, _group_size_x_, _group_size_y_, _group_size_z_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_compute_variable_group_size

  def self.get_ext_command_GL_ARB_compute_variable_group_size
    [
      'glDispatchComputeGroupSizeARB',
    ]
  end # self.get_ext_command_GL_ARB_compute_variable_group_size


  def self.define_ext_command_GL_ARB_conditional_render_inverted
  end # self.define_ext_command_GL_ARB_conditional_render_inverted

  def self.get_ext_command_GL_ARB_conditional_render_inverted
    [
    ]
  end # self.get_ext_command_GL_ARB_conditional_render_inverted


  def self.define_ext_command_GL_ARB_conservative_depth
  end # self.define_ext_command_GL_ARB_conservative_depth

  def self.get_ext_command_GL_ARB_conservative_depth
    [
    ]
  end # self.get_ext_command_GL_ARB_conservative_depth


  def self.define_ext_command_GL_ARB_copy_buffer
    GL::GL_FUNCTION_SYMBOLS << :glCopyBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyBufferSubData)
    GL.module_eval(<<-SRC)
      def self.CopyBufferSubData(_readTarget_, _writeTarget_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:glCopyBufferSubData].call(_readTarget_, _writeTarget_, _readOffset_, _writeOffset_, _size_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_copy_buffer

  def self.get_ext_command_GL_ARB_copy_buffer
    [
      'glCopyBufferSubData',
    ]
  end # self.get_ext_command_GL_ARB_copy_buffer


  def self.define_ext_command_GL_ARB_copy_image
    GL::GL_FUNCTION_SYMBOLS << :glCopyImageSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyImageSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyImageSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyImageSubData)
    GL.module_eval(<<-SRC)
      def self.CopyImageSubData(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
        GL_FUNCTIONS_MAP[:glCopyImageSubData].call(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_copy_image

  def self.get_ext_command_GL_ARB_copy_image
    [
      'glCopyImageSubData',
    ]
  end # self.get_ext_command_GL_ARB_copy_image


  def self.define_ext_command_GL_ARB_cull_distance
  end # self.define_ext_command_GL_ARB_cull_distance

  def self.get_ext_command_GL_ARB_cull_distance
    [
    ]
  end # self.get_ext_command_GL_ARB_cull_distance


  def self.define_ext_command_GL_ARB_debug_output
    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageControlARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageControlARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageControlARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageControlARB)
    GL.module_eval(<<-SRC)
      def self.DebugMessageControlARB(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:glDebugMessageControlARB].call(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageInsertARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageInsertARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageInsertARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageInsertARB)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsertARB(_source_, _type_, _id_, _severity_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:glDebugMessageInsertARB].call(_source_, _type_, _id_, _severity_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageCallbackARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageCallbackARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageCallbackARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageCallbackARB)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallbackARB(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:glDebugMessageCallbackARB].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDebugMessageLogARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDebugMessageLogARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDebugMessageLogARB] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetDebugMessageLogARB)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLogARB(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
        GL_FUNCTIONS_MAP[:glGetDebugMessageLogARB].call(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_debug_output

  def self.get_ext_command_GL_ARB_debug_output
    [
      'glDebugMessageControlARB',
      'glDebugMessageInsertARB',
      'glDebugMessageCallbackARB',
      'glGetDebugMessageLogARB',
    ]
  end # self.get_ext_command_GL_ARB_debug_output


  def self.define_ext_command_GL_ARB_depth_buffer_float
  end # self.define_ext_command_GL_ARB_depth_buffer_float

  def self.get_ext_command_GL_ARB_depth_buffer_float
    [
    ]
  end # self.get_ext_command_GL_ARB_depth_buffer_float


  def self.define_ext_command_GL_ARB_depth_clamp
  end # self.define_ext_command_GL_ARB_depth_clamp

  def self.get_ext_command_GL_ARB_depth_clamp
    [
    ]
  end # self.get_ext_command_GL_ARB_depth_clamp


  def self.define_ext_command_GL_ARB_depth_texture
  end # self.define_ext_command_GL_ARB_depth_texture

  def self.get_ext_command_GL_ARB_depth_texture
    [
    ]
  end # self.get_ext_command_GL_ARB_depth_texture


  def self.define_ext_command_GL_ARB_derivative_control
  end # self.define_ext_command_GL_ARB_derivative_control

  def self.get_ext_command_GL_ARB_derivative_control
    [
    ]
  end # self.get_ext_command_GL_ARB_derivative_control


  def self.define_ext_command_GL_ARB_direct_state_access
    GL::GL_FUNCTION_SYMBOLS << :glCreateTransformFeedbacks
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateTransformFeedbacks] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateTransformFeedbacks] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateTransformFeedbacks)
    GL.module_eval(<<-SRC)
      def self.CreateTransformFeedbacks(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glCreateTransformFeedbacks].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformFeedbackBufferBase
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformFeedbackBufferBase] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformFeedbackBufferBase] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformFeedbackBufferBase)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackBufferBase(_xfb_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:glTransformFeedbackBufferBase].call(_xfb_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformFeedbackBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformFeedbackBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformFeedbackBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformFeedbackBufferRange)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackBufferRange(_xfb_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glTransformFeedbackBufferRange].call(_xfb_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTransformFeedbackiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTransformFeedbackiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTransformFeedbackiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTransformFeedbackiv)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbackiv(_xfb_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetTransformFeedbackiv].call(_xfb_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTransformFeedbacki_v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTransformFeedbacki_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTransformFeedbacki_v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTransformFeedbacki_v)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbacki_v(_xfb_, _pname_, _index_, _param_)
        GL_FUNCTIONS_MAP[:glGetTransformFeedbacki_v].call(_xfb_, _pname_, _index_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTransformFeedbacki64_v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTransformFeedbacki64_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTransformFeedbacki64_v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTransformFeedbacki64_v)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbacki64_v(_xfb_, _pname_, _index_, _param_)
        GL_FUNCTIONS_MAP[:glGetTransformFeedbacki64_v].call(_xfb_, _pname_, _index_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateBuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateBuffers)
    GL.module_eval(<<-SRC)
      def self.CreateBuffers(_n_, _buffers_)
        GL_FUNCTIONS_MAP[:glCreateBuffers].call(_n_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferStorage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferStorage)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorage(_buffer_, _size_, _data_, _flags_)
        GL_FUNCTIONS_MAP[:glNamedBufferStorage].call(_buffer_, _size_, _data_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferData)
    GL.module_eval(<<-SRC)
      def self.NamedBufferData(_buffer_, _size_, _data_, _usage_)
        GL_FUNCTIONS_MAP[:glNamedBufferData].call(_buffer_, _size_, _data_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.NamedBufferSubData(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glNamedBufferSubData].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyNamedBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.CopyNamedBufferSubData(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:glCopyNamedBufferSubData].call(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedBufferData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedBufferData)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferData(_buffer_, _internalformat_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearNamedBufferData].call(_buffer_, _internalformat_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedBufferSubData] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferSubData(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearNamedBufferSubData].call(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapNamedBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapNamedBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapNamedBuffer] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapNamedBuffer)
    GL.module_eval(<<-SRC)
      def self.MapNamedBuffer(_buffer_, _access_)
        GL_FUNCTIONS_MAP[:glMapNamedBuffer].call(_buffer_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapNamedBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapNamedBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapNamedBufferRange] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapNamedBufferRange)
    GL.module_eval(<<-SRC)
      def self.MapNamedBufferRange(_buffer_, _offset_, _length_, _access_)
        GL_FUNCTIONS_MAP[:glMapNamedBufferRange].call(_buffer_, _offset_, _length_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUnmapNamedBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glUnmapNamedBuffer] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUnmapNamedBuffer] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glUnmapNamedBuffer)
    GL.module_eval(<<-SRC)
      def self.UnmapNamedBuffer(_buffer_)
        GL_FUNCTIONS_MAP[:glUnmapNamedBuffer].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFlushMappedNamedBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushMappedNamedBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushMappedNamedBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushMappedNamedBufferRange)
    GL.module_eval(<<-SRC)
      def self.FlushMappedNamedBufferRange(_buffer_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:glFlushMappedNamedBufferRange].call(_buffer_, _offset_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameteriv(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferParameteriv].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferParameteri64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferParameteri64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferParameteri64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferParameteri64v)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameteri64v(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferParameteri64v].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferPointerv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferPointerv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferPointerv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferPointerv)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferPointerv(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferPointerv].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferSubData)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferSubData(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferSubData].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateFramebuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateFramebuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateFramebuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateFramebuffers)
    GL.module_eval(<<-SRC)
      def self.CreateFramebuffers(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:glCreateFramebuffers].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferRenderbuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferRenderbuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferRenderbuffer(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferRenderbuffer].call(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferParameteri)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferParameteri(_framebuffer_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferParameteri].call(_framebuffer_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTexture
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTexture] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTexture] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTexture)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture(_framebuffer_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTexture].call(_framebuffer_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTextureLayer
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTextureLayer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTextureLayer] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTextureLayer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureLayer(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTextureLayer].call(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferDrawBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferDrawBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferDrawBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferDrawBuffer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferDrawBuffer(_framebuffer_, _buf_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferDrawBuffer].call(_framebuffer_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferDrawBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferDrawBuffers] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferDrawBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferDrawBuffers)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferDrawBuffers(_framebuffer_, _n_, _bufs_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferDrawBuffers].call(_framebuffer_, _n_, _bufs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferReadBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferReadBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferReadBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferReadBuffer)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferReadBuffer(_framebuffer_, _src_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferReadBuffer].call(_framebuffer_, _src_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateNamedFramebufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateNamedFramebufferData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateNamedFramebufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateNamedFramebufferData)
    GL.module_eval(<<-SRC)
      def self.InvalidateNamedFramebufferData(_framebuffer_, _numAttachments_, _attachments_)
        GL_FUNCTIONS_MAP[:glInvalidateNamedFramebufferData].call(_framebuffer_, _numAttachments_, _attachments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateNamedFramebufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateNamedFramebufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateNamedFramebufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateNamedFramebufferSubData)
    GL.module_eval(<<-SRC)
      def self.InvalidateNamedFramebufferSubData(_framebuffer_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glInvalidateNamedFramebufferSubData].call(_framebuffer_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedFramebufferiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedFramebufferiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedFramebufferiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedFramebufferiv)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferiv(_framebuffer_, _buffer_, _drawbuffer_, _value_)
        GL_FUNCTIONS_MAP[:glClearNamedFramebufferiv].call(_framebuffer_, _buffer_, _drawbuffer_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedFramebufferuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedFramebufferuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedFramebufferuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedFramebufferuiv)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferuiv(_framebuffer_, _buffer_, _drawbuffer_, _value_)
        GL_FUNCTIONS_MAP[:glClearNamedFramebufferuiv].call(_framebuffer_, _buffer_, _drawbuffer_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedFramebufferfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedFramebufferfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedFramebufferfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedFramebufferfv)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferfv(_framebuffer_, _buffer_, _drawbuffer_, _value_)
        GL_FUNCTIONS_MAP[:glClearNamedFramebufferfv].call(_framebuffer_, _buffer_, _drawbuffer_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedFramebufferfi
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedFramebufferfi] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedFramebufferfi] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedFramebufferfi)
    GL.module_eval(<<-SRC)
      def self.ClearNamedFramebufferfi(_framebuffer_, _buffer_, _drawbuffer_, _depth_, _stencil_)
        GL_FUNCTIONS_MAP[:glClearNamedFramebufferfi].call(_framebuffer_, _buffer_, _drawbuffer_, _depth_, _stencil_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlitNamedFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlitNamedFramebuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlitNamedFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlitNamedFramebuffer)
    GL.module_eval(<<-SRC)
      def self.BlitNamedFramebuffer(_readFramebuffer_, _drawFramebuffer_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:glBlitNamedFramebuffer].call(_readFramebuffer_, _drawFramebuffer_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCheckNamedFramebufferStatus
    GL::GL_FUNCTIONS_ARGS_MAP[:glCheckNamedFramebufferStatus] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCheckNamedFramebufferStatus] = -Fiddle::TYPE_INT
    GL.bind_command(:glCheckNamedFramebufferStatus)
    GL.module_eval(<<-SRC)
      def self.CheckNamedFramebufferStatus(_framebuffer_, _target_)
        GL_FUNCTIONS_MAP[:glCheckNamedFramebufferStatus].call(_framebuffer_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedFramebufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedFramebufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedFramebufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedFramebufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferParameteriv(_framebuffer_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetNamedFramebufferParameteriv].call(_framebuffer_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedFramebufferAttachmentParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedFramebufferAttachmentParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedFramebufferAttachmentParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedFramebufferAttachmentParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferAttachmentParameteriv(_framebuffer_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedFramebufferAttachmentParameteriv].call(_framebuffer_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateRenderbuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateRenderbuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateRenderbuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateRenderbuffers)
    GL.module_eval(<<-SRC)
      def self.CreateRenderbuffers(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:glCreateRenderbuffers].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedRenderbufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedRenderbufferStorage] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedRenderbufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedRenderbufferStorage)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorage(_renderbuffer_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glNamedRenderbufferStorage].call(_renderbuffer_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedRenderbufferStorageMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedRenderbufferStorageMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedRenderbufferStorageMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedRenderbufferStorageMultisample)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisample(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glNamedRenderbufferStorageMultisample].call(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedRenderbufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedRenderbufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedRenderbufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedRenderbufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetNamedRenderbufferParameteriv(_renderbuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedRenderbufferParameteriv].call(_renderbuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateTextures
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateTextures] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateTextures] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateTextures)
    GL.module_eval(<<-SRC)
      def self.CreateTextures(_target_, _n_, _textures_)
        GL_FUNCTIONS_MAP[:glCreateTextures].call(_target_, _n_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureBuffer)
    GL.module_eval(<<-SRC)
      def self.TextureBuffer(_texture_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:glTextureBuffer].call(_texture_, _internalformat_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureBufferRange)
    GL.module_eval(<<-SRC)
      def self.TextureBufferRange(_texture_, _internalformat_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glTextureBufferRange].call(_texture_, _internalformat_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage1D)
    GL.module_eval(<<-SRC)
      def self.TextureStorage1D(_texture_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:glTextureStorage1D].call(_texture_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage2D)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2D(_texture_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glTextureStorage2D].call(_texture_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage3D)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3D(_texture_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glTextureStorage3D].call(_texture_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage2DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage2DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage2DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage2DMultisample)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DMultisample(_texture_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTextureStorage2DMultisample].call(_texture_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage3DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage3DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage3DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage3DMultisample)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DMultisample(_texture_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTextureStorage3DMultisample].call(_texture_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureSubImage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureSubImage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureSubImage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureSubImage1D)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage1D(_texture_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureSubImage1D].call(_texture_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureSubImage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureSubImage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureSubImage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureSubImage2D)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage2D(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureSubImage2D].call(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureSubImage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureSubImage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureSubImage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureSubImage3D)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage3D(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureSubImage3D].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureSubImage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureSubImage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureSubImage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureSubImage1D)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage1D(_texture_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTextureSubImage1D].call(_texture_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureSubImage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureSubImage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureSubImage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureSubImage2D)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage2D(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTextureSubImage2D].call(_texture_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureSubImage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureSubImage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureSubImage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureSubImage3D)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage3D(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTextureSubImage3D].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureSubImage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureSubImage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureSubImage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureSubImage1D)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage1D(_texture_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyTextureSubImage1D].call(_texture_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureSubImage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureSubImage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureSubImage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureSubImage2D)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage2D(_texture_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyTextureSubImage2D].call(_texture_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureSubImage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureSubImage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureSubImage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureSubImage3D)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage3D(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyTextureSubImage3D].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterf
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterf] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterf] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterf)
    GL.module_eval(<<-SRC)
      def self.TextureParameterf(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTextureParameterf].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterfv)
    GL.module_eval(<<-SRC)
      def self.TextureParameterfv(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTextureParameterfv].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameteri)
    GL.module_eval(<<-SRC)
      def self.TextureParameteri(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTextureParameteri].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterIiv)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTextureParameterIiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIuiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTextureParameterIuiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameteriv)
    GL.module_eval(<<-SRC)
      def self.TextureParameteriv(_texture_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTextureParameteriv].call(_texture_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenerateTextureMipmap
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenerateTextureMipmap] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenerateTextureMipmap] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenerateTextureMipmap)
    GL.module_eval(<<-SRC)
      def self.GenerateTextureMipmap(_texture_)
        GL_FUNCTIONS_MAP[:glGenerateTextureMipmap].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindTextureUnit
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTextureUnit] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTextureUnit] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindTextureUnit)
    GL.module_eval(<<-SRC)
      def self.BindTextureUnit(_unit_, _texture_)
        GL_FUNCTIONS_MAP[:glBindTextureUnit].call(_unit_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureImage)
    GL.module_eval(<<-SRC)
      def self.GetTextureImage(_texture_, _level_, _format_, _type_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:glGetTextureImage].call(_texture_, _level_, _format_, _type_, _bufSize_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCompressedTextureImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCompressedTextureImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCompressedTextureImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCompressedTextureImage)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTextureImage(_texture_, _level_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:glGetCompressedTextureImage].call(_texture_, _level_, _bufSize_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureLevelParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureLevelParameterfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureLevelParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureLevelParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameterfv(_texture_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureLevelParameterfv].call(_texture_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureLevelParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureLevelParameteriv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureLevelParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureLevelParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameteriv(_texture_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureLevelParameteriv].call(_texture_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterfv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterfv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterIiv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterIiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIuiv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterIuiv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameteriv(_texture_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameteriv].call(_texture_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateVertexArrays
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateVertexArrays] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateVertexArrays] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateVertexArrays)
    GL.module_eval(<<-SRC)
      def self.CreateVertexArrays(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:glCreateVertexArrays].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVertexArrayAttrib
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVertexArrayAttrib] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVertexArrayAttrib] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVertexArrayAttrib)
    GL.module_eval(<<-SRC)
      def self.DisableVertexArrayAttrib(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:glDisableVertexArrayAttrib].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableVertexArrayAttrib
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVertexArrayAttrib] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVertexArrayAttrib] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVertexArrayAttrib)
    GL.module_eval(<<-SRC)
      def self.EnableVertexArrayAttrib(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:glEnableVertexArrayAttrib].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayElementBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayElementBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayElementBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayElementBuffer)
    GL.module_eval(<<-SRC)
      def self.VertexArrayElementBuffer(_vaobj_, _buffer_)
        GL_FUNCTIONS_MAP[:glVertexArrayElementBuffer].call(_vaobj_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexBuffer)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexBuffer(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexBuffer].call(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexBuffers] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexBuffers)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexBuffers(_vaobj_, _first_, _count_, _buffers_, _offsets_, _strides_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexBuffers].call(_vaobj_, _first_, _count_, _buffers_, _offsets_, _strides_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayAttribBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayAttribBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayAttribBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayAttribBinding)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribBinding(_vaobj_, _attribindex_, _bindingindex_)
        GL_FUNCTIONS_MAP[:glVertexArrayAttribBinding].call(_vaobj_, _attribindex_, _bindingindex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayAttribFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayAttribFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayAttribFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayAttribFormat)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribFormat(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexArrayAttribFormat].call(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayAttribIFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayAttribIFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayAttribIFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayAttribIFormat)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribIFormat(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexArrayAttribIFormat].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayAttribLFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayAttribLFormat] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayAttribLFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayAttribLFormat)
    GL.module_eval(<<-SRC)
      def self.VertexArrayAttribLFormat(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexArrayAttribLFormat].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayBindingDivisor
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayBindingDivisor] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayBindingDivisor] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayBindingDivisor)
    GL.module_eval(<<-SRC)
      def self.VertexArrayBindingDivisor(_vaobj_, _bindingindex_, _divisor_)
        GL_FUNCTIONS_MAP[:glVertexArrayBindingDivisor].call(_vaobj_, _bindingindex_, _divisor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayiv)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayiv(_vaobj_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayiv].call(_vaobj_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayIndexediv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayIndexediv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayIndexediv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayIndexediv)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIndexediv(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayIndexediv].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayIndexed64iv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayIndexed64iv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayIndexed64iv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayIndexed64iv)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIndexed64iv(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayIndexed64iv].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateSamplers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateSamplers)
    GL.module_eval(<<-SRC)
      def self.CreateSamplers(_n_, _samplers_)
        GL_FUNCTIONS_MAP[:glCreateSamplers].call(_n_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateProgramPipelines
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateProgramPipelines] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateProgramPipelines] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateProgramPipelines)
    GL.module_eval(<<-SRC)
      def self.CreateProgramPipelines(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:glCreateProgramPipelines].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateQueries
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateQueries] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateQueries] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateQueries)
    GL.module_eval(<<-SRC)
      def self.CreateQueries(_target_, _n_, _ids_)
        GL_FUNCTIONS_MAP[:glCreateQueries].call(_target_, _n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryBufferObjecti64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryBufferObjecti64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryBufferObjecti64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryBufferObjecti64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjecti64v(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:glGetQueryBufferObjecti64v].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryBufferObjectiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryBufferObjectiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryBufferObjectiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryBufferObjectiv)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjectiv(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:glGetQueryBufferObjectiv].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryBufferObjectui64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryBufferObjectui64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryBufferObjectui64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryBufferObjectui64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjectui64v(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:glGetQueryBufferObjectui64v].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryBufferObjectuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryBufferObjectuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryBufferObjectuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryBufferObjectuiv)
    GL.module_eval(<<-SRC)
      def self.GetQueryBufferObjectuiv(_id_, _buffer_, _pname_, _offset_)
        GL_FUNCTIONS_MAP[:glGetQueryBufferObjectuiv].call(_id_, _buffer_, _pname_, _offset_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_direct_state_access

  def self.get_ext_command_GL_ARB_direct_state_access
    [
      'glCreateTransformFeedbacks',
      'glTransformFeedbackBufferBase',
      'glTransformFeedbackBufferRange',
      'glGetTransformFeedbackiv',
      'glGetTransformFeedbacki_v',
      'glGetTransformFeedbacki64_v',
      'glCreateBuffers',
      'glNamedBufferStorage',
      'glNamedBufferData',
      'glNamedBufferSubData',
      'glCopyNamedBufferSubData',
      'glClearNamedBufferData',
      'glClearNamedBufferSubData',
      'glMapNamedBuffer',
      'glMapNamedBufferRange',
      'glUnmapNamedBuffer',
      'glFlushMappedNamedBufferRange',
      'glGetNamedBufferParameteriv',
      'glGetNamedBufferParameteri64v',
      'glGetNamedBufferPointerv',
      'glGetNamedBufferSubData',
      'glCreateFramebuffers',
      'glNamedFramebufferRenderbuffer',
      'glNamedFramebufferParameteri',
      'glNamedFramebufferTexture',
      'glNamedFramebufferTextureLayer',
      'glNamedFramebufferDrawBuffer',
      'glNamedFramebufferDrawBuffers',
      'glNamedFramebufferReadBuffer',
      'glInvalidateNamedFramebufferData',
      'glInvalidateNamedFramebufferSubData',
      'glClearNamedFramebufferiv',
      'glClearNamedFramebufferuiv',
      'glClearNamedFramebufferfv',
      'glClearNamedFramebufferfi',
      'glBlitNamedFramebuffer',
      'glCheckNamedFramebufferStatus',
      'glGetNamedFramebufferParameteriv',
      'glGetNamedFramebufferAttachmentParameteriv',
      'glCreateRenderbuffers',
      'glNamedRenderbufferStorage',
      'glNamedRenderbufferStorageMultisample',
      'glGetNamedRenderbufferParameteriv',
      'glCreateTextures',
      'glTextureBuffer',
      'glTextureBufferRange',
      'glTextureStorage1D',
      'glTextureStorage2D',
      'glTextureStorage3D',
      'glTextureStorage2DMultisample',
      'glTextureStorage3DMultisample',
      'glTextureSubImage1D',
      'glTextureSubImage2D',
      'glTextureSubImage3D',
      'glCompressedTextureSubImage1D',
      'glCompressedTextureSubImage2D',
      'glCompressedTextureSubImage3D',
      'glCopyTextureSubImage1D',
      'glCopyTextureSubImage2D',
      'glCopyTextureSubImage3D',
      'glTextureParameterf',
      'glTextureParameterfv',
      'glTextureParameteri',
      'glTextureParameterIiv',
      'glTextureParameterIuiv',
      'glTextureParameteriv',
      'glGenerateTextureMipmap',
      'glBindTextureUnit',
      'glGetTextureImage',
      'glGetCompressedTextureImage',
      'glGetTextureLevelParameterfv',
      'glGetTextureLevelParameteriv',
      'glGetTextureParameterfv',
      'glGetTextureParameterIiv',
      'glGetTextureParameterIuiv',
      'glGetTextureParameteriv',
      'glCreateVertexArrays',
      'glDisableVertexArrayAttrib',
      'glEnableVertexArrayAttrib',
      'glVertexArrayElementBuffer',
      'glVertexArrayVertexBuffer',
      'glVertexArrayVertexBuffers',
      'glVertexArrayAttribBinding',
      'glVertexArrayAttribFormat',
      'glVertexArrayAttribIFormat',
      'glVertexArrayAttribLFormat',
      'glVertexArrayBindingDivisor',
      'glGetVertexArrayiv',
      'glGetVertexArrayIndexediv',
      'glGetVertexArrayIndexed64iv',
      'glCreateSamplers',
      'glCreateProgramPipelines',
      'glCreateQueries',
      'glGetQueryBufferObjecti64v',
      'glGetQueryBufferObjectiv',
      'glGetQueryBufferObjectui64v',
      'glGetQueryBufferObjectuiv',
    ]
  end # self.get_ext_command_GL_ARB_direct_state_access


  def self.define_ext_command_GL_ARB_draw_buffers
    GL::GL_FUNCTION_SYMBOLS << :glDrawBuffersARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawBuffersARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawBuffersARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawBuffersARB)
    GL.module_eval(<<-SRC)
      def self.DrawBuffersARB(_n_, _bufs_)
        GL_FUNCTIONS_MAP[:glDrawBuffersARB].call(_n_, _bufs_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_buffers

  def self.get_ext_command_GL_ARB_draw_buffers
    [
      'glDrawBuffersARB',
    ]
  end # self.get_ext_command_GL_ARB_draw_buffers


  def self.define_ext_command_GL_ARB_draw_buffers_blend
    GL::GL_FUNCTION_SYMBOLS << :glBlendEquationiARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquationiARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquationiARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquationiARB)
    GL.module_eval(<<-SRC)
      def self.BlendEquationiARB(_buf_, _mode_)
        GL_FUNCTIONS_MAP[:glBlendEquationiARB].call(_buf_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendEquationSeparateiARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquationSeparateiARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquationSeparateiARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquationSeparateiARB)
    GL.module_eval(<<-SRC)
      def self.BlendEquationSeparateiARB(_buf_, _modeRGB_, _modeAlpha_)
        GL_FUNCTIONS_MAP[:glBlendEquationSeparateiARB].call(_buf_, _modeRGB_, _modeAlpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendFunciARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendFunciARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendFunciARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendFunciARB)
    GL.module_eval(<<-SRC)
      def self.BlendFunciARB(_buf_, _src_, _dst_)
        GL_FUNCTIONS_MAP[:glBlendFunciARB].call(_buf_, _src_, _dst_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendFuncSeparateiARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendFuncSeparateiARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendFuncSeparateiARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendFuncSeparateiARB)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateiARB(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
        GL_FUNCTIONS_MAP[:glBlendFuncSeparateiARB].call(_buf_, _srcRGB_, _dstRGB_, _srcAlpha_, _dstAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_buffers_blend

  def self.get_ext_command_GL_ARB_draw_buffers_blend
    [
      'glBlendEquationiARB',
      'glBlendEquationSeparateiARB',
      'glBlendFunciARB',
      'glBlendFuncSeparateiARB',
    ]
  end # self.get_ext_command_GL_ARB_draw_buffers_blend


  def self.define_ext_command_GL_ARB_draw_elements_base_vertex
    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsBaseVertex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsBaseVertex)
    GL.module_eval(<<-SRC)
      def self.DrawElementsBaseVertex(_mode_, _count_, _type_, _indices_, _basevertex_)
        GL_FUNCTIONS_MAP[:glDrawElementsBaseVertex].call(_mode_, _count_, _type_, _indices_, _basevertex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawRangeElementsBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawRangeElementsBaseVertex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawRangeElementsBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawRangeElementsBaseVertex)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementsBaseVertex(_mode_, _start_, _end_, _count_, _type_, _indices_, _basevertex_)
        GL_FUNCTIONS_MAP[:glDrawRangeElementsBaseVertex].call(_mode_, _start_, _end_, _count_, _type_, _indices_, _basevertex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsInstancedBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsInstancedBaseVertex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsInstancedBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsInstancedBaseVertex)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedBaseVertex(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_)
        GL_FUNCTIONS_MAP[:glDrawElementsInstancedBaseVertex].call(_mode_, _count_, _type_, _indices_, _instancecount_, _basevertex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsBaseVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsBaseVertex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsBaseVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsBaseVertex)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsBaseVertex(_mode_, _count_, _type_, _indices_, _drawcount_, _basevertex_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsBaseVertex].call(_mode_, _count_, _type_, _indices_, _drawcount_, _basevertex_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_elements_base_vertex

  def self.get_ext_command_GL_ARB_draw_elements_base_vertex
    [
      'glDrawElementsBaseVertex',
      'glDrawRangeElementsBaseVertex',
      'glDrawElementsInstancedBaseVertex',
      'glMultiDrawElementsBaseVertex',
    ]
  end # self.get_ext_command_GL_ARB_draw_elements_base_vertex


  def self.define_ext_command_GL_ARB_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :glDrawArraysIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawArraysIndirect] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawArraysIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawArraysIndirect)
    GL.module_eval(<<-SRC)
      def self.DrawArraysIndirect(_mode_, _indirect_)
        GL_FUNCTIONS_MAP[:glDrawArraysIndirect].call(_mode_, _indirect_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsIndirect] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsIndirect)
    GL.module_eval(<<-SRC)
      def self.DrawElementsIndirect(_mode_, _type_, _indirect_)
        GL_FUNCTIONS_MAP[:glDrawElementsIndirect].call(_mode_, _type_, _indirect_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_indirect

  def self.get_ext_command_GL_ARB_draw_indirect
    [
      'glDrawArraysIndirect',
      'glDrawElementsIndirect',
    ]
  end # self.get_ext_command_GL_ARB_draw_indirect


  def self.define_ext_command_GL_ARB_draw_instanced
    GL::GL_FUNCTION_SYMBOLS << :glDrawArraysInstancedARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawArraysInstancedARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawArraysInstancedARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawArraysInstancedARB)
    GL.module_eval(<<-SRC)
      def self.DrawArraysInstancedARB(_mode_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:glDrawArraysInstancedARB].call(_mode_, _first_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsInstancedARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsInstancedARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsInstancedARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsInstancedARB)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedARB(_mode_, _count_, _type_, _indices_, _primcount_)
        GL_FUNCTIONS_MAP[:glDrawElementsInstancedARB].call(_mode_, _count_, _type_, _indices_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_draw_instanced

  def self.get_ext_command_GL_ARB_draw_instanced
    [
      'glDrawArraysInstancedARB',
      'glDrawElementsInstancedARB',
    ]
  end # self.get_ext_command_GL_ARB_draw_instanced


  def self.define_ext_command_GL_ARB_enhanced_layouts
  end # self.define_ext_command_GL_ARB_enhanced_layouts

  def self.get_ext_command_GL_ARB_enhanced_layouts
    [
    ]
  end # self.get_ext_command_GL_ARB_enhanced_layouts


  def self.define_ext_command_GL_ARB_explicit_attrib_location
  end # self.define_ext_command_GL_ARB_explicit_attrib_location

  def self.get_ext_command_GL_ARB_explicit_attrib_location
    [
    ]
  end # self.get_ext_command_GL_ARB_explicit_attrib_location


  def self.define_ext_command_GL_ARB_explicit_uniform_location
  end # self.define_ext_command_GL_ARB_explicit_uniform_location

  def self.get_ext_command_GL_ARB_explicit_uniform_location
    [
    ]
  end # self.get_ext_command_GL_ARB_explicit_uniform_location


  def self.define_ext_command_GL_ARB_fragment_coord_conventions
  end # self.define_ext_command_GL_ARB_fragment_coord_conventions

  def self.get_ext_command_GL_ARB_fragment_coord_conventions
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_coord_conventions


  def self.define_ext_command_GL_ARB_fragment_layer_viewport
  end # self.define_ext_command_GL_ARB_fragment_layer_viewport

  def self.get_ext_command_GL_ARB_fragment_layer_viewport
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_layer_viewport


  def self.define_ext_command_GL_ARB_fragment_program
    GL::GL_FUNCTION_SYMBOLS << :glProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.ProgramStringARB(_target_, _format_, _len_, _string_)
        GL_FUNCTIONS_MAP[:glProgramStringARB].call(_target_, _format_, _len_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindProgramARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindProgramARB)
    GL.module_eval(<<-SRC)
      def self.BindProgramARB(_target_, _program_)
        GL_FUNCTIONS_MAP[:glBindProgramARB].call(_target_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteProgramsARB)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glDeleteProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenProgramsARB)
    GL.module_eval(<<-SRC)
      def self.GenProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glGenProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramEnvParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramEnvParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramEnvParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramEnvParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramEnvParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramEnvParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramEnvParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramEnvParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramEnvParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramEnvParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramLocalParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramLocalParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramLocalParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramLocalParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramLocalParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramLocalParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramLocalParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramLocalParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramLocalParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramLocalParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramivARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramStringARB(_target_, _pname_, _string_)
        GL_FUNCTIONS_MAP[:glGetProgramStringARB].call(_target_, _pname_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsProgramARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsProgramARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsProgramARB)
    GL.module_eval(<<-SRC)
      def self.IsProgramARB(_program_)
        GL_FUNCTIONS_MAP[:glIsProgramARB].call(_program_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_fragment_program

  def self.get_ext_command_GL_ARB_fragment_program
    [
      'glProgramStringARB',
      'glBindProgramARB',
      'glDeleteProgramsARB',
      'glGenProgramsARB',
      'glProgramEnvParameter4dARB',
      'glProgramEnvParameter4dvARB',
      'glProgramEnvParameter4fARB',
      'glProgramEnvParameter4fvARB',
      'glProgramLocalParameter4dARB',
      'glProgramLocalParameter4dvARB',
      'glProgramLocalParameter4fARB',
      'glProgramLocalParameter4fvARB',
      'glGetProgramEnvParameterdvARB',
      'glGetProgramEnvParameterfvARB',
      'glGetProgramLocalParameterdvARB',
      'glGetProgramLocalParameterfvARB',
      'glGetProgramivARB',
      'glGetProgramStringARB',
      'glIsProgramARB',
    ]
  end # self.get_ext_command_GL_ARB_fragment_program


  def self.define_ext_command_GL_ARB_fragment_program_shadow
  end # self.define_ext_command_GL_ARB_fragment_program_shadow

  def self.get_ext_command_GL_ARB_fragment_program_shadow
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_program_shadow


  def self.define_ext_command_GL_ARB_fragment_shader
  end # self.define_ext_command_GL_ARB_fragment_shader

  def self.get_ext_command_GL_ARB_fragment_shader
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_shader


  def self.define_ext_command_GL_ARB_fragment_shader_interlock
  end # self.define_ext_command_GL_ARB_fragment_shader_interlock

  def self.get_ext_command_GL_ARB_fragment_shader_interlock
    [
    ]
  end # self.get_ext_command_GL_ARB_fragment_shader_interlock


  def self.define_ext_command_GL_ARB_framebuffer_no_attachments
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferParameteri)
    GL.module_eval(<<-SRC)
      def self.FramebufferParameteri(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glFramebufferParameteri].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFramebufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFramebufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFramebufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFramebufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFramebufferParameteriv].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_framebuffer_no_attachments

  def self.get_ext_command_GL_ARB_framebuffer_no_attachments
    [
      'glFramebufferParameteri',
      'glGetFramebufferParameteriv',
    ]
  end # self.get_ext_command_GL_ARB_framebuffer_no_attachments


  def self.define_ext_command_GL_ARB_framebuffer_object
    GL::GL_FUNCTION_SYMBOLS << :glIsRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsRenderbuffer] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsRenderbuffer] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.IsRenderbuffer(_renderbuffer_)
        GL_FUNCTIONS_MAP[:glIsRenderbuffer].call(_renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindRenderbuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindRenderbuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.BindRenderbuffer(_target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glBindRenderbuffer].call(_target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteRenderbuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteRenderbuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteRenderbuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteRenderbuffers)
    GL.module_eval(<<-SRC)
      def self.DeleteRenderbuffers(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:glDeleteRenderbuffers].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenRenderbuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenRenderbuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenRenderbuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenRenderbuffers)
    GL.module_eval(<<-SRC)
      def self.GenRenderbuffers(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:glGenRenderbuffers].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRenderbufferStorage
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderbufferStorage] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderbufferStorage] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderbufferStorage)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorage(_target_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glRenderbufferStorage].call(_target_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetRenderbufferParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetRenderbufferParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetRenderbufferParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetRenderbufferParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetRenderbufferParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetRenderbufferParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsFramebuffer] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsFramebuffer] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsFramebuffer)
    GL.module_eval(<<-SRC)
      def self.IsFramebuffer(_framebuffer_)
        GL_FUNCTIONS_MAP[:glIsFramebuffer].call(_framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindFramebuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindFramebuffer)
    GL.module_eval(<<-SRC)
      def self.BindFramebuffer(_target_, _framebuffer_)
        GL_FUNCTIONS_MAP[:glBindFramebuffer].call(_target_, _framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteFramebuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteFramebuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteFramebuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteFramebuffers)
    GL.module_eval(<<-SRC)
      def self.DeleteFramebuffers(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:glDeleteFramebuffers].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenFramebuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenFramebuffers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenFramebuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenFramebuffers)
    GL.module_eval(<<-SRC)
      def self.GenFramebuffers(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:glGenFramebuffers].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCheckFramebufferStatus
    GL::GL_FUNCTIONS_ARGS_MAP[:glCheckFramebufferStatus] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCheckFramebufferStatus] = -Fiddle::TYPE_INT
    GL.bind_command(:glCheckFramebufferStatus)
    GL.module_eval(<<-SRC)
      def self.CheckFramebufferStatus(_target_)
        GL_FUNCTIONS_MAP[:glCheckFramebufferStatus].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTexture1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTexture1D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTexture1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTexture1D)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture1D(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glFramebufferTexture1D].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTexture2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTexture2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTexture2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTexture2D)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture2D(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glFramebufferTexture2D].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTexture3D
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTexture3D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTexture3D] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTexture3D)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture3D(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
        GL_FUNCTIONS_MAP[:glFramebufferTexture3D].call(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferRenderbuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferRenderbuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferRenderbuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferRenderbuffer)
    GL.module_eval(<<-SRC)
      def self.FramebufferRenderbuffer(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glFramebufferRenderbuffer].call(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFramebufferAttachmentParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFramebufferAttachmentParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFramebufferAttachmentParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFramebufferAttachmentParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferAttachmentParameteriv(_target_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFramebufferAttachmentParameteriv].call(_target_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenerateMipmap
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenerateMipmap] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenerateMipmap] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenerateMipmap)
    GL.module_eval(<<-SRC)
      def self.GenerateMipmap(_target_)
        GL_FUNCTIONS_MAP[:glGenerateMipmap].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlitFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlitFramebuffer] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlitFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlitFramebuffer)
    GL.module_eval(<<-SRC)
      def self.BlitFramebuffer(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:glBlitFramebuffer].call(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRenderbufferStorageMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderbufferStorageMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderbufferStorageMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderbufferStorageMultisample)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisample(_target_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glRenderbufferStorageMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureLayer
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureLayer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureLayer] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureLayer)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayer(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureLayer].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_framebuffer_object

  def self.get_ext_command_GL_ARB_framebuffer_object
    [
      'glIsRenderbuffer',
      'glBindRenderbuffer',
      'glDeleteRenderbuffers',
      'glGenRenderbuffers',
      'glRenderbufferStorage',
      'glGetRenderbufferParameteriv',
      'glIsFramebuffer',
      'glBindFramebuffer',
      'glDeleteFramebuffers',
      'glGenFramebuffers',
      'glCheckFramebufferStatus',
      'glFramebufferTexture1D',
      'glFramebufferTexture2D',
      'glFramebufferTexture3D',
      'glFramebufferRenderbuffer',
      'glGetFramebufferAttachmentParameteriv',
      'glGenerateMipmap',
      'glBlitFramebuffer',
      'glRenderbufferStorageMultisample',
      'glFramebufferTextureLayer',
    ]
  end # self.get_ext_command_GL_ARB_framebuffer_object


  def self.define_ext_command_GL_ARB_framebuffer_sRGB
  end # self.define_ext_command_GL_ARB_framebuffer_sRGB

  def self.get_ext_command_GL_ARB_framebuffer_sRGB
    [
    ]
  end # self.get_ext_command_GL_ARB_framebuffer_sRGB


  def self.define_ext_command_GL_ARB_geometry_shader4
    GL::GL_FUNCTION_SYMBOLS << :glProgramParameteriARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameteriARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameteriARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameteriARB)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteriARB(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glProgramParameteriARB].call(_program_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureARB(_target_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureARB].call(_target_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureLayerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureLayerARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureLayerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureLayerARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayerARB(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureLayerARB].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureFaceARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureFaceARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureFaceARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureFaceARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureFaceARB(_target_, _attachment_, _texture_, _level_, _face_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureFaceARB].call(_target_, _attachment_, _texture_, _level_, _face_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_geometry_shader4

  def self.get_ext_command_GL_ARB_geometry_shader4
    [
      'glProgramParameteriARB',
      'glFramebufferTextureARB',
      'glFramebufferTextureLayerARB',
      'glFramebufferTextureFaceARB',
    ]
  end # self.get_ext_command_GL_ARB_geometry_shader4


  def self.define_ext_command_GL_ARB_get_program_binary
    GL::GL_FUNCTION_SYMBOLS << :glGetProgramBinary
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramBinary] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramBinary] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramBinary)
    GL.module_eval(<<-SRC)
      def self.GetProgramBinary(_program_, _bufSize_, _length_, _binaryFormat_, _binary_)
        GL_FUNCTIONS_MAP[:glGetProgramBinary].call(_program_, _bufSize_, _length_, _binaryFormat_, _binary_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramBinary
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramBinary] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramBinary] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramBinary)
    GL.module_eval(<<-SRC)
      def self.ProgramBinary(_program_, _binaryFormat_, _binary_, _length_)
        GL_FUNCTIONS_MAP[:glProgramBinary].call(_program_, _binaryFormat_, _binary_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameteri)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteri(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glProgramParameteri].call(_program_, _pname_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_get_program_binary

  def self.get_ext_command_GL_ARB_get_program_binary
    [
      'glGetProgramBinary',
      'glProgramBinary',
      'glProgramParameteri',
    ]
  end # self.get_ext_command_GL_ARB_get_program_binary


  def self.define_ext_command_GL_ARB_get_texture_sub_image
    GL::GL_FUNCTION_SYMBOLS << :glGetTextureSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureSubImage)
    GL.module_eval(<<-SRC)
      def self.GetTextureSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:glGetTextureSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _bufSize_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCompressedTextureSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCompressedTextureSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCompressedTextureSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCompressedTextureSubImage)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTextureSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _bufSize_, _pixels_)
        GL_FUNCTIONS_MAP[:glGetCompressedTextureSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _bufSize_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_get_texture_sub_image

  def self.get_ext_command_GL_ARB_get_texture_sub_image
    [
      'glGetTextureSubImage',
      'glGetCompressedTextureSubImage',
    ]
  end # self.get_ext_command_GL_ARB_get_texture_sub_image


  def self.define_ext_command_GL_ARB_gl_spirv
    GL::GL_FUNCTION_SYMBOLS << :glSpecializeShaderARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glSpecializeShaderARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSpecializeShaderARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glSpecializeShaderARB)
    GL.module_eval(<<-SRC)
      def self.SpecializeShaderARB(_shader_, _pEntryPoint_, _numSpecializationConstants_, _pConstantIndex_, _pConstantValue_)
        GL_FUNCTIONS_MAP[:glSpecializeShaderARB].call(_shader_, _pEntryPoint_, _numSpecializationConstants_, _pConstantIndex_, _pConstantValue_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_gl_spirv

  def self.get_ext_command_GL_ARB_gl_spirv
    [
      'glSpecializeShaderARB',
    ]
  end # self.get_ext_command_GL_ARB_gl_spirv


  def self.define_ext_command_GL_ARB_gpu_shader5
  end # self.define_ext_command_GL_ARB_gpu_shader5

  def self.get_ext_command_GL_ARB_gpu_shader5
    [
    ]
  end # self.get_ext_command_GL_ARB_gpu_shader5


  def self.define_ext_command_GL_ARB_gpu_shader_fp64
    GL::GL_FUNCTION_SYMBOLS << :glUniform1d
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1d] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1d)
    GL.module_eval(<<-SRC)
      def self.Uniform1d(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1d].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2d
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2d] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2d)
    GL.module_eval(<<-SRC)
      def self.Uniform2d(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2d].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3d
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3d] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3d)
    GL.module_eval(<<-SRC)
      def self.Uniform3d(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3d].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4d
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4d] = [Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4d] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4d)
    GL.module_eval(<<-SRC)
      def self.Uniform4d(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4d].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1dv)
    GL.module_eval(<<-SRC)
      def self.Uniform1dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2dv)
    GL.module_eval(<<-SRC)
      def self.Uniform2dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3dv)
    GL.module_eval(<<-SRC)
      def self.Uniform3dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4dv)
    GL.module_eval(<<-SRC)
      def self.Uniform4dv(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4dv].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix2dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix2dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix3dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix3dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix4dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix4dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix2x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix2x3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix2x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix2x3dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2x3dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix2x3dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix2x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix2x4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix2x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix2x4dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2x4dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix2x4dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix3x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix3x2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix3x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix3x2dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3x2dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix3x2dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix3x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix3x4dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix3x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix3x4dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3x4dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix3x4dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix4x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix4x2dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix4x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix4x2dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4x2dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix4x2dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix4x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix4x3dv] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix4x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix4x3dv)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4x3dv(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix4x3dv].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformdv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformdv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformdv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformdv)
    GL.module_eval(<<-SRC)
      def self.GetUniformdv(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformdv].call(_program_, _location_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_gpu_shader_fp64

  def self.get_ext_command_GL_ARB_gpu_shader_fp64
    [
      'glUniform1d',
      'glUniform2d',
      'glUniform3d',
      'glUniform4d',
      'glUniform1dv',
      'glUniform2dv',
      'glUniform3dv',
      'glUniform4dv',
      'glUniformMatrix2dv',
      'glUniformMatrix3dv',
      'glUniformMatrix4dv',
      'glUniformMatrix2x3dv',
      'glUniformMatrix2x4dv',
      'glUniformMatrix3x2dv',
      'glUniformMatrix3x4dv',
      'glUniformMatrix4x2dv',
      'glUniformMatrix4x3dv',
      'glGetUniformdv',
    ]
  end # self.get_ext_command_GL_ARB_gpu_shader_fp64


  def self.define_ext_command_GL_ARB_gpu_shader_int64
    GL::GL_FUNCTION_SYMBOLS << :glUniform1i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64ARB(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1i64ARB].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64ARB(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2i64ARB].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64ARB(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3i64ARB].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4i64ARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4i64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64ARB(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4i64ARB].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4i64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4i64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4i64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64ARB(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1ui64ARB].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64ARB(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2ui64ARB].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64ARB(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3ui64ARB].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ui64ARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ui64ARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64ARB(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4ui64ARB].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ui64vARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ui64vARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64vARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4ui64vARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformi64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformi64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformi64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformi64vARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformi64vARB(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformi64vARB].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformui64vARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformui64vARB(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformui64vARB].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformi64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformi64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformi64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformi64vARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformi64vARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformi64vARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformui64vARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformui64vARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformui64vARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64ARB(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i64ARB].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64ARB(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i64ARB].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64ARB(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i64ARB].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64ARB(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i64ARB].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64ARB(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui64ARB].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64ARB(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui64ARB].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64ARB(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui64ARB].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui64ARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui64ARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui64ARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui64ARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64ARB(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui64ARB].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui64vARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui64vARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui64vARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui64vARB)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64vARB(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui64vARB].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_gpu_shader_int64

  def self.get_ext_command_GL_ARB_gpu_shader_int64
    [
      'glUniform1i64ARB',
      'glUniform2i64ARB',
      'glUniform3i64ARB',
      'glUniform4i64ARB',
      'glUniform1i64vARB',
      'glUniform2i64vARB',
      'glUniform3i64vARB',
      'glUniform4i64vARB',
      'glUniform1ui64ARB',
      'glUniform2ui64ARB',
      'glUniform3ui64ARB',
      'glUniform4ui64ARB',
      'glUniform1ui64vARB',
      'glUniform2ui64vARB',
      'glUniform3ui64vARB',
      'glUniform4ui64vARB',
      'glGetUniformi64vARB',
      'glGetUniformui64vARB',
      'glGetnUniformi64vARB',
      'glGetnUniformui64vARB',
      'glProgramUniform1i64ARB',
      'glProgramUniform2i64ARB',
      'glProgramUniform3i64ARB',
      'glProgramUniform4i64ARB',
      'glProgramUniform1i64vARB',
      'glProgramUniform2i64vARB',
      'glProgramUniform3i64vARB',
      'glProgramUniform4i64vARB',
      'glProgramUniform1ui64ARB',
      'glProgramUniform2ui64ARB',
      'glProgramUniform3ui64ARB',
      'glProgramUniform4ui64ARB',
      'glProgramUniform1ui64vARB',
      'glProgramUniform2ui64vARB',
      'glProgramUniform3ui64vARB',
      'glProgramUniform4ui64vARB',
    ]
  end # self.get_ext_command_GL_ARB_gpu_shader_int64


  def self.define_ext_command_GL_ARB_half_float_pixel
  end # self.define_ext_command_GL_ARB_half_float_pixel

  def self.get_ext_command_GL_ARB_half_float_pixel
    [
    ]
  end # self.get_ext_command_GL_ARB_half_float_pixel


  def self.define_ext_command_GL_ARB_half_float_vertex
  end # self.define_ext_command_GL_ARB_half_float_vertex

  def self.get_ext_command_GL_ARB_half_float_vertex
    [
    ]
  end # self.get_ext_command_GL_ARB_half_float_vertex


  def self.define_ext_command_GL_ARB_imaging
    GL::GL_FUNCTION_SYMBOLS << :glBlendColor
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendColor] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendColor] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendColor)
    GL.module_eval(<<-SRC)
      def self.BlendColor(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glBlendColor].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendEquation
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquation] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquation] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquation)
    GL.module_eval(<<-SRC)
      def self.BlendEquation(_mode_)
        GL_FUNCTIONS_MAP[:glBlendEquation].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorTable
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTable] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTable] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTable)
    GL.module_eval(<<-SRC)
      def self.ColorTable(_target_, _internalformat_, _width_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:glColorTable].call(_target_, _internalformat_, _width_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorTableParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTableParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTableParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTableParameterfv)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glColorTableParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorTableParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTableParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTableParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTableParameteriv)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glColorTableParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyColorTable
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyColorTable] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyColorTable] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyColorTable)
    GL.module_eval(<<-SRC)
      def self.CopyColorTable(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyColorTable].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTable
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTable] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTable] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTable)
    GL.module_eval(<<-SRC)
      def self.GetColorTable(_target_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:glGetColorTable].call(_target_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetColorTableParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetColorTableParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorSubTable
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorSubTable] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorSubTable] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorSubTable)
    GL.module_eval(<<-SRC)
      def self.ColorSubTable(_target_, _start_, _count_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glColorSubTable].call(_target_, _start_, _count_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyColorSubTable
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyColorSubTable] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyColorSubTable] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyColorSubTable)
    GL.module_eval(<<-SRC)
      def self.CopyColorSubTable(_target_, _start_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyColorSubTable].call(_target_, _start_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionFilter1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionFilter1D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionFilter1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionFilter1D)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter1D(_target_, _internalformat_, _width_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:glConvolutionFilter1D].call(_target_, _internalformat_, _width_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionFilter2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionFilter2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionFilter2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionFilter2D)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter2D(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:glConvolutionFilter2D].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterf
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterf] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterf] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterf)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterf(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterf].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterfv)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameteri)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameteri(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameteri].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameteriv)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyConvolutionFilter1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyConvolutionFilter1D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyConvolutionFilter1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyConvolutionFilter1D)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter1D(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyConvolutionFilter1D].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyConvolutionFilter2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyConvolutionFilter2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyConvolutionFilter2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyConvolutionFilter2D)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter2D(_target_, _internalformat_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyConvolutionFilter2D].call(_target_, _internalformat_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionFilter
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionFilter] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionFilter] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionFilter)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionFilter(_target_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:glGetConvolutionFilter].call(_target_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetConvolutionParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetConvolutionParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSeparableFilter
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSeparableFilter] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSeparableFilter] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSeparableFilter)
    GL.module_eval(<<-SRC)
      def self.GetSeparableFilter(_target_, _format_, _type_, _row_, _column_, _span_)
        GL_FUNCTIONS_MAP[:glGetSeparableFilter].call(_target_, _format_, _type_, _row_, _column_, _span_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSeparableFilter2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glSeparableFilter2D] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSeparableFilter2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glSeparableFilter2D)
    GL.module_eval(<<-SRC)
      def self.SeparableFilter2D(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
        GL_FUNCTIONS_MAP[:glSeparableFilter2D].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHistogram
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogram] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogram] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogram)
    GL.module_eval(<<-SRC)
      def self.GetHistogram(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:glGetHistogram].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHistogramParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogramParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogramParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogramParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetHistogramParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHistogramParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogramParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogramParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogramParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetHistogramParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMinmax
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMinmax] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMinmax] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMinmax)
    GL.module_eval(<<-SRC)
      def self.GetMinmax(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:glGetMinmax].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMinmaxParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMinmaxParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMinmaxParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMinmaxParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameterfv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMinmaxParameterfv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMinmaxParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMinmaxParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMinmaxParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMinmaxParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameteriv(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMinmaxParameteriv].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glHistogram
    GL::GL_FUNCTIONS_ARGS_MAP[:glHistogram] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glHistogram] = Fiddle::TYPE_VOID
    GL.bind_command(:glHistogram)
    GL.module_eval(<<-SRC)
      def self.Histogram(_target_, _width_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:glHistogram].call(_target_, _width_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMinmax
    GL::GL_FUNCTIONS_ARGS_MAP[:glMinmax] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMinmax] = Fiddle::TYPE_VOID
    GL.bind_command(:glMinmax)
    GL.module_eval(<<-SRC)
      def self.Minmax(_target_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:glMinmax].call(_target_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResetHistogram
    GL::GL_FUNCTIONS_ARGS_MAP[:glResetHistogram] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResetHistogram] = Fiddle::TYPE_VOID
    GL.bind_command(:glResetHistogram)
    GL.module_eval(<<-SRC)
      def self.ResetHistogram(_target_)
        GL_FUNCTIONS_MAP[:glResetHistogram].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResetMinmax
    GL::GL_FUNCTIONS_ARGS_MAP[:glResetMinmax] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResetMinmax] = Fiddle::TYPE_VOID
    GL.bind_command(:glResetMinmax)
    GL.module_eval(<<-SRC)
      def self.ResetMinmax(_target_)
        GL_FUNCTIONS_MAP[:glResetMinmax].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_imaging

  def self.get_ext_command_GL_ARB_imaging
    [
      'glBlendColor',
      'glBlendEquation',
      'glColorTable',
      'glColorTableParameterfv',
      'glColorTableParameteriv',
      'glCopyColorTable',
      'glGetColorTable',
      'glGetColorTableParameterfv',
      'glGetColorTableParameteriv',
      'glColorSubTable',
      'glCopyColorSubTable',
      'glConvolutionFilter1D',
      'glConvolutionFilter2D',
      'glConvolutionParameterf',
      'glConvolutionParameterfv',
      'glConvolutionParameteri',
      'glConvolutionParameteriv',
      'glCopyConvolutionFilter1D',
      'glCopyConvolutionFilter2D',
      'glGetConvolutionFilter',
      'glGetConvolutionParameterfv',
      'glGetConvolutionParameteriv',
      'glGetSeparableFilter',
      'glSeparableFilter2D',
      'glGetHistogram',
      'glGetHistogramParameterfv',
      'glGetHistogramParameteriv',
      'glGetMinmax',
      'glGetMinmaxParameterfv',
      'glGetMinmaxParameteriv',
      'glHistogram',
      'glMinmax',
      'glResetHistogram',
      'glResetMinmax',
    ]
  end # self.get_ext_command_GL_ARB_imaging


  def self.define_ext_command_GL_ARB_indirect_parameters
    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawArraysIndirectCountARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawArraysIndirectCountARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawArraysIndirectCountARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawArraysIndirectCountARB)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectCountARB(_mode_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawArraysIndirectCountARB].call(_mode_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsIndirectCountARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsIndirectCountARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsIndirectCountARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsIndirectCountARB)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectCountARB(_mode_, _type_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsIndirectCountARB].call(_mode_, _type_, _indirect_, _drawcount_, _maxdrawcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_indirect_parameters

  def self.get_ext_command_GL_ARB_indirect_parameters
    [
      'glMultiDrawArraysIndirectCountARB',
      'glMultiDrawElementsIndirectCountARB',
    ]
  end # self.get_ext_command_GL_ARB_indirect_parameters


  def self.define_ext_command_GL_ARB_instanced_arrays
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribDivisorARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribDivisorARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribDivisorARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribDivisorARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribDivisorARB(_index_, _divisor_)
        GL_FUNCTIONS_MAP[:glVertexAttribDivisorARB].call(_index_, _divisor_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_instanced_arrays

  def self.get_ext_command_GL_ARB_instanced_arrays
    [
      'glVertexAttribDivisorARB',
    ]
  end # self.get_ext_command_GL_ARB_instanced_arrays


  def self.define_ext_command_GL_ARB_internalformat_query
    GL::GL_FUNCTION_SYMBOLS << :glGetInternalformativ
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInternalformativ] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInternalformativ] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInternalformativ)
    GL.module_eval(<<-SRC)
      def self.GetInternalformativ(_target_, _internalformat_, _pname_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glGetInternalformativ].call(_target_, _internalformat_, _pname_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_internalformat_query

  def self.get_ext_command_GL_ARB_internalformat_query
    [
      'glGetInternalformativ',
    ]
  end # self.get_ext_command_GL_ARB_internalformat_query


  def self.define_ext_command_GL_ARB_internalformat_query2
    GL::GL_FUNCTION_SYMBOLS << :glGetInternalformati64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInternalformati64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInternalformati64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInternalformati64v)
    GL.module_eval(<<-SRC)
      def self.GetInternalformati64v(_target_, _internalformat_, _pname_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glGetInternalformati64v].call(_target_, _internalformat_, _pname_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_internalformat_query2

  def self.get_ext_command_GL_ARB_internalformat_query2
    [
      'glGetInternalformati64v',
    ]
  end # self.get_ext_command_GL_ARB_internalformat_query2


  def self.define_ext_command_GL_ARB_invalidate_subdata
    GL::GL_FUNCTION_SYMBOLS << :glInvalidateTexSubImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateTexSubImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateTexSubImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateTexSubImage)
    GL.module_eval(<<-SRC)
      def self.InvalidateTexSubImage(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glInvalidateTexSubImage].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateTexImage
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateTexImage] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateTexImage] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateTexImage)
    GL.module_eval(<<-SRC)
      def self.InvalidateTexImage(_texture_, _level_)
        GL_FUNCTIONS_MAP[:glInvalidateTexImage].call(_texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateBufferSubData
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateBufferSubData] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateBufferSubData] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateBufferSubData)
    GL.module_eval(<<-SRC)
      def self.InvalidateBufferSubData(_buffer_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:glInvalidateBufferSubData].call(_buffer_, _offset_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateBufferData
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateBufferData] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateBufferData] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateBufferData)
    GL.module_eval(<<-SRC)
      def self.InvalidateBufferData(_buffer_)
        GL_FUNCTIONS_MAP[:glInvalidateBufferData].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateFramebuffer] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateFramebuffer)
    GL.module_eval(<<-SRC)
      def self.InvalidateFramebuffer(_target_, _numAttachments_, _attachments_)
        GL_FUNCTIONS_MAP[:glInvalidateFramebuffer].call(_target_, _numAttachments_, _attachments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInvalidateSubFramebuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glInvalidateSubFramebuffer] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInvalidateSubFramebuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glInvalidateSubFramebuffer)
    GL.module_eval(<<-SRC)
      def self.InvalidateSubFramebuffer(_target_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glInvalidateSubFramebuffer].call(_target_, _numAttachments_, _attachments_, _x_, _y_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_invalidate_subdata

  def self.get_ext_command_GL_ARB_invalidate_subdata
    [
      'glInvalidateTexSubImage',
      'glInvalidateTexImage',
      'glInvalidateBufferSubData',
      'glInvalidateBufferData',
      'glInvalidateFramebuffer',
      'glInvalidateSubFramebuffer',
    ]
  end # self.get_ext_command_GL_ARB_invalidate_subdata


  def self.define_ext_command_GL_ARB_map_buffer_alignment
  end # self.define_ext_command_GL_ARB_map_buffer_alignment

  def self.get_ext_command_GL_ARB_map_buffer_alignment
    [
    ]
  end # self.get_ext_command_GL_ARB_map_buffer_alignment


  def self.define_ext_command_GL_ARB_map_buffer_range
    GL::GL_FUNCTION_SYMBOLS << :glMapBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapBufferRange] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapBufferRange)
    GL.module_eval(<<-SRC)
      def self.MapBufferRange(_target_, _offset_, _length_, _access_)
        GL_FUNCTIONS_MAP[:glMapBufferRange].call(_target_, _offset_, _length_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFlushMappedBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushMappedBufferRange] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushMappedBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushMappedBufferRange)
    GL.module_eval(<<-SRC)
      def self.FlushMappedBufferRange(_target_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:glFlushMappedBufferRange].call(_target_, _offset_, _length_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_map_buffer_range

  def self.get_ext_command_GL_ARB_map_buffer_range
    [
      'glMapBufferRange',
      'glFlushMappedBufferRange',
    ]
  end # self.get_ext_command_GL_ARB_map_buffer_range


  def self.define_ext_command_GL_ARB_matrix_palette
    GL::GL_FUNCTION_SYMBOLS << :glCurrentPaletteMatrixARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCurrentPaletteMatrixARB] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCurrentPaletteMatrixARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCurrentPaletteMatrixARB)
    GL.module_eval(<<-SRC)
      def self.CurrentPaletteMatrixARB(_index_)
        GL_FUNCTIONS_MAP[:glCurrentPaletteMatrixARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixIndexubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixIndexubvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixIndexubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixIndexubvARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexubvARB(_size_, _indices_)
        GL_FUNCTIONS_MAP[:glMatrixIndexubvARB].call(_size_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixIndexusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixIndexusvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixIndexusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixIndexusvARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexusvARB(_size_, _indices_)
        GL_FUNCTIONS_MAP[:glMatrixIndexusvARB].call(_size_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixIndexuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixIndexuivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixIndexuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixIndexuivARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexuivARB(_size_, _indices_)
        GL_FUNCTIONS_MAP[:glMatrixIndexuivARB].call(_size_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixIndexPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixIndexPointerARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixIndexPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixIndexPointerARB)
    GL.module_eval(<<-SRC)
      def self.MatrixIndexPointerARB(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glMatrixIndexPointerARB].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_matrix_palette

  def self.get_ext_command_GL_ARB_matrix_palette
    [
      'glCurrentPaletteMatrixARB',
      'glMatrixIndexubvARB',
      'glMatrixIndexusvARB',
      'glMatrixIndexuivARB',
      'glMatrixIndexPointerARB',
    ]
  end # self.get_ext_command_GL_ARB_matrix_palette


  def self.define_ext_command_GL_ARB_multi_bind
    GL::GL_FUNCTION_SYMBOLS << :glBindBuffersBase
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBuffersBase] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBuffersBase] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBuffersBase)
    GL.module_eval(<<-SRC)
      def self.BindBuffersBase(_target_, _first_, _count_, _buffers_)
        GL_FUNCTIONS_MAP[:glBindBuffersBase].call(_target_, _first_, _count_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBuffersRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBuffersRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBuffersRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBuffersRange)
    GL.module_eval(<<-SRC)
      def self.BindBuffersRange(_target_, _first_, _count_, _buffers_, _offsets_, _sizes_)
        GL_FUNCTIONS_MAP[:glBindBuffersRange].call(_target_, _first_, _count_, _buffers_, _offsets_, _sizes_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindTextures
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTextures] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTextures] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindTextures)
    GL.module_eval(<<-SRC)
      def self.BindTextures(_first_, _count_, _textures_)
        GL_FUNCTIONS_MAP[:glBindTextures].call(_first_, _count_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindSamplers] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindSamplers)
    GL.module_eval(<<-SRC)
      def self.BindSamplers(_first_, _count_, _samplers_)
        GL_FUNCTIONS_MAP[:glBindSamplers].call(_first_, _count_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindImageTextures
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindImageTextures] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindImageTextures] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindImageTextures)
    GL.module_eval(<<-SRC)
      def self.BindImageTextures(_first_, _count_, _textures_)
        GL_FUNCTIONS_MAP[:glBindImageTextures].call(_first_, _count_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindVertexBuffers
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVertexBuffers] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVertexBuffers] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVertexBuffers)
    GL.module_eval(<<-SRC)
      def self.BindVertexBuffers(_first_, _count_, _buffers_, _offsets_, _strides_)
        GL_FUNCTIONS_MAP[:glBindVertexBuffers].call(_first_, _count_, _buffers_, _offsets_, _strides_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multi_bind

  def self.get_ext_command_GL_ARB_multi_bind
    [
      'glBindBuffersBase',
      'glBindBuffersRange',
      'glBindTextures',
      'glBindSamplers',
      'glBindImageTextures',
      'glBindVertexBuffers',
    ]
  end # self.get_ext_command_GL_ARB_multi_bind


  def self.define_ext_command_GL_ARB_multi_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawArraysIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawArraysIndirect] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawArraysIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawArraysIndirect)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirect(_mode_, _indirect_, _drawcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawArraysIndirect].call(_mode_, _indirect_, _drawcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsIndirect
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsIndirect] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsIndirect] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsIndirect)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirect(_mode_, _type_, _indirect_, _drawcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsIndirect].call(_mode_, _type_, _indirect_, _drawcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multi_draw_indirect

  def self.get_ext_command_GL_ARB_multi_draw_indirect
    [
      'glMultiDrawArraysIndirect',
      'glMultiDrawElementsIndirect',
    ]
  end # self.get_ext_command_GL_ARB_multi_draw_indirect


  def self.define_ext_command_GL_ARB_multisample
    GL::GL_FUNCTION_SYMBOLS << :glSampleCoverageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleCoverageARB] = [Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleCoverageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleCoverageARB)
    GL.module_eval(<<-SRC)
      def self.SampleCoverageARB(_value_, _invert_)
        GL_FUNCTIONS_MAP[:glSampleCoverageARB].call(_value_, _invert_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multisample

  def self.get_ext_command_GL_ARB_multisample
    [
      'glSampleCoverageARB',
    ]
  end # self.get_ext_command_GL_ARB_multisample


  def self.define_ext_command_GL_ARB_multitexture
    GL::GL_FUNCTION_SYMBOLS << :glActiveTextureARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glActiveTextureARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glActiveTextureARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glActiveTextureARB)
    GL.module_eval(<<-SRC)
      def self.ActiveTextureARB(_texture_)
        GL_FUNCTIONS_MAP[:glActiveTextureARB].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClientActiveTextureARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glClientActiveTextureARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClientActiveTextureARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glClientActiveTextureARB)
    GL.module_eval(<<-SRC)
      def self.ClientActiveTextureARB(_texture_)
        GL_FUNCTIONS_MAP[:glClientActiveTextureARB].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1dARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1dARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1fARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1fARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1iARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1iARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1sARB(_target_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1sARB].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1svARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2dARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2dARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2fARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2fARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2iARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2iARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2sARB(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2sARB].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2svARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3dARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3dARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3fARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3fARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3iARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3iARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3sARB(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3sARB].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3svARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4dARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4dARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4dARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4dvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4dvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4dvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4fARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4fARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4fARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4fvARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4fvARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4fvARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4iARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4iARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4iARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4iARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4ivARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4ivARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4ivARB].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4sARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4sARB(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4sARB].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4svARB)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4svARB(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4svARB].call(_target_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_multitexture

  def self.get_ext_command_GL_ARB_multitexture
    [
      'glActiveTextureARB',
      'glClientActiveTextureARB',
      'glMultiTexCoord1dARB',
      'glMultiTexCoord1dvARB',
      'glMultiTexCoord1fARB',
      'glMultiTexCoord1fvARB',
      'glMultiTexCoord1iARB',
      'glMultiTexCoord1ivARB',
      'glMultiTexCoord1sARB',
      'glMultiTexCoord1svARB',
      'glMultiTexCoord2dARB',
      'glMultiTexCoord2dvARB',
      'glMultiTexCoord2fARB',
      'glMultiTexCoord2fvARB',
      'glMultiTexCoord2iARB',
      'glMultiTexCoord2ivARB',
      'glMultiTexCoord2sARB',
      'glMultiTexCoord2svARB',
      'glMultiTexCoord3dARB',
      'glMultiTexCoord3dvARB',
      'glMultiTexCoord3fARB',
      'glMultiTexCoord3fvARB',
      'glMultiTexCoord3iARB',
      'glMultiTexCoord3ivARB',
      'glMultiTexCoord3sARB',
      'glMultiTexCoord3svARB',
      'glMultiTexCoord4dARB',
      'glMultiTexCoord4dvARB',
      'glMultiTexCoord4fARB',
      'glMultiTexCoord4fvARB',
      'glMultiTexCoord4iARB',
      'glMultiTexCoord4ivARB',
      'glMultiTexCoord4sARB',
      'glMultiTexCoord4svARB',
    ]
  end # self.get_ext_command_GL_ARB_multitexture


  def self.define_ext_command_GL_ARB_occlusion_query
    GL::GL_FUNCTION_SYMBOLS << :glGenQueriesARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenQueriesARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenQueriesARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenQueriesARB)
    GL.module_eval(<<-SRC)
      def self.GenQueriesARB(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glGenQueriesARB].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteQueriesARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteQueriesARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteQueriesARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteQueriesARB)
    GL.module_eval(<<-SRC)
      def self.DeleteQueriesARB(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glDeleteQueriesARB].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsQueryARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsQueryARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsQueryARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsQueryARB)
    GL.module_eval(<<-SRC)
      def self.IsQueryARB(_id_)
        GL_FUNCTIONS_MAP[:glIsQueryARB].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBeginQueryARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginQueryARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginQueryARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginQueryARB)
    GL.module_eval(<<-SRC)
      def self.BeginQueryARB(_target_, _id_)
        GL_FUNCTIONS_MAP[:glBeginQueryARB].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndQueryARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndQueryARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndQueryARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndQueryARB)
    GL.module_eval(<<-SRC)
      def self.EndQueryARB(_target_)
        GL_FUNCTIONS_MAP[:glEndQueryARB].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryivARB)
    GL.module_eval(<<-SRC)
      def self.GetQueryivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryObjectivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryObjectivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryObjectivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryObjectivARB)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectivARB(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryObjectivARB].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryObjectuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryObjectuivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryObjectuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryObjectuivARB)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectuivARB(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryObjectuivARB].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_occlusion_query

  def self.get_ext_command_GL_ARB_occlusion_query
    [
      'glGenQueriesARB',
      'glDeleteQueriesARB',
      'glIsQueryARB',
      'glBeginQueryARB',
      'glEndQueryARB',
      'glGetQueryivARB',
      'glGetQueryObjectivARB',
      'glGetQueryObjectuivARB',
    ]
  end # self.get_ext_command_GL_ARB_occlusion_query


  def self.define_ext_command_GL_ARB_occlusion_query2
  end # self.define_ext_command_GL_ARB_occlusion_query2

  def self.get_ext_command_GL_ARB_occlusion_query2
    [
    ]
  end # self.get_ext_command_GL_ARB_occlusion_query2


  def self.define_ext_command_GL_ARB_parallel_shader_compile
    GL::GL_FUNCTION_SYMBOLS << :glMaxShaderCompilerThreadsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMaxShaderCompilerThreadsARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMaxShaderCompilerThreadsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMaxShaderCompilerThreadsARB)
    GL.module_eval(<<-SRC)
      def self.MaxShaderCompilerThreadsARB(_count_)
        GL_FUNCTIONS_MAP[:glMaxShaderCompilerThreadsARB].call(_count_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_parallel_shader_compile

  def self.get_ext_command_GL_ARB_parallel_shader_compile
    [
      'glMaxShaderCompilerThreadsARB',
    ]
  end # self.get_ext_command_GL_ARB_parallel_shader_compile


  def self.define_ext_command_GL_ARB_pipeline_statistics_query
  end # self.define_ext_command_GL_ARB_pipeline_statistics_query

  def self.get_ext_command_GL_ARB_pipeline_statistics_query
    [
    ]
  end # self.get_ext_command_GL_ARB_pipeline_statistics_query


  def self.define_ext_command_GL_ARB_pixel_buffer_object
  end # self.define_ext_command_GL_ARB_pixel_buffer_object

  def self.get_ext_command_GL_ARB_pixel_buffer_object
    [
    ]
  end # self.get_ext_command_GL_ARB_pixel_buffer_object


  def self.define_ext_command_GL_ARB_point_parameters
    GL::GL_FUNCTION_SYMBOLS << :glPointParameterfARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterfARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterfARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterfARB)
    GL.module_eval(<<-SRC)
      def self.PointParameterfARB(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPointParameterfARB].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterfvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.PointParameterfvARB(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPointParameterfvARB].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_point_parameters

  def self.get_ext_command_GL_ARB_point_parameters
    [
      'glPointParameterfARB',
      'glPointParameterfvARB',
    ]
  end # self.get_ext_command_GL_ARB_point_parameters


  def self.define_ext_command_GL_ARB_point_sprite
  end # self.define_ext_command_GL_ARB_point_sprite

  def self.get_ext_command_GL_ARB_point_sprite
    [
    ]
  end # self.get_ext_command_GL_ARB_point_sprite


  def self.define_ext_command_GL_ARB_polygon_offset_clamp
    GL::GL_FUNCTION_SYMBOLS << :glPolygonOffsetClamp
    GL::GL_FUNCTIONS_ARGS_MAP[:glPolygonOffsetClamp] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPolygonOffsetClamp] = Fiddle::TYPE_VOID
    GL.bind_command(:glPolygonOffsetClamp)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetClamp(_factor_, _units_, _clamp_)
        GL_FUNCTIONS_MAP[:glPolygonOffsetClamp].call(_factor_, _units_, _clamp_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_polygon_offset_clamp

  def self.get_ext_command_GL_ARB_polygon_offset_clamp
    [
      'glPolygonOffsetClamp',
    ]
  end # self.get_ext_command_GL_ARB_polygon_offset_clamp


  def self.define_ext_command_GL_ARB_post_depth_coverage
  end # self.define_ext_command_GL_ARB_post_depth_coverage

  def self.get_ext_command_GL_ARB_post_depth_coverage
    [
    ]
  end # self.get_ext_command_GL_ARB_post_depth_coverage


  def self.define_ext_command_GL_ARB_program_interface_query
    GL::GL_FUNCTION_SYMBOLS << :glGetProgramInterfaceiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramInterfaceiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramInterfaceiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramInterfaceiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramInterfaceiv(_program_, _programInterface_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramInterfaceiv].call(_program_, _programInterface_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramResourceIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramResourceIndex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramResourceIndex] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetProgramResourceIndex)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceIndex(_program_, _programInterface_, _name_)
        GL_FUNCTIONS_MAP[:glGetProgramResourceIndex].call(_program_, _programInterface_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramResourceName
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramResourceName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramResourceName] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramResourceName)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceName(_program_, _programInterface_, _index_, _bufSize_, _length_, _name_)
        GL_FUNCTIONS_MAP[:glGetProgramResourceName].call(_program_, _programInterface_, _index_, _bufSize_, _length_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramResourceiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramResourceiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramResourceiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramResourceiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceiv(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramResourceiv].call(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramResourceLocation
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramResourceLocation] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramResourceLocation] = Fiddle::TYPE_INT
    GL.bind_command(:glGetProgramResourceLocation)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceLocation(_program_, _programInterface_, _name_)
        GL_FUNCTIONS_MAP[:glGetProgramResourceLocation].call(_program_, _programInterface_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramResourceLocationIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramResourceLocationIndex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramResourceLocationIndex] = Fiddle::TYPE_INT
    GL.bind_command(:glGetProgramResourceLocationIndex)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourceLocationIndex(_program_, _programInterface_, _name_)
        GL_FUNCTIONS_MAP[:glGetProgramResourceLocationIndex].call(_program_, _programInterface_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_program_interface_query

  def self.get_ext_command_GL_ARB_program_interface_query
    [
      'glGetProgramInterfaceiv',
      'glGetProgramResourceIndex',
      'glGetProgramResourceName',
      'glGetProgramResourceiv',
      'glGetProgramResourceLocation',
      'glGetProgramResourceLocationIndex',
    ]
  end # self.get_ext_command_GL_ARB_program_interface_query


  def self.define_ext_command_GL_ARB_provoking_vertex
    GL::GL_FUNCTION_SYMBOLS << :glProvokingVertex
    GL::GL_FUNCTIONS_ARGS_MAP[:glProvokingVertex] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProvokingVertex] = Fiddle::TYPE_VOID
    GL.bind_command(:glProvokingVertex)
    GL.module_eval(<<-SRC)
      def self.ProvokingVertex(_mode_)
        GL_FUNCTIONS_MAP[:glProvokingVertex].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_provoking_vertex

  def self.get_ext_command_GL_ARB_provoking_vertex
    [
      'glProvokingVertex',
    ]
  end # self.get_ext_command_GL_ARB_provoking_vertex


  def self.define_ext_command_GL_ARB_query_buffer_object
  end # self.define_ext_command_GL_ARB_query_buffer_object

  def self.get_ext_command_GL_ARB_query_buffer_object
    [
    ]
  end # self.get_ext_command_GL_ARB_query_buffer_object


  def self.define_ext_command_GL_ARB_robust_buffer_access_behavior
  end # self.define_ext_command_GL_ARB_robust_buffer_access_behavior

  def self.get_ext_command_GL_ARB_robust_buffer_access_behavior
    [
    ]
  end # self.get_ext_command_GL_ARB_robust_buffer_access_behavior


  def self.define_ext_command_GL_ARB_robustness
    GL::GL_FUNCTION_SYMBOLS << :glGetGraphicsResetStatusARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetGraphicsResetStatusARB] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetGraphicsResetStatusARB] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetGraphicsResetStatusARB)
    GL.module_eval(<<-SRC)
      def self.GetGraphicsResetStatusARB()
        GL_FUNCTIONS_MAP[:glGetGraphicsResetStatusARB].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnTexImageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnTexImageARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnTexImageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnTexImageARB)
    GL.module_eval(<<-SRC)
      def self.GetnTexImageARB(_target_, _level_, _format_, _type_, _bufSize_, _img_)
        GL_FUNCTIONS_MAP[:glGetnTexImageARB].call(_target_, _level_, _format_, _type_, _bufSize_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReadnPixelsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glReadnPixelsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReadnPixelsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glReadnPixelsARB)
    GL.module_eval(<<-SRC)
      def self.ReadnPixelsARB(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
        GL_FUNCTIONS_MAP[:glReadnPixelsARB].call(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnCompressedTexImageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnCompressedTexImageARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnCompressedTexImageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnCompressedTexImageARB)
    GL.module_eval(<<-SRC)
      def self.GetnCompressedTexImageARB(_target_, _lod_, _bufSize_, _img_)
        GL_FUNCTIONS_MAP[:glGetnCompressedTexImageARB].call(_target_, _lod_, _bufSize_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformfvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformfvARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformfvARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformfvARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformivARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformivARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformivARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformuivARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformuivARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformuivARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformdvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformdvARB)
    GL.module_eval(<<-SRC)
      def self.GetnUniformdvARB(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformdvARB].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnMapdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnMapdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnMapdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnMapdvARB)
    GL.module_eval(<<-SRC)
      def self.GetnMapdvARB(_target_, _query_, _bufSize_, _v_)
        GL_FUNCTIONS_MAP[:glGetnMapdvARB].call(_target_, _query_, _bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnMapfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnMapfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnMapfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnMapfvARB)
    GL.module_eval(<<-SRC)
      def self.GetnMapfvARB(_target_, _query_, _bufSize_, _v_)
        GL_FUNCTIONS_MAP[:glGetnMapfvARB].call(_target_, _query_, _bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnMapivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnMapivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnMapivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnMapivARB)
    GL.module_eval(<<-SRC)
      def self.GetnMapivARB(_target_, _query_, _bufSize_, _v_)
        GL_FUNCTIONS_MAP[:glGetnMapivARB].call(_target_, _query_, _bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnPixelMapfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnPixelMapfvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnPixelMapfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnPixelMapfvARB)
    GL.module_eval(<<-SRC)
      def self.GetnPixelMapfvARB(_map_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:glGetnPixelMapfvARB].call(_map_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnPixelMapuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnPixelMapuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnPixelMapuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnPixelMapuivARB)
    GL.module_eval(<<-SRC)
      def self.GetnPixelMapuivARB(_map_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:glGetnPixelMapuivARB].call(_map_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnPixelMapusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnPixelMapusvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnPixelMapusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnPixelMapusvARB)
    GL.module_eval(<<-SRC)
      def self.GetnPixelMapusvARB(_map_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:glGetnPixelMapusvARB].call(_map_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnPolygonStippleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnPolygonStippleARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnPolygonStippleARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnPolygonStippleARB)
    GL.module_eval(<<-SRC)
      def self.GetnPolygonStippleARB(_bufSize_, _pattern_)
        GL_FUNCTIONS_MAP[:glGetnPolygonStippleARB].call(_bufSize_, _pattern_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnColorTableARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnColorTableARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnColorTableARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnColorTableARB)
    GL.module_eval(<<-SRC)
      def self.GetnColorTableARB(_target_, _format_, _type_, _bufSize_, _table_)
        GL_FUNCTIONS_MAP[:glGetnColorTableARB].call(_target_, _format_, _type_, _bufSize_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnConvolutionFilterARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnConvolutionFilterARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnConvolutionFilterARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnConvolutionFilterARB)
    GL.module_eval(<<-SRC)
      def self.GetnConvolutionFilterARB(_target_, _format_, _type_, _bufSize_, _image_)
        GL_FUNCTIONS_MAP[:glGetnConvolutionFilterARB].call(_target_, _format_, _type_, _bufSize_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnSeparableFilterARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnSeparableFilterARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnSeparableFilterARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnSeparableFilterARB)
    GL.module_eval(<<-SRC)
      def self.GetnSeparableFilterARB(_target_, _format_, _type_, _rowBufSize_, _row_, _columnBufSize_, _column_, _span_)
        GL_FUNCTIONS_MAP[:glGetnSeparableFilterARB].call(_target_, _format_, _type_, _rowBufSize_, _row_, _columnBufSize_, _column_, _span_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnHistogramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnHistogramARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnHistogramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnHistogramARB)
    GL.module_eval(<<-SRC)
      def self.GetnHistogramARB(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:glGetnHistogramARB].call(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnMinmaxARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnMinmaxARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnMinmaxARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnMinmaxARB)
    GL.module_eval(<<-SRC)
      def self.GetnMinmaxARB(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
        GL_FUNCTIONS_MAP[:glGetnMinmaxARB].call(_target_, _reset_, _format_, _type_, _bufSize_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_robustness

  def self.get_ext_command_GL_ARB_robustness
    [
      'glGetGraphicsResetStatusARB',
      'glGetnTexImageARB',
      'glReadnPixelsARB',
      'glGetnCompressedTexImageARB',
      'glGetnUniformfvARB',
      'glGetnUniformivARB',
      'glGetnUniformuivARB',
      'glGetnUniformdvARB',
      'glGetnMapdvARB',
      'glGetnMapfvARB',
      'glGetnMapivARB',
      'glGetnPixelMapfvARB',
      'glGetnPixelMapuivARB',
      'glGetnPixelMapusvARB',
      'glGetnPolygonStippleARB',
      'glGetnColorTableARB',
      'glGetnConvolutionFilterARB',
      'glGetnSeparableFilterARB',
      'glGetnHistogramARB',
      'glGetnMinmaxARB',
    ]
  end # self.get_ext_command_GL_ARB_robustness


  def self.define_ext_command_GL_ARB_robustness_isolation
  end # self.define_ext_command_GL_ARB_robustness_isolation

  def self.get_ext_command_GL_ARB_robustness_isolation
    [
    ]
  end # self.get_ext_command_GL_ARB_robustness_isolation


  def self.define_ext_command_GL_ARB_sample_locations
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferSampleLocationsfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferSampleLocationsfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferSampleLocationsfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferSampleLocationsfvARB)
    GL.module_eval(<<-SRC)
      def self.FramebufferSampleLocationsfvARB(_target_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glFramebufferSampleLocationsfvARB].call(_target_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferSampleLocationsfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferSampleLocationsfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferSampleLocationsfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferSampleLocationsfvARB)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferSampleLocationsfvARB(_framebuffer_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferSampleLocationsfvARB].call(_framebuffer_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEvaluateDepthValuesARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glEvaluateDepthValuesARB] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEvaluateDepthValuesARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glEvaluateDepthValuesARB)
    GL.module_eval(<<-SRC)
      def self.EvaluateDepthValuesARB()
        GL_FUNCTIONS_MAP[:glEvaluateDepthValuesARB].call()
      end
    SRC
  end # self.define_ext_command_GL_ARB_sample_locations

  def self.get_ext_command_GL_ARB_sample_locations
    [
      'glFramebufferSampleLocationsfvARB',
      'glNamedFramebufferSampleLocationsfvARB',
      'glEvaluateDepthValuesARB',
    ]
  end # self.get_ext_command_GL_ARB_sample_locations


  def self.define_ext_command_GL_ARB_sample_shading
    GL::GL_FUNCTION_SYMBOLS << :glMinSampleShadingARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMinSampleShadingARB] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMinSampleShadingARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMinSampleShadingARB)
    GL.module_eval(<<-SRC)
      def self.MinSampleShadingARB(_value_)
        GL_FUNCTIONS_MAP[:glMinSampleShadingARB].call(_value_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sample_shading

  def self.get_ext_command_GL_ARB_sample_shading
    [
      'glMinSampleShadingARB',
    ]
  end # self.get_ext_command_GL_ARB_sample_shading


  def self.define_ext_command_GL_ARB_sampler_objects
    GL::GL_FUNCTION_SYMBOLS << :glGenSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenSamplers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenSamplers)
    GL.module_eval(<<-SRC)
      def self.GenSamplers(_count_, _samplers_)
        GL_FUNCTIONS_MAP[:glGenSamplers].call(_count_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteSamplers
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteSamplers] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteSamplers] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteSamplers)
    GL.module_eval(<<-SRC)
      def self.DeleteSamplers(_count_, _samplers_)
        GL_FUNCTIONS_MAP[:glDeleteSamplers].call(_count_, _samplers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsSampler
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsSampler] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsSampler] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsSampler)
    GL.module_eval(<<-SRC)
      def self.IsSampler(_sampler_)
        GL_FUNCTIONS_MAP[:glIsSampler].call(_sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindSampler
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindSampler] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindSampler] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindSampler)
    GL.module_eval(<<-SRC)
      def self.BindSampler(_unit_, _sampler_)
        GL_FUNCTIONS_MAP[:glBindSampler].call(_unit_, _sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplerParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplerParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplerParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplerParameteri)
    GL.module_eval(<<-SRC)
      def self.SamplerParameteri(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glSamplerParameteri].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplerParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplerParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplerParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplerParameteriv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameteriv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glSamplerParameteriv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplerParameterf
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplerParameterf] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplerParameterf] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplerParameterf)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterf(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glSamplerParameterf].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplerParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplerParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplerParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplerParameterfv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterfv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glSamplerParameterfv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplerParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplerParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplerParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplerParameterIiv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterIiv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glSamplerParameterIiv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplerParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplerParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplerParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplerParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.SamplerParameterIuiv(_sampler_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glSamplerParameterIuiv].call(_sampler_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSamplerParameteriv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSamplerParameteriv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSamplerParameteriv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSamplerParameteriv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameteriv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetSamplerParameteriv].call(_sampler_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSamplerParameterIiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSamplerParameterIiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSamplerParameterIiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSamplerParameterIiv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameterIiv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetSamplerParameterIiv].call(_sampler_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSamplerParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSamplerParameterfv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSamplerParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSamplerParameterfv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameterfv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetSamplerParameterfv].call(_sampler_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSamplerParameterIuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSamplerParameterIuiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSamplerParameterIuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSamplerParameterIuiv)
    GL.module_eval(<<-SRC)
      def self.GetSamplerParameterIuiv(_sampler_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetSamplerParameterIuiv].call(_sampler_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sampler_objects

  def self.get_ext_command_GL_ARB_sampler_objects
    [
      'glGenSamplers',
      'glDeleteSamplers',
      'glIsSampler',
      'glBindSampler',
      'glSamplerParameteri',
      'glSamplerParameteriv',
      'glSamplerParameterf',
      'glSamplerParameterfv',
      'glSamplerParameterIiv',
      'glSamplerParameterIuiv',
      'glGetSamplerParameteriv',
      'glGetSamplerParameterIiv',
      'glGetSamplerParameterfv',
      'glGetSamplerParameterIuiv',
    ]
  end # self.get_ext_command_GL_ARB_sampler_objects


  def self.define_ext_command_GL_ARB_seamless_cube_map
  end # self.define_ext_command_GL_ARB_seamless_cube_map

  def self.get_ext_command_GL_ARB_seamless_cube_map
    [
    ]
  end # self.get_ext_command_GL_ARB_seamless_cube_map


  def self.define_ext_command_GL_ARB_seamless_cubemap_per_texture
  end # self.define_ext_command_GL_ARB_seamless_cubemap_per_texture

  def self.get_ext_command_GL_ARB_seamless_cubemap_per_texture
    [
    ]
  end # self.get_ext_command_GL_ARB_seamless_cubemap_per_texture


  def self.define_ext_command_GL_ARB_separate_shader_objects
    GL::GL_FUNCTION_SYMBOLS << :glUseProgramStages
    GL::GL_FUNCTIONS_ARGS_MAP[:glUseProgramStages] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUseProgramStages] = Fiddle::TYPE_VOID
    GL.bind_command(:glUseProgramStages)
    GL.module_eval(<<-SRC)
      def self.UseProgramStages(_pipeline_, _stages_, _program_)
        GL_FUNCTIONS_MAP[:glUseProgramStages].call(_pipeline_, _stages_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glActiveShaderProgram
    GL::GL_FUNCTIONS_ARGS_MAP[:glActiveShaderProgram] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glActiveShaderProgram] = Fiddle::TYPE_VOID
    GL.bind_command(:glActiveShaderProgram)
    GL.module_eval(<<-SRC)
      def self.ActiveShaderProgram(_pipeline_, _program_)
        GL_FUNCTIONS_MAP[:glActiveShaderProgram].call(_pipeline_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateShaderProgramv
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateShaderProgramv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateShaderProgramv] = -Fiddle::TYPE_INT
    GL.bind_command(:glCreateShaderProgramv)
    GL.module_eval(<<-SRC)
      def self.CreateShaderProgramv(_type_, _count_, _strings_)
        GL_FUNCTIONS_MAP[:glCreateShaderProgramv].call(_type_, _count_, _strings_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindProgramPipeline
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindProgramPipeline] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindProgramPipeline] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindProgramPipeline)
    GL.module_eval(<<-SRC)
      def self.BindProgramPipeline(_pipeline_)
        GL_FUNCTIONS_MAP[:glBindProgramPipeline].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteProgramPipelines
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteProgramPipelines] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteProgramPipelines] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteProgramPipelines)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramPipelines(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:glDeleteProgramPipelines].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenProgramPipelines
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenProgramPipelines] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenProgramPipelines] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenProgramPipelines)
    GL.module_eval(<<-SRC)
      def self.GenProgramPipelines(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:glGenProgramPipelines].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsProgramPipeline
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsProgramPipeline] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsProgramPipeline] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsProgramPipeline)
    GL.module_eval(<<-SRC)
      def self.IsProgramPipeline(_pipeline_)
        GL_FUNCTIONS_MAP[:glIsProgramPipeline].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramPipelineiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramPipelineiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramPipelineiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramPipelineiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineiv(_pipeline_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramPipelineiv].call(_pipeline_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameteri] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameteri)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteri(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glProgramParameteri].call(_program_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1iv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1iv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1f
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1f] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1f(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1f].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1d
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1d] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1d(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1d].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2iv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2iv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2f
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2f] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2f(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2f].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2d
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2d] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2d(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2d].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3iv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3iv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3f
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3f] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3f(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3f].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3d
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3d] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3d(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3d].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4iv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4iv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4iv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4iv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4iv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4iv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4f
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4f] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4f] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4f)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4f(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4f].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4fv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4d
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4d] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4d)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4d(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4d].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4dv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4dv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4uiv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uiv(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4uiv].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x3fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x2fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x4fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x2fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x2fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x2fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x2fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x2fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x4fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x4fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x4fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x4fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x4fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x3fv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x3fv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x3fv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x3fv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3fv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x3fv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x3dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x2dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x4dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x2dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x2dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x4dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x4dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x3dv)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3dv(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x3dv].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glValidateProgramPipeline
    GL::GL_FUNCTIONS_ARGS_MAP[:glValidateProgramPipeline] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glValidateProgramPipeline] = Fiddle::TYPE_VOID
    GL.bind_command(:glValidateProgramPipeline)
    GL.module_eval(<<-SRC)
      def self.ValidateProgramPipeline(_pipeline_)
        GL_FUNCTIONS_MAP[:glValidateProgramPipeline].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramPipelineInfoLog
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramPipelineInfoLog] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramPipelineInfoLog] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramPipelineInfoLog)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineInfoLog(_pipeline_, _bufSize_, _length_, _infoLog_)
        GL_FUNCTIONS_MAP[:glGetProgramPipelineInfoLog].call(_pipeline_, _bufSize_, _length_, _infoLog_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_separate_shader_objects

  def self.get_ext_command_GL_ARB_separate_shader_objects
    [
      'glUseProgramStages',
      'glActiveShaderProgram',
      'glCreateShaderProgramv',
      'glBindProgramPipeline',
      'glDeleteProgramPipelines',
      'glGenProgramPipelines',
      'glIsProgramPipeline',
      'glGetProgramPipelineiv',
      'glProgramParameteri',
      'glProgramUniform1i',
      'glProgramUniform1iv',
      'glProgramUniform1f',
      'glProgramUniform1fv',
      'glProgramUniform1d',
      'glProgramUniform1dv',
      'glProgramUniform1ui',
      'glProgramUniform1uiv',
      'glProgramUniform2i',
      'glProgramUniform2iv',
      'glProgramUniform2f',
      'glProgramUniform2fv',
      'glProgramUniform2d',
      'glProgramUniform2dv',
      'glProgramUniform2ui',
      'glProgramUniform2uiv',
      'glProgramUniform3i',
      'glProgramUniform3iv',
      'glProgramUniform3f',
      'glProgramUniform3fv',
      'glProgramUniform3d',
      'glProgramUniform3dv',
      'glProgramUniform3ui',
      'glProgramUniform3uiv',
      'glProgramUniform4i',
      'glProgramUniform4iv',
      'glProgramUniform4f',
      'glProgramUniform4fv',
      'glProgramUniform4d',
      'glProgramUniform4dv',
      'glProgramUniform4ui',
      'glProgramUniform4uiv',
      'glProgramUniformMatrix2fv',
      'glProgramUniformMatrix3fv',
      'glProgramUniformMatrix4fv',
      'glProgramUniformMatrix2dv',
      'glProgramUniformMatrix3dv',
      'glProgramUniformMatrix4dv',
      'glProgramUniformMatrix2x3fv',
      'glProgramUniformMatrix3x2fv',
      'glProgramUniformMatrix2x4fv',
      'glProgramUniformMatrix4x2fv',
      'glProgramUniformMatrix3x4fv',
      'glProgramUniformMatrix4x3fv',
      'glProgramUniformMatrix2x3dv',
      'glProgramUniformMatrix3x2dv',
      'glProgramUniformMatrix2x4dv',
      'glProgramUniformMatrix4x2dv',
      'glProgramUniformMatrix3x4dv',
      'glProgramUniformMatrix4x3dv',
      'glValidateProgramPipeline',
      'glGetProgramPipelineInfoLog',
    ]
  end # self.get_ext_command_GL_ARB_separate_shader_objects


  def self.define_ext_command_GL_ARB_shader_atomic_counter_ops
  end # self.define_ext_command_GL_ARB_shader_atomic_counter_ops

  def self.get_ext_command_GL_ARB_shader_atomic_counter_ops
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_atomic_counter_ops


  def self.define_ext_command_GL_ARB_shader_atomic_counters
    GL::GL_FUNCTION_SYMBOLS << :glGetActiveAtomicCounterBufferiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveAtomicCounterBufferiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveAtomicCounterBufferiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveAtomicCounterBufferiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveAtomicCounterBufferiv(_program_, _bufferIndex_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetActiveAtomicCounterBufferiv].call(_program_, _bufferIndex_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_atomic_counters

  def self.get_ext_command_GL_ARB_shader_atomic_counters
    [
      'glGetActiveAtomicCounterBufferiv',
    ]
  end # self.get_ext_command_GL_ARB_shader_atomic_counters


  def self.define_ext_command_GL_ARB_shader_ballot
  end # self.define_ext_command_GL_ARB_shader_ballot

  def self.get_ext_command_GL_ARB_shader_ballot
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_ballot


  def self.define_ext_command_GL_ARB_shader_bit_encoding
  end # self.define_ext_command_GL_ARB_shader_bit_encoding

  def self.get_ext_command_GL_ARB_shader_bit_encoding
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_bit_encoding


  def self.define_ext_command_GL_ARB_shader_clock
  end # self.define_ext_command_GL_ARB_shader_clock

  def self.get_ext_command_GL_ARB_shader_clock
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_clock


  def self.define_ext_command_GL_ARB_shader_draw_parameters
  end # self.define_ext_command_GL_ARB_shader_draw_parameters

  def self.get_ext_command_GL_ARB_shader_draw_parameters
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_draw_parameters


  def self.define_ext_command_GL_ARB_shader_group_vote
  end # self.define_ext_command_GL_ARB_shader_group_vote

  def self.get_ext_command_GL_ARB_shader_group_vote
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_group_vote


  def self.define_ext_command_GL_ARB_shader_image_load_store
    GL::GL_FUNCTION_SYMBOLS << :glBindImageTexture
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindImageTexture] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindImageTexture] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindImageTexture)
    GL.module_eval(<<-SRC)
      def self.BindImageTexture(_unit_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
        GL_FUNCTIONS_MAP[:glBindImageTexture].call(_unit_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMemoryBarrier
    GL::GL_FUNCTIONS_ARGS_MAP[:glMemoryBarrier] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMemoryBarrier] = Fiddle::TYPE_VOID
    GL.bind_command(:glMemoryBarrier)
    GL.module_eval(<<-SRC)
      def self.MemoryBarrier(_barriers_)
        GL_FUNCTIONS_MAP[:glMemoryBarrier].call(_barriers_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_image_load_store

  def self.get_ext_command_GL_ARB_shader_image_load_store
    [
      'glBindImageTexture',
      'glMemoryBarrier',
    ]
  end # self.get_ext_command_GL_ARB_shader_image_load_store


  def self.define_ext_command_GL_ARB_shader_image_size
  end # self.define_ext_command_GL_ARB_shader_image_size

  def self.get_ext_command_GL_ARB_shader_image_size
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_image_size


  def self.define_ext_command_GL_ARB_shader_objects
    GL::GL_FUNCTION_SYMBOLS << :glDeleteObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteObjectARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteObjectARB)
    GL.module_eval(<<-SRC)
      def self.DeleteObjectARB(_obj_)
        GL_FUNCTIONS_MAP[:glDeleteObjectARB].call(_obj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHandleARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHandleARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHandleARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glGetHandleARB)
    GL.module_eval(<<-SRC)
      def self.GetHandleARB(_pname_)
        GL_FUNCTIONS_MAP[:glGetHandleARB].call(_pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDetachObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDetachObjectARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDetachObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDetachObjectARB)
    GL.module_eval(<<-SRC)
      def self.DetachObjectARB(_containerObj_, _attachedObj_)
        GL_FUNCTIONS_MAP[:glDetachObjectARB].call(_containerObj_, _attachedObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateShaderObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateShaderObjectARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateShaderObjectARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glCreateShaderObjectARB)
    GL.module_eval(<<-SRC)
      def self.CreateShaderObjectARB(_shaderType_)
        GL_FUNCTIONS_MAP[:glCreateShaderObjectARB].call(_shaderType_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShaderSourceARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glShaderSourceARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShaderSourceARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glShaderSourceARB)
    GL.module_eval(<<-SRC)
      def self.ShaderSourceARB(_shaderObj_, _count_, _string_, _length_)
        GL_FUNCTIONS_MAP[:glShaderSourceARB].call(_shaderObj_, _count_, _string_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompileShaderARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompileShaderARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompileShaderARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompileShaderARB)
    GL.module_eval(<<-SRC)
      def self.CompileShaderARB(_shaderObj_)
        GL_FUNCTIONS_MAP[:glCompileShaderARB].call(_shaderObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateProgramObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateProgramObjectARB] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateProgramObjectARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glCreateProgramObjectARB)
    GL.module_eval(<<-SRC)
      def self.CreateProgramObjectARB()
        GL_FUNCTIONS_MAP[:glCreateProgramObjectARB].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAttachObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glAttachObjectARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAttachObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glAttachObjectARB)
    GL.module_eval(<<-SRC)
      def self.AttachObjectARB(_containerObj_, _obj_)
        GL_FUNCTIONS_MAP[:glAttachObjectARB].call(_containerObj_, _obj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLinkProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glLinkProgramARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLinkProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glLinkProgramARB)
    GL.module_eval(<<-SRC)
      def self.LinkProgramARB(_programObj_)
        GL_FUNCTIONS_MAP[:glLinkProgramARB].call(_programObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUseProgramObjectARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUseProgramObjectARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUseProgramObjectARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUseProgramObjectARB)
    GL.module_eval(<<-SRC)
      def self.UseProgramObjectARB(_programObj_)
        GL_FUNCTIONS_MAP[:glUseProgramObjectARB].call(_programObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glValidateProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glValidateProgramARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glValidateProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glValidateProgramARB)
    GL.module_eval(<<-SRC)
      def self.ValidateProgramARB(_programObj_)
        GL_FUNCTIONS_MAP[:glValidateProgramARB].call(_programObj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1fARB(_location_, _v0_)
        GL_FUNCTIONS_MAP[:glUniform1fARB].call(_location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2fARB(_location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glUniform2fARB].call(_location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3fARB(_location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glUniform3fARB].call(_location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4fARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4fARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4fARB(_location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glUniform4fARB].call(_location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1iARB(_location_, _v0_)
        GL_FUNCTIONS_MAP[:glUniform1iARB].call(_location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2iARB(_location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glUniform2iARB].call(_location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3iARB(_location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glUniform3iARB].call(_location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4iARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4iARB(_location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glUniform4iARB].call(_location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4fvARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4fvARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4fvARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform1ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform2ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform3ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ivARB)
    GL.module_eval(<<-SRC)
      def self.Uniform4ivARB(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4ivARB].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix2fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix2fvARB)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix2fvARB(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix2fvARB].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix3fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix3fvARB)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix3fvARB(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix3fvARB].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformMatrix4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformMatrix4fvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformMatrix4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformMatrix4fvARB)
    GL.module_eval(<<-SRC)
      def self.UniformMatrix4fvARB(_location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glUniformMatrix4fvARB].call(_location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectParameterfvARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetObjectParameterfvARB(_obj_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetObjectParameterfvARB].call(_obj_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectParameterivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectParameterivARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectParameterivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectParameterivARB)
    GL.module_eval(<<-SRC)
      def self.GetObjectParameterivARB(_obj_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetObjectParameterivARB].call(_obj_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetInfoLogARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInfoLogARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInfoLogARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInfoLogARB)
    GL.module_eval(<<-SRC)
      def self.GetInfoLogARB(_obj_, _maxLength_, _length_, _infoLog_)
        GL_FUNCTIONS_MAP[:glGetInfoLogARB].call(_obj_, _maxLength_, _length_, _infoLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetAttachedObjectsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetAttachedObjectsARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetAttachedObjectsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetAttachedObjectsARB)
    GL.module_eval(<<-SRC)
      def self.GetAttachedObjectsARB(_containerObj_, _maxCount_, _count_, _obj_)
        GL_FUNCTIONS_MAP[:glGetAttachedObjectsARB].call(_containerObj_, _maxCount_, _count_, _obj_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformLocationARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformLocationARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformLocationARB] = Fiddle::TYPE_INT
    GL.bind_command(:glGetUniformLocationARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformLocationARB(_programObj_, _name_)
        GL_FUNCTIONS_MAP[:glGetUniformLocationARB].call(_programObj_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveUniformARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveUniformARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveUniformARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveUniformARB)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformARB(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:glGetActiveUniformARB].call(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformfvARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformfvARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformfvARB(_programObj_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformfvARB].call(_programObj_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformivARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformivARB)
    GL.module_eval(<<-SRC)
      def self.GetUniformivARB(_programObj_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformivARB].call(_programObj_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetShaderSourceARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetShaderSourceARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetShaderSourceARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetShaderSourceARB)
    GL.module_eval(<<-SRC)
      def self.GetShaderSourceARB(_obj_, _maxLength_, _length_, _source_)
        GL_FUNCTIONS_MAP[:glGetShaderSourceARB].call(_obj_, _maxLength_, _length_, _source_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_objects

  def self.get_ext_command_GL_ARB_shader_objects
    [
      'glDeleteObjectARB',
      'glGetHandleARB',
      'glDetachObjectARB',
      'glCreateShaderObjectARB',
      'glShaderSourceARB',
      'glCompileShaderARB',
      'glCreateProgramObjectARB',
      'glAttachObjectARB',
      'glLinkProgramARB',
      'glUseProgramObjectARB',
      'glValidateProgramARB',
      'glUniform1fARB',
      'glUniform2fARB',
      'glUniform3fARB',
      'glUniform4fARB',
      'glUniform1iARB',
      'glUniform2iARB',
      'glUniform3iARB',
      'glUniform4iARB',
      'glUniform1fvARB',
      'glUniform2fvARB',
      'glUniform3fvARB',
      'glUniform4fvARB',
      'glUniform1ivARB',
      'glUniform2ivARB',
      'glUniform3ivARB',
      'glUniform4ivARB',
      'glUniformMatrix2fvARB',
      'glUniformMatrix3fvARB',
      'glUniformMatrix4fvARB',
      'glGetObjectParameterfvARB',
      'glGetObjectParameterivARB',
      'glGetInfoLogARB',
      'glGetAttachedObjectsARB',
      'glGetUniformLocationARB',
      'glGetActiveUniformARB',
      'glGetUniformfvARB',
      'glGetUniformivARB',
      'glGetShaderSourceARB',
    ]
  end # self.get_ext_command_GL_ARB_shader_objects


  def self.define_ext_command_GL_ARB_shader_precision
  end # self.define_ext_command_GL_ARB_shader_precision

  def self.get_ext_command_GL_ARB_shader_precision
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_precision


  def self.define_ext_command_GL_ARB_shader_stencil_export
  end # self.define_ext_command_GL_ARB_shader_stencil_export

  def self.get_ext_command_GL_ARB_shader_stencil_export
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_stencil_export


  def self.define_ext_command_GL_ARB_shader_storage_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glShaderStorageBlockBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:glShaderStorageBlockBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShaderStorageBlockBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:glShaderStorageBlockBinding)
    GL.module_eval(<<-SRC)
      def self.ShaderStorageBlockBinding(_program_, _storageBlockIndex_, _storageBlockBinding_)
        GL_FUNCTIONS_MAP[:glShaderStorageBlockBinding].call(_program_, _storageBlockIndex_, _storageBlockBinding_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_storage_buffer_object

  def self.get_ext_command_GL_ARB_shader_storage_buffer_object
    [
      'glShaderStorageBlockBinding',
    ]
  end # self.get_ext_command_GL_ARB_shader_storage_buffer_object


  def self.define_ext_command_GL_ARB_shader_subroutine
    GL::GL_FUNCTION_SYMBOLS << :glGetSubroutineUniformLocation
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSubroutineUniformLocation] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSubroutineUniformLocation] = Fiddle::TYPE_INT
    GL.bind_command(:glGetSubroutineUniformLocation)
    GL.module_eval(<<-SRC)
      def self.GetSubroutineUniformLocation(_program_, _shadertype_, _name_)
        GL_FUNCTIONS_MAP[:glGetSubroutineUniformLocation].call(_program_, _shadertype_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSubroutineIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSubroutineIndex] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSubroutineIndex] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetSubroutineIndex)
    GL.module_eval(<<-SRC)
      def self.GetSubroutineIndex(_program_, _shadertype_, _name_)
        GL_FUNCTIONS_MAP[:glGetSubroutineIndex].call(_program_, _shadertype_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveSubroutineUniformiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveSubroutineUniformiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveSubroutineUniformiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveSubroutineUniformiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveSubroutineUniformiv(_program_, _shadertype_, _index_, _pname_, _values_)
        GL_FUNCTIONS_MAP[:glGetActiveSubroutineUniformiv].call(_program_, _shadertype_, _index_, _pname_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveSubroutineUniformName
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveSubroutineUniformName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveSubroutineUniformName] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveSubroutineUniformName)
    GL.module_eval(<<-SRC)
      def self.GetActiveSubroutineUniformName(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
        GL_FUNCTIONS_MAP[:glGetActiveSubroutineUniformName].call(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveSubroutineName
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveSubroutineName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveSubroutineName] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveSubroutineName)
    GL.module_eval(<<-SRC)
      def self.GetActiveSubroutineName(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
        GL_FUNCTIONS_MAP[:glGetActiveSubroutineName].call(_program_, _shadertype_, _index_, _bufSize_, _length_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformSubroutinesuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformSubroutinesuiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformSubroutinesuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformSubroutinesuiv)
    GL.module_eval(<<-SRC)
      def self.UniformSubroutinesuiv(_shadertype_, _count_, _indices_)
        GL_FUNCTIONS_MAP[:glUniformSubroutinesuiv].call(_shadertype_, _count_, _indices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformSubroutineuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformSubroutineuiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformSubroutineuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformSubroutineuiv)
    GL.module_eval(<<-SRC)
      def self.GetUniformSubroutineuiv(_shadertype_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformSubroutineuiv].call(_shadertype_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramStageiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramStageiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramStageiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramStageiv)
    GL.module_eval(<<-SRC)
      def self.GetProgramStageiv(_program_, _shadertype_, _pname_, _values_)
        GL_FUNCTIONS_MAP[:glGetProgramStageiv].call(_program_, _shadertype_, _pname_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shader_subroutine

  def self.get_ext_command_GL_ARB_shader_subroutine
    [
      'glGetSubroutineUniformLocation',
      'glGetSubroutineIndex',
      'glGetActiveSubroutineUniformiv',
      'glGetActiveSubroutineUniformName',
      'glGetActiveSubroutineName',
      'glUniformSubroutinesuiv',
      'glGetUniformSubroutineuiv',
      'glGetProgramStageiv',
    ]
  end # self.get_ext_command_GL_ARB_shader_subroutine


  def self.define_ext_command_GL_ARB_shader_texture_image_samples
  end # self.define_ext_command_GL_ARB_shader_texture_image_samples

  def self.get_ext_command_GL_ARB_shader_texture_image_samples
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_texture_image_samples


  def self.define_ext_command_GL_ARB_shader_texture_lod
  end # self.define_ext_command_GL_ARB_shader_texture_lod

  def self.get_ext_command_GL_ARB_shader_texture_lod
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_texture_lod


  def self.define_ext_command_GL_ARB_shader_viewport_layer_array
  end # self.define_ext_command_GL_ARB_shader_viewport_layer_array

  def self.get_ext_command_GL_ARB_shader_viewport_layer_array
    [
    ]
  end # self.get_ext_command_GL_ARB_shader_viewport_layer_array


  def self.define_ext_command_GL_ARB_shading_language_100
  end # self.define_ext_command_GL_ARB_shading_language_100

  def self.get_ext_command_GL_ARB_shading_language_100
    [
    ]
  end # self.get_ext_command_GL_ARB_shading_language_100


  def self.define_ext_command_GL_ARB_shading_language_420pack
  end # self.define_ext_command_GL_ARB_shading_language_420pack

  def self.get_ext_command_GL_ARB_shading_language_420pack
    [
    ]
  end # self.get_ext_command_GL_ARB_shading_language_420pack


  def self.define_ext_command_GL_ARB_shading_language_include
    GL::GL_FUNCTION_SYMBOLS << :glNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedStringARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.NamedStringARB(_type_, _namelen_, _name_, _stringlen_, _string_)
        GL_FUNCTIONS_MAP[:glNamedStringARB].call(_type_, _namelen_, _name_, _stringlen_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteNamedStringARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteNamedStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.DeleteNamedStringARB(_namelen_, _name_)
        GL_FUNCTIONS_MAP[:glDeleteNamedStringARB].call(_namelen_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompileShaderIncludeARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompileShaderIncludeARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompileShaderIncludeARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompileShaderIncludeARB)
    GL.module_eval(<<-SRC)
      def self.CompileShaderIncludeARB(_shader_, _count_, _path_, _length_)
        GL_FUNCTIONS_MAP[:glCompileShaderIncludeARB].call(_shader_, _count_, _path_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsNamedStringARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsNamedStringARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.IsNamedStringARB(_namelen_, _name_)
        GL_FUNCTIONS_MAP[:glIsNamedStringARB].call(_namelen_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedStringARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedStringARB)
    GL.module_eval(<<-SRC)
      def self.GetNamedStringARB(_namelen_, _name_, _bufSize_, _stringlen_, _string_)
        GL_FUNCTIONS_MAP[:glGetNamedStringARB].call(_namelen_, _name_, _bufSize_, _stringlen_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedStringivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedStringivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedStringivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedStringivARB)
    GL.module_eval(<<-SRC)
      def self.GetNamedStringivARB(_namelen_, _name_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedStringivARB].call(_namelen_, _name_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_shading_language_include

  def self.get_ext_command_GL_ARB_shading_language_include
    [
      'glNamedStringARB',
      'glDeleteNamedStringARB',
      'glCompileShaderIncludeARB',
      'glIsNamedStringARB',
      'glGetNamedStringARB',
      'glGetNamedStringivARB',
    ]
  end # self.get_ext_command_GL_ARB_shading_language_include


  def self.define_ext_command_GL_ARB_shading_language_packing
  end # self.define_ext_command_GL_ARB_shading_language_packing

  def self.get_ext_command_GL_ARB_shading_language_packing
    [
    ]
  end # self.get_ext_command_GL_ARB_shading_language_packing


  def self.define_ext_command_GL_ARB_shadow
  end # self.define_ext_command_GL_ARB_shadow

  def self.get_ext_command_GL_ARB_shadow
    [
    ]
  end # self.get_ext_command_GL_ARB_shadow


  def self.define_ext_command_GL_ARB_shadow_ambient
  end # self.define_ext_command_GL_ARB_shadow_ambient

  def self.get_ext_command_GL_ARB_shadow_ambient
    [
    ]
  end # self.get_ext_command_GL_ARB_shadow_ambient


  def self.define_ext_command_GL_ARB_sparse_buffer
    GL::GL_FUNCTION_SYMBOLS << :glBufferPageCommitmentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferPageCommitmentARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferPageCommitmentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferPageCommitmentARB)
    GL.module_eval(<<-SRC)
      def self.BufferPageCommitmentARB(_target_, _offset_, _size_, _commit_)
        GL_FUNCTIONS_MAP[:glBufferPageCommitmentARB].call(_target_, _offset_, _size_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferPageCommitmentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferPageCommitmentEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferPageCommitmentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferPageCommitmentEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferPageCommitmentEXT(_buffer_, _offset_, _size_, _commit_)
        GL_FUNCTIONS_MAP[:glNamedBufferPageCommitmentEXT].call(_buffer_, _offset_, _size_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferPageCommitmentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferPageCommitmentARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferPageCommitmentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferPageCommitmentARB)
    GL.module_eval(<<-SRC)
      def self.NamedBufferPageCommitmentARB(_buffer_, _offset_, _size_, _commit_)
        GL_FUNCTIONS_MAP[:glNamedBufferPageCommitmentARB].call(_buffer_, _offset_, _size_, _commit_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sparse_buffer

  def self.get_ext_command_GL_ARB_sparse_buffer
    [
      'glBufferPageCommitmentARB',
      'glNamedBufferPageCommitmentEXT',
      'glNamedBufferPageCommitmentARB',
    ]
  end # self.get_ext_command_GL_ARB_sparse_buffer


  def self.define_ext_command_GL_ARB_sparse_texture
    GL::GL_FUNCTION_SYMBOLS << :glTexPageCommitmentARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexPageCommitmentARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexPageCommitmentARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexPageCommitmentARB)
    GL.module_eval(<<-SRC)
      def self.TexPageCommitmentARB(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
        GL_FUNCTIONS_MAP[:glTexPageCommitmentARB].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sparse_texture

  def self.get_ext_command_GL_ARB_sparse_texture
    [
      'glTexPageCommitmentARB',
    ]
  end # self.get_ext_command_GL_ARB_sparse_texture


  def self.define_ext_command_GL_ARB_sparse_texture2
  end # self.define_ext_command_GL_ARB_sparse_texture2

  def self.get_ext_command_GL_ARB_sparse_texture2
    [
    ]
  end # self.get_ext_command_GL_ARB_sparse_texture2


  def self.define_ext_command_GL_ARB_sparse_texture_clamp
  end # self.define_ext_command_GL_ARB_sparse_texture_clamp

  def self.get_ext_command_GL_ARB_sparse_texture_clamp
    [
    ]
  end # self.get_ext_command_GL_ARB_sparse_texture_clamp


  def self.define_ext_command_GL_ARB_spirv_extensions
  end # self.define_ext_command_GL_ARB_spirv_extensions

  def self.get_ext_command_GL_ARB_spirv_extensions
    [
    ]
  end # self.get_ext_command_GL_ARB_spirv_extensions


  def self.define_ext_command_GL_ARB_stencil_texturing
  end # self.define_ext_command_GL_ARB_stencil_texturing

  def self.get_ext_command_GL_ARB_stencil_texturing
    [
    ]
  end # self.get_ext_command_GL_ARB_stencil_texturing


  def self.define_ext_command_GL_ARB_sync
    GL::GL_FUNCTION_SYMBOLS << :glFenceSync
    GL::GL_FUNCTIONS_ARGS_MAP[:glFenceSync] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFenceSync] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glFenceSync)
    GL.module_eval(<<-SRC)
      def self.FenceSync(_condition_, _flags_)
        GL_FUNCTIONS_MAP[:glFenceSync].call(_condition_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsSync
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsSync] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsSync] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsSync)
    GL.module_eval(<<-SRC)
      def self.IsSync(_sync_)
        GL_FUNCTIONS_MAP[:glIsSync].call(_sync_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteSync
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteSync] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteSync] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteSync)
    GL.module_eval(<<-SRC)
      def self.DeleteSync(_sync_)
        GL_FUNCTIONS_MAP[:glDeleteSync].call(_sync_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClientWaitSync
    GL::GL_FUNCTIONS_ARGS_MAP[:glClientWaitSync] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClientWaitSync] = -Fiddle::TYPE_INT
    GL.bind_command(:glClientWaitSync)
    GL.module_eval(<<-SRC)
      def self.ClientWaitSync(_sync_, _flags_, _timeout_)
        GL_FUNCTIONS_MAP[:glClientWaitSync].call(_sync_, _flags_, _timeout_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWaitSync
    GL::GL_FUNCTIONS_ARGS_MAP[:glWaitSync] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWaitSync] = Fiddle::TYPE_VOID
    GL.bind_command(:glWaitSync)
    GL.module_eval(<<-SRC)
      def self.WaitSync(_sync_, _flags_, _timeout_)
        GL_FUNCTIONS_MAP[:glWaitSync].call(_sync_, _flags_, _timeout_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetInteger64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInteger64v] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInteger64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInteger64v)
    GL.module_eval(<<-SRC)
      def self.GetInteger64v(_pname_, _data_)
        GL_FUNCTIONS_MAP[:glGetInteger64v].call(_pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSynciv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSynciv] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSynciv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSynciv)
    GL.module_eval(<<-SRC)
      def self.GetSynciv(_sync_, _pname_, _count_, _length_, _values_)
        GL_FUNCTIONS_MAP[:glGetSynciv].call(_sync_, _pname_, _count_, _length_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_sync

  def self.get_ext_command_GL_ARB_sync
    [
      'glFenceSync',
      'glIsSync',
      'glDeleteSync',
      'glClientWaitSync',
      'glWaitSync',
      'glGetInteger64v',
      'glGetSynciv',
    ]
  end # self.get_ext_command_GL_ARB_sync


  def self.define_ext_command_GL_ARB_tessellation_shader
    GL::GL_FUNCTION_SYMBOLS << :glPatchParameteri
    GL::GL_FUNCTIONS_ARGS_MAP[:glPatchParameteri] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPatchParameteri] = Fiddle::TYPE_VOID
    GL.bind_command(:glPatchParameteri)
    GL.module_eval(<<-SRC)
      def self.PatchParameteri(_pname_, _value_)
        GL_FUNCTIONS_MAP[:glPatchParameteri].call(_pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPatchParameterfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glPatchParameterfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPatchParameterfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glPatchParameterfv)
    GL.module_eval(<<-SRC)
      def self.PatchParameterfv(_pname_, _values_)
        GL_FUNCTIONS_MAP[:glPatchParameterfv].call(_pname_, _values_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_tessellation_shader

  def self.get_ext_command_GL_ARB_tessellation_shader
    [
      'glPatchParameteri',
      'glPatchParameterfv',
    ]
  end # self.get_ext_command_GL_ARB_tessellation_shader


  def self.define_ext_command_GL_ARB_texture_barrier
    GL::GL_FUNCTION_SYMBOLS << :glTextureBarrier
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureBarrier] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureBarrier] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureBarrier)
    GL.module_eval(<<-SRC)
      def self.TextureBarrier()
        GL_FUNCTIONS_MAP[:glTextureBarrier].call()
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_barrier

  def self.get_ext_command_GL_ARB_texture_barrier
    [
      'glTextureBarrier',
    ]
  end # self.get_ext_command_GL_ARB_texture_barrier


  def self.define_ext_command_GL_ARB_texture_border_clamp
  end # self.define_ext_command_GL_ARB_texture_border_clamp

  def self.get_ext_command_GL_ARB_texture_border_clamp
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_border_clamp


  def self.define_ext_command_GL_ARB_texture_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glTexBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexBufferARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexBufferARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexBufferARB)
    GL.module_eval(<<-SRC)
      def self.TexBufferARB(_target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:glTexBufferARB].call(_target_, _internalformat_, _buffer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_buffer_object

  def self.get_ext_command_GL_ARB_texture_buffer_object
    [
      'glTexBufferARB',
    ]
  end # self.get_ext_command_GL_ARB_texture_buffer_object


  def self.define_ext_command_GL_ARB_texture_buffer_object_rgb32
  end # self.define_ext_command_GL_ARB_texture_buffer_object_rgb32

  def self.get_ext_command_GL_ARB_texture_buffer_object_rgb32
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_buffer_object_rgb32


  def self.define_ext_command_GL_ARB_texture_buffer_range
    GL::GL_FUNCTION_SYMBOLS << :glTexBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexBufferRange)
    GL.module_eval(<<-SRC)
      def self.TexBufferRange(_target_, _internalformat_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glTexBufferRange].call(_target_, _internalformat_, _buffer_, _offset_, _size_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_buffer_range

  def self.get_ext_command_GL_ARB_texture_buffer_range
    [
      'glTexBufferRange',
    ]
  end # self.get_ext_command_GL_ARB_texture_buffer_range


  def self.define_ext_command_GL_ARB_texture_compression
    GL::GL_FUNCTION_SYMBOLS << :glCompressedTexImage3DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTexImage3DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTexImage3DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTexImage3DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexImage3DARB(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTexImage3DARB].call(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTexImage2DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTexImage2DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTexImage2DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTexImage2DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexImage2DARB(_target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTexImage2DARB].call(_target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTexImage1DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTexImage1DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTexImage1DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTexImage1DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexImage1DARB(_target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTexImage1DARB].call(_target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTexSubImage3DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTexSubImage3DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTexSubImage3DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTexSubImage3DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexSubImage3DARB(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTexSubImage3DARB].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTexSubImage2DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTexSubImage2DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTexSubImage2DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTexSubImage2DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexSubImage2DARB(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTexSubImage2DARB].call(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTexSubImage1DARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTexSubImage1DARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTexSubImage1DARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTexSubImage1DARB)
    GL.module_eval(<<-SRC)
      def self.CompressedTexSubImage1DARB(_target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
        GL_FUNCTIONS_MAP[:glCompressedTexSubImage1DARB].call(_target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCompressedTexImageARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCompressedTexImageARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCompressedTexImageARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCompressedTexImageARB)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTexImageARB(_target_, _level_, _img_)
        GL_FUNCTIONS_MAP[:glGetCompressedTexImageARB].call(_target_, _level_, _img_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_compression

  def self.get_ext_command_GL_ARB_texture_compression
    [
      'glCompressedTexImage3DARB',
      'glCompressedTexImage2DARB',
      'glCompressedTexImage1DARB',
      'glCompressedTexSubImage3DARB',
      'glCompressedTexSubImage2DARB',
      'glCompressedTexSubImage1DARB',
      'glGetCompressedTexImageARB',
    ]
  end # self.get_ext_command_GL_ARB_texture_compression


  def self.define_ext_command_GL_ARB_texture_compression_bptc
  end # self.define_ext_command_GL_ARB_texture_compression_bptc

  def self.get_ext_command_GL_ARB_texture_compression_bptc
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_compression_bptc


  def self.define_ext_command_GL_ARB_texture_compression_rgtc
  end # self.define_ext_command_GL_ARB_texture_compression_rgtc

  def self.get_ext_command_GL_ARB_texture_compression_rgtc
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_compression_rgtc


  def self.define_ext_command_GL_ARB_texture_cube_map
  end # self.define_ext_command_GL_ARB_texture_cube_map

  def self.get_ext_command_GL_ARB_texture_cube_map
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_cube_map


  def self.define_ext_command_GL_ARB_texture_cube_map_array
  end # self.define_ext_command_GL_ARB_texture_cube_map_array

  def self.get_ext_command_GL_ARB_texture_cube_map_array
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_cube_map_array


  def self.define_ext_command_GL_ARB_texture_env_add
  end # self.define_ext_command_GL_ARB_texture_env_add

  def self.get_ext_command_GL_ARB_texture_env_add
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_add


  def self.define_ext_command_GL_ARB_texture_env_combine
  end # self.define_ext_command_GL_ARB_texture_env_combine

  def self.get_ext_command_GL_ARB_texture_env_combine
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_combine


  def self.define_ext_command_GL_ARB_texture_env_crossbar
  end # self.define_ext_command_GL_ARB_texture_env_crossbar

  def self.get_ext_command_GL_ARB_texture_env_crossbar
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_crossbar


  def self.define_ext_command_GL_ARB_texture_env_dot3
  end # self.define_ext_command_GL_ARB_texture_env_dot3

  def self.get_ext_command_GL_ARB_texture_env_dot3
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_env_dot3


  def self.define_ext_command_GL_ARB_texture_filter_anisotropic
  end # self.define_ext_command_GL_ARB_texture_filter_anisotropic

  def self.get_ext_command_GL_ARB_texture_filter_anisotropic
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_filter_anisotropic


  def self.define_ext_command_GL_ARB_texture_filter_minmax
  end # self.define_ext_command_GL_ARB_texture_filter_minmax

  def self.get_ext_command_GL_ARB_texture_filter_minmax
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_filter_minmax


  def self.define_ext_command_GL_ARB_texture_float
  end # self.define_ext_command_GL_ARB_texture_float

  def self.get_ext_command_GL_ARB_texture_float
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_float


  def self.define_ext_command_GL_ARB_texture_gather
  end # self.define_ext_command_GL_ARB_texture_gather

  def self.get_ext_command_GL_ARB_texture_gather
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_gather


  def self.define_ext_command_GL_ARB_texture_mirror_clamp_to_edge
  end # self.define_ext_command_GL_ARB_texture_mirror_clamp_to_edge

  def self.get_ext_command_GL_ARB_texture_mirror_clamp_to_edge
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_mirror_clamp_to_edge


  def self.define_ext_command_GL_ARB_texture_mirrored_repeat
  end # self.define_ext_command_GL_ARB_texture_mirrored_repeat

  def self.get_ext_command_GL_ARB_texture_mirrored_repeat
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_mirrored_repeat


  def self.define_ext_command_GL_ARB_texture_multisample
    GL::GL_FUNCTION_SYMBOLS << :glTexImage2DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexImage2DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexImage2DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexImage2DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexImage2DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTexImage2DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexImage3DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexImage3DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexImage3DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexImage3DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexImage3DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTexImage3DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultisamplefv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultisamplefv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultisamplefv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultisamplefv)
    GL.module_eval(<<-SRC)
      def self.GetMultisamplefv(_pname_, _index_, _val_)
        GL_FUNCTIONS_MAP[:glGetMultisamplefv].call(_pname_, _index_, _val_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSampleMaski
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleMaski] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleMaski] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleMaski)
    GL.module_eval(<<-SRC)
      def self.SampleMaski(_maskNumber_, _mask_)
        GL_FUNCTIONS_MAP[:glSampleMaski].call(_maskNumber_, _mask_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_multisample

  def self.get_ext_command_GL_ARB_texture_multisample
    [
      'glTexImage2DMultisample',
      'glTexImage3DMultisample',
      'glGetMultisamplefv',
      'glSampleMaski',
    ]
  end # self.get_ext_command_GL_ARB_texture_multisample


  def self.define_ext_command_GL_ARB_texture_non_power_of_two
  end # self.define_ext_command_GL_ARB_texture_non_power_of_two

  def self.get_ext_command_GL_ARB_texture_non_power_of_two
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_non_power_of_two


  def self.define_ext_command_GL_ARB_texture_query_levels
  end # self.define_ext_command_GL_ARB_texture_query_levels

  def self.get_ext_command_GL_ARB_texture_query_levels
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_query_levels


  def self.define_ext_command_GL_ARB_texture_query_lod
  end # self.define_ext_command_GL_ARB_texture_query_lod

  def self.get_ext_command_GL_ARB_texture_query_lod
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_query_lod


  def self.define_ext_command_GL_ARB_texture_rectangle
  end # self.define_ext_command_GL_ARB_texture_rectangle

  def self.get_ext_command_GL_ARB_texture_rectangle
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_rectangle


  def self.define_ext_command_GL_ARB_texture_rg
  end # self.define_ext_command_GL_ARB_texture_rg

  def self.get_ext_command_GL_ARB_texture_rg
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_rg


  def self.define_ext_command_GL_ARB_texture_rgb10_a2ui
  end # self.define_ext_command_GL_ARB_texture_rgb10_a2ui

  def self.get_ext_command_GL_ARB_texture_rgb10_a2ui
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_rgb10_a2ui


  def self.define_ext_command_GL_ARB_texture_stencil8
  end # self.define_ext_command_GL_ARB_texture_stencil8

  def self.get_ext_command_GL_ARB_texture_stencil8
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_stencil8


  def self.define_ext_command_GL_ARB_texture_storage
    GL::GL_FUNCTION_SYMBOLS << :glTexStorage1D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage1D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage1D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage1D)
    GL.module_eval(<<-SRC)
      def self.TexStorage1D(_target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:glTexStorage1D].call(_target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorage2D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage2D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage2D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage2D)
    GL.module_eval(<<-SRC)
      def self.TexStorage2D(_target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glTexStorage2D].call(_target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorage3D
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage3D] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage3D] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage3D)
    GL.module_eval(<<-SRC)
      def self.TexStorage3D(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glTexStorage3D].call(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_storage

  def self.get_ext_command_GL_ARB_texture_storage
    [
      'glTexStorage1D',
      'glTexStorage2D',
      'glTexStorage3D',
    ]
  end # self.get_ext_command_GL_ARB_texture_storage


  def self.define_ext_command_GL_ARB_texture_storage_multisample
    GL::GL_FUNCTION_SYMBOLS << :glTexStorage2DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage2DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage2DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage2DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexStorage2DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTexStorage2DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorage3DMultisample
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage3DMultisample] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage3DMultisample] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage3DMultisample)
    GL.module_eval(<<-SRC)
      def self.TexStorage3DMultisample(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTexStorage3DMultisample].call(_target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_storage_multisample

  def self.get_ext_command_GL_ARB_texture_storage_multisample
    [
      'glTexStorage2DMultisample',
      'glTexStorage3DMultisample',
    ]
  end # self.get_ext_command_GL_ARB_texture_storage_multisample


  def self.define_ext_command_GL_ARB_texture_swizzle
  end # self.define_ext_command_GL_ARB_texture_swizzle

  def self.get_ext_command_GL_ARB_texture_swizzle
    [
    ]
  end # self.get_ext_command_GL_ARB_texture_swizzle


  def self.define_ext_command_GL_ARB_texture_view
    GL::GL_FUNCTION_SYMBOLS << :glTextureView
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureView] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureView] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureView)
    GL.module_eval(<<-SRC)
      def self.TextureView(_texture_, _target_, _origtexture_, _internalformat_, _minlevel_, _numlevels_, _minlayer_, _numlayers_)
        GL_FUNCTIONS_MAP[:glTextureView].call(_texture_, _target_, _origtexture_, _internalformat_, _minlevel_, _numlevels_, _minlayer_, _numlayers_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_texture_view

  def self.get_ext_command_GL_ARB_texture_view
    [
      'glTextureView',
    ]
  end # self.get_ext_command_GL_ARB_texture_view


  def self.define_ext_command_GL_ARB_timer_query
    GL::GL_FUNCTION_SYMBOLS << :glQueryCounter
    GL::GL_FUNCTIONS_ARGS_MAP[:glQueryCounter] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glQueryCounter] = Fiddle::TYPE_VOID
    GL.bind_command(:glQueryCounter)
    GL.module_eval(<<-SRC)
      def self.QueryCounter(_id_, _target_)
        GL_FUNCTIONS_MAP[:glQueryCounter].call(_id_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryObjecti64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryObjecti64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryObjecti64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryObjecti64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjecti64v(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryObjecti64v].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryObjectui64v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryObjectui64v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryObjectui64v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryObjectui64v)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectui64v(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryObjectui64v].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_timer_query

  def self.get_ext_command_GL_ARB_timer_query
    [
      'glQueryCounter',
      'glGetQueryObjecti64v',
      'glGetQueryObjectui64v',
    ]
  end # self.get_ext_command_GL_ARB_timer_query


  def self.define_ext_command_GL_ARB_transform_feedback2
    GL::GL_FUNCTION_SYMBOLS << :glBindTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTransformFeedback] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.BindTransformFeedback(_target_, _id_)
        GL_FUNCTIONS_MAP[:glBindTransformFeedback].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteTransformFeedbacks
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteTransformFeedbacks] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteTransformFeedbacks] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteTransformFeedbacks)
    GL.module_eval(<<-SRC)
      def self.DeleteTransformFeedbacks(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glDeleteTransformFeedbacks].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenTransformFeedbacks
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenTransformFeedbacks] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenTransformFeedbacks] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenTransformFeedbacks)
    GL.module_eval(<<-SRC)
      def self.GenTransformFeedbacks(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glGenTransformFeedbacks].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsTransformFeedback] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsTransformFeedback] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.IsTransformFeedback(_id_)
        GL_FUNCTIONS_MAP[:glIsTransformFeedback].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPauseTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:glPauseTransformFeedback] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPauseTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:glPauseTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.PauseTransformFeedback()
        GL_FUNCTIONS_MAP[:glPauseTransformFeedback].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResumeTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:glResumeTransformFeedback] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResumeTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:glResumeTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.ResumeTransformFeedback()
        GL_FUNCTIONS_MAP[:glResumeTransformFeedback].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawTransformFeedback
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawTransformFeedback] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawTransformFeedback] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawTransformFeedback)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedback(_mode_, _id_)
        GL_FUNCTIONS_MAP[:glDrawTransformFeedback].call(_mode_, _id_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transform_feedback2

  def self.get_ext_command_GL_ARB_transform_feedback2
    [
      'glBindTransformFeedback',
      'glDeleteTransformFeedbacks',
      'glGenTransformFeedbacks',
      'glIsTransformFeedback',
      'glPauseTransformFeedback',
      'glResumeTransformFeedback',
      'glDrawTransformFeedback',
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback2


  def self.define_ext_command_GL_ARB_transform_feedback3
    GL::GL_FUNCTION_SYMBOLS << :glDrawTransformFeedbackStream
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawTransformFeedbackStream] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawTransformFeedbackStream] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawTransformFeedbackStream)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackStream(_mode_, _id_, _stream_)
        GL_FUNCTIONS_MAP[:glDrawTransformFeedbackStream].call(_mode_, _id_, _stream_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBeginQueryIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginQueryIndexed] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginQueryIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginQueryIndexed)
    GL.module_eval(<<-SRC)
      def self.BeginQueryIndexed(_target_, _index_, _id_)
        GL_FUNCTIONS_MAP[:glBeginQueryIndexed].call(_target_, _index_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndQueryIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndQueryIndexed] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndQueryIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndQueryIndexed)
    GL.module_eval(<<-SRC)
      def self.EndQueryIndexed(_target_, _index_)
        GL_FUNCTIONS_MAP[:glEndQueryIndexed].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryIndexediv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryIndexediv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryIndexediv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryIndexediv)
    GL.module_eval(<<-SRC)
      def self.GetQueryIndexediv(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryIndexediv].call(_target_, _index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transform_feedback3

  def self.get_ext_command_GL_ARB_transform_feedback3
    [
      'glDrawTransformFeedbackStream',
      'glBeginQueryIndexed',
      'glEndQueryIndexed',
      'glGetQueryIndexediv',
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback3


  def self.define_ext_command_GL_ARB_transform_feedback_instanced
    GL::GL_FUNCTION_SYMBOLS << :glDrawTransformFeedbackInstanced
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawTransformFeedbackInstanced] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawTransformFeedbackInstanced] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawTransformFeedbackInstanced)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackInstanced(_mode_, _id_, _instancecount_)
        GL_FUNCTIONS_MAP[:glDrawTransformFeedbackInstanced].call(_mode_, _id_, _instancecount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawTransformFeedbackStreamInstanced
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawTransformFeedbackStreamInstanced] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawTransformFeedbackStreamInstanced] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawTransformFeedbackStreamInstanced)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackStreamInstanced(_mode_, _id_, _stream_, _instancecount_)
        GL_FUNCTIONS_MAP[:glDrawTransformFeedbackStreamInstanced].call(_mode_, _id_, _stream_, _instancecount_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transform_feedback_instanced

  def self.get_ext_command_GL_ARB_transform_feedback_instanced
    [
      'glDrawTransformFeedbackInstanced',
      'glDrawTransformFeedbackStreamInstanced',
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback_instanced


  def self.define_ext_command_GL_ARB_transform_feedback_overflow_query
  end # self.define_ext_command_GL_ARB_transform_feedback_overflow_query

  def self.get_ext_command_GL_ARB_transform_feedback_overflow_query
    [
    ]
  end # self.get_ext_command_GL_ARB_transform_feedback_overflow_query


  def self.define_ext_command_GL_ARB_transpose_matrix
    GL::GL_FUNCTION_SYMBOLS << :glLoadTransposeMatrixfARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glLoadTransposeMatrixfARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLoadTransposeMatrixfARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glLoadTransposeMatrixfARB)
    GL.module_eval(<<-SRC)
      def self.LoadTransposeMatrixfARB(_m_)
        GL_FUNCTIONS_MAP[:glLoadTransposeMatrixfARB].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLoadTransposeMatrixdARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glLoadTransposeMatrixdARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLoadTransposeMatrixdARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glLoadTransposeMatrixdARB)
    GL.module_eval(<<-SRC)
      def self.LoadTransposeMatrixdARB(_m_)
        GL_FUNCTIONS_MAP[:glLoadTransposeMatrixdARB].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultTransposeMatrixfARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultTransposeMatrixfARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultTransposeMatrixfARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultTransposeMatrixfARB)
    GL.module_eval(<<-SRC)
      def self.MultTransposeMatrixfARB(_m_)
        GL_FUNCTIONS_MAP[:glMultTransposeMatrixfARB].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultTransposeMatrixdARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultTransposeMatrixdARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultTransposeMatrixdARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultTransposeMatrixdARB)
    GL.module_eval(<<-SRC)
      def self.MultTransposeMatrixdARB(_m_)
        GL_FUNCTIONS_MAP[:glMultTransposeMatrixdARB].call(_m_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_transpose_matrix

  def self.get_ext_command_GL_ARB_transpose_matrix
    [
      'glLoadTransposeMatrixfARB',
      'glLoadTransposeMatrixdARB',
      'glMultTransposeMatrixfARB',
      'glMultTransposeMatrixdARB',
    ]
  end # self.get_ext_command_GL_ARB_transpose_matrix


  def self.define_ext_command_GL_ARB_uniform_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glGetUniformIndices
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformIndices] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformIndices] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformIndices)
    GL.module_eval(<<-SRC)
      def self.GetUniformIndices(_program_, _uniformCount_, _uniformNames_, _uniformIndices_)
        GL_FUNCTIONS_MAP[:glGetUniformIndices].call(_program_, _uniformCount_, _uniformNames_, _uniformIndices_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveUniformsiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveUniformsiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveUniformsiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveUniformsiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformsiv(_program_, _uniformCount_, _uniformIndices_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetActiveUniformsiv].call(_program_, _uniformCount_, _uniformIndices_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveUniformName
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveUniformName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveUniformName] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveUniformName)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformName(_program_, _uniformIndex_, _bufSize_, _length_, _uniformName_)
        GL_FUNCTIONS_MAP[:glGetActiveUniformName].call(_program_, _uniformIndex_, _bufSize_, _length_, _uniformName_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformBlockIndex
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformBlockIndex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformBlockIndex] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetUniformBlockIndex)
    GL.module_eval(<<-SRC)
      def self.GetUniformBlockIndex(_program_, _uniformBlockName_)
        GL_FUNCTIONS_MAP[:glGetUniformBlockIndex].call(_program_, _uniformBlockName_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveUniformBlockiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveUniformBlockiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveUniformBlockiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveUniformBlockiv)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformBlockiv(_program_, _uniformBlockIndex_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetActiveUniformBlockiv].call(_program_, _uniformBlockIndex_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveUniformBlockName
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveUniformBlockName] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveUniformBlockName] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveUniformBlockName)
    GL.module_eval(<<-SRC)
      def self.GetActiveUniformBlockName(_program_, _uniformBlockIndex_, _bufSize_, _length_, _uniformBlockName_)
        GL_FUNCTIONS_MAP[:glGetActiveUniformBlockName].call(_program_, _uniformBlockIndex_, _bufSize_, _length_, _uniformBlockName_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformBlockBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformBlockBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformBlockBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformBlockBinding)
    GL.module_eval(<<-SRC)
      def self.UniformBlockBinding(_program_, _uniformBlockIndex_, _uniformBlockBinding_)
        GL_FUNCTIONS_MAP[:glUniformBlockBinding].call(_program_, _uniformBlockIndex_, _uniformBlockBinding_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferRange
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferRange] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferRange] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferRange)
    GL.module_eval(<<-SRC)
      def self.BindBufferRange(_target_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glBindBufferRange].call(_target_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferBase
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferBase] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferBase] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferBase)
    GL.module_eval(<<-SRC)
      def self.BindBufferBase(_target_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:glBindBufferBase].call(_target_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetIntegeri_v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetIntegeri_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetIntegeri_v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetIntegeri_v)
    GL.module_eval(<<-SRC)
      def self.GetIntegeri_v(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetIntegeri_v].call(_target_, _index_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_uniform_buffer_object

  def self.get_ext_command_GL_ARB_uniform_buffer_object
    [
      'glGetUniformIndices',
      'glGetActiveUniformsiv',
      'glGetActiveUniformName',
      'glGetUniformBlockIndex',
      'glGetActiveUniformBlockiv',
      'glGetActiveUniformBlockName',
      'glUniformBlockBinding',
      'glBindBufferRange',
      'glBindBufferBase',
      'glGetIntegeri_v',
    ]
  end # self.get_ext_command_GL_ARB_uniform_buffer_object


  def self.define_ext_command_GL_ARB_vertex_array_bgra
  end # self.define_ext_command_GL_ARB_vertex_array_bgra

  def self.get_ext_command_GL_ARB_vertex_array_bgra
    [
    ]
  end # self.get_ext_command_GL_ARB_vertex_array_bgra


  def self.define_ext_command_GL_ARB_vertex_array_object
    GL::GL_FUNCTION_SYMBOLS << :glBindVertexArray
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVertexArray] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVertexArray] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVertexArray)
    GL.module_eval(<<-SRC)
      def self.BindVertexArray(_array_)
        GL_FUNCTIONS_MAP[:glBindVertexArray].call(_array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteVertexArrays
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteVertexArrays] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteVertexArrays] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteVertexArrays)
    GL.module_eval(<<-SRC)
      def self.DeleteVertexArrays(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:glDeleteVertexArrays].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenVertexArrays
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenVertexArrays] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenVertexArrays] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenVertexArrays)
    GL.module_eval(<<-SRC)
      def self.GenVertexArrays(_n_, _arrays_)
        GL_FUNCTIONS_MAP[:glGenVertexArrays].call(_n_, _arrays_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsVertexArray
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsVertexArray] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsVertexArray] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsVertexArray)
    GL.module_eval(<<-SRC)
      def self.IsVertexArray(_array_)
        GL_FUNCTIONS_MAP[:glIsVertexArray].call(_array_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_array_object

  def self.get_ext_command_GL_ARB_vertex_array_object
    [
      'glBindVertexArray',
      'glDeleteVertexArrays',
      'glGenVertexArrays',
      'glIsVertexArray',
    ]
  end # self.get_ext_command_GL_ARB_vertex_array_object


  def self.define_ext_command_GL_ARB_vertex_attrib_64bit
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1d
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1d] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1d(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1d].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2d
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2d] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2d(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2d].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3d
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3d] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3d(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3d].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4d
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4d] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4d] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4d)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4d(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4d].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4dv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4dv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4dv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4dv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4dv(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4dv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribLPointer
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribLPointer] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribLPointer] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribLPointer)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLPointer(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribLPointer].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribLdv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribLdv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribLdv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribLdv)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLdv(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribLdv].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_attrib_64bit

  def self.get_ext_command_GL_ARB_vertex_attrib_64bit
    [
      'glVertexAttribL1d',
      'glVertexAttribL2d',
      'glVertexAttribL3d',
      'glVertexAttribL4d',
      'glVertexAttribL1dv',
      'glVertexAttribL2dv',
      'glVertexAttribL3dv',
      'glVertexAttribL4dv',
      'glVertexAttribLPointer',
      'glGetVertexAttribLdv',
    ]
  end # self.get_ext_command_GL_ARB_vertex_attrib_64bit


  def self.define_ext_command_GL_ARB_vertex_attrib_binding
    GL::GL_FUNCTION_SYMBOLS << :glBindVertexBuffer
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVertexBuffer] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVertexBuffer] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVertexBuffer)
    GL.module_eval(<<-SRC)
      def self.BindVertexBuffer(_bindingindex_, _buffer_, _offset_, _stride_)
        GL_FUNCTIONS_MAP[:glBindVertexBuffer].call(_bindingindex_, _buffer_, _offset_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribFormat] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribFormat)
    GL.module_eval(<<-SRC)
      def self.VertexAttribFormat(_attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexAttribFormat].call(_attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribIFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribIFormat] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribIFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribIFormat)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIFormat(_attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexAttribIFormat].call(_attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribLFormat
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribLFormat] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribLFormat] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribLFormat)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLFormat(_attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexAttribLFormat].call(_attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribBinding
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribBinding] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribBinding] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribBinding)
    GL.module_eval(<<-SRC)
      def self.VertexAttribBinding(_attribindex_, _bindingindex_)
        GL_FUNCTIONS_MAP[:glVertexAttribBinding].call(_attribindex_, _bindingindex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexBindingDivisor
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexBindingDivisor] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexBindingDivisor] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexBindingDivisor)
    GL.module_eval(<<-SRC)
      def self.VertexBindingDivisor(_bindingindex_, _divisor_)
        GL_FUNCTIONS_MAP[:glVertexBindingDivisor].call(_bindingindex_, _divisor_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_attrib_binding

  def self.get_ext_command_GL_ARB_vertex_attrib_binding
    [
      'glBindVertexBuffer',
      'glVertexAttribFormat',
      'glVertexAttribIFormat',
      'glVertexAttribLFormat',
      'glVertexAttribBinding',
      'glVertexBindingDivisor',
    ]
  end # self.get_ext_command_GL_ARB_vertex_attrib_binding


  def self.define_ext_command_GL_ARB_vertex_blend
    GL::GL_FUNCTION_SYMBOLS << :glWeightbvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightbvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightbvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightbvARB)
    GL.module_eval(<<-SRC)
      def self.WeightbvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightbvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightsvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightsvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightsvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightsvARB)
    GL.module_eval(<<-SRC)
      def self.WeightsvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightsvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightivARB)
    GL.module_eval(<<-SRC)
      def self.WeightivARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightivARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightfvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightfvARB)
    GL.module_eval(<<-SRC)
      def self.WeightfvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightfvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightdvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightdvARB)
    GL.module_eval(<<-SRC)
      def self.WeightdvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightdvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightubvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightubvARB)
    GL.module_eval(<<-SRC)
      def self.WeightubvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightubvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightusvARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightusvARB)
    GL.module_eval(<<-SRC)
      def self.WeightusvARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightusvARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightuivARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightuivARB)
    GL.module_eval(<<-SRC)
      def self.WeightuivARB(_size_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightuivARB].call(_size_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightPointerARB] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightPointerARB)
    GL.module_eval(<<-SRC)
      def self.WeightPointerARB(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glWeightPointerARB].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexBlendARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexBlendARB] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexBlendARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexBlendARB)
    GL.module_eval(<<-SRC)
      def self.VertexBlendARB(_count_)
        GL_FUNCTIONS_MAP[:glVertexBlendARB].call(_count_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_blend

  def self.get_ext_command_GL_ARB_vertex_blend
    [
      'glWeightbvARB',
      'glWeightsvARB',
      'glWeightivARB',
      'glWeightfvARB',
      'glWeightdvARB',
      'glWeightubvARB',
      'glWeightusvARB',
      'glWeightuivARB',
      'glWeightPointerARB',
      'glVertexBlendARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_blend


  def self.define_ext_command_GL_ARB_vertex_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glBindBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferARB)
    GL.module_eval(<<-SRC)
      def self.BindBufferARB(_target_, _buffer_)
        GL_FUNCTIONS_MAP[:glBindBufferARB].call(_target_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteBuffersARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteBuffersARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteBuffersARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteBuffersARB)
    GL.module_eval(<<-SRC)
      def self.DeleteBuffersARB(_n_, _buffers_)
        GL_FUNCTIONS_MAP[:glDeleteBuffersARB].call(_n_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenBuffersARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenBuffersARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenBuffersARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenBuffersARB)
    GL.module_eval(<<-SRC)
      def self.GenBuffersARB(_n_, _buffers_)
        GL_FUNCTIONS_MAP[:glGenBuffersARB].call(_n_, _buffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsBufferARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsBufferARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsBufferARB)
    GL.module_eval(<<-SRC)
      def self.IsBufferARB(_buffer_)
        GL_FUNCTIONS_MAP[:glIsBufferARB].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBufferDataARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferDataARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferDataARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferDataARB)
    GL.module_eval(<<-SRC)
      def self.BufferDataARB(_target_, _size_, _data_, _usage_)
        GL_FUNCTIONS_MAP[:glBufferDataARB].call(_target_, _size_, _data_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBufferSubDataARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferSubDataARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferSubDataARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferSubDataARB)
    GL.module_eval(<<-SRC)
      def self.BufferSubDataARB(_target_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glBufferSubDataARB].call(_target_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetBufferSubDataARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetBufferSubDataARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetBufferSubDataARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetBufferSubDataARB)
    GL.module_eval(<<-SRC)
      def self.GetBufferSubDataARB(_target_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glGetBufferSubDataARB].call(_target_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapBufferARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapBufferARB] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapBufferARB)
    GL.module_eval(<<-SRC)
      def self.MapBufferARB(_target_, _access_)
        GL_FUNCTIONS_MAP[:glMapBufferARB].call(_target_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUnmapBufferARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glUnmapBufferARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUnmapBufferARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glUnmapBufferARB)
    GL.module_eval(<<-SRC)
      def self.UnmapBufferARB(_target_)
        GL_FUNCTIONS_MAP[:glUnmapBufferARB].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetBufferParameterivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetBufferParameterivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetBufferParameterivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetBufferParameterivARB)
    GL.module_eval(<<-SRC)
      def self.GetBufferParameterivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetBufferParameterivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetBufferPointervARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetBufferPointervARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetBufferPointervARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetBufferPointervARB)
    GL.module_eval(<<-SRC)
      def self.GetBufferPointervARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetBufferPointervARB].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_buffer_object

  def self.get_ext_command_GL_ARB_vertex_buffer_object
    [
      'glBindBufferARB',
      'glDeleteBuffersARB',
      'glGenBuffersARB',
      'glIsBufferARB',
      'glBufferDataARB',
      'glBufferSubDataARB',
      'glGetBufferSubDataARB',
      'glMapBufferARB',
      'glUnmapBufferARB',
      'glGetBufferParameterivARB',
      'glGetBufferPointervARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_buffer_object


  def self.define_ext_command_GL_ARB_vertex_program
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1dARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1fARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1sARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1sARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2dARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2fARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2sARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2sARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3dARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3fARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3sARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3sARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NbvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NbvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NbvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NbvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NbvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NbvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NsvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NsvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NsvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NsvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NsvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NsvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NubARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NubARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NubARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NubARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NubARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NuivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NuivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NuivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NusvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NusvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NusvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NusvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4bvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4bvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4bvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4bvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4bvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4bvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4dARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4fARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4ivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4ivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4sARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4sARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4ubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4ubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4ubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4ubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4ubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4uivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4uivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4uivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4uivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4uivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4uivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4usvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4usvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4usvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4usvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4usvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4usvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribPointerARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribPointerARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribPointerARB(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribPointerARB].call(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.EnableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:glEnableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.DisableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:glDisableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.ProgramStringARB(_target_, _format_, _len_, _string_)
        GL_FUNCTIONS_MAP[:glProgramStringARB].call(_target_, _format_, _len_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindProgramARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindProgramARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindProgramARB)
    GL.module_eval(<<-SRC)
      def self.BindProgramARB(_target_, _program_)
        GL_FUNCTIONS_MAP[:glBindProgramARB].call(_target_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteProgramsARB)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glDeleteProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenProgramsARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenProgramsARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenProgramsARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenProgramsARB)
    GL.module_eval(<<-SRC)
      def self.GenProgramsARB(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glGenProgramsARB].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4dARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4dARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4dARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4dvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4dvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4dvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4dvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4fARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4fARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fARB(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4fARB].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameter4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameter4fvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameter4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameter4fvARB)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameter4fvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameter4fvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramEnvParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramEnvParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramEnvParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramEnvParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramEnvParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramEnvParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramEnvParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramEnvParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramEnvParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramEnvParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramLocalParameterdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramLocalParameterdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramLocalParameterdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramLocalParameterdvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterdvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramLocalParameterdvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramLocalParameterfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramLocalParameterfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramLocalParameterfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramLocalParameterfvARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterfvARB(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramLocalParameterfvARB].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramivARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramivARB(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramivARB].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramStringARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramStringARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramStringARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramStringARB)
    GL.module_eval(<<-SRC)
      def self.GetProgramStringARB(_target_, _pname_, _string_)
        GL_FUNCTIONS_MAP[:glGetProgramStringARB].call(_target_, _pname_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribdvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribdvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribdvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribfvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribfvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribfvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribivARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribivARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribivARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribPointervARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribPointervARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribPointervARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribPointervARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribPointervARB(_index_, _pname_, _pointer_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribPointervARB].call(_index_, _pname_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsProgramARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsProgramARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsProgramARB] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsProgramARB)
    GL.module_eval(<<-SRC)
      def self.IsProgramARB(_program_)
        GL_FUNCTIONS_MAP[:glIsProgramARB].call(_program_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_program

  def self.get_ext_command_GL_ARB_vertex_program
    [
      'glVertexAttrib1dARB',
      'glVertexAttrib1dvARB',
      'glVertexAttrib1fARB',
      'glVertexAttrib1fvARB',
      'glVertexAttrib1sARB',
      'glVertexAttrib1svARB',
      'glVertexAttrib2dARB',
      'glVertexAttrib2dvARB',
      'glVertexAttrib2fARB',
      'glVertexAttrib2fvARB',
      'glVertexAttrib2sARB',
      'glVertexAttrib2svARB',
      'glVertexAttrib3dARB',
      'glVertexAttrib3dvARB',
      'glVertexAttrib3fARB',
      'glVertexAttrib3fvARB',
      'glVertexAttrib3sARB',
      'glVertexAttrib3svARB',
      'glVertexAttrib4NbvARB',
      'glVertexAttrib4NivARB',
      'glVertexAttrib4NsvARB',
      'glVertexAttrib4NubARB',
      'glVertexAttrib4NubvARB',
      'glVertexAttrib4NuivARB',
      'glVertexAttrib4NusvARB',
      'glVertexAttrib4bvARB',
      'glVertexAttrib4dARB',
      'glVertexAttrib4dvARB',
      'glVertexAttrib4fARB',
      'glVertexAttrib4fvARB',
      'glVertexAttrib4ivARB',
      'glVertexAttrib4sARB',
      'glVertexAttrib4svARB',
      'glVertexAttrib4ubvARB',
      'glVertexAttrib4uivARB',
      'glVertexAttrib4usvARB',
      'glVertexAttribPointerARB',
      'glEnableVertexAttribArrayARB',
      'glDisableVertexAttribArrayARB',
      'glProgramStringARB',
      'glBindProgramARB',
      'glDeleteProgramsARB',
      'glGenProgramsARB',
      'glProgramEnvParameter4dARB',
      'glProgramEnvParameter4dvARB',
      'glProgramEnvParameter4fARB',
      'glProgramEnvParameter4fvARB',
      'glProgramLocalParameter4dARB',
      'glProgramLocalParameter4dvARB',
      'glProgramLocalParameter4fARB',
      'glProgramLocalParameter4fvARB',
      'glGetProgramEnvParameterdvARB',
      'glGetProgramEnvParameterfvARB',
      'glGetProgramLocalParameterdvARB',
      'glGetProgramLocalParameterfvARB',
      'glGetProgramivARB',
      'glGetProgramStringARB',
      'glGetVertexAttribdvARB',
      'glGetVertexAttribfvARB',
      'glGetVertexAttribivARB',
      'glGetVertexAttribPointervARB',
      'glIsProgramARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_program


  def self.define_ext_command_GL_ARB_vertex_shader
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1fARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1sARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1sARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dARB(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1dARB].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2fARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2sARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2sARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dARB(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2dARB].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3fARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3sARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3sARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dARB(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3dARB].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4fARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4fARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4fARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4sARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4sARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4sARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4sARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4dARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4dARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4dARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NubARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NubARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NubARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NubARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubARB(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NubARB].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4fvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4fvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4fvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4svARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4svARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4svARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4svARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4dvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4dvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4dvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4ivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4ivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4ivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4bvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4bvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4bvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4bvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4bvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4bvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4ubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4ubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4ubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4ubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4ubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4usvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4usvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4usvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4usvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4usvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4usvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4uivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4uivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4uivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4uivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4uivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4uivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NbvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NbvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NbvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NbvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NbvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NbvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NsvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NsvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NsvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NsvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NsvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NsvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NubvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NubvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NubvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NubvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NubvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NubvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NusvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NusvARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NusvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NusvARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NusvARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NusvARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4NuivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4NuivARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4NuivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4NuivARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4NuivARB(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4NuivARB].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribPointerARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribPointerARB] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribPointerARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribPointerARB)
    GL.module_eval(<<-SRC)
      def self.VertexAttribPointerARB(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribPointerARB].call(_index_, _size_, _type_, _normalized_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.EnableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:glEnableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVertexAttribArrayARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVertexAttribArrayARB] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVertexAttribArrayARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVertexAttribArrayARB)
    GL.module_eval(<<-SRC)
      def self.DisableVertexAttribArrayARB(_index_)
        GL_FUNCTIONS_MAP[:glDisableVertexAttribArrayARB].call(_index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindAttribLocationARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindAttribLocationARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindAttribLocationARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindAttribLocationARB)
    GL.module_eval(<<-SRC)
      def self.BindAttribLocationARB(_programObj_, _index_, _name_)
        GL_FUNCTIONS_MAP[:glBindAttribLocationARB].call(_programObj_, _index_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveAttribARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveAttribARB] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveAttribARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveAttribARB)
    GL.module_eval(<<-SRC)
      def self.GetActiveAttribARB(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:glGetActiveAttribARB].call(_programObj_, _index_, _maxLength_, _length_, _size_, _type_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetAttribLocationARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetAttribLocationARB] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetAttribLocationARB] = Fiddle::TYPE_INT
    GL.bind_command(:glGetAttribLocationARB)
    GL.module_eval(<<-SRC)
      def self.GetAttribLocationARB(_programObj_, _name_)
        GL_FUNCTIONS_MAP[:glGetAttribLocationARB].call(_programObj_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribdvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribdvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribdvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribdvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribdvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribdvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribfvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribfvARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribfvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribfvARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribfvARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribfvARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribivARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribivARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribivARB(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribivARB].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribPointervARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribPointervARB] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribPointervARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribPointervARB)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribPointervARB(_index_, _pname_, _pointer_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribPointervARB].call(_index_, _pname_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_shader

  def self.get_ext_command_GL_ARB_vertex_shader
    [
      'glVertexAttrib1fARB',
      'glVertexAttrib1sARB',
      'glVertexAttrib1dARB',
      'glVertexAttrib2fARB',
      'glVertexAttrib2sARB',
      'glVertexAttrib2dARB',
      'glVertexAttrib3fARB',
      'glVertexAttrib3sARB',
      'glVertexAttrib3dARB',
      'glVertexAttrib4fARB',
      'glVertexAttrib4sARB',
      'glVertexAttrib4dARB',
      'glVertexAttrib4NubARB',
      'glVertexAttrib1fvARB',
      'glVertexAttrib1svARB',
      'glVertexAttrib1dvARB',
      'glVertexAttrib2fvARB',
      'glVertexAttrib2svARB',
      'glVertexAttrib2dvARB',
      'glVertexAttrib3fvARB',
      'glVertexAttrib3svARB',
      'glVertexAttrib3dvARB',
      'glVertexAttrib4fvARB',
      'glVertexAttrib4svARB',
      'glVertexAttrib4dvARB',
      'glVertexAttrib4ivARB',
      'glVertexAttrib4bvARB',
      'glVertexAttrib4ubvARB',
      'glVertexAttrib4usvARB',
      'glVertexAttrib4uivARB',
      'glVertexAttrib4NbvARB',
      'glVertexAttrib4NsvARB',
      'glVertexAttrib4NivARB',
      'glVertexAttrib4NubvARB',
      'glVertexAttrib4NusvARB',
      'glVertexAttrib4NuivARB',
      'glVertexAttribPointerARB',
      'glEnableVertexAttribArrayARB',
      'glDisableVertexAttribArrayARB',
      'glBindAttribLocationARB',
      'glGetActiveAttribARB',
      'glGetAttribLocationARB',
      'glGetVertexAttribdvARB',
      'glGetVertexAttribfvARB',
      'glGetVertexAttribivARB',
      'glGetVertexAttribPointervARB',
    ]
  end # self.get_ext_command_GL_ARB_vertex_shader


  def self.define_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev
  end # self.define_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev

  def self.get_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev
    [
    ]
  end # self.get_ext_command_GL_ARB_vertex_type_10f_11f_11f_rev


  def self.define_ext_command_GL_ARB_vertex_type_2_10_10_10_rev
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP1ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP1ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP1ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP1ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP1uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP1uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP1uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP1uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP2ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP2ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP2ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP2uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP2uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP2uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP2uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP3ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP3ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP3ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP3uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP3uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP3uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP3uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP4ui)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP4ui(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP4ui].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribP4uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribP4uiv)
    GL.module_eval(<<-SRC)
      def self.VertexAttribP4uiv(_index_, _type_, _normalized_, _value_)
        GL_FUNCTIONS_MAP[:glVertexAttribP4uiv].call(_index_, _type_, _normalized_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexP2ui)
    GL.module_eval(<<-SRC)
      def self.VertexP2ui(_type_, _value_)
        GL_FUNCTIONS_MAP[:glVertexP2ui].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexP2uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexP2uiv)
    GL.module_eval(<<-SRC)
      def self.VertexP2uiv(_type_, _value_)
        GL_FUNCTIONS_MAP[:glVertexP2uiv].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexP3ui)
    GL.module_eval(<<-SRC)
      def self.VertexP3ui(_type_, _value_)
        GL_FUNCTIONS_MAP[:glVertexP3ui].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexP3uiv)
    GL.module_eval(<<-SRC)
      def self.VertexP3uiv(_type_, _value_)
        GL_FUNCTIONS_MAP[:glVertexP3uiv].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexP4ui)
    GL.module_eval(<<-SRC)
      def self.VertexP4ui(_type_, _value_)
        GL_FUNCTIONS_MAP[:glVertexP4ui].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexP4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexP4uiv)
    GL.module_eval(<<-SRC)
      def self.VertexP4uiv(_type_, _value_)
        GL_FUNCTIONS_MAP[:glVertexP4uiv].call(_type_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP1ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP1ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP1ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP1ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP1uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP1uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP1uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP1uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP2ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP2ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP2ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP2uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP2uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP2uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP2uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP3ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP3ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP3ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP3uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP3uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP3uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP4ui)
    GL.module_eval(<<-SRC)
      def self.TexCoordP4ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP4ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordP4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordP4uiv)
    GL.module_eval(<<-SRC)
      def self.TexCoordP4uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glTexCoordP4uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP1ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP1ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP1ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP1ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP1ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP1ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP1uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP1uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP1uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP1uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP1uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP1uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP2ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP2ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP2ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP2ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP2ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP2ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP2uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP2uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP2uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP2uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP2uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP2uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP3ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP3ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP3ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP3uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP3uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP3uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP3uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP4ui)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP4ui(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP4ui].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordP4uiv] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordP4uiv)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordP4uiv(_texture_, _type_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordP4uiv].call(_texture_, _type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalP3ui)
    GL.module_eval(<<-SRC)
      def self.NormalP3ui(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalP3ui].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalP3uiv)
    GL.module_eval(<<-SRC)
      def self.NormalP3uiv(_type_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalP3uiv].call(_type_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorP3ui)
    GL.module_eval(<<-SRC)
      def self.ColorP3ui(_type_, _color_)
        GL_FUNCTIONS_MAP[:glColorP3ui].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorP3uiv)
    GL.module_eval(<<-SRC)
      def self.ColorP3uiv(_type_, _color_)
        GL_FUNCTIONS_MAP[:glColorP3uiv].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorP4ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorP4ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorP4ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorP4ui)
    GL.module_eval(<<-SRC)
      def self.ColorP4ui(_type_, _color_)
        GL_FUNCTIONS_MAP[:glColorP4ui].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorP4uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorP4uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorP4uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorP4uiv)
    GL.module_eval(<<-SRC)
      def self.ColorP4uiv(_type_, _color_)
        GL_FUNCTIONS_MAP[:glColorP4uiv].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColorP3ui
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColorP3ui] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColorP3ui] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColorP3ui)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorP3ui(_type_, _color_)
        GL_FUNCTIONS_MAP[:glSecondaryColorP3ui].call(_type_, _color_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColorP3uiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColorP3uiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColorP3uiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColorP3uiv)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorP3uiv(_type_, _color_)
        GL_FUNCTIONS_MAP[:glSecondaryColorP3uiv].call(_type_, _color_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_vertex_type_2_10_10_10_rev

  def self.get_ext_command_GL_ARB_vertex_type_2_10_10_10_rev
    [
      'glVertexAttribP1ui',
      'glVertexAttribP1uiv',
      'glVertexAttribP2ui',
      'glVertexAttribP2uiv',
      'glVertexAttribP3ui',
      'glVertexAttribP3uiv',
      'glVertexAttribP4ui',
      'glVertexAttribP4uiv',
      'glVertexP2ui',
      'glVertexP2uiv',
      'glVertexP3ui',
      'glVertexP3uiv',
      'glVertexP4ui',
      'glVertexP4uiv',
      'glTexCoordP1ui',
      'glTexCoordP1uiv',
      'glTexCoordP2ui',
      'glTexCoordP2uiv',
      'glTexCoordP3ui',
      'glTexCoordP3uiv',
      'glTexCoordP4ui',
      'glTexCoordP4uiv',
      'glMultiTexCoordP1ui',
      'glMultiTexCoordP1uiv',
      'glMultiTexCoordP2ui',
      'glMultiTexCoordP2uiv',
      'glMultiTexCoordP3ui',
      'glMultiTexCoordP3uiv',
      'glMultiTexCoordP4ui',
      'glMultiTexCoordP4uiv',
      'glNormalP3ui',
      'glNormalP3uiv',
      'glColorP3ui',
      'glColorP3uiv',
      'glColorP4ui',
      'glColorP4uiv',
      'glSecondaryColorP3ui',
      'glSecondaryColorP3uiv',
    ]
  end # self.get_ext_command_GL_ARB_vertex_type_2_10_10_10_rev


  def self.define_ext_command_GL_ARB_viewport_array
    GL::GL_FUNCTION_SYMBOLS << :glViewportArrayv
    GL::GL_FUNCTIONS_ARGS_MAP[:glViewportArrayv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glViewportArrayv] = Fiddle::TYPE_VOID
    GL.bind_command(:glViewportArrayv)
    GL.module_eval(<<-SRC)
      def self.ViewportArrayv(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glViewportArrayv].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glViewportIndexedf
    GL::GL_FUNCTIONS_ARGS_MAP[:glViewportIndexedf] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glViewportIndexedf] = Fiddle::TYPE_VOID
    GL.bind_command(:glViewportIndexedf)
    GL.module_eval(<<-SRC)
      def self.ViewportIndexedf(_index_, _x_, _y_, _w_, _h_)
        GL_FUNCTIONS_MAP[:glViewportIndexedf].call(_index_, _x_, _y_, _w_, _h_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glViewportIndexedfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glViewportIndexedfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glViewportIndexedfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glViewportIndexedfv)
    GL.module_eval(<<-SRC)
      def self.ViewportIndexedfv(_index_, _v_)
        GL_FUNCTIONS_MAP[:glViewportIndexedfv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glScissorArrayv
    GL::GL_FUNCTIONS_ARGS_MAP[:glScissorArrayv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glScissorArrayv] = Fiddle::TYPE_VOID
    GL.bind_command(:glScissorArrayv)
    GL.module_eval(<<-SRC)
      def self.ScissorArrayv(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glScissorArrayv].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glScissorIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:glScissorIndexed] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glScissorIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:glScissorIndexed)
    GL.module_eval(<<-SRC)
      def self.ScissorIndexed(_index_, _left_, _bottom_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glScissorIndexed].call(_index_, _left_, _bottom_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glScissorIndexedv
    GL::GL_FUNCTIONS_ARGS_MAP[:glScissorIndexedv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glScissorIndexedv] = Fiddle::TYPE_VOID
    GL.bind_command(:glScissorIndexedv)
    GL.module_eval(<<-SRC)
      def self.ScissorIndexedv(_index_, _v_)
        GL_FUNCTIONS_MAP[:glScissorIndexedv].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangeArrayv
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangeArrayv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangeArrayv] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangeArrayv)
    GL.module_eval(<<-SRC)
      def self.DepthRangeArrayv(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glDepthRangeArrayv].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangeIndexed
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangeIndexed] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangeIndexed] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangeIndexed)
    GL.module_eval(<<-SRC)
      def self.DepthRangeIndexed(_index_, _n_, _f_)
        GL_FUNCTIONS_MAP[:glDepthRangeIndexed].call(_index_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFloati_v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFloati_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFloati_v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFloati_v)
    GL.module_eval(<<-SRC)
      def self.GetFloati_v(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetFloati_v].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDoublei_v
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDoublei_v] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDoublei_v] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetDoublei_v)
    GL.module_eval(<<-SRC)
      def self.GetDoublei_v(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetDoublei_v].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangeArraydvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangeArraydvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangeArraydvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangeArraydvNV)
    GL.module_eval(<<-SRC)
      def self.DepthRangeArraydvNV(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glDepthRangeArraydvNV].call(_first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangeIndexeddNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangeIndexeddNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangeIndexeddNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangeIndexeddNV)
    GL.module_eval(<<-SRC)
      def self.DepthRangeIndexeddNV(_index_, _n_, _f_)
        GL_FUNCTIONS_MAP[:glDepthRangeIndexeddNV].call(_index_, _n_, _f_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_viewport_array

  def self.get_ext_command_GL_ARB_viewport_array
    [
      'glViewportArrayv',
      'glViewportIndexedf',
      'glViewportIndexedfv',
      'glScissorArrayv',
      'glScissorIndexed',
      'glScissorIndexedv',
      'glDepthRangeArrayv',
      'glDepthRangeIndexed',
      'glGetFloati_v',
      'glGetDoublei_v',
      'glDepthRangeArraydvNV',
      'glDepthRangeIndexeddNV',
    ]
  end # self.get_ext_command_GL_ARB_viewport_array


  def self.define_ext_command_GL_ARB_window_pos
    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2dARB] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2dARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2dARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2dvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2dvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dvARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2dvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2fARB] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2fARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2fARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2fvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2fvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fvARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2fvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2iARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2iARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2iARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2ivARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2ivARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2ivARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2ivARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2sARB] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2sARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2sARB(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2sARB].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2svARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2svARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos2svARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2svARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3dARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3dARB] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3dARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3dARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3dARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3dvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3dvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3dvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3dvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dvARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3dvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3fARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3fARB] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3fARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3fARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3fARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3fvARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3fvARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3fvARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3fvARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fvARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3fvARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3iARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3iARB] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3iARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3iARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3iARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3iARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3ivARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3ivARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3ivARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3ivARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3ivARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3ivARB].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3sARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3sARB] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3sARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3sARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3sARB(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3sARB].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3svARB
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3svARB] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3svARB] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3svARB)
    GL.module_eval(<<-SRC)
      def self.WindowPos3svARB(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3svARB].call(_v_)
      end
    SRC
  end # self.define_ext_command_GL_ARB_window_pos

  def self.get_ext_command_GL_ARB_window_pos
    [
      'glWindowPos2dARB',
      'glWindowPos2dvARB',
      'glWindowPos2fARB',
      'glWindowPos2fvARB',
      'glWindowPos2iARB',
      'glWindowPos2ivARB',
      'glWindowPos2sARB',
      'glWindowPos2svARB',
      'glWindowPos3dARB',
      'glWindowPos3dvARB',
      'glWindowPos3fARB',
      'glWindowPos3fvARB',
      'glWindowPos3iARB',
      'glWindowPos3ivARB',
      'glWindowPos3sARB',
      'glWindowPos3svARB',
    ]
  end # self.get_ext_command_GL_ARB_window_pos


  def self.define_ext_command_GL_ATI_draw_buffers
    GL::GL_FUNCTION_SYMBOLS << :glDrawBuffersATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawBuffersATI] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawBuffersATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawBuffersATI)
    GL.module_eval(<<-SRC)
      def self.DrawBuffersATI(_n_, _bufs_)
        GL_FUNCTIONS_MAP[:glDrawBuffersATI].call(_n_, _bufs_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_draw_buffers

  def self.get_ext_command_GL_ATI_draw_buffers
    [
      'glDrawBuffersATI',
    ]
  end # self.get_ext_command_GL_ATI_draw_buffers


  def self.define_ext_command_GL_ATI_element_array
    GL::GL_FUNCTION_SYMBOLS << :glElementPointerATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glElementPointerATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glElementPointerATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glElementPointerATI)
    GL.module_eval(<<-SRC)
      def self.ElementPointerATI(_type_, _pointer_)
        GL_FUNCTIONS_MAP[:glElementPointerATI].call(_type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementArrayATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementArrayATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementArrayATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementArrayATI)
    GL.module_eval(<<-SRC)
      def self.DrawElementArrayATI(_mode_, _count_)
        GL_FUNCTIONS_MAP[:glDrawElementArrayATI].call(_mode_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawRangeElementArrayATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawRangeElementArrayATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawRangeElementArrayATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawRangeElementArrayATI)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementArrayATI(_mode_, _start_, _end_, _count_)
        GL_FUNCTIONS_MAP[:glDrawRangeElementArrayATI].call(_mode_, _start_, _end_, _count_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_element_array

  def self.get_ext_command_GL_ATI_element_array
    [
      'glElementPointerATI',
      'glDrawElementArrayATI',
      'glDrawRangeElementArrayATI',
    ]
  end # self.get_ext_command_GL_ATI_element_array


  def self.define_ext_command_GL_ATI_envmap_bumpmap
    GL::GL_FUNCTION_SYMBOLS << :glTexBumpParameterivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexBumpParameterivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexBumpParameterivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexBumpParameterivATI)
    GL.module_eval(<<-SRC)
      def self.TexBumpParameterivATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glTexBumpParameterivATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexBumpParameterfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexBumpParameterfvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexBumpParameterfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexBumpParameterfvATI)
    GL.module_eval(<<-SRC)
      def self.TexBumpParameterfvATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glTexBumpParameterfvATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexBumpParameterivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexBumpParameterivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexBumpParameterivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexBumpParameterivATI)
    GL.module_eval(<<-SRC)
      def self.GetTexBumpParameterivATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetTexBumpParameterivATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexBumpParameterfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexBumpParameterfvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexBumpParameterfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexBumpParameterfvATI)
    GL.module_eval(<<-SRC)
      def self.GetTexBumpParameterfvATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetTexBumpParameterfvATI].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_envmap_bumpmap

  def self.get_ext_command_GL_ATI_envmap_bumpmap
    [
      'glTexBumpParameterivATI',
      'glTexBumpParameterfvATI',
      'glGetTexBumpParameterivATI',
      'glGetTexBumpParameterfvATI',
    ]
  end # self.get_ext_command_GL_ATI_envmap_bumpmap


  def self.define_ext_command_GL_ATI_fragment_shader
    GL::GL_FUNCTION_SYMBOLS << :glGenFragmentShadersATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenFragmentShadersATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenFragmentShadersATI] = -Fiddle::TYPE_INT
    GL.bind_command(:glGenFragmentShadersATI)
    GL.module_eval(<<-SRC)
      def self.GenFragmentShadersATI(_range_)
        GL_FUNCTIONS_MAP[:glGenFragmentShadersATI].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindFragmentShaderATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.BindFragmentShaderATI(_id_)
        GL_FUNCTIONS_MAP[:glBindFragmentShaderATI].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteFragmentShaderATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.DeleteFragmentShaderATI(_id_)
        GL_FUNCTIONS_MAP[:glDeleteFragmentShaderATI].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBeginFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginFragmentShaderATI] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.BeginFragmentShaderATI()
        GL_FUNCTIONS_MAP[:glBeginFragmentShaderATI].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndFragmentShaderATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndFragmentShaderATI] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndFragmentShaderATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndFragmentShaderATI)
    GL.module_eval(<<-SRC)
      def self.EndFragmentShaderATI()
        GL_FUNCTIONS_MAP[:glEndFragmentShaderATI].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPassTexCoordATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glPassTexCoordATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPassTexCoordATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glPassTexCoordATI)
    GL.module_eval(<<-SRC)
      def self.PassTexCoordATI(_dst_, _coord_, _swizzle_)
        GL_FUNCTIONS_MAP[:glPassTexCoordATI].call(_dst_, _coord_, _swizzle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSampleMapATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleMapATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleMapATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleMapATI)
    GL.module_eval(<<-SRC)
      def self.SampleMapATI(_dst_, _interp_, _swizzle_)
        GL_FUNCTIONS_MAP[:glSampleMapATI].call(_dst_, _interp_, _swizzle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorFragmentOp1ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorFragmentOp1ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorFragmentOp1ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorFragmentOp1ATI)
    GL.module_eval(<<-SRC)
      def self.ColorFragmentOp1ATI(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
        GL_FUNCTIONS_MAP[:glColorFragmentOp1ATI].call(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorFragmentOp2ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorFragmentOp2ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorFragmentOp2ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorFragmentOp2ATI)
    GL.module_eval(<<-SRC)
      def self.ColorFragmentOp2ATI(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
        GL_FUNCTIONS_MAP[:glColorFragmentOp2ATI].call(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorFragmentOp3ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorFragmentOp3ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorFragmentOp3ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorFragmentOp3ATI)
    GL.module_eval(<<-SRC)
      def self.ColorFragmentOp3ATI(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
        GL_FUNCTIONS_MAP[:glColorFragmentOp3ATI].call(_op_, _dst_, _dstMask_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAlphaFragmentOp1ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glAlphaFragmentOp1ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAlphaFragmentOp1ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glAlphaFragmentOp1ATI)
    GL.module_eval(<<-SRC)
      def self.AlphaFragmentOp1ATI(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
        GL_FUNCTIONS_MAP[:glAlphaFragmentOp1ATI].call(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAlphaFragmentOp2ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glAlphaFragmentOp2ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAlphaFragmentOp2ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glAlphaFragmentOp2ATI)
    GL.module_eval(<<-SRC)
      def self.AlphaFragmentOp2ATI(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
        GL_FUNCTIONS_MAP[:glAlphaFragmentOp2ATI].call(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAlphaFragmentOp3ATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glAlphaFragmentOp3ATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAlphaFragmentOp3ATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glAlphaFragmentOp3ATI)
    GL.module_eval(<<-SRC)
      def self.AlphaFragmentOp3ATI(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
        GL_FUNCTIONS_MAP[:glAlphaFragmentOp3ATI].call(_op_, _dst_, _dstMod_, _arg1_, _arg1Rep_, _arg1Mod_, _arg2_, _arg2Rep_, _arg2Mod_, _arg3_, _arg3Rep_, _arg3Mod_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSetFragmentShaderConstantATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glSetFragmentShaderConstantATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSetFragmentShaderConstantATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glSetFragmentShaderConstantATI)
    GL.module_eval(<<-SRC)
      def self.SetFragmentShaderConstantATI(_dst_, _value_)
        GL_FUNCTIONS_MAP[:glSetFragmentShaderConstantATI].call(_dst_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_fragment_shader

  def self.get_ext_command_GL_ATI_fragment_shader
    [
      'glGenFragmentShadersATI',
      'glBindFragmentShaderATI',
      'glDeleteFragmentShaderATI',
      'glBeginFragmentShaderATI',
      'glEndFragmentShaderATI',
      'glPassTexCoordATI',
      'glSampleMapATI',
      'glColorFragmentOp1ATI',
      'glColorFragmentOp2ATI',
      'glColorFragmentOp3ATI',
      'glAlphaFragmentOp1ATI',
      'glAlphaFragmentOp2ATI',
      'glAlphaFragmentOp3ATI',
      'glSetFragmentShaderConstantATI',
    ]
  end # self.get_ext_command_GL_ATI_fragment_shader


  def self.define_ext_command_GL_ATI_map_object_buffer
    GL::GL_FUNCTION_SYMBOLS << :glMapObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapObjectBufferATI] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.MapObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:glMapObjectBufferATI].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUnmapObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glUnmapObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUnmapObjectBufferATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glUnmapObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.UnmapObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:glUnmapObjectBufferATI].call(_buffer_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_map_object_buffer

  def self.get_ext_command_GL_ATI_map_object_buffer
    [
      'glMapObjectBufferATI',
      'glUnmapObjectBufferATI',
    ]
  end # self.get_ext_command_GL_ATI_map_object_buffer


  def self.define_ext_command_GL_ATI_meminfo
  end # self.define_ext_command_GL_ATI_meminfo

  def self.get_ext_command_GL_ATI_meminfo
    [
    ]
  end # self.get_ext_command_GL_ATI_meminfo


  def self.define_ext_command_GL_ATI_pixel_format_float
  end # self.define_ext_command_GL_ATI_pixel_format_float

  def self.get_ext_command_GL_ATI_pixel_format_float
    [
    ]
  end # self.get_ext_command_GL_ATI_pixel_format_float


  def self.define_ext_command_GL_ATI_pn_triangles
    GL::GL_FUNCTION_SYMBOLS << :glPNTrianglesiATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glPNTrianglesiATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPNTrianglesiATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glPNTrianglesiATI)
    GL.module_eval(<<-SRC)
      def self.PNTrianglesiATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPNTrianglesiATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPNTrianglesfATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glPNTrianglesfATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPNTrianglesfATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glPNTrianglesfATI)
    GL.module_eval(<<-SRC)
      def self.PNTrianglesfATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPNTrianglesfATI].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_pn_triangles

  def self.get_ext_command_GL_ATI_pn_triangles
    [
      'glPNTrianglesiATI',
      'glPNTrianglesfATI',
    ]
  end # self.get_ext_command_GL_ATI_pn_triangles


  def self.define_ext_command_GL_ATI_separate_stencil
    GL::GL_FUNCTION_SYMBOLS << :glStencilOpSeparateATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilOpSeparateATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilOpSeparateATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilOpSeparateATI)
    GL.module_eval(<<-SRC)
      def self.StencilOpSeparateATI(_face_, _sfail_, _dpfail_, _dppass_)
        GL_FUNCTIONS_MAP[:glStencilOpSeparateATI].call(_face_, _sfail_, _dpfail_, _dppass_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilFuncSeparateATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilFuncSeparateATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilFuncSeparateATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilFuncSeparateATI)
    GL.module_eval(<<-SRC)
      def self.StencilFuncSeparateATI(_frontfunc_, _backfunc_, _ref_, _mask_)
        GL_FUNCTIONS_MAP[:glStencilFuncSeparateATI].call(_frontfunc_, _backfunc_, _ref_, _mask_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_separate_stencil

  def self.get_ext_command_GL_ATI_separate_stencil
    [
      'glStencilOpSeparateATI',
      'glStencilFuncSeparateATI',
    ]
  end # self.get_ext_command_GL_ATI_separate_stencil


  def self.define_ext_command_GL_ATI_text_fragment_shader
  end # self.define_ext_command_GL_ATI_text_fragment_shader

  def self.get_ext_command_GL_ATI_text_fragment_shader
    [
    ]
  end # self.get_ext_command_GL_ATI_text_fragment_shader


  def self.define_ext_command_GL_ATI_texture_env_combine3
  end # self.define_ext_command_GL_ATI_texture_env_combine3

  def self.get_ext_command_GL_ATI_texture_env_combine3
    [
    ]
  end # self.get_ext_command_GL_ATI_texture_env_combine3


  def self.define_ext_command_GL_ATI_texture_float
  end # self.define_ext_command_GL_ATI_texture_float

  def self.get_ext_command_GL_ATI_texture_float
    [
    ]
  end # self.get_ext_command_GL_ATI_texture_float


  def self.define_ext_command_GL_ATI_texture_mirror_once
  end # self.define_ext_command_GL_ATI_texture_mirror_once

  def self.get_ext_command_GL_ATI_texture_mirror_once
    [
    ]
  end # self.get_ext_command_GL_ATI_texture_mirror_once


  def self.define_ext_command_GL_ATI_vertex_array_object
    GL::GL_FUNCTION_SYMBOLS << :glNewObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNewObjectBufferATI] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNewObjectBufferATI] = -Fiddle::TYPE_INT
    GL.bind_command(:glNewObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.NewObjectBufferATI(_size_, _pointer_, _usage_)
        GL_FUNCTIONS_MAP[:glNewObjectBufferATI].call(_size_, _pointer_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsObjectBufferATI] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.IsObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:glIsObjectBufferATI].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUpdateObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glUpdateObjectBufferATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUpdateObjectBufferATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glUpdateObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.UpdateObjectBufferATI(_buffer_, _offset_, _size_, _pointer_, _preserve_)
        GL_FUNCTIONS_MAP[:glUpdateObjectBufferATI].call(_buffer_, _offset_, _size_, _pointer_, _preserve_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectBufferfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectBufferfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectBufferfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectBufferfvATI)
    GL.module_eval(<<-SRC)
      def self.GetObjectBufferfvATI(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetObjectBufferfvATI].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectBufferivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectBufferivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectBufferivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectBufferivATI)
    GL.module_eval(<<-SRC)
      def self.GetObjectBufferivATI(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetObjectBufferivATI].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFreeObjectBufferATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glFreeObjectBufferATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFreeObjectBufferATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glFreeObjectBufferATI)
    GL.module_eval(<<-SRC)
      def self.FreeObjectBufferATI(_buffer_)
        GL_FUNCTIONS_MAP[:glFreeObjectBufferATI].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glArrayObjectATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glArrayObjectATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glArrayObjectATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glArrayObjectATI)
    GL.module_eval(<<-SRC)
      def self.ArrayObjectATI(_array_, _size_, _type_, _stride_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:glArrayObjectATI].call(_array_, _size_, _type_, _stride_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetArrayObjectfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetArrayObjectfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetArrayObjectfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetArrayObjectfvATI)
    GL.module_eval(<<-SRC)
      def self.GetArrayObjectfvATI(_array_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetArrayObjectfvATI].call(_array_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetArrayObjectivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetArrayObjectivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetArrayObjectivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetArrayObjectivATI)
    GL.module_eval(<<-SRC)
      def self.GetArrayObjectivATI(_array_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetArrayObjectivATI].call(_array_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantArrayObjectATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantArrayObjectATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantArrayObjectATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantArrayObjectATI)
    GL.module_eval(<<-SRC)
      def self.VariantArrayObjectATI(_id_, _type_, _stride_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:glVariantArrayObjectATI].call(_id_, _type_, _stride_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVariantArrayObjectfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVariantArrayObjectfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVariantArrayObjectfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVariantArrayObjectfvATI)
    GL.module_eval(<<-SRC)
      def self.GetVariantArrayObjectfvATI(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVariantArrayObjectfvATI].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVariantArrayObjectivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVariantArrayObjectivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVariantArrayObjectivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVariantArrayObjectivATI)
    GL.module_eval(<<-SRC)
      def self.GetVariantArrayObjectivATI(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVariantArrayObjectivATI].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_vertex_array_object

  def self.get_ext_command_GL_ATI_vertex_array_object
    [
      'glNewObjectBufferATI',
      'glIsObjectBufferATI',
      'glUpdateObjectBufferATI',
      'glGetObjectBufferfvATI',
      'glGetObjectBufferivATI',
      'glFreeObjectBufferATI',
      'glArrayObjectATI',
      'glGetArrayObjectfvATI',
      'glGetArrayObjectivATI',
      'glVariantArrayObjectATI',
      'glGetVariantArrayObjectfvATI',
      'glGetVariantArrayObjectivATI',
    ]
  end # self.get_ext_command_GL_ATI_vertex_array_object


  def self.define_ext_command_GL_ATI_vertex_attrib_array_object
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribArrayObjectATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribArrayObjectATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribArrayObjectATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribArrayObjectATI)
    GL.module_eval(<<-SRC)
      def self.VertexAttribArrayObjectATI(_index_, _size_, _type_, _normalized_, _stride_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexAttribArrayObjectATI].call(_index_, _size_, _type_, _normalized_, _stride_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribArrayObjectfvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribArrayObjectfvATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribArrayObjectfvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribArrayObjectfvATI)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribArrayObjectfvATI(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribArrayObjectfvATI].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribArrayObjectivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribArrayObjectivATI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribArrayObjectivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribArrayObjectivATI)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribArrayObjectivATI(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribArrayObjectivATI].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_vertex_attrib_array_object

  def self.get_ext_command_GL_ATI_vertex_attrib_array_object
    [
      'glVertexAttribArrayObjectATI',
      'glGetVertexAttribArrayObjectfvATI',
      'glGetVertexAttribArrayObjectivATI',
    ]
  end # self.get_ext_command_GL_ATI_vertex_attrib_array_object


  def self.define_ext_command_GL_ATI_vertex_streams
    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1sATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:glVertexStream1sATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream1svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1iATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:glVertexStream1iATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream1ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1fATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:glVertexStream1fATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream1fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1dATI(_stream_, _x_)
        GL_FUNCTIONS_MAP[:glVertexStream1dATI].call(_stream_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream1dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream1dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream1dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream1dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream1dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream1dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2sATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexStream2sATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream2svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2iATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexStream2iATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream2ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2fATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexStream2fATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream2fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2dATI(_stream_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexStream2dATI].call(_stream_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream2dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream2dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream2dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream2dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream2dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream2dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3sATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexStream3sATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream3svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3iATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexStream3iATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream3ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3fATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexStream3fATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream3fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3dATI(_stream_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexStream3dATI].call(_stream_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream3dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream3dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream3dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream3dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream3dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream3dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4sATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4sATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexStream4sATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4svATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream4svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4iATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4iATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexStream4iATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4ivATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream4ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4fATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4fATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexStream4fATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4fvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream4fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4dATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4dATI(_stream_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexStream4dATI].call(_stream_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexStream4dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexStream4dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexStream4dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexStream4dvATI)
    GL.module_eval(<<-SRC)
      def self.VertexStream4dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glVertexStream4dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3bATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3bATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3bATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3bATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3bATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormalStream3bATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3bvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3bvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3bvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3bvATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3bvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalStream3bvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3sATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3sATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3sATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3sATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3sATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormalStream3sATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3svATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3svATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3svATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3svATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3svATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalStream3svATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3iATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3iATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3iATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3iATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3iATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormalStream3iATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3ivATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3ivATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3ivATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3ivATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3ivATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalStream3ivATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3fATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3fATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3fATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3fATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3fATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormalStream3fATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3fvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3fvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3fvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3fvATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3fvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalStream3fvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3dATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3dATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3dATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3dATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3dATI(_stream_, _nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormalStream3dATI].call(_stream_, _nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalStream3dvATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalStream3dvATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalStream3dvATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalStream3dvATI)
    GL.module_eval(<<-SRC)
      def self.NormalStream3dvATI(_stream_, _coords_)
        GL_FUNCTIONS_MAP[:glNormalStream3dvATI].call(_stream_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClientActiveVertexStreamATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glClientActiveVertexStreamATI] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClientActiveVertexStreamATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glClientActiveVertexStreamATI)
    GL.module_eval(<<-SRC)
      def self.ClientActiveVertexStreamATI(_stream_)
        GL_FUNCTIONS_MAP[:glClientActiveVertexStreamATI].call(_stream_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexBlendEnviATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexBlendEnviATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexBlendEnviATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexBlendEnviATI)
    GL.module_eval(<<-SRC)
      def self.VertexBlendEnviATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glVertexBlendEnviATI].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexBlendEnvfATI
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexBlendEnvfATI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexBlendEnvfATI] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexBlendEnvfATI)
    GL.module_eval(<<-SRC)
      def self.VertexBlendEnvfATI(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glVertexBlendEnvfATI].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_ATI_vertex_streams

  def self.get_ext_command_GL_ATI_vertex_streams
    [
      'glVertexStream1sATI',
      'glVertexStream1svATI',
      'glVertexStream1iATI',
      'glVertexStream1ivATI',
      'glVertexStream1fATI',
      'glVertexStream1fvATI',
      'glVertexStream1dATI',
      'glVertexStream1dvATI',
      'glVertexStream2sATI',
      'glVertexStream2svATI',
      'glVertexStream2iATI',
      'glVertexStream2ivATI',
      'glVertexStream2fATI',
      'glVertexStream2fvATI',
      'glVertexStream2dATI',
      'glVertexStream2dvATI',
      'glVertexStream3sATI',
      'glVertexStream3svATI',
      'glVertexStream3iATI',
      'glVertexStream3ivATI',
      'glVertexStream3fATI',
      'glVertexStream3fvATI',
      'glVertexStream3dATI',
      'glVertexStream3dvATI',
      'glVertexStream4sATI',
      'glVertexStream4svATI',
      'glVertexStream4iATI',
      'glVertexStream4ivATI',
      'glVertexStream4fATI',
      'glVertexStream4fvATI',
      'glVertexStream4dATI',
      'glVertexStream4dvATI',
      'glNormalStream3bATI',
      'glNormalStream3bvATI',
      'glNormalStream3sATI',
      'glNormalStream3svATI',
      'glNormalStream3iATI',
      'glNormalStream3ivATI',
      'glNormalStream3fATI',
      'glNormalStream3fvATI',
      'glNormalStream3dATI',
      'glNormalStream3dvATI',
      'glClientActiveVertexStreamATI',
      'glVertexBlendEnviATI',
      'glVertexBlendEnvfATI',
    ]
  end # self.get_ext_command_GL_ATI_vertex_streams


  def self.define_ext_command_GL_EXT_422_pixels
  end # self.define_ext_command_GL_EXT_422_pixels

  def self.get_ext_command_GL_EXT_422_pixels
    [
    ]
  end # self.get_ext_command_GL_EXT_422_pixels


  def self.define_ext_command_GL_EXT_EGL_image_storage
    GL::GL_FUNCTION_SYMBOLS << :glEGLImageTargetTexStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEGLImageTargetTexStorageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEGLImageTargetTexStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEGLImageTargetTexStorageEXT)
    GL.module_eval(<<-SRC)
      def self.EGLImageTargetTexStorageEXT(_target_, _image_, _attrib_list_)
        GL_FUNCTIONS_MAP[:glEGLImageTargetTexStorageEXT].call(_target_, _image_, _attrib_list_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEGLImageTargetTextureStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEGLImageTargetTextureStorageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEGLImageTargetTextureStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEGLImageTargetTextureStorageEXT)
    GL.module_eval(<<-SRC)
      def self.EGLImageTargetTextureStorageEXT(_texture_, _image_, _attrib_list_)
        GL_FUNCTIONS_MAP[:glEGLImageTargetTextureStorageEXT].call(_texture_, _image_, _attrib_list_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_EGL_image_storage

  def self.get_ext_command_GL_EXT_EGL_image_storage
    [
      'glEGLImageTargetTexStorageEXT',
      'glEGLImageTargetTextureStorageEXT',
    ]
  end # self.get_ext_command_GL_EXT_EGL_image_storage


  def self.define_ext_command_GL_EXT_EGL_sync
  end # self.define_ext_command_GL_EXT_EGL_sync

  def self.get_ext_command_GL_EXT_EGL_sync
    [
    ]
  end # self.get_ext_command_GL_EXT_EGL_sync


  def self.define_ext_command_GL_EXT_abgr
  end # self.define_ext_command_GL_EXT_abgr

  def self.get_ext_command_GL_EXT_abgr
    [
    ]
  end # self.get_ext_command_GL_EXT_abgr


  def self.define_ext_command_GL_EXT_bgra
  end # self.define_ext_command_GL_EXT_bgra

  def self.get_ext_command_GL_EXT_bgra
    [
    ]
  end # self.get_ext_command_GL_EXT_bgra


  def self.define_ext_command_GL_EXT_bindable_uniform
    GL::GL_FUNCTION_SYMBOLS << :glUniformBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformBufferEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformBufferEXT)
    GL.module_eval(<<-SRC)
      def self.UniformBufferEXT(_program_, _location_, _buffer_)
        GL_FUNCTIONS_MAP[:glUniformBufferEXT].call(_program_, _location_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformBufferSizeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformBufferSizeEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformBufferSizeEXT] = Fiddle::TYPE_INT
    GL.bind_command(:glGetUniformBufferSizeEXT)
    GL.module_eval(<<-SRC)
      def self.GetUniformBufferSizeEXT(_program_, _location_)
        GL_FUNCTIONS_MAP[:glGetUniformBufferSizeEXT].call(_program_, _location_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformOffsetEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformOffsetEXT] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:glGetUniformOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.GetUniformOffsetEXT(_program_, _location_)
        GL_FUNCTIONS_MAP[:glGetUniformOffsetEXT].call(_program_, _location_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_bindable_uniform

  def self.get_ext_command_GL_EXT_bindable_uniform
    [
      'glUniformBufferEXT',
      'glGetUniformBufferSizeEXT',
      'glGetUniformOffsetEXT',
    ]
  end # self.get_ext_command_GL_EXT_bindable_uniform


  def self.define_ext_command_GL_EXT_blend_color
    GL::GL_FUNCTION_SYMBOLS << :glBlendColorEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendColorEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendColorEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendColorEXT)
    GL.module_eval(<<-SRC)
      def self.BlendColorEXT(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glBlendColorEXT].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_color

  def self.get_ext_command_GL_EXT_blend_color
    [
      'glBlendColorEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_color


  def self.define_ext_command_GL_EXT_blend_equation_separate
    GL::GL_FUNCTION_SYMBOLS << :glBlendEquationSeparateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquationSeparateEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquationSeparateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquationSeparateEXT)
    GL.module_eval(<<-SRC)
      def self.BlendEquationSeparateEXT(_modeRGB_, _modeAlpha_)
        GL_FUNCTIONS_MAP[:glBlendEquationSeparateEXT].call(_modeRGB_, _modeAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_equation_separate

  def self.get_ext_command_GL_EXT_blend_equation_separate
    [
      'glBlendEquationSeparateEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_equation_separate


  def self.define_ext_command_GL_EXT_blend_func_separate
    GL::GL_FUNCTION_SYMBOLS << :glBlendFuncSeparateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendFuncSeparateEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendFuncSeparateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendFuncSeparateEXT)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateEXT(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
        GL_FUNCTIONS_MAP[:glBlendFuncSeparateEXT].call(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_func_separate

  def self.get_ext_command_GL_EXT_blend_func_separate
    [
      'glBlendFuncSeparateEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_func_separate


  def self.define_ext_command_GL_EXT_blend_logic_op
  end # self.define_ext_command_GL_EXT_blend_logic_op

  def self.get_ext_command_GL_EXT_blend_logic_op
    [
    ]
  end # self.get_ext_command_GL_EXT_blend_logic_op


  def self.define_ext_command_GL_EXT_blend_minmax
    GL::GL_FUNCTION_SYMBOLS << :glBlendEquationEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendEquationEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendEquationEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendEquationEXT)
    GL.module_eval(<<-SRC)
      def self.BlendEquationEXT(_mode_)
        GL_FUNCTIONS_MAP[:glBlendEquationEXT].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_blend_minmax

  def self.get_ext_command_GL_EXT_blend_minmax
    [
      'glBlendEquationEXT',
    ]
  end # self.get_ext_command_GL_EXT_blend_minmax


  def self.define_ext_command_GL_EXT_blend_subtract
  end # self.define_ext_command_GL_EXT_blend_subtract

  def self.get_ext_command_GL_EXT_blend_subtract
    [
    ]
  end # self.get_ext_command_GL_EXT_blend_subtract


  def self.define_ext_command_GL_EXT_clip_volume_hint
  end # self.define_ext_command_GL_EXT_clip_volume_hint

  def self.get_ext_command_GL_EXT_clip_volume_hint
    [
    ]
  end # self.get_ext_command_GL_EXT_clip_volume_hint


  def self.define_ext_command_GL_EXT_cmyka
  end # self.define_ext_command_GL_EXT_cmyka

  def self.get_ext_command_GL_EXT_cmyka
    [
    ]
  end # self.get_ext_command_GL_EXT_cmyka


  def self.define_ext_command_GL_EXT_color_subtable
    GL::GL_FUNCTION_SYMBOLS << :glColorSubTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorSubTableEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorSubTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorSubTableEXT)
    GL.module_eval(<<-SRC)
      def self.ColorSubTableEXT(_target_, _start_, _count_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glColorSubTableEXT].call(_target_, _start_, _count_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyColorSubTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyColorSubTableEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyColorSubTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyColorSubTableEXT)
    GL.module_eval(<<-SRC)
      def self.CopyColorSubTableEXT(_target_, _start_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyColorSubTableEXT].call(_target_, _start_, _x_, _y_, _width_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_color_subtable

  def self.get_ext_command_GL_EXT_color_subtable
    [
      'glColorSubTableEXT',
      'glCopyColorSubTableEXT',
    ]
  end # self.get_ext_command_GL_EXT_color_subtable


  def self.define_ext_command_GL_EXT_compiled_vertex_array
    GL::GL_FUNCTION_SYMBOLS << :glLockArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glLockArraysEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLockArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glLockArraysEXT)
    GL.module_eval(<<-SRC)
      def self.LockArraysEXT(_first_, _count_)
        GL_FUNCTIONS_MAP[:glLockArraysEXT].call(_first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUnlockArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUnlockArraysEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUnlockArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUnlockArraysEXT)
    GL.module_eval(<<-SRC)
      def self.UnlockArraysEXT()
        GL_FUNCTIONS_MAP[:glUnlockArraysEXT].call()
      end
    SRC
  end # self.define_ext_command_GL_EXT_compiled_vertex_array

  def self.get_ext_command_GL_EXT_compiled_vertex_array
    [
      'glLockArraysEXT',
      'glUnlockArraysEXT',
    ]
  end # self.get_ext_command_GL_EXT_compiled_vertex_array


  def self.define_ext_command_GL_EXT_convolution
    GL::GL_FUNCTION_SYMBOLS << :glConvolutionFilter1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionFilter1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionFilter1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionFilter1DEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter1DEXT(_target_, _internalformat_, _width_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:glConvolutionFilter1DEXT].call(_target_, _internalformat_, _width_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionFilter2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionFilter2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionFilter2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionFilter2DEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionFilter2DEXT(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:glConvolutionFilter2DEXT].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterfEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterfEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameteriEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameteriEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyConvolutionFilter1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyConvolutionFilter1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyConvolutionFilter1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyConvolutionFilter1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter1DEXT(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyConvolutionFilter1DEXT].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyConvolutionFilter2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyConvolutionFilter2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyConvolutionFilter2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyConvolutionFilter2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyConvolutionFilter2DEXT(_target_, _internalformat_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyConvolutionFilter2DEXT].call(_target_, _internalformat_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionFilterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionFilterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionFilterEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionFilterEXT)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionFilterEXT(_target_, _format_, _type_, _image_)
        GL_FUNCTIONS_MAP[:glGetConvolutionFilterEXT].call(_target_, _format_, _type_, _image_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetConvolutionParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetConvolutionParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSeparableFilterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSeparableFilterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSeparableFilterEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSeparableFilterEXT)
    GL.module_eval(<<-SRC)
      def self.GetSeparableFilterEXT(_target_, _format_, _type_, _row_, _column_, _span_)
        GL_FUNCTIONS_MAP[:glGetSeparableFilterEXT].call(_target_, _format_, _type_, _row_, _column_, _span_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSeparableFilter2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSeparableFilter2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSeparableFilter2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSeparableFilter2DEXT)
    GL.module_eval(<<-SRC)
      def self.SeparableFilter2DEXT(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
        GL_FUNCTIONS_MAP[:glSeparableFilter2DEXT].call(_target_, _internalformat_, _width_, _height_, _format_, _type_, _row_, _column_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_convolution

  def self.get_ext_command_GL_EXT_convolution
    [
      'glConvolutionFilter1DEXT',
      'glConvolutionFilter2DEXT',
      'glConvolutionParameterfEXT',
      'glConvolutionParameterfvEXT',
      'glConvolutionParameteriEXT',
      'glConvolutionParameterivEXT',
      'glCopyConvolutionFilter1DEXT',
      'glCopyConvolutionFilter2DEXT',
      'glGetConvolutionFilterEXT',
      'glGetConvolutionParameterfvEXT',
      'glGetConvolutionParameterivEXT',
      'glGetSeparableFilterEXT',
      'glSeparableFilter2DEXT',
    ]
  end # self.get_ext_command_GL_EXT_convolution


  def self.define_ext_command_GL_EXT_coordinate_frame
    GL::GL_FUNCTION_SYMBOLS << :glTangent3bEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3bEXT] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3bEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3bEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3bEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:glTangent3bEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3bvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3bvEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3bvEXT(_v_)
        GL_FUNCTIONS_MAP[:glTangent3bvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3dEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3dEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3dEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:glTangent3dEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3dvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3dvEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3dvEXT(_v_)
        GL_FUNCTIONS_MAP[:glTangent3dvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3fEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3fEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3fEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:glTangent3fEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3fvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3fvEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3fvEXT(_v_)
        GL_FUNCTIONS_MAP[:glTangent3fvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3iEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3iEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3iEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:glTangent3iEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3ivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3ivEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3ivEXT(_v_)
        GL_FUNCTIONS_MAP[:glTangent3ivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3sEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3sEXT] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3sEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3sEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3sEXT(_tx_, _ty_, _tz_)
        GL_FUNCTIONS_MAP[:glTangent3sEXT].call(_tx_, _ty_, _tz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangent3svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangent3svEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangent3svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangent3svEXT)
    GL.module_eval(<<-SRC)
      def self.Tangent3svEXT(_v_)
        GL_FUNCTIONS_MAP[:glTangent3svEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3bEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3bEXT] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3bEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3bEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3bEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:glBinormal3bEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3bvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3bvEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3bvEXT(_v_)
        GL_FUNCTIONS_MAP[:glBinormal3bvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3dEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3dEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3dEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:glBinormal3dEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3dvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3dvEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3dvEXT(_v_)
        GL_FUNCTIONS_MAP[:glBinormal3dvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3fEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3fEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3fEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:glBinormal3fEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3fvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3fvEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3fvEXT(_v_)
        GL_FUNCTIONS_MAP[:glBinormal3fvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3iEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3iEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3iEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:glBinormal3iEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3ivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3ivEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3ivEXT(_v_)
        GL_FUNCTIONS_MAP[:glBinormal3ivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3sEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3sEXT] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3sEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3sEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3sEXT(_bx_, _by_, _bz_)
        GL_FUNCTIONS_MAP[:glBinormal3sEXT].call(_bx_, _by_, _bz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormal3svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormal3svEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormal3svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormal3svEXT)
    GL.module_eval(<<-SRC)
      def self.Binormal3svEXT(_v_)
        GL_FUNCTIONS_MAP[:glBinormal3svEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTangentPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTangentPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTangentPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTangentPointerEXT)
    GL.module_eval(<<-SRC)
      def self.TangentPointerEXT(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glTangentPointerEXT].call(_type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBinormalPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBinormalPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBinormalPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBinormalPointerEXT)
    GL.module_eval(<<-SRC)
      def self.BinormalPointerEXT(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glBinormalPointerEXT].call(_type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_coordinate_frame

  def self.get_ext_command_GL_EXT_coordinate_frame
    [
      'glTangent3bEXT',
      'glTangent3bvEXT',
      'glTangent3dEXT',
      'glTangent3dvEXT',
      'glTangent3fEXT',
      'glTangent3fvEXT',
      'glTangent3iEXT',
      'glTangent3ivEXT',
      'glTangent3sEXT',
      'glTangent3svEXT',
      'glBinormal3bEXT',
      'glBinormal3bvEXT',
      'glBinormal3dEXT',
      'glBinormal3dvEXT',
      'glBinormal3fEXT',
      'glBinormal3fvEXT',
      'glBinormal3iEXT',
      'glBinormal3ivEXT',
      'glBinormal3sEXT',
      'glBinormal3svEXT',
      'glTangentPointerEXT',
      'glBinormalPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_coordinate_frame


  def self.define_ext_command_GL_EXT_copy_texture
    GL::GL_FUNCTION_SYMBOLS << :glCopyTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTexImage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexImage1DEXT(_target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
        GL_FUNCTIONS_MAP[:glCopyTexImage1DEXT].call(_target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTexImage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexImage2DEXT(_target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
        GL_FUNCTIONS_MAP[:glCopyTexImage2DEXT].call(_target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTexSubImage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexSubImage1DEXT(_target_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyTexSubImage1DEXT].call(_target_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTexSubImage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexSubImage2DEXT(_target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyTexSubImage2DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTexSubImage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTexSubImage3DEXT(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyTexSubImage3DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_copy_texture

  def self.get_ext_command_GL_EXT_copy_texture
    [
      'glCopyTexImage1DEXT',
      'glCopyTexImage2DEXT',
      'glCopyTexSubImage1DEXT',
      'glCopyTexSubImage2DEXT',
      'glCopyTexSubImage3DEXT',
    ]
  end # self.get_ext_command_GL_EXT_copy_texture


  def self.define_ext_command_GL_EXT_cull_vertex
    GL::GL_FUNCTION_SYMBOLS << :glCullParameterdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCullParameterdvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCullParameterdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCullParameterdvEXT)
    GL.module_eval(<<-SRC)
      def self.CullParameterdvEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glCullParameterdvEXT].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCullParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCullParameterfvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCullParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCullParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.CullParameterfvEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glCullParameterfvEXT].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_cull_vertex

  def self.get_ext_command_GL_EXT_cull_vertex
    [
      'glCullParameterdvEXT',
      'glCullParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_cull_vertex


  def self.define_ext_command_GL_EXT_debug_label
    GL::GL_FUNCTION_SYMBOLS << :glLabelObjectEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glLabelObjectEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLabelObjectEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glLabelObjectEXT)
    GL.module_eval(<<-SRC)
      def self.LabelObjectEXT(_type_, _object_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glLabelObjectEXT].call(_type_, _object_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectLabelEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectLabelEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectLabelEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectLabelEXT)
    GL.module_eval(<<-SRC)
      def self.GetObjectLabelEXT(_type_, _object_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glGetObjectLabelEXT].call(_type_, _object_, _bufSize_, _length_, _label_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_debug_label

  def self.get_ext_command_GL_EXT_debug_label
    [
      'glLabelObjectEXT',
      'glGetObjectLabelEXT',
    ]
  end # self.get_ext_command_GL_EXT_debug_label


  def self.define_ext_command_GL_EXT_debug_marker
    GL::GL_FUNCTION_SYMBOLS << :glInsertEventMarkerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glInsertEventMarkerEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInsertEventMarkerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glInsertEventMarkerEXT)
    GL.module_eval(<<-SRC)
      def self.InsertEventMarkerEXT(_length_, _marker_)
        GL_FUNCTIONS_MAP[:glInsertEventMarkerEXT].call(_length_, _marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPushGroupMarkerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPushGroupMarkerEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPushGroupMarkerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPushGroupMarkerEXT)
    GL.module_eval(<<-SRC)
      def self.PushGroupMarkerEXT(_length_, _marker_)
        GL_FUNCTIONS_MAP[:glPushGroupMarkerEXT].call(_length_, _marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPopGroupMarkerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPopGroupMarkerEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPopGroupMarkerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPopGroupMarkerEXT)
    GL.module_eval(<<-SRC)
      def self.PopGroupMarkerEXT()
        GL_FUNCTIONS_MAP[:glPopGroupMarkerEXT].call()
      end
    SRC
  end # self.define_ext_command_GL_EXT_debug_marker

  def self.get_ext_command_GL_EXT_debug_marker
    [
      'glInsertEventMarkerEXT',
      'glPushGroupMarkerEXT',
      'glPopGroupMarkerEXT',
    ]
  end # self.get_ext_command_GL_EXT_debug_marker


  def self.define_ext_command_GL_EXT_depth_bounds_test
    GL::GL_FUNCTION_SYMBOLS << :glDepthBoundsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthBoundsEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthBoundsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthBoundsEXT)
    GL.module_eval(<<-SRC)
      def self.DepthBoundsEXT(_zmin_, _zmax_)
        GL_FUNCTIONS_MAP[:glDepthBoundsEXT].call(_zmin_, _zmax_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_depth_bounds_test

  def self.get_ext_command_GL_EXT_depth_bounds_test
    [
      'glDepthBoundsEXT',
    ]
  end # self.get_ext_command_GL_EXT_depth_bounds_test


  def self.define_ext_command_GL_EXT_direct_state_access
    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoaddEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoaddEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoaddEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoaddEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoaddEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoaddEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultdEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultdEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultdEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultdEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadIdentityEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadIdentityEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadIdentityEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadIdentityEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadIdentityEXT(_mode_)
        GL_FUNCTIONS_MAP[:glMatrixLoadIdentityEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixRotatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixRotatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixRotatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixRotatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatefEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixRotatefEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixRotatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixRotatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixRotatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixRotatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatedEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixRotatedEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixScalefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixScalefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixScalefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixScalefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScalefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixScalefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixScaledEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixScaledEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixScaledEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixScaledEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScaledEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixScaledEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixTranslatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixTranslatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixTranslatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixTranslatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixTranslatefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixTranslatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixTranslatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixTranslatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixTranslatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatedEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixTranslatedEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixFrustumEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixFrustumEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixFrustumEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixFrustumEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixFrustumEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:glMatrixFrustumEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixOrthoEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixOrthoEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixOrthoEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixOrthoEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixOrthoEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:glMatrixOrthoEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixPopEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixPopEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixPopEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixPopEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPopEXT(_mode_)
        GL_FUNCTIONS_MAP[:glMatrixPopEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixPushEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixPushEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixPushEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixPushEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPushEXT(_mode_)
        GL_FUNCTIONS_MAP[:glMatrixPushEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClientAttribDefaultEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glClientAttribDefaultEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClientAttribDefaultEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glClientAttribDefaultEXT)
    GL.module_eval(<<-SRC)
      def self.ClientAttribDefaultEXT(_mask_)
        GL_FUNCTIONS_MAP[:glClientAttribDefaultEXT].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPushClientAttribDefaultEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPushClientAttribDefaultEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPushClientAttribDefaultEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPushClientAttribDefaultEXT)
    GL.module_eval(<<-SRC)
      def self.PushClientAttribDefaultEXT(_mask_)
        GL_FUNCTIONS_MAP[:glPushClientAttribDefaultEXT].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterfEXT(_texture_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTextureParameterfEXT].call(_texture_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterfvEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTextureParameterfvEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameteriEXT(_texture_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTextureParameteriEXT].call(_texture_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTextureParameterivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureImage1DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureImage1DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureImage2DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureImage2DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage1DEXT(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureSubImage1DEXT].call(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage2DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureSubImage2DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureImage1DEXT(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
        GL_FUNCTIONS_MAP[:glCopyTextureImage1DEXT].call(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureImage2DEXT(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
        GL_FUNCTIONS_MAP[:glCopyTextureImage2DEXT].call(_texture_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage1DEXT(_texture_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyTextureSubImage1DEXT].call(_texture_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage2DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyTextureSubImage2DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureImageEXT(_texture_, _target_, _level_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glGetTextureImageEXT].call(_texture_, _target_, _level_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterfvEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterfvEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureLevelParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureLevelParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureLevelParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureLevelParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameterfvEXT(_texture_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureLevelParameterfvEXT].call(_texture_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureLevelParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureLevelParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureLevelParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureLevelParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureLevelParameterivEXT(_texture_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureLevelParameterivEXT].call(_texture_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureImage3DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureImage3DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureSubImage3DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTextureSubImage3DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyTextureSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyTextureSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyTextureSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyTextureSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyTextureSubImage3DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyTextureSubImage3DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindMultiTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindMultiTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindMultiTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindMultiTextureEXT)
    GL.module_eval(<<-SRC)
      def self.BindMultiTextureEXT(_texunit_, _target_, _texture_)
        GL_FUNCTIONS_MAP[:glBindMultiTextureEXT].call(_texunit_, _target_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoordPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoordPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoordPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoordPointerEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoordPointerEXT(_texunit_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glMultiTexCoordPointerEXT].call(_texunit_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexEnvfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexEnvfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexEnvfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexEnvfEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnvfEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexEnvfEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexEnvfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexEnvfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexEnvfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexEnvfvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnvfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexEnvfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexEnviEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexEnviEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexEnviEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexEnviEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnviEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexEnviEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexEnvivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexEnvivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexEnvivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexEnvivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexEnvivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexEnvivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexGendEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexGendEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexGendEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexGendEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGendEXT(_texunit_, _coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexGendEXT].call(_texunit_, _coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexGendvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexGendvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexGendvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexGendvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGendvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexGendvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexGenfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexGenfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexGenfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexGenfEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGenfEXT(_texunit_, _coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexGenfEXT].call(_texunit_, _coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexGenfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexGenfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexGenfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexGenfvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGenfvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexGenfvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexGeniEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexGeniEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexGeniEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexGeniEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGeniEXT(_texunit_, _coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexGeniEXT].call(_texunit_, _coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexGenivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexGenivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexGenivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexGenivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexGenivEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexGenivEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexEnvfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexEnvfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexEnvfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexEnvfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexEnvfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexEnvfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexEnvivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexEnvivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexEnvivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexEnvivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexEnvivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexEnvivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexGendvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexGendvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexGendvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexGendvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexGendvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexGendvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexGenfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexGenfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexGenfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexGenfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexGenfvEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexGenfvEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexGenivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexGenivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexGenivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexGenivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexGenivEXT(_texunit_, _coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexGenivEXT].call(_texunit_, _coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameteriEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexParameteriEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexParameterivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterfEXT(_texunit_, _target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMultiTexParameterfEXT].call(_texunit_, _target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexParameterfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexImage1DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glMultiTexImage1DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexImage2DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glMultiTexImage2DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexSubImage1DEXT(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glMultiTexSubImage1DEXT].call(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexSubImage2DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glMultiTexSubImage2DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyMultiTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyMultiTexImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyMultiTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyMultiTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexImage1DEXT(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
        GL_FUNCTIONS_MAP[:glCopyMultiTexImage1DEXT].call(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyMultiTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyMultiTexImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyMultiTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyMultiTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexImage2DEXT(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
        GL_FUNCTIONS_MAP[:glCopyMultiTexImage2DEXT].call(_texunit_, _target_, _level_, _internalformat_, _x_, _y_, _width_, _height_, _border_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyMultiTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyMultiTexSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyMultiTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyMultiTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexSubImage1DEXT(_texunit_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyMultiTexSubImage1DEXT].call(_texunit_, _target_, _level_, _xoffset_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyMultiTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyMultiTexSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyMultiTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyMultiTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexSubImage2DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyMultiTexSubImage2DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexImageEXT(_texunit_, _target_, _level_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glGetMultiTexImageEXT].call(_texunit_, _target_, _level_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterfvEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexParameterfvEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexParameterivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexLevelParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexLevelParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexLevelParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexLevelParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexLevelParameterfvEXT(_texunit_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexLevelParameterfvEXT].call(_texunit_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexLevelParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexLevelParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexLevelParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexLevelParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexLevelParameterivEXT(_texunit_, _target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexLevelParameterivEXT].call(_texunit_, _target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexImage3DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glMultiTexImage3DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexSubImage3DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glMultiTexSubImage3DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyMultiTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyMultiTexSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyMultiTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyMultiTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CopyMultiTexSubImage3DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glCopyMultiTexSubImage3DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableClientStateIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableClientStateIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableClientStateIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableClientStateIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.EnableClientStateIndexedEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:glEnableClientStateIndexedEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableClientStateIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableClientStateIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableClientStateIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableClientStateIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.DisableClientStateIndexedEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:glDisableClientStateIndexedEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFloatIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFloatIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFloatIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFloatIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetFloatIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetFloatIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDoubleIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDoubleIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDoubleIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetDoubleIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetDoubleIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetDoubleIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPointerIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPointerIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPointerIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPointerIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetPointerIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetPointerIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.EnableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:glEnableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.DisableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:glDisableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsEnabledIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsEnabledIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsEnabledIndexedEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsEnabledIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.IsEnabledIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:glIsEnabledIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetIntegerIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetIntegerIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetIntegerIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetIntegerIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetIntegerIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetIntegerIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetBooleanIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetBooleanIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetBooleanIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetBooleanIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetBooleanIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetBooleanIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureImage3DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedTextureImage3DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureImage2DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedTextureImage2DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureImage1DEXT(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedTextureImage1DEXT].call(_texture_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage3DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedTextureSubImage3DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage2DEXT(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedTextureSubImage2DEXT].call(_texture_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedTextureSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedTextureSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedTextureSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedTextureSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedTextureSubImage1DEXT(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedTextureSubImage1DEXT].call(_texture_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCompressedTextureImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCompressedTextureImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCompressedTextureImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCompressedTextureImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetCompressedTextureImageEXT(_texture_, _target_, _lod_, _img_)
        GL_FUNCTIONS_MAP[:glGetCompressedTextureImageEXT].call(_texture_, _target_, _lod_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedMultiTexImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedMultiTexImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedMultiTexImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedMultiTexImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexImage3DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedMultiTexImage3DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedMultiTexImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedMultiTexImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedMultiTexImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedMultiTexImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexImage2DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedMultiTexImage2DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _height_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedMultiTexImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedMultiTexImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedMultiTexImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedMultiTexImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexImage1DEXT(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedMultiTexImage1DEXT].call(_texunit_, _target_, _level_, _internalformat_, _width_, _border_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedMultiTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedMultiTexSubImage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedMultiTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedMultiTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexSubImage3DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedMultiTexSubImage3DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedMultiTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedMultiTexSubImage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedMultiTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedMultiTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexSubImage2DEXT(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedMultiTexSubImage2DEXT].call(_texunit_, _target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompressedMultiTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompressedMultiTexSubImage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompressedMultiTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompressedMultiTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.CompressedMultiTexSubImage1DEXT(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
        GL_FUNCTIONS_MAP[:glCompressedMultiTexSubImage1DEXT].call(_texunit_, _target_, _level_, _xoffset_, _width_, _format_, _imageSize_, _bits_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCompressedMultiTexImageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCompressedMultiTexImageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCompressedMultiTexImageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCompressedMultiTexImageEXT)
    GL.module_eval(<<-SRC)
      def self.GetCompressedMultiTexImageEXT(_texunit_, _target_, _lod_, _img_)
        GL_FUNCTIONS_MAP[:glGetCompressedMultiTexImageEXT].call(_texunit_, _target_, _lod_, _img_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferDataEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferDataEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferDataEXT(_buffer_, _size_, _data_, _usage_)
        GL_FUNCTIONS_MAP[:glNamedBufferDataEXT].call(_buffer_, _size_, _data_, _usage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferSubDataEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferSubDataEXT(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glNamedBufferSubDataEXT].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapNamedBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapNamedBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapNamedBufferEXT] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapNamedBufferEXT)
    GL.module_eval(<<-SRC)
      def self.MapNamedBufferEXT(_buffer_, _access_)
        GL_FUNCTIONS_MAP[:glMapNamedBufferEXT].call(_buffer_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUnmapNamedBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUnmapNamedBufferEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUnmapNamedBufferEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glUnmapNamedBufferEXT)
    GL.module_eval(<<-SRC)
      def self.UnmapNamedBufferEXT(_buffer_)
        GL_FUNCTIONS_MAP[:glUnmapNamedBufferEXT].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameterivEXT(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferParameterivEXT].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferPointervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferPointervEXT(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferPointervEXT].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferSubDataEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferSubDataEXT(_buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferSubDataEXT].call(_buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1fEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2fEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3fEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4fEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1iEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1iEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2iEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2iEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3iEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3iEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4iEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4iEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureBufferEXT)
    GL.module_eval(<<-SRC)
      def self.TextureBufferEXT(_texture_, _target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:glTextureBufferEXT].call(_texture_, _target_, _internalformat_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexBufferEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexBufferEXT(_texunit_, _target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:glMultiTexBufferEXT].call(_texunit_, _target_, _internalformat_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTextureParameterIivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.TextureParameterIuivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTextureParameterIuivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterIivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTextureParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTextureParameterIuivEXT(_texture_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTextureParameterIuivEXT].call(_texture_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterIivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexParameterIivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexParameterIuivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMultiTexParameterIuivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterIivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexParameterIivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMultiTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultiTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultiTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultiTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMultiTexParameterIuivEXT(_texunit_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMultiTexParameterIuivEXT].call(_texunit_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uiEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1uiEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uiEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2uiEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uiEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uiEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameters4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameters4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameters4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameters4fvEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameters4fvEXT(_program_, _target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameters4fvEXT].call(_program_, _target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameterI4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameterI4iEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameterI4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameterI4iEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4iEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameterI4iEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameterI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameterI4ivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameterI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameterI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4ivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameterI4ivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParametersI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParametersI4ivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParametersI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParametersI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParametersI4ivEXT(_program_, _target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParametersI4ivEXT].call(_program_, _target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameterI4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameterI4uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameterI4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameterI4uiEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4uiEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameterI4uiEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameterI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameterI4uivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameterI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameterI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameterI4uivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameterI4uivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParametersI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParametersI4uivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParametersI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParametersI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParametersI4uivEXT(_program_, _target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParametersI4uivEXT].call(_program_, _target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedProgramLocalParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedProgramLocalParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedProgramLocalParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedProgramLocalParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterIivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedProgramLocalParameterIivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedProgramLocalParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedProgramLocalParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedProgramLocalParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedProgramLocalParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterIuivEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedProgramLocalParameterIuivEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableClientStateiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableClientStateiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableClientStateiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableClientStateiEXT)
    GL.module_eval(<<-SRC)
      def self.EnableClientStateiEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:glEnableClientStateiEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableClientStateiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableClientStateiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableClientStateiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableClientStateiEXT)
    GL.module_eval(<<-SRC)
      def self.DisableClientStateiEXT(_array_, _index_)
        GL_FUNCTIONS_MAP[:glDisableClientStateiEXT].call(_array_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFloati_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFloati_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFloati_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFloati_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetFloati_vEXT(_pname_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetFloati_vEXT].call(_pname_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDoublei_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDoublei_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDoublei_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetDoublei_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetDoublei_vEXT(_pname_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetDoublei_vEXT].call(_pname_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPointeri_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPointeri_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPointeri_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPointeri_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetPointeri_vEXT(_pname_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetPointeri_vEXT].call(_pname_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramStringEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramStringEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramStringEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramStringEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramStringEXT(_program_, _target_, _format_, _len_, _string_)
        GL_FUNCTIONS_MAP[:glNamedProgramStringEXT].call(_program_, _target_, _format_, _len_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameter4dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameter4dEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameter4dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameter4dEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4dEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameter4dEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameter4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameter4dvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameter4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameter4dvEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4dvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameter4dvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameter4fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameter4fEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameter4fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameter4fEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4fEXT(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameter4fEXT].call(_program_, _target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedProgramLocalParameter4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedProgramLocalParameter4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedProgramLocalParameter4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedProgramLocalParameter4fvEXT)
    GL.module_eval(<<-SRC)
      def self.NamedProgramLocalParameter4fvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glNamedProgramLocalParameter4fvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedProgramLocalParameterdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedProgramLocalParameterdvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedProgramLocalParameterdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedProgramLocalParameterdvEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterdvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedProgramLocalParameterdvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedProgramLocalParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedProgramLocalParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedProgramLocalParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedProgramLocalParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramLocalParameterfvEXT(_program_, _target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedProgramLocalParameterfvEXT].call(_program_, _target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedProgramivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedProgramivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedProgramivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedProgramivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramivEXT(_program_, _target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedProgramivEXT].call(_program_, _target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedProgramStringEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedProgramStringEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedProgramStringEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedProgramStringEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedProgramStringEXT(_program_, _target_, _pname_, _string_)
        GL_FUNCTIONS_MAP[:glGetNamedProgramStringEXT].call(_program_, _target_, _pname_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedRenderbufferStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedRenderbufferStorageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedRenderbufferStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedRenderbufferStorageEXT)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageEXT(_renderbuffer_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glNamedRenderbufferStorageEXT].call(_renderbuffer_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedRenderbufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedRenderbufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedRenderbufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedRenderbufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedRenderbufferParameterivEXT(_renderbuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedRenderbufferParameterivEXT].call(_renderbuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedRenderbufferStorageMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedRenderbufferStorageMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedRenderbufferStorageMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedRenderbufferStorageMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisampleEXT(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glNamedRenderbufferStorageMultisampleEXT].call(_renderbuffer_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedRenderbufferStorageMultisampleCoverageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedRenderbufferStorageMultisampleCoverageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedRenderbufferStorageMultisampleCoverageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedRenderbufferStorageMultisampleCoverageEXT)
    GL.module_eval(<<-SRC)
      def self.NamedRenderbufferStorageMultisampleCoverageEXT(_renderbuffer_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glNamedRenderbufferStorageMultisampleCoverageEXT].call(_renderbuffer_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCheckNamedFramebufferStatusEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCheckNamedFramebufferStatusEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCheckNamedFramebufferStatusEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glCheckNamedFramebufferStatusEXT)
    GL.module_eval(<<-SRC)
      def self.CheckNamedFramebufferStatusEXT(_framebuffer_, _target_)
        GL_FUNCTIONS_MAP[:glCheckNamedFramebufferStatusEXT].call(_framebuffer_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTexture1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTexture1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTexture1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTexture1DEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture1DEXT(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTexture1DEXT].call(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTexture2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTexture2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTexture2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTexture2DEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture2DEXT(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTexture2DEXT].call(_framebuffer_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTexture3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTexture3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTexture3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTexture3DEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTexture3DEXT(_framebuffer_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTexture3DEXT].call(_framebuffer_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferRenderbufferEXT(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferRenderbufferEXT].call(_framebuffer_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedFramebufferAttachmentParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedFramebufferAttachmentParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedFramebufferAttachmentParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedFramebufferAttachmentParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferAttachmentParameterivEXT(_framebuffer_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedFramebufferAttachmentParameterivEXT].call(_framebuffer_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenerateTextureMipmapEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenerateTextureMipmapEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenerateTextureMipmapEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenerateTextureMipmapEXT)
    GL.module_eval(<<-SRC)
      def self.GenerateTextureMipmapEXT(_texture_, _target_)
        GL_FUNCTIONS_MAP[:glGenerateTextureMipmapEXT].call(_texture_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenerateMultiTexMipmapEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenerateMultiTexMipmapEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenerateMultiTexMipmapEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenerateMultiTexMipmapEXT)
    GL.module_eval(<<-SRC)
      def self.GenerateMultiTexMipmapEXT(_texunit_, _target_)
        GL_FUNCTIONS_MAP[:glGenerateMultiTexMipmapEXT].call(_texunit_, _target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferDrawBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferDrawBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferDrawBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferDrawBufferEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferDrawBufferEXT(_framebuffer_, _mode_)
        GL_FUNCTIONS_MAP[:glFramebufferDrawBufferEXT].call(_framebuffer_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferDrawBuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferDrawBuffersEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferDrawBuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferDrawBuffersEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferDrawBuffersEXT(_framebuffer_, _n_, _bufs_)
        GL_FUNCTIONS_MAP[:glFramebufferDrawBuffersEXT].call(_framebuffer_, _n_, _bufs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferReadBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferReadBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferReadBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferReadBufferEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferReadBufferEXT(_framebuffer_, _mode_)
        GL_FUNCTIONS_MAP[:glFramebufferReadBufferEXT].call(_framebuffer_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFramebufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFramebufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFramebufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFramebufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameterivEXT(_framebuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFramebufferParameterivEXT].call(_framebuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedCopyBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedCopyBufferSubDataEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedCopyBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedCopyBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.NamedCopyBufferSubDataEXT(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:glNamedCopyBufferSubDataEXT].call(_readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTextureEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureEXT(_framebuffer_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTextureEXT].call(_framebuffer_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTextureLayerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTextureLayerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTextureLayerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTextureLayerEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureLayerEXT(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTextureLayerEXT].call(_framebuffer_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferTextureFaceEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferTextureFaceEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferTextureFaceEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferTextureFaceEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferTextureFaceEXT(_framebuffer_, _attachment_, _texture_, _level_, _face_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferTextureFaceEXT].call(_framebuffer_, _attachment_, _texture_, _level_, _face_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.TextureRenderbufferEXT(_texture_, _target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glTextureRenderbufferEXT].call(_texture_, _target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.MultiTexRenderbufferEXT(_texunit_, _target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glMultiTexRenderbufferEXT].call(_texunit_, _target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayColorOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayColorOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayColorOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayColorOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayColorOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayColorOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayEdgeFlagOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayEdgeFlagOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayEdgeFlagOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayEdgeFlagOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayEdgeFlagOffsetEXT(_vaobj_, _buffer_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayEdgeFlagOffsetEXT].call(_vaobj_, _buffer_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayIndexOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayIndexOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayIndexOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayIndexOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayIndexOffsetEXT(_vaobj_, _buffer_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayIndexOffsetEXT].call(_vaobj_, _buffer_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayNormalOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayNormalOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayNormalOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayNormalOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayNormalOffsetEXT(_vaobj_, _buffer_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayNormalOffsetEXT].call(_vaobj_, _buffer_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayTexCoordOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayTexCoordOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayTexCoordOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayTexCoordOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayTexCoordOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayTexCoordOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayMultiTexCoordOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayMultiTexCoordOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayMultiTexCoordOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayMultiTexCoordOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayMultiTexCoordOffsetEXT(_vaobj_, _buffer_, _texunit_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayMultiTexCoordOffsetEXT].call(_vaobj_, _buffer_, _texunit_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayFogCoordOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayFogCoordOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayFogCoordOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayFogCoordOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayFogCoordOffsetEXT(_vaobj_, _buffer_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayFogCoordOffsetEXT].call(_vaobj_, _buffer_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArraySecondaryColorOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArraySecondaryColorOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArraySecondaryColorOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArraySecondaryColorOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArraySecondaryColorOffsetEXT(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArraySecondaryColorOffsetEXT].call(_vaobj_, _buffer_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribOffsetEXT(_vaobj_, _buffer_, _index_, _size_, _type_, _normalized_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribOffsetEXT].call(_vaobj_, _buffer_, _index_, _size_, _type_, _normalized_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribIOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribIOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribIOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribIOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribIOffsetEXT(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribIOffsetEXT].call(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableVertexArrayEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVertexArrayEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVertexArrayEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVertexArrayEXT)
    GL.module_eval(<<-SRC)
      def self.EnableVertexArrayEXT(_vaobj_, _array_)
        GL_FUNCTIONS_MAP[:glEnableVertexArrayEXT].call(_vaobj_, _array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVertexArrayEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVertexArrayEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVertexArrayEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVertexArrayEXT)
    GL.module_eval(<<-SRC)
      def self.DisableVertexArrayEXT(_vaobj_, _array_)
        GL_FUNCTIONS_MAP[:glDisableVertexArrayEXT].call(_vaobj_, _array_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableVertexArrayAttribEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVertexArrayAttribEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVertexArrayAttribEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVertexArrayAttribEXT)
    GL.module_eval(<<-SRC)
      def self.EnableVertexArrayAttribEXT(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:glEnableVertexArrayAttribEXT].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVertexArrayAttribEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVertexArrayAttribEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVertexArrayAttribEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVertexArrayAttribEXT)
    GL.module_eval(<<-SRC)
      def self.DisableVertexArrayAttribEXT(_vaobj_, _index_)
        GL_FUNCTIONS_MAP[:glDisableVertexArrayAttribEXT].call(_vaobj_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIntegervEXT(_vaobj_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayIntegervEXT].call(_vaobj_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayPointervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayPointervEXT(_vaobj_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayPointervEXT].call(_vaobj_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayIntegeri_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayIntegeri_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayIntegeri_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayIntegeri_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayIntegeri_vEXT(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayIntegeri_vEXT].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexArrayPointeri_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexArrayPointeri_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexArrayPointeri_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexArrayPointeri_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexArrayPointeri_vEXT(_vaobj_, _index_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetVertexArrayPointeri_vEXT].call(_vaobj_, _index_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapNamedBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapNamedBufferRangeEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapNamedBufferRangeEXT] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapNamedBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.MapNamedBufferRangeEXT(_buffer_, _offset_, _length_, _access_)
        GL_FUNCTIONS_MAP[:glMapNamedBufferRangeEXT].call(_buffer_, _offset_, _length_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFlushMappedNamedBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushMappedNamedBufferRangeEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushMappedNamedBufferRangeEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushMappedNamedBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.FlushMappedNamedBufferRangeEXT(_buffer_, _offset_, _length_)
        GL_FUNCTIONS_MAP[:glFlushMappedNamedBufferRangeEXT].call(_buffer_, _offset_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferStorageEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferStorageEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorageEXT(_buffer_, _size_, _data_, _flags_)
        GL_FUNCTIONS_MAP[:glNamedBufferStorageEXT].call(_buffer_, _size_, _data_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedBufferDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedBufferDataEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedBufferDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedBufferDataEXT)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferDataEXT(_buffer_, _internalformat_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearNamedBufferDataEXT].call(_buffer_, _internalformat_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearNamedBufferSubDataEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearNamedBufferSubDataEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearNamedBufferSubDataEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearNamedBufferSubDataEXT)
    GL.module_eval(<<-SRC)
      def self.ClearNamedBufferSubDataEXT(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glClearNamedBufferSubDataEXT].call(_buffer_, _internalformat_, _offset_, _size_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferParameteriEXT(_framebuffer_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferParameteriEXT].call(_framebuffer_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedFramebufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedFramebufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedFramebufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedFramebufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetNamedFramebufferParameterivEXT(_framebuffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedFramebufferParameterivEXT].call(_framebuffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1dEXT(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1dEXT].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2dEXT(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2dEXT].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3dEXT(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3dEXT].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4dEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4dEXT(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4dEXT].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4dvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4dvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x3dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x4dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x2dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x4dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x4dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x2dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x2dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x3dvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3dvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x3dvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureBufferRangeEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureBufferRangeEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.TextureBufferRangeEXT(_texture_, _target_, _internalformat_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glTextureBufferRangeEXT].call(_texture_, _target_, _internalformat_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage1DEXT(_texture_, _target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:glTextureStorage1DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glTextureStorage2DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glTextureStorage3DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage2DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage2DMultisampleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage2DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage2DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DMultisampleEXT(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTextureStorage2DMultisampleEXT].call(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage3DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage3DMultisampleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage3DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage3DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DMultisampleEXT(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glTextureStorage3DMultisampleEXT].call(_texture_, _target_, _samples_, _internalformat_, _width_, _height_, _depth_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayBindVertexBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayBindVertexBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayBindVertexBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayBindVertexBufferEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayBindVertexBufferEXT(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
        GL_FUNCTIONS_MAP[:glVertexArrayBindVertexBufferEXT].call(_vaobj_, _bindingindex_, _buffer_, _offset_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribFormatEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribFormatEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribFormatEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribFormatEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribFormatEXT(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribFormatEXT].call(_vaobj_, _attribindex_, _size_, _type_, _normalized_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribIFormatEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribIFormatEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribIFormatEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribIFormatEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribIFormatEXT(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribIFormatEXT].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribLFormatEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribLFormatEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribLFormatEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribLFormatEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribLFormatEXT(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribLFormatEXT].call(_vaobj_, _attribindex_, _size_, _type_, _relativeoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribBindingEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribBindingEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribBindingEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribBindingEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribBindingEXT(_vaobj_, _attribindex_, _bindingindex_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribBindingEXT].call(_vaobj_, _attribindex_, _bindingindex_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexBindingDivisorEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexBindingDivisorEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexBindingDivisorEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexBindingDivisorEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexBindingDivisorEXT(_vaobj_, _bindingindex_, _divisor_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexBindingDivisorEXT].call(_vaobj_, _bindingindex_, _divisor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribLOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribLOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribLOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribLOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribLOffsetEXT(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribLOffsetEXT].call(_vaobj_, _buffer_, _index_, _size_, _type_, _stride_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexturePageCommitmentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexturePageCommitmentEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexturePageCommitmentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexturePageCommitmentEXT)
    GL.module_eval(<<-SRC)
      def self.TexturePageCommitmentEXT(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
        GL_FUNCTIONS_MAP[:glTexturePageCommitmentEXT].call(_texture_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayVertexAttribDivisorEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayVertexAttribDivisorEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayVertexAttribDivisorEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayVertexAttribDivisorEXT)
    GL.module_eval(<<-SRC)
      def self.VertexArrayVertexAttribDivisorEXT(_vaobj_, _index_, _divisor_)
        GL_FUNCTIONS_MAP[:glVertexArrayVertexAttribDivisorEXT].call(_vaobj_, _index_, _divisor_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_direct_state_access

  def self.get_ext_command_GL_EXT_direct_state_access
    [
      'glMatrixLoadfEXT',
      'glMatrixLoaddEXT',
      'glMatrixMultfEXT',
      'glMatrixMultdEXT',
      'glMatrixLoadIdentityEXT',
      'glMatrixRotatefEXT',
      'glMatrixRotatedEXT',
      'glMatrixScalefEXT',
      'glMatrixScaledEXT',
      'glMatrixTranslatefEXT',
      'glMatrixTranslatedEXT',
      'glMatrixFrustumEXT',
      'glMatrixOrthoEXT',
      'glMatrixPopEXT',
      'glMatrixPushEXT',
      'glClientAttribDefaultEXT',
      'glPushClientAttribDefaultEXT',
      'glTextureParameterfEXT',
      'glTextureParameterfvEXT',
      'glTextureParameteriEXT',
      'glTextureParameterivEXT',
      'glTextureImage1DEXT',
      'glTextureImage2DEXT',
      'glTextureSubImage1DEXT',
      'glTextureSubImage2DEXT',
      'glCopyTextureImage1DEXT',
      'glCopyTextureImage2DEXT',
      'glCopyTextureSubImage1DEXT',
      'glCopyTextureSubImage2DEXT',
      'glGetTextureImageEXT',
      'glGetTextureParameterfvEXT',
      'glGetTextureParameterivEXT',
      'glGetTextureLevelParameterfvEXT',
      'glGetTextureLevelParameterivEXT',
      'glTextureImage3DEXT',
      'glTextureSubImage3DEXT',
      'glCopyTextureSubImage3DEXT',
      'glBindMultiTextureEXT',
      'glMultiTexCoordPointerEXT',
      'glMultiTexEnvfEXT',
      'glMultiTexEnvfvEXT',
      'glMultiTexEnviEXT',
      'glMultiTexEnvivEXT',
      'glMultiTexGendEXT',
      'glMultiTexGendvEXT',
      'glMultiTexGenfEXT',
      'glMultiTexGenfvEXT',
      'glMultiTexGeniEXT',
      'glMultiTexGenivEXT',
      'glGetMultiTexEnvfvEXT',
      'glGetMultiTexEnvivEXT',
      'glGetMultiTexGendvEXT',
      'glGetMultiTexGenfvEXT',
      'glGetMultiTexGenivEXT',
      'glMultiTexParameteriEXT',
      'glMultiTexParameterivEXT',
      'glMultiTexParameterfEXT',
      'glMultiTexParameterfvEXT',
      'glMultiTexImage1DEXT',
      'glMultiTexImage2DEXT',
      'glMultiTexSubImage1DEXT',
      'glMultiTexSubImage2DEXT',
      'glCopyMultiTexImage1DEXT',
      'glCopyMultiTexImage2DEXT',
      'glCopyMultiTexSubImage1DEXT',
      'glCopyMultiTexSubImage2DEXT',
      'glGetMultiTexImageEXT',
      'glGetMultiTexParameterfvEXT',
      'glGetMultiTexParameterivEXT',
      'glGetMultiTexLevelParameterfvEXT',
      'glGetMultiTexLevelParameterivEXT',
      'glMultiTexImage3DEXT',
      'glMultiTexSubImage3DEXT',
      'glCopyMultiTexSubImage3DEXT',
      'glEnableClientStateIndexedEXT',
      'glDisableClientStateIndexedEXT',
      'glGetFloatIndexedvEXT',
      'glGetDoubleIndexedvEXT',
      'glGetPointerIndexedvEXT',
      'glEnableIndexedEXT',
      'glDisableIndexedEXT',
      'glIsEnabledIndexedEXT',
      'glGetIntegerIndexedvEXT',
      'glGetBooleanIndexedvEXT',
      'glCompressedTextureImage3DEXT',
      'glCompressedTextureImage2DEXT',
      'glCompressedTextureImage1DEXT',
      'glCompressedTextureSubImage3DEXT',
      'glCompressedTextureSubImage2DEXT',
      'glCompressedTextureSubImage1DEXT',
      'glGetCompressedTextureImageEXT',
      'glCompressedMultiTexImage3DEXT',
      'glCompressedMultiTexImage2DEXT',
      'glCompressedMultiTexImage1DEXT',
      'glCompressedMultiTexSubImage3DEXT',
      'glCompressedMultiTexSubImage2DEXT',
      'glCompressedMultiTexSubImage1DEXT',
      'glGetCompressedMultiTexImageEXT',
      'glMatrixLoadTransposefEXT',
      'glMatrixLoadTransposedEXT',
      'glMatrixMultTransposefEXT',
      'glMatrixMultTransposedEXT',
      'glNamedBufferDataEXT',
      'glNamedBufferSubDataEXT',
      'glMapNamedBufferEXT',
      'glUnmapNamedBufferEXT',
      'glGetNamedBufferParameterivEXT',
      'glGetNamedBufferPointervEXT',
      'glGetNamedBufferSubDataEXT',
      'glProgramUniform1fEXT',
      'glProgramUniform2fEXT',
      'glProgramUniform3fEXT',
      'glProgramUniform4fEXT',
      'glProgramUniform1iEXT',
      'glProgramUniform2iEXT',
      'glProgramUniform3iEXT',
      'glProgramUniform4iEXT',
      'glProgramUniform1fvEXT',
      'glProgramUniform2fvEXT',
      'glProgramUniform3fvEXT',
      'glProgramUniform4fvEXT',
      'glProgramUniform1ivEXT',
      'glProgramUniform2ivEXT',
      'glProgramUniform3ivEXT',
      'glProgramUniform4ivEXT',
      'glProgramUniformMatrix2fvEXT',
      'glProgramUniformMatrix3fvEXT',
      'glProgramUniformMatrix4fvEXT',
      'glProgramUniformMatrix2x3fvEXT',
      'glProgramUniformMatrix3x2fvEXT',
      'glProgramUniformMatrix2x4fvEXT',
      'glProgramUniformMatrix4x2fvEXT',
      'glProgramUniformMatrix3x4fvEXT',
      'glProgramUniformMatrix4x3fvEXT',
      'glTextureBufferEXT',
      'glMultiTexBufferEXT',
      'glTextureParameterIivEXT',
      'glTextureParameterIuivEXT',
      'glGetTextureParameterIivEXT',
      'glGetTextureParameterIuivEXT',
      'glMultiTexParameterIivEXT',
      'glMultiTexParameterIuivEXT',
      'glGetMultiTexParameterIivEXT',
      'glGetMultiTexParameterIuivEXT',
      'glProgramUniform1uiEXT',
      'glProgramUniform2uiEXT',
      'glProgramUniform3uiEXT',
      'glProgramUniform4uiEXT',
      'glProgramUniform1uivEXT',
      'glProgramUniform2uivEXT',
      'glProgramUniform3uivEXT',
      'glProgramUniform4uivEXT',
      'glNamedProgramLocalParameters4fvEXT',
      'glNamedProgramLocalParameterI4iEXT',
      'glNamedProgramLocalParameterI4ivEXT',
      'glNamedProgramLocalParametersI4ivEXT',
      'glNamedProgramLocalParameterI4uiEXT',
      'glNamedProgramLocalParameterI4uivEXT',
      'glNamedProgramLocalParametersI4uivEXT',
      'glGetNamedProgramLocalParameterIivEXT',
      'glGetNamedProgramLocalParameterIuivEXT',
      'glEnableClientStateiEXT',
      'glDisableClientStateiEXT',
      'glGetFloati_vEXT',
      'glGetDoublei_vEXT',
      'glGetPointeri_vEXT',
      'glNamedProgramStringEXT',
      'glNamedProgramLocalParameter4dEXT',
      'glNamedProgramLocalParameter4dvEXT',
      'glNamedProgramLocalParameter4fEXT',
      'glNamedProgramLocalParameter4fvEXT',
      'glGetNamedProgramLocalParameterdvEXT',
      'glGetNamedProgramLocalParameterfvEXT',
      'glGetNamedProgramivEXT',
      'glGetNamedProgramStringEXT',
      'glNamedRenderbufferStorageEXT',
      'glGetNamedRenderbufferParameterivEXT',
      'glNamedRenderbufferStorageMultisampleEXT',
      'glNamedRenderbufferStorageMultisampleCoverageEXT',
      'glCheckNamedFramebufferStatusEXT',
      'glNamedFramebufferTexture1DEXT',
      'glNamedFramebufferTexture2DEXT',
      'glNamedFramebufferTexture3DEXT',
      'glNamedFramebufferRenderbufferEXT',
      'glGetNamedFramebufferAttachmentParameterivEXT',
      'glGenerateTextureMipmapEXT',
      'glGenerateMultiTexMipmapEXT',
      'glFramebufferDrawBufferEXT',
      'glFramebufferDrawBuffersEXT',
      'glFramebufferReadBufferEXT',
      'glGetFramebufferParameterivEXT',
      'glNamedCopyBufferSubDataEXT',
      'glNamedFramebufferTextureEXT',
      'glNamedFramebufferTextureLayerEXT',
      'glNamedFramebufferTextureFaceEXT',
      'glTextureRenderbufferEXT',
      'glMultiTexRenderbufferEXT',
      'glVertexArrayVertexOffsetEXT',
      'glVertexArrayColorOffsetEXT',
      'glVertexArrayEdgeFlagOffsetEXT',
      'glVertexArrayIndexOffsetEXT',
      'glVertexArrayNormalOffsetEXT',
      'glVertexArrayTexCoordOffsetEXT',
      'glVertexArrayMultiTexCoordOffsetEXT',
      'glVertexArrayFogCoordOffsetEXT',
      'glVertexArraySecondaryColorOffsetEXT',
      'glVertexArrayVertexAttribOffsetEXT',
      'glVertexArrayVertexAttribIOffsetEXT',
      'glEnableVertexArrayEXT',
      'glDisableVertexArrayEXT',
      'glEnableVertexArrayAttribEXT',
      'glDisableVertexArrayAttribEXT',
      'glGetVertexArrayIntegervEXT',
      'glGetVertexArrayPointervEXT',
      'glGetVertexArrayIntegeri_vEXT',
      'glGetVertexArrayPointeri_vEXT',
      'glMapNamedBufferRangeEXT',
      'glFlushMappedNamedBufferRangeEXT',
      'glNamedBufferStorageEXT',
      'glClearNamedBufferDataEXT',
      'glClearNamedBufferSubDataEXT',
      'glNamedFramebufferParameteriEXT',
      'glGetNamedFramebufferParameterivEXT',
      'glProgramUniform1dEXT',
      'glProgramUniform2dEXT',
      'glProgramUniform3dEXT',
      'glProgramUniform4dEXT',
      'glProgramUniform1dvEXT',
      'glProgramUniform2dvEXT',
      'glProgramUniform3dvEXT',
      'glProgramUniform4dvEXT',
      'glProgramUniformMatrix2dvEXT',
      'glProgramUniformMatrix3dvEXT',
      'glProgramUniformMatrix4dvEXT',
      'glProgramUniformMatrix2x3dvEXT',
      'glProgramUniformMatrix2x4dvEXT',
      'glProgramUniformMatrix3x2dvEXT',
      'glProgramUniformMatrix3x4dvEXT',
      'glProgramUniformMatrix4x2dvEXT',
      'glProgramUniformMatrix4x3dvEXT',
      'glTextureBufferRangeEXT',
      'glTextureStorage1DEXT',
      'glTextureStorage2DEXT',
      'glTextureStorage3DEXT',
      'glTextureStorage2DMultisampleEXT',
      'glTextureStorage3DMultisampleEXT',
      'glVertexArrayBindVertexBufferEXT',
      'glVertexArrayVertexAttribFormatEXT',
      'glVertexArrayVertexAttribIFormatEXT',
      'glVertexArrayVertexAttribLFormatEXT',
      'glVertexArrayVertexAttribBindingEXT',
      'glVertexArrayVertexBindingDivisorEXT',
      'glVertexArrayVertexAttribLOffsetEXT',
      'glTexturePageCommitmentEXT',
      'glVertexArrayVertexAttribDivisorEXT',
    ]
  end # self.get_ext_command_GL_EXT_direct_state_access


  def self.define_ext_command_GL_EXT_draw_buffers2
    GL::GL_FUNCTION_SYMBOLS << :glColorMaskIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorMaskIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorMaskIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorMaskIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.ColorMaskIndexedEXT(_index_, _r_, _g_, _b_, _a_)
        GL_FUNCTIONS_MAP[:glColorMaskIndexedEXT].call(_index_, _r_, _g_, _b_, _a_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetBooleanIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetBooleanIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetBooleanIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetBooleanIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetBooleanIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetBooleanIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetIntegerIndexedvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetIntegerIndexedvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetIntegerIndexedvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetIntegerIndexedvEXT)
    GL.module_eval(<<-SRC)
      def self.GetIntegerIndexedvEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetIntegerIndexedvEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.EnableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:glEnableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableIndexedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.DisableIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:glDisableIndexedEXT].call(_target_, _index_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsEnabledIndexedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsEnabledIndexedEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsEnabledIndexedEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsEnabledIndexedEXT)
    GL.module_eval(<<-SRC)
      def self.IsEnabledIndexedEXT(_target_, _index_)
        GL_FUNCTIONS_MAP[:glIsEnabledIndexedEXT].call(_target_, _index_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_draw_buffers2

  def self.get_ext_command_GL_EXT_draw_buffers2
    [
      'glColorMaskIndexedEXT',
      'glGetBooleanIndexedvEXT',
      'glGetIntegerIndexedvEXT',
      'glEnableIndexedEXT',
      'glDisableIndexedEXT',
      'glIsEnabledIndexedEXT',
    ]
  end # self.get_ext_command_GL_EXT_draw_buffers2


  def self.define_ext_command_GL_EXT_draw_instanced
    GL::GL_FUNCTION_SYMBOLS << :glDrawArraysInstancedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawArraysInstancedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawArraysInstancedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawArraysInstancedEXT)
    GL.module_eval(<<-SRC)
      def self.DrawArraysInstancedEXT(_mode_, _start_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:glDrawArraysInstancedEXT].call(_mode_, _start_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawElementsInstancedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawElementsInstancedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawElementsInstancedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawElementsInstancedEXT)
    GL.module_eval(<<-SRC)
      def self.DrawElementsInstancedEXT(_mode_, _count_, _type_, _indices_, _primcount_)
        GL_FUNCTIONS_MAP[:glDrawElementsInstancedEXT].call(_mode_, _count_, _type_, _indices_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_draw_instanced

  def self.get_ext_command_GL_EXT_draw_instanced
    [
      'glDrawArraysInstancedEXT',
      'glDrawElementsInstancedEXT',
    ]
  end # self.get_ext_command_GL_EXT_draw_instanced


  def self.define_ext_command_GL_EXT_draw_range_elements
    GL::GL_FUNCTION_SYMBOLS << :glDrawRangeElementsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawRangeElementsEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawRangeElementsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawRangeElementsEXT)
    GL.module_eval(<<-SRC)
      def self.DrawRangeElementsEXT(_mode_, _start_, _end_, _count_, _type_, _indices_)
        GL_FUNCTIONS_MAP[:glDrawRangeElementsEXT].call(_mode_, _start_, _end_, _count_, _type_, _indices_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_draw_range_elements

  def self.get_ext_command_GL_EXT_draw_range_elements
    [
      'glDrawRangeElementsEXT',
    ]
  end # self.get_ext_command_GL_EXT_draw_range_elements


  def self.define_ext_command_GL_EXT_external_buffer
    GL::GL_FUNCTION_SYMBOLS << :glBufferStorageExternalEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferStorageExternalEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferStorageExternalEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferStorageExternalEXT)
    GL.module_eval(<<-SRC)
      def self.BufferStorageExternalEXT(_target_, _offset_, _size_, _clientBuffer_, _flags_)
        GL_FUNCTIONS_MAP[:glBufferStorageExternalEXT].call(_target_, _offset_, _size_, _clientBuffer_, _flags_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferStorageExternalEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferStorageExternalEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferStorageExternalEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferStorageExternalEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorageExternalEXT(_buffer_, _offset_, _size_, _clientBuffer_, _flags_)
        GL_FUNCTIONS_MAP[:glNamedBufferStorageExternalEXT].call(_buffer_, _offset_, _size_, _clientBuffer_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_external_buffer

  def self.get_ext_command_GL_EXT_external_buffer
    [
      'glBufferStorageExternalEXT',
      'glNamedBufferStorageExternalEXT',
    ]
  end # self.get_ext_command_GL_EXT_external_buffer


  def self.define_ext_command_GL_EXT_fog_coord
    GL::GL_FUNCTION_SYMBOLS << :glFogCoordfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordfEXT] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordfEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoordfEXT(_coord_)
        GL_FUNCTIONS_MAP[:glFogCoordfEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoordfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordfvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordfvEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoordfvEXT(_coord_)
        GL_FUNCTIONS_MAP[:glFogCoordfvEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoorddEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoorddEXT] = [Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoorddEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoorddEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoorddEXT(_coord_)
        GL_FUNCTIONS_MAP[:glFogCoorddEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoorddvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoorddvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoorddvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoorddvEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoorddvEXT(_coord_)
        GL_FUNCTIONS_MAP[:glFogCoorddvEXT].call(_coord_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoordPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordPointerEXT)
    GL.module_eval(<<-SRC)
      def self.FogCoordPointerEXT(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glFogCoordPointerEXT].call(_type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_fog_coord

  def self.get_ext_command_GL_EXT_fog_coord
    [
      'glFogCoordfEXT',
      'glFogCoordfvEXT',
      'glFogCoorddEXT',
      'glFogCoorddvEXT',
      'glFogCoordPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_fog_coord


  def self.define_ext_command_GL_EXT_framebuffer_blit
    GL::GL_FUNCTION_SYMBOLS << :glBlitFramebufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlitFramebufferEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlitFramebufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlitFramebufferEXT)
    GL.module_eval(<<-SRC)
      def self.BlitFramebufferEXT(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:glBlitFramebufferEXT].call(_srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_framebuffer_blit

  def self.get_ext_command_GL_EXT_framebuffer_blit
    [
      'glBlitFramebufferEXT',
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_blit


  def self.define_ext_command_GL_EXT_framebuffer_multisample
    GL::GL_FUNCTION_SYMBOLS << :glRenderbufferStorageMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderbufferStorageMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderbufferStorageMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderbufferStorageMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisampleEXT(_target_, _samples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glRenderbufferStorageMultisampleEXT].call(_target_, _samples_, _internalformat_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_framebuffer_multisample

  def self.get_ext_command_GL_EXT_framebuffer_multisample
    [
      'glRenderbufferStorageMultisampleEXT',
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_multisample


  def self.define_ext_command_GL_EXT_framebuffer_multisample_blit_scaled
  end # self.define_ext_command_GL_EXT_framebuffer_multisample_blit_scaled

  def self.get_ext_command_GL_EXT_framebuffer_multisample_blit_scaled
    [
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_multisample_blit_scaled


  def self.define_ext_command_GL_EXT_framebuffer_object
    GL::GL_FUNCTION_SYMBOLS << :glIsRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsRenderbufferEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsRenderbufferEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.IsRenderbufferEXT(_renderbuffer_)
        GL_FUNCTIONS_MAP[:glIsRenderbufferEXT].call(_renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.BindRenderbufferEXT(_target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glBindRenderbufferEXT].call(_target_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteRenderbuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteRenderbuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteRenderbuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteRenderbuffersEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteRenderbuffersEXT(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:glDeleteRenderbuffersEXT].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenRenderbuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenRenderbuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenRenderbuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenRenderbuffersEXT)
    GL.module_eval(<<-SRC)
      def self.GenRenderbuffersEXT(_n_, _renderbuffers_)
        GL_FUNCTIONS_MAP[:glGenRenderbuffersEXT].call(_n_, _renderbuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRenderbufferStorageEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderbufferStorageEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderbufferStorageEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderbufferStorageEXT)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageEXT(_target_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glRenderbufferStorageEXT].call(_target_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetRenderbufferParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetRenderbufferParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetRenderbufferParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetRenderbufferParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetRenderbufferParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetRenderbufferParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsFramebufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsFramebufferEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsFramebufferEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsFramebufferEXT)
    GL.module_eval(<<-SRC)
      def self.IsFramebufferEXT(_framebuffer_)
        GL_FUNCTIONS_MAP[:glIsFramebufferEXT].call(_framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindFramebufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindFramebufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindFramebufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindFramebufferEXT)
    GL.module_eval(<<-SRC)
      def self.BindFramebufferEXT(_target_, _framebuffer_)
        GL_FUNCTIONS_MAP[:glBindFramebufferEXT].call(_target_, _framebuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteFramebuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteFramebuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteFramebuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteFramebuffersEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteFramebuffersEXT(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:glDeleteFramebuffersEXT].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenFramebuffersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenFramebuffersEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenFramebuffersEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenFramebuffersEXT)
    GL.module_eval(<<-SRC)
      def self.GenFramebuffersEXT(_n_, _framebuffers_)
        GL_FUNCTIONS_MAP[:glGenFramebuffersEXT].call(_n_, _framebuffers_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCheckFramebufferStatusEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCheckFramebufferStatusEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCheckFramebufferStatusEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glCheckFramebufferStatusEXT)
    GL.module_eval(<<-SRC)
      def self.CheckFramebufferStatusEXT(_target_)
        GL_FUNCTIONS_MAP[:glCheckFramebufferStatusEXT].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTexture1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTexture1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTexture1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTexture1DEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture1DEXT(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glFramebufferTexture1DEXT].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTexture2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTexture2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTexture2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTexture2DEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture2DEXT(_target_, _attachment_, _textarget_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glFramebufferTexture2DEXT].call(_target_, _attachment_, _textarget_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTexture3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTexture3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTexture3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTexture3DEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTexture3DEXT(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
        GL_FUNCTIONS_MAP[:glFramebufferTexture3DEXT].call(_target_, _attachment_, _textarget_, _texture_, _level_, _zoffset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferRenderbufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferRenderbufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferRenderbufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferRenderbufferEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferRenderbufferEXT(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glFramebufferRenderbufferEXT].call(_target_, _attachment_, _renderbuffertarget_, _renderbuffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFramebufferAttachmentParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFramebufferAttachmentParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFramebufferAttachmentParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFramebufferAttachmentParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferAttachmentParameterivEXT(_target_, _attachment_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFramebufferAttachmentParameterivEXT].call(_target_, _attachment_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenerateMipmapEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenerateMipmapEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenerateMipmapEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenerateMipmapEXT)
    GL.module_eval(<<-SRC)
      def self.GenerateMipmapEXT(_target_)
        GL_FUNCTIONS_MAP[:glGenerateMipmapEXT].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_framebuffer_object

  def self.get_ext_command_GL_EXT_framebuffer_object
    [
      'glIsRenderbufferEXT',
      'glBindRenderbufferEXT',
      'glDeleteRenderbuffersEXT',
      'glGenRenderbuffersEXT',
      'glRenderbufferStorageEXT',
      'glGetRenderbufferParameterivEXT',
      'glIsFramebufferEXT',
      'glBindFramebufferEXT',
      'glDeleteFramebuffersEXT',
      'glGenFramebuffersEXT',
      'glCheckFramebufferStatusEXT',
      'glFramebufferTexture1DEXT',
      'glFramebufferTexture2DEXT',
      'glFramebufferTexture3DEXT',
      'glFramebufferRenderbufferEXT',
      'glGetFramebufferAttachmentParameterivEXT',
      'glGenerateMipmapEXT',
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_object


  def self.define_ext_command_GL_EXT_framebuffer_sRGB
  end # self.define_ext_command_GL_EXT_framebuffer_sRGB

  def self.get_ext_command_GL_EXT_framebuffer_sRGB
    [
    ]
  end # self.get_ext_command_GL_EXT_framebuffer_sRGB


  def self.define_ext_command_GL_EXT_geometry_shader4
    GL::GL_FUNCTION_SYMBOLS << :glProgramParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteriEXT(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glProgramParameteriEXT].call(_program_, _pname_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_geometry_shader4

  def self.get_ext_command_GL_EXT_geometry_shader4
    [
      'glProgramParameteriEXT',
    ]
  end # self.get_ext_command_GL_EXT_geometry_shader4


  def self.define_ext_command_GL_EXT_gpu_program_parameters
    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameters4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameters4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameters4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameters4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameters4fvEXT(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameters4fvEXT].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameters4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameters4fvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameters4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameters4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameters4fvEXT(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameters4fvEXT].call(_target_, _index_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_gpu_program_parameters

  def self.get_ext_command_GL_EXT_gpu_program_parameters
    [
      'glProgramEnvParameters4fvEXT',
      'glProgramLocalParameters4fvEXT',
    ]
  end # self.get_ext_command_GL_EXT_gpu_program_parameters


  def self.define_ext_command_GL_EXT_gpu_shader4
    GL::GL_FUNCTION_SYMBOLS << :glGetUniformuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformuivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetUniformuivEXT(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformuivEXT].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindFragDataLocationEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindFragDataLocationEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindFragDataLocationEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindFragDataLocationEXT)
    GL.module_eval(<<-SRC)
      def self.BindFragDataLocationEXT(_program_, _color_, _name_)
        GL_FUNCTIONS_MAP[:glBindFragDataLocationEXT].call(_program_, _color_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFragDataLocationEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFragDataLocationEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFragDataLocationEXT] = Fiddle::TYPE_INT
    GL.bind_command(:glGetFragDataLocationEXT)
    GL.module_eval(<<-SRC)
      def self.GetFragDataLocationEXT(_program_, _name_)
        GL_FUNCTIONS_MAP[:glGetFragDataLocationEXT].call(_program_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform1uiEXT(_location_, _v0_)
        GL_FUNCTIONS_MAP[:glUniform1uiEXT].call(_location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform2uiEXT(_location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glUniform2uiEXT].call(_location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform3uiEXT(_location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glUniform3uiEXT].call(_location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4uiEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4uiEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform4uiEXT(_location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glUniform4uiEXT].call(_location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform1uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform2uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform3uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4uivEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4uivEXT)
    GL.module_eval(<<-SRC)
      def self.Uniform4uivEXT(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4uivEXT].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1iEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1iEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2iEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2iEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3iEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3iEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4iEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4iEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uiEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1uiEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uiEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2uiEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uiEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3uiEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uiEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4uiEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4bvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4bvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4bvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4bvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4svEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4svEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4svEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4svEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4ubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4ubvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4ubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4ubvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ubvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4ubvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4usvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4usvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4usvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4usvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4usvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4usvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribIPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribIPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribIPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribIPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIPointerEXT(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribIPointerEXT].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribIivEXT].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIuivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribIuivEXT].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_gpu_shader4

  def self.get_ext_command_GL_EXT_gpu_shader4
    [
      'glGetUniformuivEXT',
      'glBindFragDataLocationEXT',
      'glGetFragDataLocationEXT',
      'glUniform1uiEXT',
      'glUniform2uiEXT',
      'glUniform3uiEXT',
      'glUniform4uiEXT',
      'glUniform1uivEXT',
      'glUniform2uivEXT',
      'glUniform3uivEXT',
      'glUniform4uivEXT',
      'glVertexAttribI1iEXT',
      'glVertexAttribI2iEXT',
      'glVertexAttribI3iEXT',
      'glVertexAttribI4iEXT',
      'glVertexAttribI1uiEXT',
      'glVertexAttribI2uiEXT',
      'glVertexAttribI3uiEXT',
      'glVertexAttribI4uiEXT',
      'glVertexAttribI1ivEXT',
      'glVertexAttribI2ivEXT',
      'glVertexAttribI3ivEXT',
      'glVertexAttribI4ivEXT',
      'glVertexAttribI1uivEXT',
      'glVertexAttribI2uivEXT',
      'glVertexAttribI3uivEXT',
      'glVertexAttribI4uivEXT',
      'glVertexAttribI4bvEXT',
      'glVertexAttribI4svEXT',
      'glVertexAttribI4ubvEXT',
      'glVertexAttribI4usvEXT',
      'glVertexAttribIPointerEXT',
      'glGetVertexAttribIivEXT',
      'glGetVertexAttribIuivEXT',
    ]
  end # self.get_ext_command_GL_EXT_gpu_shader4


  def self.define_ext_command_GL_EXT_histogram
    GL::GL_FUNCTION_SYMBOLS << :glGetHistogramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogramEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogramEXT)
    GL.module_eval(<<-SRC)
      def self.GetHistogramEXT(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:glGetHistogramEXT].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHistogramParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogramParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogramParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogramParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetHistogramParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHistogramParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogramParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogramParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogramParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetHistogramParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMinmaxEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMinmaxEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMinmaxEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMinmaxEXT)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxEXT(_target_, _reset_, _format_, _type_, _values_)
        GL_FUNCTIONS_MAP[:glGetMinmaxEXT].call(_target_, _reset_, _format_, _type_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMinmaxParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMinmaxParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMinmaxParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMinmaxParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMinmaxParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMinmaxParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMinmaxParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMinmaxParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMinmaxParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMinmaxParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMinmaxParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glHistogramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glHistogramEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glHistogramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glHistogramEXT)
    GL.module_eval(<<-SRC)
      def self.HistogramEXT(_target_, _width_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:glHistogramEXT].call(_target_, _width_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMinmaxEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMinmaxEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMinmaxEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMinmaxEXT)
    GL.module_eval(<<-SRC)
      def self.MinmaxEXT(_target_, _internalformat_, _sink_)
        GL_FUNCTIONS_MAP[:glMinmaxEXT].call(_target_, _internalformat_, _sink_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResetHistogramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glResetHistogramEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResetHistogramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glResetHistogramEXT)
    GL.module_eval(<<-SRC)
      def self.ResetHistogramEXT(_target_)
        GL_FUNCTIONS_MAP[:glResetHistogramEXT].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResetMinmaxEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glResetMinmaxEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResetMinmaxEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glResetMinmaxEXT)
    GL.module_eval(<<-SRC)
      def self.ResetMinmaxEXT(_target_)
        GL_FUNCTIONS_MAP[:glResetMinmaxEXT].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_histogram

  def self.get_ext_command_GL_EXT_histogram
    [
      'glGetHistogramEXT',
      'glGetHistogramParameterfvEXT',
      'glGetHistogramParameterivEXT',
      'glGetMinmaxEXT',
      'glGetMinmaxParameterfvEXT',
      'glGetMinmaxParameterivEXT',
      'glHistogramEXT',
      'glMinmaxEXT',
      'glResetHistogramEXT',
      'glResetMinmaxEXT',
    ]
  end # self.get_ext_command_GL_EXT_histogram


  def self.define_ext_command_GL_EXT_index_array_formats
  end # self.define_ext_command_GL_EXT_index_array_formats

  def self.get_ext_command_GL_EXT_index_array_formats
    [
    ]
  end # self.get_ext_command_GL_EXT_index_array_formats


  def self.define_ext_command_GL_EXT_index_func
    GL::GL_FUNCTION_SYMBOLS << :glIndexFuncEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexFuncEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexFuncEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexFuncEXT)
    GL.module_eval(<<-SRC)
      def self.IndexFuncEXT(_func_, _ref_)
        GL_FUNCTIONS_MAP[:glIndexFuncEXT].call(_func_, _ref_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_index_func

  def self.get_ext_command_GL_EXT_index_func
    [
      'glIndexFuncEXT',
    ]
  end # self.get_ext_command_GL_EXT_index_func


  def self.define_ext_command_GL_EXT_index_material
    GL::GL_FUNCTION_SYMBOLS << :glIndexMaterialEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexMaterialEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexMaterialEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexMaterialEXT)
    GL.module_eval(<<-SRC)
      def self.IndexMaterialEXT(_face_, _mode_)
        GL_FUNCTIONS_MAP[:glIndexMaterialEXT].call(_face_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_index_material

  def self.get_ext_command_GL_EXT_index_material
    [
      'glIndexMaterialEXT',
    ]
  end # self.get_ext_command_GL_EXT_index_material


  def self.define_ext_command_GL_EXT_index_texture
  end # self.define_ext_command_GL_EXT_index_texture

  def self.get_ext_command_GL_EXT_index_texture
    [
    ]
  end # self.get_ext_command_GL_EXT_index_texture


  def self.define_ext_command_GL_EXT_light_texture
    GL::GL_FUNCTION_SYMBOLS << :glApplyTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glApplyTextureEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glApplyTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glApplyTextureEXT)
    GL.module_eval(<<-SRC)
      def self.ApplyTextureEXT(_mode_)
        GL_FUNCTIONS_MAP[:glApplyTextureEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureLightEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureLightEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureLightEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureLightEXT)
    GL.module_eval(<<-SRC)
      def self.TextureLightEXT(_pname_)
        GL_FUNCTIONS_MAP[:glTextureLightEXT].call(_pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureMaterialEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureMaterialEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureMaterialEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureMaterialEXT)
    GL.module_eval(<<-SRC)
      def self.TextureMaterialEXT(_face_, _mode_)
        GL_FUNCTIONS_MAP[:glTextureMaterialEXT].call(_face_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_light_texture

  def self.get_ext_command_GL_EXT_light_texture
    [
      'glApplyTextureEXT',
      'glTextureLightEXT',
      'glTextureMaterialEXT',
    ]
  end # self.get_ext_command_GL_EXT_light_texture


  def self.define_ext_command_GL_EXT_memory_object
    GL::GL_FUNCTION_SYMBOLS << :glGetUnsignedBytevEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUnsignedBytevEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUnsignedBytevEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUnsignedBytevEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytevEXT(_pname_, _data_)
        GL_FUNCTIONS_MAP[:glGetUnsignedBytevEXT].call(_pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUnsignedBytei_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUnsignedBytei_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUnsignedBytei_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUnsignedBytei_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytei_vEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetUnsignedBytei_vEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteMemoryObjectsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteMemoryObjectsEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteMemoryObjectsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteMemoryObjectsEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteMemoryObjectsEXT(_n_, _memoryObjects_)
        GL_FUNCTIONS_MAP[:glDeleteMemoryObjectsEXT].call(_n_, _memoryObjects_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsMemoryObjectEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsMemoryObjectEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsMemoryObjectEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsMemoryObjectEXT)
    GL.module_eval(<<-SRC)
      def self.IsMemoryObjectEXT(_memoryObject_)
        GL_FUNCTIONS_MAP[:glIsMemoryObjectEXT].call(_memoryObject_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateMemoryObjectsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateMemoryObjectsEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateMemoryObjectsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateMemoryObjectsEXT)
    GL.module_eval(<<-SRC)
      def self.CreateMemoryObjectsEXT(_n_, _memoryObjects_)
        GL_FUNCTIONS_MAP[:glCreateMemoryObjectsEXT].call(_n_, _memoryObjects_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMemoryObjectParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMemoryObjectParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMemoryObjectParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMemoryObjectParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.MemoryObjectParameterivEXT(_memoryObject_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMemoryObjectParameterivEXT].call(_memoryObject_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMemoryObjectParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMemoryObjectParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMemoryObjectParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMemoryObjectParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetMemoryObjectParameterivEXT(_memoryObject_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMemoryObjectParameterivEXT].call(_memoryObject_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorageMem2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorageMem2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorageMem2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorageMem2DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem2DEXT(_target_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTexStorageMem2DEXT].call(_target_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorageMem2DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorageMem2DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorageMem2DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorageMem2DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem2DMultisampleEXT(_target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTexStorageMem2DMultisampleEXT].call(_target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorageMem3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorageMem3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorageMem3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorageMem3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem3DEXT(_target_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTexStorageMem3DEXT].call(_target_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorageMem3DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorageMem3DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorageMem3DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorageMem3DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem3DMultisampleEXT(_target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTexStorageMem3DMultisampleEXT].call(_target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBufferStorageMemEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferStorageMemEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferStorageMemEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferStorageMemEXT)
    GL.module_eval(<<-SRC)
      def self.BufferStorageMemEXT(_target_, _size_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glBufferStorageMemEXT].call(_target_, _size_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorageMem2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorageMem2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorageMem2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorageMem2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem2DEXT(_texture_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTextureStorageMem2DEXT].call(_texture_, _levels_, _internalFormat_, _width_, _height_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorageMem2DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorageMem2DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorageMem2DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorageMem2DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem2DMultisampleEXT(_texture_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTextureStorageMem2DMultisampleEXT].call(_texture_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorageMem3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorageMem3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorageMem3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorageMem3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem3DEXT(_texture_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTextureStorageMem3DEXT].call(_texture_, _levels_, _internalFormat_, _width_, _height_, _depth_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorageMem3DMultisampleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorageMem3DMultisampleEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorageMem3DMultisampleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorageMem3DMultisampleEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem3DMultisampleEXT(_texture_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTextureStorageMem3DMultisampleEXT].call(_texture_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferStorageMemEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferStorageMemEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferStorageMemEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferStorageMemEXT)
    GL.module_eval(<<-SRC)
      def self.NamedBufferStorageMemEXT(_buffer_, _size_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glNamedBufferStorageMemEXT].call(_buffer_, _size_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorageMem1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorageMem1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorageMem1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorageMem1DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorageMem1DEXT(_target_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTexStorageMem1DEXT].call(_target_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorageMem1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorageMem1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorageMem1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorageMem1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorageMem1DEXT(_texture_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTextureStorageMem1DEXT].call(_texture_, _levels_, _internalFormat_, _width_, _memory_, _offset_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_memory_object

  def self.get_ext_command_GL_EXT_memory_object
    [
      'glGetUnsignedBytevEXT',
      'glGetUnsignedBytei_vEXT',
      'glDeleteMemoryObjectsEXT',
      'glIsMemoryObjectEXT',
      'glCreateMemoryObjectsEXT',
      'glMemoryObjectParameterivEXT',
      'glGetMemoryObjectParameterivEXT',
      'glTexStorageMem2DEXT',
      'glTexStorageMem2DMultisampleEXT',
      'glTexStorageMem3DEXT',
      'glTexStorageMem3DMultisampleEXT',
      'glBufferStorageMemEXT',
      'glTextureStorageMem2DEXT',
      'glTextureStorageMem2DMultisampleEXT',
      'glTextureStorageMem3DEXT',
      'glTextureStorageMem3DMultisampleEXT',
      'glNamedBufferStorageMemEXT',
      'glTexStorageMem1DEXT',
      'glTextureStorageMem1DEXT',
    ]
  end # self.get_ext_command_GL_EXT_memory_object


  def self.define_ext_command_GL_EXT_memory_object_fd
    GL::GL_FUNCTION_SYMBOLS << :glImportMemoryFdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportMemoryFdEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportMemoryFdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glImportMemoryFdEXT)
    GL.module_eval(<<-SRC)
      def self.ImportMemoryFdEXT(_memory_, _size_, _handleType_, _fd_)
        GL_FUNCTIONS_MAP[:glImportMemoryFdEXT].call(_memory_, _size_, _handleType_, _fd_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_memory_object_fd

  def self.get_ext_command_GL_EXT_memory_object_fd
    [
      'glImportMemoryFdEXT',
    ]
  end # self.get_ext_command_GL_EXT_memory_object_fd


  def self.define_ext_command_GL_EXT_memory_object_win32
    GL::GL_FUNCTION_SYMBOLS << :glImportMemoryWin32HandleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportMemoryWin32HandleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportMemoryWin32HandleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glImportMemoryWin32HandleEXT)
    GL.module_eval(<<-SRC)
      def self.ImportMemoryWin32HandleEXT(_memory_, _size_, _handleType_, _handle_)
        GL_FUNCTIONS_MAP[:glImportMemoryWin32HandleEXT].call(_memory_, _size_, _handleType_, _handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glImportMemoryWin32NameEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportMemoryWin32NameEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportMemoryWin32NameEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glImportMemoryWin32NameEXT)
    GL.module_eval(<<-SRC)
      def self.ImportMemoryWin32NameEXT(_memory_, _size_, _handleType_, _name_)
        GL_FUNCTIONS_MAP[:glImportMemoryWin32NameEXT].call(_memory_, _size_, _handleType_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_memory_object_win32

  def self.get_ext_command_GL_EXT_memory_object_win32
    [
      'glImportMemoryWin32HandleEXT',
      'glImportMemoryWin32NameEXT',
    ]
  end # self.get_ext_command_GL_EXT_memory_object_win32


  def self.define_ext_command_GL_EXT_misc_attribute
  end # self.define_ext_command_GL_EXT_misc_attribute

  def self.get_ext_command_GL_EXT_misc_attribute
    [
    ]
  end # self.get_ext_command_GL_EXT_misc_attribute


  def self.define_ext_command_GL_EXT_multi_draw_arrays
    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawArraysEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawArraysEXT)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysEXT(_mode_, _first_, _count_, _primcount_)
        GL_FUNCTIONS_MAP[:glMultiDrawArraysEXT].call(_mode_, _first_, _count_, _primcount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsEXT)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsEXT(_mode_, _count_, _type_, _indices_, _primcount_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsEXT].call(_mode_, _count_, _type_, _indices_, _primcount_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_multi_draw_arrays

  def self.get_ext_command_GL_EXT_multi_draw_arrays
    [
      'glMultiDrawArraysEXT',
      'glMultiDrawElementsEXT',
    ]
  end # self.get_ext_command_GL_EXT_multi_draw_arrays


  def self.define_ext_command_GL_EXT_multisample
    GL::GL_FUNCTION_SYMBOLS << :glSampleMaskEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleMaskEXT] = [Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleMaskEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleMaskEXT)
    GL.module_eval(<<-SRC)
      def self.SampleMaskEXT(_value_, _invert_)
        GL_FUNCTIONS_MAP[:glSampleMaskEXT].call(_value_, _invert_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplePatternEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplePatternEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplePatternEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplePatternEXT)
    GL.module_eval(<<-SRC)
      def self.SamplePatternEXT(_pattern_)
        GL_FUNCTIONS_MAP[:glSamplePatternEXT].call(_pattern_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_multisample

  def self.get_ext_command_GL_EXT_multisample
    [
      'glSampleMaskEXT',
      'glSamplePatternEXT',
    ]
  end # self.get_ext_command_GL_EXT_multisample


  def self.define_ext_command_GL_EXT_multiview_tessellation_geometry_shader
  end # self.define_ext_command_GL_EXT_multiview_tessellation_geometry_shader

  def self.get_ext_command_GL_EXT_multiview_tessellation_geometry_shader
    [
    ]
  end # self.get_ext_command_GL_EXT_multiview_tessellation_geometry_shader


  def self.define_ext_command_GL_EXT_multiview_texture_multisample
  end # self.define_ext_command_GL_EXT_multiview_texture_multisample

  def self.get_ext_command_GL_EXT_multiview_texture_multisample
    [
    ]
  end # self.get_ext_command_GL_EXT_multiview_texture_multisample


  def self.define_ext_command_GL_EXT_multiview_timer_query
  end # self.define_ext_command_GL_EXT_multiview_timer_query

  def self.get_ext_command_GL_EXT_multiview_timer_query
    [
    ]
  end # self.get_ext_command_GL_EXT_multiview_timer_query


  def self.define_ext_command_GL_EXT_packed_depth_stencil
  end # self.define_ext_command_GL_EXT_packed_depth_stencil

  def self.get_ext_command_GL_EXT_packed_depth_stencil
    [
    ]
  end # self.get_ext_command_GL_EXT_packed_depth_stencil


  def self.define_ext_command_GL_EXT_packed_float
  end # self.define_ext_command_GL_EXT_packed_float

  def self.get_ext_command_GL_EXT_packed_float
    [
    ]
  end # self.get_ext_command_GL_EXT_packed_float


  def self.define_ext_command_GL_EXT_packed_pixels
  end # self.define_ext_command_GL_EXT_packed_pixels

  def self.get_ext_command_GL_EXT_packed_pixels
    [
    ]
  end # self.get_ext_command_GL_EXT_packed_pixels


  def self.define_ext_command_GL_EXT_paletted_texture
    GL::GL_FUNCTION_SYMBOLS << :glColorTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTableEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTableEXT)
    GL.module_eval(<<-SRC)
      def self.ColorTableEXT(_target_, _internalFormat_, _width_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:glColorTableEXT].call(_target_, _internalFormat_, _width_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableEXT)
    GL.module_eval(<<-SRC)
      def self.GetColorTableEXT(_target_, _format_, _type_, _data_)
        GL_FUNCTIONS_MAP[:glGetColorTableEXT].call(_target_, _format_, _type_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetColorTableParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetColorTableParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_paletted_texture

  def self.get_ext_command_GL_EXT_paletted_texture
    [
      'glColorTableEXT',
      'glGetColorTableEXT',
      'glGetColorTableParameterivEXT',
      'glGetColorTableParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_paletted_texture


  def self.define_ext_command_GL_EXT_pixel_buffer_object
  end # self.define_ext_command_GL_EXT_pixel_buffer_object

  def self.get_ext_command_GL_EXT_pixel_buffer_object
    [
    ]
  end # self.get_ext_command_GL_EXT_pixel_buffer_object


  def self.define_ext_command_GL_EXT_pixel_transform
    GL::GL_FUNCTION_SYMBOLS << :glPixelTransformParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTransformParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTransformParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTransformParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameteriEXT(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glPixelTransformParameteriEXT].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTransformParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTransformParameterfEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTransformParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTransformParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameterfEXT(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glPixelTransformParameterfEXT].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTransformParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTransformParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTransformParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTransformParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glPixelTransformParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTransformParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTransformParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTransformParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTransformParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.PixelTransformParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glPixelTransformParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPixelTransformParameterivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPixelTransformParameterivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPixelTransformParameterivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPixelTransformParameterivEXT)
    GL.module_eval(<<-SRC)
      def self.GetPixelTransformParameterivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPixelTransformParameterivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPixelTransformParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPixelTransformParameterfvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPixelTransformParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPixelTransformParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.GetPixelTransformParameterfvEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPixelTransformParameterfvEXT].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_pixel_transform

  def self.get_ext_command_GL_EXT_pixel_transform
    [
      'glPixelTransformParameteriEXT',
      'glPixelTransformParameterfEXT',
      'glPixelTransformParameterivEXT',
      'glPixelTransformParameterfvEXT',
      'glGetPixelTransformParameterivEXT',
      'glGetPixelTransformParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_pixel_transform


  def self.define_ext_command_GL_EXT_pixel_transform_color_table
  end # self.define_ext_command_GL_EXT_pixel_transform_color_table

  def self.get_ext_command_GL_EXT_pixel_transform_color_table
    [
    ]
  end # self.get_ext_command_GL_EXT_pixel_transform_color_table


  def self.define_ext_command_GL_EXT_point_parameters
    GL::GL_FUNCTION_SYMBOLS << :glPointParameterfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterfEXT)
    GL.module_eval(<<-SRC)
      def self.PointParameterfEXT(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPointParameterfEXT].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointParameterfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterfvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterfvEXT)
    GL.module_eval(<<-SRC)
      def self.PointParameterfvEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPointParameterfvEXT].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_point_parameters

  def self.get_ext_command_GL_EXT_point_parameters
    [
      'glPointParameterfEXT',
      'glPointParameterfvEXT',
    ]
  end # self.get_ext_command_GL_EXT_point_parameters


  def self.define_ext_command_GL_EXT_polygon_offset
    GL::GL_FUNCTION_SYMBOLS << :glPolygonOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPolygonOffsetEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPolygonOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPolygonOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetEXT(_factor_, _bias_)
        GL_FUNCTIONS_MAP[:glPolygonOffsetEXT].call(_factor_, _bias_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_polygon_offset

  def self.get_ext_command_GL_EXT_polygon_offset
    [
      'glPolygonOffsetEXT',
    ]
  end # self.get_ext_command_GL_EXT_polygon_offset


  def self.define_ext_command_GL_EXT_polygon_offset_clamp
    GL::GL_FUNCTION_SYMBOLS << :glPolygonOffsetClampEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPolygonOffsetClampEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPolygonOffsetClampEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPolygonOffsetClampEXT)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetClampEXT(_factor_, _units_, _clamp_)
        GL_FUNCTIONS_MAP[:glPolygonOffsetClampEXT].call(_factor_, _units_, _clamp_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_polygon_offset_clamp

  def self.get_ext_command_GL_EXT_polygon_offset_clamp
    [
      'glPolygonOffsetClampEXT',
    ]
  end # self.get_ext_command_GL_EXT_polygon_offset_clamp


  def self.define_ext_command_GL_EXT_post_depth_coverage
  end # self.define_ext_command_GL_EXT_post_depth_coverage

  def self.get_ext_command_GL_EXT_post_depth_coverage
    [
    ]
  end # self.get_ext_command_GL_EXT_post_depth_coverage


  def self.define_ext_command_GL_EXT_provoking_vertex
    GL::GL_FUNCTION_SYMBOLS << :glProvokingVertexEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProvokingVertexEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProvokingVertexEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProvokingVertexEXT)
    GL.module_eval(<<-SRC)
      def self.ProvokingVertexEXT(_mode_)
        GL_FUNCTIONS_MAP[:glProvokingVertexEXT].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_provoking_vertex

  def self.get_ext_command_GL_EXT_provoking_vertex
    [
      'glProvokingVertexEXT',
    ]
  end # self.get_ext_command_GL_EXT_provoking_vertex


  def self.define_ext_command_GL_EXT_raster_multisample
    GL::GL_FUNCTION_SYMBOLS << :glRasterSamplesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterSamplesEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterSamplesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterSamplesEXT)
    GL.module_eval(<<-SRC)
      def self.RasterSamplesEXT(_samples_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glRasterSamplesEXT].call(_samples_, _fixedsamplelocations_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_raster_multisample

  def self.get_ext_command_GL_EXT_raster_multisample
    [
      'glRasterSamplesEXT',
    ]
  end # self.get_ext_command_GL_EXT_raster_multisample


  def self.define_ext_command_GL_EXT_rescale_normal
  end # self.define_ext_command_GL_EXT_rescale_normal

  def self.get_ext_command_GL_EXT_rescale_normal
    [
    ]
  end # self.get_ext_command_GL_EXT_rescale_normal


  def self.define_ext_command_GL_EXT_semaphore
    GL::GL_FUNCTION_SYMBOLS << :glGetUnsignedBytevEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUnsignedBytevEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUnsignedBytevEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUnsignedBytevEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytevEXT(_pname_, _data_)
        GL_FUNCTIONS_MAP[:glGetUnsignedBytevEXT].call(_pname_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUnsignedBytei_vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUnsignedBytei_vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUnsignedBytei_vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUnsignedBytei_vEXT)
    GL.module_eval(<<-SRC)
      def self.GetUnsignedBytei_vEXT(_target_, _index_, _data_)
        GL_FUNCTIONS_MAP[:glGetUnsignedBytei_vEXT].call(_target_, _index_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenSemaphoresEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenSemaphoresEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenSemaphoresEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenSemaphoresEXT)
    GL.module_eval(<<-SRC)
      def self.GenSemaphoresEXT(_n_, _semaphores_)
        GL_FUNCTIONS_MAP[:glGenSemaphoresEXT].call(_n_, _semaphores_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteSemaphoresEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteSemaphoresEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteSemaphoresEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteSemaphoresEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteSemaphoresEXT(_n_, _semaphores_)
        GL_FUNCTIONS_MAP[:glDeleteSemaphoresEXT].call(_n_, _semaphores_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsSemaphoreEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsSemaphoreEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsSemaphoreEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsSemaphoreEXT)
    GL.module_eval(<<-SRC)
      def self.IsSemaphoreEXT(_semaphore_)
        GL_FUNCTIONS_MAP[:glIsSemaphoreEXT].call(_semaphore_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSemaphoreParameterui64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSemaphoreParameterui64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSemaphoreParameterui64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSemaphoreParameterui64vEXT)
    GL.module_eval(<<-SRC)
      def self.SemaphoreParameterui64vEXT(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glSemaphoreParameterui64vEXT].call(_semaphore_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSemaphoreParameterui64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSemaphoreParameterui64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSemaphoreParameterui64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSemaphoreParameterui64vEXT)
    GL.module_eval(<<-SRC)
      def self.GetSemaphoreParameterui64vEXT(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetSemaphoreParameterui64vEXT].call(_semaphore_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWaitSemaphoreEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glWaitSemaphoreEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWaitSemaphoreEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glWaitSemaphoreEXT)
    GL.module_eval(<<-SRC)
      def self.WaitSemaphoreEXT(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _srcLayouts_)
        GL_FUNCTIONS_MAP[:glWaitSemaphoreEXT].call(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _srcLayouts_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSignalSemaphoreEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSignalSemaphoreEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSignalSemaphoreEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSignalSemaphoreEXT)
    GL.module_eval(<<-SRC)
      def self.SignalSemaphoreEXT(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _dstLayouts_)
        GL_FUNCTIONS_MAP[:glSignalSemaphoreEXT].call(_semaphore_, _numBufferBarriers_, _buffers_, _numTextureBarriers_, _textures_, _dstLayouts_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_semaphore

  def self.get_ext_command_GL_EXT_semaphore
    [
      'glGetUnsignedBytevEXT',
      'glGetUnsignedBytei_vEXT',
      'glGenSemaphoresEXT',
      'glDeleteSemaphoresEXT',
      'glIsSemaphoreEXT',
      'glSemaphoreParameterui64vEXT',
      'glGetSemaphoreParameterui64vEXT',
      'glWaitSemaphoreEXT',
      'glSignalSemaphoreEXT',
    ]
  end # self.get_ext_command_GL_EXT_semaphore


  def self.define_ext_command_GL_EXT_semaphore_fd
    GL::GL_FUNCTION_SYMBOLS << :glImportSemaphoreFdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportSemaphoreFdEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportSemaphoreFdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glImportSemaphoreFdEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSemaphoreFdEXT(_semaphore_, _handleType_, _fd_)
        GL_FUNCTIONS_MAP[:glImportSemaphoreFdEXT].call(_semaphore_, _handleType_, _fd_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_semaphore_fd

  def self.get_ext_command_GL_EXT_semaphore_fd
    [
      'glImportSemaphoreFdEXT',
    ]
  end # self.get_ext_command_GL_EXT_semaphore_fd


  def self.define_ext_command_GL_EXT_semaphore_win32
    GL::GL_FUNCTION_SYMBOLS << :glImportSemaphoreWin32HandleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportSemaphoreWin32HandleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportSemaphoreWin32HandleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glImportSemaphoreWin32HandleEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSemaphoreWin32HandleEXT(_semaphore_, _handleType_, _handle_)
        GL_FUNCTIONS_MAP[:glImportSemaphoreWin32HandleEXT].call(_semaphore_, _handleType_, _handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glImportSemaphoreWin32NameEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportSemaphoreWin32NameEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportSemaphoreWin32NameEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glImportSemaphoreWin32NameEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSemaphoreWin32NameEXT(_semaphore_, _handleType_, _name_)
        GL_FUNCTIONS_MAP[:glImportSemaphoreWin32NameEXT].call(_semaphore_, _handleType_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_semaphore_win32

  def self.get_ext_command_GL_EXT_semaphore_win32
    [
      'glImportSemaphoreWin32HandleEXT',
      'glImportSemaphoreWin32NameEXT',
    ]
  end # self.get_ext_command_GL_EXT_semaphore_win32


  def self.define_ext_command_GL_EXT_secondary_color
    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3bEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3bEXT] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3bEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3bEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3bEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3bEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3bvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3bvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3bvEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3bvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3dEXT] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3dEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3dEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3dEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3dvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3dvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3dvEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3dvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3fEXT] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3fEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3fEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3fEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3fvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3fvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3fvEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3fvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3iEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3iEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3iEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3iEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3ivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3ivEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3ivEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3ivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3sEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3sEXT] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3sEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3sEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3sEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3sEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3svEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3svEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3svEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3svEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3ubEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3ubEXT] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3ubEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3ubEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3ubEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3ubEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3ubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3ubvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3ubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3ubvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3ubvEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3ubvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3uiEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3uiEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3uiEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3uivEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3uivEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3uivEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3uivEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3usEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3usEXT] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3usEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3usEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3usEXT(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3usEXT].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3usvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3usvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3usvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3usvEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3usvEXT(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3usvEXT].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColorPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColorPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColorPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColorPointerEXT)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorPointerEXT(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glSecondaryColorPointerEXT].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_secondary_color

  def self.get_ext_command_GL_EXT_secondary_color
    [
      'glSecondaryColor3bEXT',
      'glSecondaryColor3bvEXT',
      'glSecondaryColor3dEXT',
      'glSecondaryColor3dvEXT',
      'glSecondaryColor3fEXT',
      'glSecondaryColor3fvEXT',
      'glSecondaryColor3iEXT',
      'glSecondaryColor3ivEXT',
      'glSecondaryColor3sEXT',
      'glSecondaryColor3svEXT',
      'glSecondaryColor3ubEXT',
      'glSecondaryColor3ubvEXT',
      'glSecondaryColor3uiEXT',
      'glSecondaryColor3uivEXT',
      'glSecondaryColor3usEXT',
      'glSecondaryColor3usvEXT',
      'glSecondaryColorPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_secondary_color


  def self.define_ext_command_GL_EXT_separate_shader_objects
    GL::GL_FUNCTION_SYMBOLS << :glUseShaderProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUseShaderProgramEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUseShaderProgramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUseShaderProgramEXT)
    GL.module_eval(<<-SRC)
      def self.UseShaderProgramEXT(_type_, _program_)
        GL_FUNCTIONS_MAP[:glUseShaderProgramEXT].call(_type_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glActiveProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glActiveProgramEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glActiveProgramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glActiveProgramEXT)
    GL.module_eval(<<-SRC)
      def self.ActiveProgramEXT(_program_)
        GL_FUNCTIONS_MAP[:glActiveProgramEXT].call(_program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateShaderProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateShaderProgramEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateShaderProgramEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glCreateShaderProgramEXT)
    GL.module_eval(<<-SRC)
      def self.CreateShaderProgramEXT(_type_, _string_)
        GL_FUNCTIONS_MAP[:glCreateShaderProgramEXT].call(_type_, _string_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glActiveShaderProgramEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glActiveShaderProgramEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glActiveShaderProgramEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glActiveShaderProgramEXT)
    GL.module_eval(<<-SRC)
      def self.ActiveShaderProgramEXT(_pipeline_, _program_)
        GL_FUNCTIONS_MAP[:glActiveShaderProgramEXT].call(_pipeline_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindProgramPipelineEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindProgramPipelineEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindProgramPipelineEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindProgramPipelineEXT)
    GL.module_eval(<<-SRC)
      def self.BindProgramPipelineEXT(_pipeline_)
        GL_FUNCTIONS_MAP[:glBindProgramPipelineEXT].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateShaderProgramvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateShaderProgramvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateShaderProgramvEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glCreateShaderProgramvEXT)
    GL.module_eval(<<-SRC)
      def self.CreateShaderProgramvEXT(_type_, _count_, _strings_)
        GL_FUNCTIONS_MAP[:glCreateShaderProgramvEXT].call(_type_, _count_, _strings_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteProgramPipelinesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteProgramPipelinesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteProgramPipelinesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteProgramPipelinesEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramPipelinesEXT(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:glDeleteProgramPipelinesEXT].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenProgramPipelinesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenProgramPipelinesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenProgramPipelinesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenProgramPipelinesEXT)
    GL.module_eval(<<-SRC)
      def self.GenProgramPipelinesEXT(_n_, _pipelines_)
        GL_FUNCTIONS_MAP[:glGenProgramPipelinesEXT].call(_n_, _pipelines_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramPipelineInfoLogEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramPipelineInfoLogEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramPipelineInfoLogEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramPipelineInfoLogEXT)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineInfoLogEXT(_pipeline_, _bufSize_, _length_, _infoLog_)
        GL_FUNCTIONS_MAP[:glGetProgramPipelineInfoLogEXT].call(_pipeline_, _bufSize_, _length_, _infoLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramPipelineivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramPipelineivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramPipelineivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramPipelineivEXT)
    GL.module_eval(<<-SRC)
      def self.GetProgramPipelineivEXT(_pipeline_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramPipelineivEXT].call(_pipeline_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsProgramPipelineEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsProgramPipelineEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsProgramPipelineEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsProgramPipelineEXT)
    GL.module_eval(<<-SRC)
      def self.IsProgramPipelineEXT(_pipeline_)
        GL_FUNCTIONS_MAP[:glIsProgramPipelineEXT].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameteriEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameteriEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameteriEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameteriEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramParameteriEXT(_program_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glProgramParameteriEXT].call(_program_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1fEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1iEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1iEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2fEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2iEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2iEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3fEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3iEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3iEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4fEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4fEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4fEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4fEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4fEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4fvEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4fvEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4iEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4iEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4iEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUseProgramStagesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glUseProgramStagesEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUseProgramStagesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glUseProgramStagesEXT)
    GL.module_eval(<<-SRC)
      def self.UseProgramStagesEXT(_pipeline_, _stages_, _program_)
        GL_FUNCTIONS_MAP[:glUseProgramStagesEXT].call(_pipeline_, _stages_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glValidateProgramPipelineEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glValidateProgramPipelineEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glValidateProgramPipelineEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glValidateProgramPipelineEXT)
    GL.module_eval(<<-SRC)
      def self.ValidateProgramPipelineEXT(_pipeline_)
        GL_FUNCTIONS_MAP[:glValidateProgramPipelineEXT].call(_pipeline_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uiEXT(_program_, _location_, _v0_)
        GL_FUNCTIONS_MAP[:glProgramUniform1uiEXT].call(_program_, _location_, _v0_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uiEXT(_program_, _location_, _v0_, _v1_)
        GL_FUNCTIONS_MAP[:glProgramUniform2uiEXT].call(_program_, _location_, _v0_, _v1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uiEXT(_program_, _location_, _v0_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glProgramUniform3uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4uiEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4uiEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uiEXT(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
        GL_FUNCTIONS_MAP[:glProgramUniform4uiEXT].call(_program_, _location_, _v0_, _v1_, _v2_, _v3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4uivEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4uivEXT(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4uivEXT].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix2x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix2x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix2x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix2x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix2x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix2x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x2fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x2fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x2fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x2fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x2fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x2fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix3x4fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix3x4fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix3x4fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix3x4fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix3x4fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix3x4fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformMatrix4x3fvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformMatrix4x3fvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformMatrix4x3fvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformMatrix4x3fvEXT)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformMatrix4x3fvEXT(_program_, _location_, _count_, _transpose_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformMatrix4x3fvEXT].call(_program_, _location_, _count_, _transpose_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_separate_shader_objects

  def self.get_ext_command_GL_EXT_separate_shader_objects
    [
      'glUseShaderProgramEXT',
      'glActiveProgramEXT',
      'glCreateShaderProgramEXT',
      'glActiveShaderProgramEXT',
      'glBindProgramPipelineEXT',
      'glCreateShaderProgramvEXT',
      'glDeleteProgramPipelinesEXT',
      'glGenProgramPipelinesEXT',
      'glGetProgramPipelineInfoLogEXT',
      'glGetProgramPipelineivEXT',
      'glIsProgramPipelineEXT',
      'glProgramParameteriEXT',
      'glProgramUniform1fEXT',
      'glProgramUniform1fvEXT',
      'glProgramUniform1iEXT',
      'glProgramUniform1ivEXT',
      'glProgramUniform2fEXT',
      'glProgramUniform2fvEXT',
      'glProgramUniform2iEXT',
      'glProgramUniform2ivEXT',
      'glProgramUniform3fEXT',
      'glProgramUniform3fvEXT',
      'glProgramUniform3iEXT',
      'glProgramUniform3ivEXT',
      'glProgramUniform4fEXT',
      'glProgramUniform4fvEXT',
      'glProgramUniform4iEXT',
      'glProgramUniform4ivEXT',
      'glProgramUniformMatrix2fvEXT',
      'glProgramUniformMatrix3fvEXT',
      'glProgramUniformMatrix4fvEXT',
      'glUseProgramStagesEXT',
      'glValidateProgramPipelineEXT',
      'glProgramUniform1uiEXT',
      'glProgramUniform2uiEXT',
      'glProgramUniform3uiEXT',
      'glProgramUniform4uiEXT',
      'glProgramUniform1uivEXT',
      'glProgramUniform2uivEXT',
      'glProgramUniform3uivEXT',
      'glProgramUniform4uivEXT',
      'glProgramUniformMatrix2x3fvEXT',
      'glProgramUniformMatrix3x2fvEXT',
      'glProgramUniformMatrix2x4fvEXT',
      'glProgramUniformMatrix4x2fvEXT',
      'glProgramUniformMatrix3x4fvEXT',
      'glProgramUniformMatrix4x3fvEXT',
    ]
  end # self.get_ext_command_GL_EXT_separate_shader_objects


  def self.define_ext_command_GL_EXT_separate_specular_color
  end # self.define_ext_command_GL_EXT_separate_specular_color

  def self.get_ext_command_GL_EXT_separate_specular_color
    [
    ]
  end # self.get_ext_command_GL_EXT_separate_specular_color


  def self.define_ext_command_GL_EXT_shader_framebuffer_fetch
  end # self.define_ext_command_GL_EXT_shader_framebuffer_fetch

  def self.get_ext_command_GL_EXT_shader_framebuffer_fetch
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_framebuffer_fetch


  def self.define_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferFetchBarrierEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferFetchBarrierEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferFetchBarrierEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferFetchBarrierEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferFetchBarrierEXT()
        GL_FUNCTIONS_MAP[:glFramebufferFetchBarrierEXT].call()
      end
    SRC
  end # self.define_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent

  def self.get_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent
    [
      'glFramebufferFetchBarrierEXT',
    ]
  end # self.get_ext_command_GL_EXT_shader_framebuffer_fetch_non_coherent


  def self.define_ext_command_GL_EXT_shader_image_load_formatted
  end # self.define_ext_command_GL_EXT_shader_image_load_formatted

  def self.get_ext_command_GL_EXT_shader_image_load_formatted
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_image_load_formatted


  def self.define_ext_command_GL_EXT_shader_image_load_store
    GL::GL_FUNCTION_SYMBOLS << :glBindImageTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindImageTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindImageTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindImageTextureEXT)
    GL.module_eval(<<-SRC)
      def self.BindImageTextureEXT(_index_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
        GL_FUNCTIONS_MAP[:glBindImageTextureEXT].call(_index_, _texture_, _level_, _layered_, _layer_, _access_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMemoryBarrierEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMemoryBarrierEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMemoryBarrierEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMemoryBarrierEXT)
    GL.module_eval(<<-SRC)
      def self.MemoryBarrierEXT(_barriers_)
        GL_FUNCTIONS_MAP[:glMemoryBarrierEXT].call(_barriers_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_shader_image_load_store

  def self.get_ext_command_GL_EXT_shader_image_load_store
    [
      'glBindImageTextureEXT',
      'glMemoryBarrierEXT',
    ]
  end # self.get_ext_command_GL_EXT_shader_image_load_store


  def self.define_ext_command_GL_EXT_shader_integer_mix
  end # self.define_ext_command_GL_EXT_shader_integer_mix

  def self.get_ext_command_GL_EXT_shader_integer_mix
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_integer_mix


  def self.define_ext_command_GL_EXT_shader_samples_identical
  end # self.define_ext_command_GL_EXT_shader_samples_identical

  def self.get_ext_command_GL_EXT_shader_samples_identical
    [
    ]
  end # self.get_ext_command_GL_EXT_shader_samples_identical


  def self.define_ext_command_GL_EXT_shadow_funcs
  end # self.define_ext_command_GL_EXT_shadow_funcs

  def self.get_ext_command_GL_EXT_shadow_funcs
    [
    ]
  end # self.get_ext_command_GL_EXT_shadow_funcs


  def self.define_ext_command_GL_EXT_shared_texture_palette
  end # self.define_ext_command_GL_EXT_shared_texture_palette

  def self.get_ext_command_GL_EXT_shared_texture_palette
    [
    ]
  end # self.get_ext_command_GL_EXT_shared_texture_palette


  def self.define_ext_command_GL_EXT_sparse_texture2
  end # self.define_ext_command_GL_EXT_sparse_texture2

  def self.get_ext_command_GL_EXT_sparse_texture2
    [
    ]
  end # self.get_ext_command_GL_EXT_sparse_texture2


  def self.define_ext_command_GL_EXT_stencil_clear_tag
    GL::GL_FUNCTION_SYMBOLS << :glStencilClearTagEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilClearTagEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilClearTagEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilClearTagEXT)
    GL.module_eval(<<-SRC)
      def self.StencilClearTagEXT(_stencilTagBits_, _stencilClearTag_)
        GL_FUNCTIONS_MAP[:glStencilClearTagEXT].call(_stencilTagBits_, _stencilClearTag_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_stencil_clear_tag

  def self.get_ext_command_GL_EXT_stencil_clear_tag
    [
      'glStencilClearTagEXT',
    ]
  end # self.get_ext_command_GL_EXT_stencil_clear_tag


  def self.define_ext_command_GL_EXT_stencil_two_side
    GL::GL_FUNCTION_SYMBOLS << :glActiveStencilFaceEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glActiveStencilFaceEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glActiveStencilFaceEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glActiveStencilFaceEXT)
    GL.module_eval(<<-SRC)
      def self.ActiveStencilFaceEXT(_face_)
        GL_FUNCTIONS_MAP[:glActiveStencilFaceEXT].call(_face_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_stencil_two_side

  def self.get_ext_command_GL_EXT_stencil_two_side
    [
      'glActiveStencilFaceEXT',
    ]
  end # self.get_ext_command_GL_EXT_stencil_two_side


  def self.define_ext_command_GL_EXT_stencil_wrap
  end # self.define_ext_command_GL_EXT_stencil_wrap

  def self.get_ext_command_GL_EXT_stencil_wrap
    [
    ]
  end # self.get_ext_command_GL_EXT_stencil_wrap


  def self.define_ext_command_GL_EXT_subtexture
    GL::GL_FUNCTION_SYMBOLS << :glTexSubImage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexSubImage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexSubImage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexSubImage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TexSubImage1DEXT(_target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTexSubImage1DEXT].call(_target_, _level_, _xoffset_, _width_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexSubImage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexSubImage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexSubImage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexSubImage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TexSubImage2DEXT(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTexSubImage2DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _width_, _height_, _format_, _type_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_subtexture

  def self.get_ext_command_GL_EXT_subtexture
    [
      'glTexSubImage1DEXT',
      'glTexSubImage2DEXT',
    ]
  end # self.get_ext_command_GL_EXT_subtexture


  def self.define_ext_command_GL_EXT_texture
  end # self.define_ext_command_GL_EXT_texture

  def self.get_ext_command_GL_EXT_texture
    [
    ]
  end # self.get_ext_command_GL_EXT_texture


  def self.define_ext_command_GL_EXT_texture3D
    GL::GL_FUNCTION_SYMBOLS << :glTexImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexImage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexImage3DEXT(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTexImage3DEXT].call(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexSubImage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexSubImage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexSubImage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexSubImage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexSubImage3DEXT(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTexSubImage3DEXT].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _format_, _type_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture3D

  def self.get_ext_command_GL_EXT_texture3D
    [
      'glTexImage3DEXT',
      'glTexSubImage3DEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture3D


  def self.define_ext_command_GL_EXT_texture_array
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureLayerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureLayerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureLayerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureLayerEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayerEXT(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureLayerEXT].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_array

  def self.get_ext_command_GL_EXT_texture_array
    [
      'glFramebufferTextureLayerEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_array


  def self.define_ext_command_GL_EXT_texture_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glTexBufferEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexBufferEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexBufferEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexBufferEXT)
    GL.module_eval(<<-SRC)
      def self.TexBufferEXT(_target_, _internalformat_, _buffer_)
        GL_FUNCTIONS_MAP[:glTexBufferEXT].call(_target_, _internalformat_, _buffer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_buffer_object

  def self.get_ext_command_GL_EXT_texture_buffer_object
    [
      'glTexBufferEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_buffer_object


  def self.define_ext_command_GL_EXT_texture_compression_latc
  end # self.define_ext_command_GL_EXT_texture_compression_latc

  def self.get_ext_command_GL_EXT_texture_compression_latc
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_compression_latc


  def self.define_ext_command_GL_EXT_texture_compression_rgtc
  end # self.define_ext_command_GL_EXT_texture_compression_rgtc

  def self.get_ext_command_GL_EXT_texture_compression_rgtc
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_compression_rgtc


  def self.define_ext_command_GL_EXT_texture_compression_s3tc
  end # self.define_ext_command_GL_EXT_texture_compression_s3tc

  def self.get_ext_command_GL_EXT_texture_compression_s3tc
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_compression_s3tc


  def self.define_ext_command_GL_EXT_texture_cube_map
  end # self.define_ext_command_GL_EXT_texture_cube_map

  def self.get_ext_command_GL_EXT_texture_cube_map
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_cube_map


  def self.define_ext_command_GL_EXT_texture_env_add
  end # self.define_ext_command_GL_EXT_texture_env_add

  def self.get_ext_command_GL_EXT_texture_env_add
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_env_add


  def self.define_ext_command_GL_EXT_texture_env_combine
  end # self.define_ext_command_GL_EXT_texture_env_combine

  def self.get_ext_command_GL_EXT_texture_env_combine
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_env_combine


  def self.define_ext_command_GL_EXT_texture_env_dot3
  end # self.define_ext_command_GL_EXT_texture_env_dot3

  def self.get_ext_command_GL_EXT_texture_env_dot3
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_env_dot3


  def self.define_ext_command_GL_EXT_texture_filter_anisotropic
  end # self.define_ext_command_GL_EXT_texture_filter_anisotropic

  def self.get_ext_command_GL_EXT_texture_filter_anisotropic
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_filter_anisotropic


  def self.define_ext_command_GL_EXT_texture_filter_minmax
  end # self.define_ext_command_GL_EXT_texture_filter_minmax

  def self.get_ext_command_GL_EXT_texture_filter_minmax
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_filter_minmax


  def self.define_ext_command_GL_EXT_texture_integer
    GL::GL_FUNCTION_SYMBOLS << :glTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.TexParameterIivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTexParameterIivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.TexParameterIuivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTexParameterIuivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexParameterIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexParameterIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexParameterIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexParameterIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterIivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexParameterIivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexParameterIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexParameterIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexParameterIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexParameterIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterIuivEXT(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexParameterIuivEXT].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearColorIiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearColorIiEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearColorIiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearColorIiEXT)
    GL.module_eval(<<-SRC)
      def self.ClearColorIiEXT(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glClearColorIiEXT].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearColorIuiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearColorIuiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearColorIuiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearColorIuiEXT)
    GL.module_eval(<<-SRC)
      def self.ClearColorIuiEXT(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glClearColorIuiEXT].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_integer

  def self.get_ext_command_GL_EXT_texture_integer
    [
      'glTexParameterIivEXT',
      'glTexParameterIuivEXT',
      'glGetTexParameterIivEXT',
      'glGetTexParameterIuivEXT',
      'glClearColorIiEXT',
      'glClearColorIuiEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_integer


  def self.define_ext_command_GL_EXT_texture_lod_bias
  end # self.define_ext_command_GL_EXT_texture_lod_bias

  def self.get_ext_command_GL_EXT_texture_lod_bias
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_lod_bias


  def self.define_ext_command_GL_EXT_texture_mirror_clamp
  end # self.define_ext_command_GL_EXT_texture_mirror_clamp

  def self.get_ext_command_GL_EXT_texture_mirror_clamp
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_mirror_clamp


  def self.define_ext_command_GL_EXT_texture_object
    GL::GL_FUNCTION_SYMBOLS << :glAreTexturesResidentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glAreTexturesResidentEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAreTexturesResidentEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glAreTexturesResidentEXT)
    GL.module_eval(<<-SRC)
      def self.AreTexturesResidentEXT(_n_, _textures_, _residences_)
        GL_FUNCTIONS_MAP[:glAreTexturesResidentEXT].call(_n_, _textures_, _residences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindTextureEXT)
    GL.module_eval(<<-SRC)
      def self.BindTextureEXT(_target_, _texture_)
        GL_FUNCTIONS_MAP[:glBindTextureEXT].call(_target_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteTexturesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteTexturesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteTexturesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteTexturesEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteTexturesEXT(_n_, _textures_)
        GL_FUNCTIONS_MAP[:glDeleteTexturesEXT].call(_n_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenTexturesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenTexturesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenTexturesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenTexturesEXT)
    GL.module_eval(<<-SRC)
      def self.GenTexturesEXT(_n_, _textures_)
        GL_FUNCTIONS_MAP[:glGenTexturesEXT].call(_n_, _textures_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsTextureEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsTextureEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsTextureEXT)
    GL.module_eval(<<-SRC)
      def self.IsTextureEXT(_texture_)
        GL_FUNCTIONS_MAP[:glIsTextureEXT].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPrioritizeTexturesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glPrioritizeTexturesEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPrioritizeTexturesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glPrioritizeTexturesEXT)
    GL.module_eval(<<-SRC)
      def self.PrioritizeTexturesEXT(_n_, _textures_, _priorities_)
        GL_FUNCTIONS_MAP[:glPrioritizeTexturesEXT].call(_n_, _textures_, _priorities_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_object

  def self.get_ext_command_GL_EXT_texture_object
    [
      'glAreTexturesResidentEXT',
      'glBindTextureEXT',
      'glDeleteTexturesEXT',
      'glGenTexturesEXT',
      'glIsTextureEXT',
      'glPrioritizeTexturesEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_object


  def self.define_ext_command_GL_EXT_texture_perturb_normal
    GL::GL_FUNCTION_SYMBOLS << :glTextureNormalEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureNormalEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureNormalEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureNormalEXT)
    GL.module_eval(<<-SRC)
      def self.TextureNormalEXT(_mode_)
        GL_FUNCTIONS_MAP[:glTextureNormalEXT].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_perturb_normal

  def self.get_ext_command_GL_EXT_texture_perturb_normal
    [
      'glTextureNormalEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_perturb_normal


  def self.define_ext_command_GL_EXT_texture_sRGB
  end # self.define_ext_command_GL_EXT_texture_sRGB

  def self.get_ext_command_GL_EXT_texture_sRGB
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB


  def self.define_ext_command_GL_EXT_texture_sRGB_R8
  end # self.define_ext_command_GL_EXT_texture_sRGB_R8

  def self.get_ext_command_GL_EXT_texture_sRGB_R8
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB_R8


  def self.define_ext_command_GL_EXT_texture_sRGB_RG8
  end # self.define_ext_command_GL_EXT_texture_sRGB_RG8

  def self.get_ext_command_GL_EXT_texture_sRGB_RG8
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB_RG8


  def self.define_ext_command_GL_EXT_texture_sRGB_decode
  end # self.define_ext_command_GL_EXT_texture_sRGB_decode

  def self.get_ext_command_GL_EXT_texture_sRGB_decode
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_sRGB_decode


  def self.define_ext_command_GL_EXT_texture_shared_exponent
  end # self.define_ext_command_GL_EXT_texture_shared_exponent

  def self.get_ext_command_GL_EXT_texture_shared_exponent
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_shared_exponent


  def self.define_ext_command_GL_EXT_texture_snorm
  end # self.define_ext_command_GL_EXT_texture_snorm

  def self.get_ext_command_GL_EXT_texture_snorm
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_snorm


  def self.define_ext_command_GL_EXT_texture_storage
    GL::GL_FUNCTION_SYMBOLS << :glTexStorage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage1DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorage1DEXT(_target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:glTexStorage1DEXT].call(_target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage2DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorage2DEXT(_target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glTexStorage2DEXT].call(_target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexStorage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexStorage3DEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexStorage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexStorage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TexStorage3DEXT(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glTexStorage3DEXT].call(_target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage1DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage1DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage1DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage1DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage1DEXT(_texture_, _target_, _levels_, _internalformat_, _width_)
        GL_FUNCTIONS_MAP[:glTextureStorage1DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage2DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage2DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage2DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage2DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage2DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glTextureStorage2DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureStorage3DEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureStorage3DEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureStorage3DEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureStorage3DEXT)
    GL.module_eval(<<-SRC)
      def self.TextureStorage3DEXT(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glTextureStorage3DEXT].call(_texture_, _target_, _levels_, _internalformat_, _width_, _height_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_texture_storage

  def self.get_ext_command_GL_EXT_texture_storage
    [
      'glTexStorage1DEXT',
      'glTexStorage2DEXT',
      'glTexStorage3DEXT',
      'glTextureStorage1DEXT',
      'glTextureStorage2DEXT',
      'glTextureStorage3DEXT',
    ]
  end # self.get_ext_command_GL_EXT_texture_storage


  def self.define_ext_command_GL_EXT_texture_swizzle
  end # self.define_ext_command_GL_EXT_texture_swizzle

  def self.get_ext_command_GL_EXT_texture_swizzle
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_swizzle


  def self.define_ext_command_GL_NV_timeline_semaphore
    GL::GL_FUNCTION_SYMBOLS << :glCreateSemaphoresNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateSemaphoresNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateSemaphoresNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateSemaphoresNV)
    GL.module_eval(<<-SRC)
      def self.CreateSemaphoresNV(_n_, _semaphores_)
        GL_FUNCTIONS_MAP[:glCreateSemaphoresNV].call(_n_, _semaphores_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSemaphoreParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSemaphoreParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSemaphoreParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSemaphoreParameterivNV)
    GL.module_eval(<<-SRC)
      def self.SemaphoreParameterivNV(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glSemaphoreParameterivNV].call(_semaphore_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSemaphoreParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSemaphoreParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSemaphoreParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSemaphoreParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetSemaphoreParameterivNV(_semaphore_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetSemaphoreParameterivNV].call(_semaphore_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_timeline_semaphore

  def self.get_ext_command_GL_NV_timeline_semaphore
    [
      'glCreateSemaphoresNV',
      'glSemaphoreParameterivNV',
      'glGetSemaphoreParameterivNV',
    ]
  end # self.get_ext_command_GL_NV_timeline_semaphore


  def self.define_ext_command_GL_EXT_timer_query
    GL::GL_FUNCTION_SYMBOLS << :glGetQueryObjecti64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryObjecti64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryObjecti64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryObjecti64vEXT)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjecti64vEXT(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryObjecti64vEXT].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetQueryObjectui64vEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetQueryObjectui64vEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetQueryObjectui64vEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetQueryObjectui64vEXT)
    GL.module_eval(<<-SRC)
      def self.GetQueryObjectui64vEXT(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetQueryObjectui64vEXT].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_timer_query

  def self.get_ext_command_GL_EXT_timer_query
    [
      'glGetQueryObjecti64vEXT',
      'glGetQueryObjectui64vEXT',
    ]
  end # self.get_ext_command_GL_EXT_timer_query


  def self.define_ext_command_GL_EXT_transform_feedback
    GL::GL_FUNCTION_SYMBOLS << :glBeginTransformFeedbackEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginTransformFeedbackEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginTransformFeedbackEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginTransformFeedbackEXT)
    GL.module_eval(<<-SRC)
      def self.BeginTransformFeedbackEXT(_primitiveMode_)
        GL_FUNCTIONS_MAP[:glBeginTransformFeedbackEXT].call(_primitiveMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndTransformFeedbackEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndTransformFeedbackEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndTransformFeedbackEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndTransformFeedbackEXT)
    GL.module_eval(<<-SRC)
      def self.EndTransformFeedbackEXT()
        GL_FUNCTIONS_MAP[:glEndTransformFeedbackEXT].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferRangeEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferRangeEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferRangeEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferRangeEXT)
    GL.module_eval(<<-SRC)
      def self.BindBufferRangeEXT(_target_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glBindBufferRangeEXT].call(_target_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferOffsetEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferOffsetEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferOffsetEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferOffsetEXT)
    GL.module_eval(<<-SRC)
      def self.BindBufferOffsetEXT(_target_, _index_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:glBindBufferOffsetEXT].call(_target_, _index_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferBaseEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferBaseEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferBaseEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferBaseEXT)
    GL.module_eval(<<-SRC)
      def self.BindBufferBaseEXT(_target_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:glBindBufferBaseEXT].call(_target_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformFeedbackVaryingsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformFeedbackVaryingsEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformFeedbackVaryingsEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformFeedbackVaryingsEXT)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackVaryingsEXT(_program_, _count_, _varyings_, _bufferMode_)
        GL_FUNCTIONS_MAP[:glTransformFeedbackVaryingsEXT].call(_program_, _count_, _varyings_, _bufferMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTransformFeedbackVaryingEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTransformFeedbackVaryingEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTransformFeedbackVaryingEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTransformFeedbackVaryingEXT)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbackVaryingEXT(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:glGetTransformFeedbackVaryingEXT].call(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_transform_feedback

  def self.get_ext_command_GL_EXT_transform_feedback
    [
      'glBeginTransformFeedbackEXT',
      'glEndTransformFeedbackEXT',
      'glBindBufferRangeEXT',
      'glBindBufferOffsetEXT',
      'glBindBufferBaseEXT',
      'glTransformFeedbackVaryingsEXT',
      'glGetTransformFeedbackVaryingEXT',
    ]
  end # self.get_ext_command_GL_EXT_transform_feedback


  def self.define_ext_command_GL_EXT_vertex_array
    GL::GL_FUNCTION_SYMBOLS << :glArrayElementEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glArrayElementEXT] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glArrayElementEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glArrayElementEXT)
    GL.module_eval(<<-SRC)
      def self.ArrayElementEXT(_i_)
        GL_FUNCTIONS_MAP[:glArrayElementEXT].call(_i_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorPointerEXT)
    GL.module_eval(<<-SRC)
      def self.ColorPointerEXT(_size_, _type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:glColorPointerEXT].call(_size_, _type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawArraysEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawArraysEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawArraysEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawArraysEXT)
    GL.module_eval(<<-SRC)
      def self.DrawArraysEXT(_mode_, _first_, _count_)
        GL_FUNCTIONS_MAP[:glDrawArraysEXT].call(_mode_, _first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEdgeFlagPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEdgeFlagPointerEXT] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEdgeFlagPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEdgeFlagPointerEXT)
    GL.module_eval(<<-SRC)
      def self.EdgeFlagPointerEXT(_stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:glEdgeFlagPointerEXT].call(_stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPointervEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetPointervEXT(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPointervEXT].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIndexPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexPointerEXT)
    GL.module_eval(<<-SRC)
      def self.IndexPointerEXT(_type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:glIndexPointerEXT].call(_type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalPointerEXT)
    GL.module_eval(<<-SRC)
      def self.NormalPointerEXT(_type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:glNormalPointerEXT].call(_type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordPointerEXT)
    GL.module_eval(<<-SRC)
      def self.TexCoordPointerEXT(_size_, _type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:glTexCoordPointerEXT].call(_size_, _type_, _stride_, _count_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexPointerEXT(_size_, _type_, _stride_, _count_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexPointerEXT].call(_size_, _type_, _stride_, _count_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_array

  def self.get_ext_command_GL_EXT_vertex_array
    [
      'glArrayElementEXT',
      'glColorPointerEXT',
      'glDrawArraysEXT',
      'glEdgeFlagPointerEXT',
      'glGetPointervEXT',
      'glIndexPointerEXT',
      'glNormalPointerEXT',
      'glTexCoordPointerEXT',
      'glVertexPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_array


  def self.define_ext_command_GL_EXT_vertex_array_bgra
  end # self.define_ext_command_GL_EXT_vertex_array_bgra

  def self.get_ext_command_GL_EXT_vertex_array_bgra
    [
    ]
  end # self.get_ext_command_GL_EXT_vertex_array_bgra


  def self.define_ext_command_GL_EXT_vertex_attrib_64bit
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1dEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1dEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2dEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2dEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3dEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3dEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4dEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4dEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4dEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4dEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4dEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4dEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4dvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4dvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4dvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4dvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4dvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4dvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribLPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribLPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribLPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribLPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLPointerEXT(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribLPointerEXT].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribLdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribLdvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribLdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribLdvEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLdvEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribLdvEXT].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_attrib_64bit

  def self.get_ext_command_GL_EXT_vertex_attrib_64bit
    [
      'glVertexAttribL1dEXT',
      'glVertexAttribL2dEXT',
      'glVertexAttribL3dEXT',
      'glVertexAttribL4dEXT',
      'glVertexAttribL1dvEXT',
      'glVertexAttribL2dvEXT',
      'glVertexAttribL3dvEXT',
      'glVertexAttribL4dvEXT',
      'glVertexAttribLPointerEXT',
      'glGetVertexAttribLdvEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_attrib_64bit


  def self.define_ext_command_GL_EXT_vertex_shader
    GL::GL_FUNCTION_SYMBOLS << :glBeginVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginVertexShaderEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.BeginVertexShaderEXT()
        GL_FUNCTIONS_MAP[:glBeginVertexShaderEXT].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndVertexShaderEXT] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.EndVertexShaderEXT()
        GL_FUNCTIONS_MAP[:glEndVertexShaderEXT].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVertexShaderEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.BindVertexShaderEXT(_id_)
        GL_FUNCTIONS_MAP[:glBindVertexShaderEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenVertexShadersEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenVertexShadersEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenVertexShadersEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glGenVertexShadersEXT)
    GL.module_eval(<<-SRC)
      def self.GenVertexShadersEXT(_range_)
        GL_FUNCTIONS_MAP[:glGenVertexShadersEXT].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteVertexShaderEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteVertexShaderEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteVertexShaderEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteVertexShaderEXT)
    GL.module_eval(<<-SRC)
      def self.DeleteVertexShaderEXT(_id_)
        GL_FUNCTIONS_MAP[:glDeleteVertexShaderEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShaderOp1EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glShaderOp1EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShaderOp1EXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glShaderOp1EXT)
    GL.module_eval(<<-SRC)
      def self.ShaderOp1EXT(_op_, _res_, _arg1_)
        GL_FUNCTIONS_MAP[:glShaderOp1EXT].call(_op_, _res_, _arg1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShaderOp2EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glShaderOp2EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShaderOp2EXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glShaderOp2EXT)
    GL.module_eval(<<-SRC)
      def self.ShaderOp2EXT(_op_, _res_, _arg1_, _arg2_)
        GL_FUNCTIONS_MAP[:glShaderOp2EXT].call(_op_, _res_, _arg1_, _arg2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShaderOp3EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glShaderOp3EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShaderOp3EXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glShaderOp3EXT)
    GL.module_eval(<<-SRC)
      def self.ShaderOp3EXT(_op_, _res_, _arg1_, _arg2_, _arg3_)
        GL_FUNCTIONS_MAP[:glShaderOp3EXT].call(_op_, _res_, _arg1_, _arg2_, _arg3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSwizzleEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSwizzleEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSwizzleEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSwizzleEXT)
    GL.module_eval(<<-SRC)
      def self.SwizzleEXT(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
        GL_FUNCTIONS_MAP[:glSwizzleEXT].call(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWriteMaskEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glWriteMaskEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWriteMaskEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glWriteMaskEXT)
    GL.module_eval(<<-SRC)
      def self.WriteMaskEXT(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
        GL_FUNCTIONS_MAP[:glWriteMaskEXT].call(_res_, _in_, _outX_, _outY_, _outZ_, _outW_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInsertComponentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glInsertComponentEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInsertComponentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glInsertComponentEXT)
    GL.module_eval(<<-SRC)
      def self.InsertComponentEXT(_res_, _src_, _num_)
        GL_FUNCTIONS_MAP[:glInsertComponentEXT].call(_res_, _src_, _num_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glExtractComponentEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glExtractComponentEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glExtractComponentEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glExtractComponentEXT)
    GL.module_eval(<<-SRC)
      def self.ExtractComponentEXT(_res_, _src_, _num_)
        GL_FUNCTIONS_MAP[:glExtractComponentEXT].call(_res_, _src_, _num_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenSymbolsEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenSymbolsEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenSymbolsEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glGenSymbolsEXT)
    GL.module_eval(<<-SRC)
      def self.GenSymbolsEXT(_datatype_, _storagetype_, _range_, _components_)
        GL_FUNCTIONS_MAP[:glGenSymbolsEXT].call(_datatype_, _storagetype_, _range_, _components_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSetInvariantEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSetInvariantEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSetInvariantEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSetInvariantEXT)
    GL.module_eval(<<-SRC)
      def self.SetInvariantEXT(_id_, _type_, _addr_)
        GL_FUNCTIONS_MAP[:glSetInvariantEXT].call(_id_, _type_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSetLocalConstantEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glSetLocalConstantEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSetLocalConstantEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glSetLocalConstantEXT)
    GL.module_eval(<<-SRC)
      def self.SetLocalConstantEXT(_id_, _type_, _addr_)
        GL_FUNCTIONS_MAP[:glSetLocalConstantEXT].call(_id_, _type_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantbvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantbvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantbvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantbvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantbvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantbvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantsvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantsvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantsvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantsvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantsvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantsvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantivEXT)
    GL.module_eval(<<-SRC)
      def self.VariantivEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantivEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantfvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantfvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantfvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantfvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantdvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantdvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantdvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantdvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantdvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantdvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantubvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantubvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantubvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantubvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantusvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantusvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantusvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantusvEXT)
    GL.module_eval(<<-SRC)
      def self.VariantusvEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantusvEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantuivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantuivEXT)
    GL.module_eval(<<-SRC)
      def self.VariantuivEXT(_id_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantuivEXT].call(_id_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVariantPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVariantPointerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVariantPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVariantPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VariantPointerEXT(_id_, _type_, _stride_, _addr_)
        GL_FUNCTIONS_MAP[:glVariantPointerEXT].call(_id_, _type_, _stride_, _addr_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEnableVariantClientStateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glEnableVariantClientStateEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEnableVariantClientStateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glEnableVariantClientStateEXT)
    GL.module_eval(<<-SRC)
      def self.EnableVariantClientStateEXT(_id_)
        GL_FUNCTIONS_MAP[:glEnableVariantClientStateEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDisableVariantClientStateEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glDisableVariantClientStateEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDisableVariantClientStateEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glDisableVariantClientStateEXT)
    GL.module_eval(<<-SRC)
      def self.DisableVariantClientStateEXT(_id_)
        GL_FUNCTIONS_MAP[:glDisableVariantClientStateEXT].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindLightParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindLightParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindLightParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glBindLightParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindLightParameterEXT(_light_, _value_)
        GL_FUNCTIONS_MAP[:glBindLightParameterEXT].call(_light_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindMaterialParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindMaterialParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindMaterialParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glBindMaterialParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindMaterialParameterEXT(_face_, _value_)
        GL_FUNCTIONS_MAP[:glBindMaterialParameterEXT].call(_face_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindTexGenParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTexGenParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTexGenParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glBindTexGenParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindTexGenParameterEXT(_unit_, _coord_, _value_)
        GL_FUNCTIONS_MAP[:glBindTexGenParameterEXT].call(_unit_, _coord_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindTextureUnitParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTextureUnitParameterEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTextureUnitParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glBindTextureUnitParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindTextureUnitParameterEXT(_unit_, _value_)
        GL_FUNCTIONS_MAP[:glBindTextureUnitParameterEXT].call(_unit_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindParameterEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindParameterEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindParameterEXT] = -Fiddle::TYPE_INT
    GL.bind_command(:glBindParameterEXT)
    GL.module_eval(<<-SRC)
      def self.BindParameterEXT(_value_)
        GL_FUNCTIONS_MAP[:glBindParameterEXT].call(_value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsVariantEnabledEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsVariantEnabledEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsVariantEnabledEXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsVariantEnabledEXT)
    GL.module_eval(<<-SRC)
      def self.IsVariantEnabledEXT(_id_, _cap_)
        GL_FUNCTIONS_MAP[:glIsVariantEnabledEXT].call(_id_, _cap_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVariantBooleanvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVariantBooleanvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVariantBooleanvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVariantBooleanvEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantBooleanvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetVariantBooleanvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVariantIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVariantIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVariantIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVariantIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantIntegervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetVariantIntegervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVariantFloatvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVariantFloatvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVariantFloatvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVariantFloatvEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantFloatvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetVariantFloatvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVariantPointervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVariantPointervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVariantPointervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVariantPointervEXT)
    GL.module_eval(<<-SRC)
      def self.GetVariantPointervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetVariantPointervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetInvariantBooleanvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInvariantBooleanvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInvariantBooleanvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInvariantBooleanvEXT)
    GL.module_eval(<<-SRC)
      def self.GetInvariantBooleanvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetInvariantBooleanvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetInvariantIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInvariantIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInvariantIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInvariantIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetInvariantIntegervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetInvariantIntegervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetInvariantFloatvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInvariantFloatvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInvariantFloatvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInvariantFloatvEXT)
    GL.module_eval(<<-SRC)
      def self.GetInvariantFloatvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetInvariantFloatvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetLocalConstantBooleanvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetLocalConstantBooleanvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetLocalConstantBooleanvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetLocalConstantBooleanvEXT)
    GL.module_eval(<<-SRC)
      def self.GetLocalConstantBooleanvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetLocalConstantBooleanvEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetLocalConstantIntegervEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetLocalConstantIntegervEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetLocalConstantIntegervEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetLocalConstantIntegervEXT)
    GL.module_eval(<<-SRC)
      def self.GetLocalConstantIntegervEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetLocalConstantIntegervEXT].call(_id_, _value_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetLocalConstantFloatvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetLocalConstantFloatvEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetLocalConstantFloatvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetLocalConstantFloatvEXT)
    GL.module_eval(<<-SRC)
      def self.GetLocalConstantFloatvEXT(_id_, _value_, _data_)
        GL_FUNCTIONS_MAP[:glGetLocalConstantFloatvEXT].call(_id_, _value_, _data_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_shader

  def self.get_ext_command_GL_EXT_vertex_shader
    [
      'glBeginVertexShaderEXT',
      'glEndVertexShaderEXT',
      'glBindVertexShaderEXT',
      'glGenVertexShadersEXT',
      'glDeleteVertexShaderEXT',
      'glShaderOp1EXT',
      'glShaderOp2EXT',
      'glShaderOp3EXT',
      'glSwizzleEXT',
      'glWriteMaskEXT',
      'glInsertComponentEXT',
      'glExtractComponentEXT',
      'glGenSymbolsEXT',
      'glSetInvariantEXT',
      'glSetLocalConstantEXT',
      'glVariantbvEXT',
      'glVariantsvEXT',
      'glVariantivEXT',
      'glVariantfvEXT',
      'glVariantdvEXT',
      'glVariantubvEXT',
      'glVariantusvEXT',
      'glVariantuivEXT',
      'glVariantPointerEXT',
      'glEnableVariantClientStateEXT',
      'glDisableVariantClientStateEXT',
      'glBindLightParameterEXT',
      'glBindMaterialParameterEXT',
      'glBindTexGenParameterEXT',
      'glBindTextureUnitParameterEXT',
      'glBindParameterEXT',
      'glIsVariantEnabledEXT',
      'glGetVariantBooleanvEXT',
      'glGetVariantIntegervEXT',
      'glGetVariantFloatvEXT',
      'glGetVariantPointervEXT',
      'glGetInvariantBooleanvEXT',
      'glGetInvariantIntegervEXT',
      'glGetInvariantFloatvEXT',
      'glGetLocalConstantBooleanvEXT',
      'glGetLocalConstantIntegervEXT',
      'glGetLocalConstantFloatvEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_shader


  def self.define_ext_command_GL_EXT_vertex_weighting
    GL::GL_FUNCTION_SYMBOLS << :glVertexWeightfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexWeightfEXT] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexWeightfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexWeightfEXT)
    GL.module_eval(<<-SRC)
      def self.VertexWeightfEXT(_weight_)
        GL_FUNCTIONS_MAP[:glVertexWeightfEXT].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexWeightfvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexWeightfvEXT] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexWeightfvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexWeightfvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexWeightfvEXT(_weight_)
        GL_FUNCTIONS_MAP[:glVertexWeightfvEXT].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexWeightPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexWeightPointerEXT] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexWeightPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexWeightPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexWeightPointerEXT(_size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexWeightPointerEXT].call(_size_, _type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_vertex_weighting

  def self.get_ext_command_GL_EXT_vertex_weighting
    [
      'glVertexWeightfEXT',
      'glVertexWeightfvEXT',
      'glVertexWeightPointerEXT',
    ]
  end # self.get_ext_command_GL_EXT_vertex_weighting


  def self.define_ext_command_GL_EXT_win32_keyed_mutex
    GL::GL_FUNCTION_SYMBOLS << :glAcquireKeyedMutexWin32EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glAcquireKeyedMutexWin32EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAcquireKeyedMutexWin32EXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glAcquireKeyedMutexWin32EXT)
    GL.module_eval(<<-SRC)
      def self.AcquireKeyedMutexWin32EXT(_memory_, _key_, _timeout_)
        GL_FUNCTIONS_MAP[:glAcquireKeyedMutexWin32EXT].call(_memory_, _key_, _timeout_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReleaseKeyedMutexWin32EXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glReleaseKeyedMutexWin32EXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReleaseKeyedMutexWin32EXT] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glReleaseKeyedMutexWin32EXT)
    GL.module_eval(<<-SRC)
      def self.ReleaseKeyedMutexWin32EXT(_memory_, _key_)
        GL_FUNCTIONS_MAP[:glReleaseKeyedMutexWin32EXT].call(_memory_, _key_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_win32_keyed_mutex

  def self.get_ext_command_GL_EXT_win32_keyed_mutex
    [
      'glAcquireKeyedMutexWin32EXT',
      'glReleaseKeyedMutexWin32EXT',
    ]
  end # self.get_ext_command_GL_EXT_win32_keyed_mutex


  def self.define_ext_command_GL_EXT_window_rectangles
    GL::GL_FUNCTION_SYMBOLS << :glWindowRectanglesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowRectanglesEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowRectanglesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowRectanglesEXT)
    GL.module_eval(<<-SRC)
      def self.WindowRectanglesEXT(_mode_, _count_, _box_)
        GL_FUNCTIONS_MAP[:glWindowRectanglesEXT].call(_mode_, _count_, _box_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_window_rectangles

  def self.get_ext_command_GL_EXT_window_rectangles
    [
      'glWindowRectanglesEXT',
    ]
  end # self.get_ext_command_GL_EXT_window_rectangles


  def self.define_ext_command_GL_EXT_x11_sync_object
    GL::GL_FUNCTION_SYMBOLS << :glImportSyncEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glImportSyncEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImportSyncEXT] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glImportSyncEXT)
    GL.module_eval(<<-SRC)
      def self.ImportSyncEXT(_external_sync_type_, _external_sync_, _flags_)
        GL_FUNCTIONS_MAP[:glImportSyncEXT].call(_external_sync_type_, _external_sync_, _flags_)
      end
    SRC
  end # self.define_ext_command_GL_EXT_x11_sync_object

  def self.get_ext_command_GL_EXT_x11_sync_object
    [
      'glImportSyncEXT',
    ]
  end # self.get_ext_command_GL_EXT_x11_sync_object


  def self.define_ext_command_GL_GREMEDY_frame_terminator
    GL::GL_FUNCTION_SYMBOLS << :glFrameTerminatorGREMEDY
    GL::GL_FUNCTIONS_ARGS_MAP[:glFrameTerminatorGREMEDY] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFrameTerminatorGREMEDY] = Fiddle::TYPE_VOID
    GL.bind_command(:glFrameTerminatorGREMEDY)
    GL.module_eval(<<-SRC)
      def self.FrameTerminatorGREMEDY()
        GL_FUNCTIONS_MAP[:glFrameTerminatorGREMEDY].call()
      end
    SRC
  end # self.define_ext_command_GL_GREMEDY_frame_terminator

  def self.get_ext_command_GL_GREMEDY_frame_terminator
    [
      'glFrameTerminatorGREMEDY',
    ]
  end # self.get_ext_command_GL_GREMEDY_frame_terminator


  def self.define_ext_command_GL_GREMEDY_string_marker
    GL::GL_FUNCTION_SYMBOLS << :glStringMarkerGREMEDY
    GL::GL_FUNCTIONS_ARGS_MAP[:glStringMarkerGREMEDY] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStringMarkerGREMEDY] = Fiddle::TYPE_VOID
    GL.bind_command(:glStringMarkerGREMEDY)
    GL.module_eval(<<-SRC)
      def self.StringMarkerGREMEDY(_len_, _string_)
        GL_FUNCTIONS_MAP[:glStringMarkerGREMEDY].call(_len_, _string_)
      end
    SRC
  end # self.define_ext_command_GL_GREMEDY_string_marker

  def self.get_ext_command_GL_GREMEDY_string_marker
    [
      'glStringMarkerGREMEDY',
    ]
  end # self.get_ext_command_GL_GREMEDY_string_marker


  def self.define_ext_command_GL_HP_convolution_border_modes
  end # self.define_ext_command_GL_HP_convolution_border_modes

  def self.get_ext_command_GL_HP_convolution_border_modes
    [
    ]
  end # self.get_ext_command_GL_HP_convolution_border_modes


  def self.define_ext_command_GL_HP_image_transform
    GL::GL_FUNCTION_SYMBOLS << :glImageTransformParameteriHP
    GL::GL_FUNCTIONS_ARGS_MAP[:glImageTransformParameteriHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImageTransformParameteriHP] = Fiddle::TYPE_VOID
    GL.bind_command(:glImageTransformParameteriHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameteriHP(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glImageTransformParameteriHP].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glImageTransformParameterfHP
    GL::GL_FUNCTIONS_ARGS_MAP[:glImageTransformParameterfHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImageTransformParameterfHP] = Fiddle::TYPE_VOID
    GL.bind_command(:glImageTransformParameterfHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameterfHP(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glImageTransformParameterfHP].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glImageTransformParameterivHP
    GL::GL_FUNCTIONS_ARGS_MAP[:glImageTransformParameterivHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImageTransformParameterivHP] = Fiddle::TYPE_VOID
    GL.bind_command(:glImageTransformParameterivHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameterivHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glImageTransformParameterivHP].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glImageTransformParameterfvHP
    GL::GL_FUNCTIONS_ARGS_MAP[:glImageTransformParameterfvHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glImageTransformParameterfvHP] = Fiddle::TYPE_VOID
    GL.bind_command(:glImageTransformParameterfvHP)
    GL.module_eval(<<-SRC)
      def self.ImageTransformParameterfvHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glImageTransformParameterfvHP].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetImageTransformParameterivHP
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetImageTransformParameterivHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetImageTransformParameterivHP] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetImageTransformParameterivHP)
    GL.module_eval(<<-SRC)
      def self.GetImageTransformParameterivHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetImageTransformParameterivHP].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetImageTransformParameterfvHP
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetImageTransformParameterfvHP] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetImageTransformParameterfvHP] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetImageTransformParameterfvHP)
    GL.module_eval(<<-SRC)
      def self.GetImageTransformParameterfvHP(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetImageTransformParameterfvHP].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_HP_image_transform

  def self.get_ext_command_GL_HP_image_transform
    [
      'glImageTransformParameteriHP',
      'glImageTransformParameterfHP',
      'glImageTransformParameterivHP',
      'glImageTransformParameterfvHP',
      'glGetImageTransformParameterivHP',
      'glGetImageTransformParameterfvHP',
    ]
  end # self.get_ext_command_GL_HP_image_transform


  def self.define_ext_command_GL_HP_occlusion_test
  end # self.define_ext_command_GL_HP_occlusion_test

  def self.get_ext_command_GL_HP_occlusion_test
    [
    ]
  end # self.get_ext_command_GL_HP_occlusion_test


  def self.define_ext_command_GL_HP_texture_lighting
  end # self.define_ext_command_GL_HP_texture_lighting

  def self.get_ext_command_GL_HP_texture_lighting
    [
    ]
  end # self.get_ext_command_GL_HP_texture_lighting


  def self.define_ext_command_GL_IBM_cull_vertex
  end # self.define_ext_command_GL_IBM_cull_vertex

  def self.get_ext_command_GL_IBM_cull_vertex
    [
    ]
  end # self.get_ext_command_GL_IBM_cull_vertex


  def self.define_ext_command_GL_IBM_multimode_draw_arrays
    GL::GL_FUNCTION_SYMBOLS << :glMultiModeDrawArraysIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiModeDrawArraysIBM] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiModeDrawArraysIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiModeDrawArraysIBM)
    GL.module_eval(<<-SRC)
      def self.MultiModeDrawArraysIBM(_mode_, _first_, _count_, _primcount_, _modestride_)
        GL_FUNCTIONS_MAP[:glMultiModeDrawArraysIBM].call(_mode_, _first_, _count_, _primcount_, _modestride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiModeDrawElementsIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiModeDrawElementsIBM] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiModeDrawElementsIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiModeDrawElementsIBM)
    GL.module_eval(<<-SRC)
      def self.MultiModeDrawElementsIBM(_mode_, _count_, _type_, _indices_, _primcount_, _modestride_)
        GL_FUNCTIONS_MAP[:glMultiModeDrawElementsIBM].call(_mode_, _count_, _type_, _indices_, _primcount_, _modestride_)
      end
    SRC
  end # self.define_ext_command_GL_IBM_multimode_draw_arrays

  def self.get_ext_command_GL_IBM_multimode_draw_arrays
    [
      'glMultiModeDrawArraysIBM',
      'glMultiModeDrawElementsIBM',
    ]
  end # self.get_ext_command_GL_IBM_multimode_draw_arrays


  def self.define_ext_command_GL_IBM_rasterpos_clip
  end # self.define_ext_command_GL_IBM_rasterpos_clip

  def self.get_ext_command_GL_IBM_rasterpos_clip
    [
    ]
  end # self.get_ext_command_GL_IBM_rasterpos_clip


  def self.define_ext_command_GL_IBM_static_data
    GL::GL_FUNCTION_SYMBOLS << :glFlushStaticDataIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushStaticDataIBM] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushStaticDataIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushStaticDataIBM)
    GL.module_eval(<<-SRC)
      def self.FlushStaticDataIBM(_target_)
        GL_FUNCTIONS_MAP[:glFlushStaticDataIBM].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_IBM_static_data

  def self.get_ext_command_GL_IBM_static_data
    [
      'glFlushStaticDataIBM',
    ]
  end # self.get_ext_command_GL_IBM_static_data


  def self.define_ext_command_GL_IBM_texture_mirrored_repeat
  end # self.define_ext_command_GL_IBM_texture_mirrored_repeat

  def self.get_ext_command_GL_IBM_texture_mirrored_repeat
    [
    ]
  end # self.get_ext_command_GL_IBM_texture_mirrored_repeat


  def self.define_ext_command_GL_IBM_vertex_array_lists
    GL::GL_FUNCTION_SYMBOLS << :glColorPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.ColorPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glColorPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColorPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColorPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColorPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColorPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glSecondaryColorPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEdgeFlagPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glEdgeFlagPointerListIBM] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEdgeFlagPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glEdgeFlagPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.EdgeFlagPointerListIBM(_stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glEdgeFlagPointerListIBM].call(_stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoordPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordPointerListIBM] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.FogCoordPointerListIBM(_type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glFogCoordPointerListIBM].call(_type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIndexPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexPointerListIBM] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.IndexPointerListIBM(_type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glIndexPointerListIBM].call(_type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalPointerListIBM] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.NormalPointerListIBM(_type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glNormalPointerListIBM].call(_type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.TexCoordPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glTexCoordPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexPointerListIBM
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexPointerListIBM] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexPointerListIBM] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexPointerListIBM)
    GL.module_eval(<<-SRC)
      def self.VertexPointerListIBM(_size_, _type_, _stride_, _pointer_, _ptrstride_)
        GL_FUNCTIONS_MAP[:glVertexPointerListIBM].call(_size_, _type_, _stride_, _pointer_, _ptrstride_)
      end
    SRC
  end # self.define_ext_command_GL_IBM_vertex_array_lists

  def self.get_ext_command_GL_IBM_vertex_array_lists
    [
      'glColorPointerListIBM',
      'glSecondaryColorPointerListIBM',
      'glEdgeFlagPointerListIBM',
      'glFogCoordPointerListIBM',
      'glIndexPointerListIBM',
      'glNormalPointerListIBM',
      'glTexCoordPointerListIBM',
      'glVertexPointerListIBM',
    ]
  end # self.get_ext_command_GL_IBM_vertex_array_lists


  def self.define_ext_command_GL_INGR_blend_func_separate
    GL::GL_FUNCTION_SYMBOLS << :glBlendFuncSeparateINGR
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendFuncSeparateINGR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendFuncSeparateINGR] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendFuncSeparateINGR)
    GL.module_eval(<<-SRC)
      def self.BlendFuncSeparateINGR(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
        GL_FUNCTIONS_MAP[:glBlendFuncSeparateINGR].call(_sfactorRGB_, _dfactorRGB_, _sfactorAlpha_, _dfactorAlpha_)
      end
    SRC
  end # self.define_ext_command_GL_INGR_blend_func_separate

  def self.get_ext_command_GL_INGR_blend_func_separate
    [
      'glBlendFuncSeparateINGR',
    ]
  end # self.get_ext_command_GL_INGR_blend_func_separate


  def self.define_ext_command_GL_INGR_color_clamp
  end # self.define_ext_command_GL_INGR_color_clamp

  def self.get_ext_command_GL_INGR_color_clamp
    [
    ]
  end # self.get_ext_command_GL_INGR_color_clamp


  def self.define_ext_command_GL_INGR_interlace_read
  end # self.define_ext_command_GL_INGR_interlace_read

  def self.get_ext_command_GL_INGR_interlace_read
    [
    ]
  end # self.get_ext_command_GL_INGR_interlace_read


  def self.define_ext_command_GL_INTEL_conservative_rasterization
  end # self.define_ext_command_GL_INTEL_conservative_rasterization

  def self.get_ext_command_GL_INTEL_conservative_rasterization
    [
    ]
  end # self.get_ext_command_GL_INTEL_conservative_rasterization


  def self.define_ext_command_GL_INTEL_fragment_shader_ordering
  end # self.define_ext_command_GL_INTEL_fragment_shader_ordering

  def self.get_ext_command_GL_INTEL_fragment_shader_ordering
    [
    ]
  end # self.get_ext_command_GL_INTEL_fragment_shader_ordering


  def self.define_ext_command_GL_INTEL_framebuffer_CMAA
    GL::GL_FUNCTION_SYMBOLS << :glApplyFramebufferAttachmentCMAAINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glApplyFramebufferAttachmentCMAAINTEL] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glApplyFramebufferAttachmentCMAAINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glApplyFramebufferAttachmentCMAAINTEL)
    GL.module_eval(<<-SRC)
      def self.ApplyFramebufferAttachmentCMAAINTEL()
        GL_FUNCTIONS_MAP[:glApplyFramebufferAttachmentCMAAINTEL].call()
      end
    SRC
  end # self.define_ext_command_GL_INTEL_framebuffer_CMAA

  def self.get_ext_command_GL_INTEL_framebuffer_CMAA
    [
      'glApplyFramebufferAttachmentCMAAINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_framebuffer_CMAA


  def self.define_ext_command_GL_INTEL_map_texture
    GL::GL_FUNCTION_SYMBOLS << :glSyncTextureINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glSyncTextureINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSyncTextureINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glSyncTextureINTEL)
    GL.module_eval(<<-SRC)
      def self.SyncTextureINTEL(_texture_)
        GL_FUNCTIONS_MAP[:glSyncTextureINTEL].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUnmapTexture2DINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glUnmapTexture2DINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUnmapTexture2DINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glUnmapTexture2DINTEL)
    GL.module_eval(<<-SRC)
      def self.UnmapTexture2DINTEL(_texture_, _level_)
        GL_FUNCTIONS_MAP[:glUnmapTexture2DINTEL].call(_texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapTexture2DINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapTexture2DINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapTexture2DINTEL] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glMapTexture2DINTEL)
    GL.module_eval(<<-SRC)
      def self.MapTexture2DINTEL(_texture_, _level_, _access_, _stride_, _layout_)
        GL_FUNCTIONS_MAP[:glMapTexture2DINTEL].call(_texture_, _level_, _access_, _stride_, _layout_)
      end
    SRC
  end # self.define_ext_command_GL_INTEL_map_texture

  def self.get_ext_command_GL_INTEL_map_texture
    [
      'glSyncTextureINTEL',
      'glUnmapTexture2DINTEL',
      'glMapTexture2DINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_map_texture


  def self.define_ext_command_GL_INTEL_blackhole_render
  end # self.define_ext_command_GL_INTEL_blackhole_render

  def self.get_ext_command_GL_INTEL_blackhole_render
    [
    ]
  end # self.get_ext_command_GL_INTEL_blackhole_render


  def self.define_ext_command_GL_INTEL_parallel_arrays
    GL::GL_FUNCTION_SYMBOLS << :glVertexPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexPointervINTEL] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.VertexPointervINTEL(_size_, _type_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexPointervINTEL].call(_size_, _type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalPointervINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.NormalPointervINTEL(_type_, _pointer_)
        GL_FUNCTIONS_MAP[:glNormalPointervINTEL].call(_type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorPointervINTEL] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.ColorPointervINTEL(_size_, _type_, _pointer_)
        GL_FUNCTIONS_MAP[:glColorPointervINTEL].call(_size_, _type_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordPointervINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordPointervINTEL] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordPointervINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordPointervINTEL)
    GL.module_eval(<<-SRC)
      def self.TexCoordPointervINTEL(_size_, _type_, _pointer_)
        GL_FUNCTIONS_MAP[:glTexCoordPointervINTEL].call(_size_, _type_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_INTEL_parallel_arrays

  def self.get_ext_command_GL_INTEL_parallel_arrays
    [
      'glVertexPointervINTEL',
      'glNormalPointervINTEL',
      'glColorPointervINTEL',
      'glTexCoordPointervINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_parallel_arrays


  def self.define_ext_command_GL_INTEL_performance_query
    GL::GL_FUNCTION_SYMBOLS << :glBeginPerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginPerfQueryINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginPerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginPerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.BeginPerfQueryINTEL(_queryHandle_)
        GL_FUNCTIONS_MAP[:glBeginPerfQueryINTEL].call(_queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreatePerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreatePerfQueryINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreatePerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreatePerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.CreatePerfQueryINTEL(_queryId_, _queryHandle_)
        GL_FUNCTIONS_MAP[:glCreatePerfQueryINTEL].call(_queryId_, _queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeletePerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeletePerfQueryINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeletePerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeletePerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.DeletePerfQueryINTEL(_queryHandle_)
        GL_FUNCTIONS_MAP[:glDeletePerfQueryINTEL].call(_queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndPerfQueryINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndPerfQueryINTEL] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndPerfQueryINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndPerfQueryINTEL)
    GL.module_eval(<<-SRC)
      def self.EndPerfQueryINTEL(_queryHandle_)
        GL_FUNCTIONS_MAP[:glEndPerfQueryINTEL].call(_queryHandle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFirstPerfQueryIdINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFirstPerfQueryIdINTEL] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFirstPerfQueryIdINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFirstPerfQueryIdINTEL)
    GL.module_eval(<<-SRC)
      def self.GetFirstPerfQueryIdINTEL(_queryId_)
        GL_FUNCTIONS_MAP[:glGetFirstPerfQueryIdINTEL].call(_queryId_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNextPerfQueryIdINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNextPerfQueryIdINTEL] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNextPerfQueryIdINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNextPerfQueryIdINTEL)
    GL.module_eval(<<-SRC)
      def self.GetNextPerfQueryIdINTEL(_queryId_, _nextQueryId_)
        GL_FUNCTIONS_MAP[:glGetNextPerfQueryIdINTEL].call(_queryId_, _nextQueryId_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfCounterInfoINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfCounterInfoINTEL] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfCounterInfoINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfCounterInfoINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfCounterInfoINTEL(_queryId_, _counterId_, _counterNameLength_, _counterName_, _counterDescLength_, _counterDesc_, _counterOffset_, _counterDataSize_, _counterTypeEnum_, _counterDataTypeEnum_, _rawCounterMaxValue_)
        GL_FUNCTIONS_MAP[:glGetPerfCounterInfoINTEL].call(_queryId_, _counterId_, _counterNameLength_, _counterName_, _counterDescLength_, _counterDesc_, _counterOffset_, _counterDataSize_, _counterTypeEnum_, _counterDataTypeEnum_, _rawCounterMaxValue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfQueryDataINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfQueryDataINTEL] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfQueryDataINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfQueryDataINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfQueryDataINTEL(_queryHandle_, _flags_, _dataSize_, _data_, _bytesWritten_)
        GL_FUNCTIONS_MAP[:glGetPerfQueryDataINTEL].call(_queryHandle_, _flags_, _dataSize_, _data_, _bytesWritten_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfQueryIdByNameINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfQueryIdByNameINTEL] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfQueryIdByNameINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfQueryIdByNameINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfQueryIdByNameINTEL(_queryName_, _queryId_)
        GL_FUNCTIONS_MAP[:glGetPerfQueryIdByNameINTEL].call(_queryName_, _queryId_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPerfQueryInfoINTEL
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPerfQueryInfoINTEL] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPerfQueryInfoINTEL] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPerfQueryInfoINTEL)
    GL.module_eval(<<-SRC)
      def self.GetPerfQueryInfoINTEL(_queryId_, _queryNameLength_, _queryName_, _dataSize_, _noCounters_, _noInstances_, _capsMask_)
        GL_FUNCTIONS_MAP[:glGetPerfQueryInfoINTEL].call(_queryId_, _queryNameLength_, _queryName_, _dataSize_, _noCounters_, _noInstances_, _capsMask_)
      end
    SRC
  end # self.define_ext_command_GL_INTEL_performance_query

  def self.get_ext_command_GL_INTEL_performance_query
    [
      'glBeginPerfQueryINTEL',
      'glCreatePerfQueryINTEL',
      'glDeletePerfQueryINTEL',
      'glEndPerfQueryINTEL',
      'glGetFirstPerfQueryIdINTEL',
      'glGetNextPerfQueryIdINTEL',
      'glGetPerfCounterInfoINTEL',
      'glGetPerfQueryDataINTEL',
      'glGetPerfQueryIdByNameINTEL',
      'glGetPerfQueryInfoINTEL',
    ]
  end # self.get_ext_command_GL_INTEL_performance_query


  def self.define_ext_command_GL_KHR_blend_equation_advanced
    GL::GL_FUNCTION_SYMBOLS << :glBlendBarrierKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendBarrierKHR] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendBarrierKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendBarrierKHR)
    GL.module_eval(<<-SRC)
      def self.BlendBarrierKHR()
        GL_FUNCTIONS_MAP[:glBlendBarrierKHR].call()
      end
    SRC
  end # self.define_ext_command_GL_KHR_blend_equation_advanced

  def self.get_ext_command_GL_KHR_blend_equation_advanced
    [
      'glBlendBarrierKHR',
    ]
  end # self.get_ext_command_GL_KHR_blend_equation_advanced


  def self.define_ext_command_GL_KHR_blend_equation_advanced_coherent
  end # self.define_ext_command_GL_KHR_blend_equation_advanced_coherent

  def self.get_ext_command_GL_KHR_blend_equation_advanced_coherent
    [
    ]
  end # self.get_ext_command_GL_KHR_blend_equation_advanced_coherent


  def self.define_ext_command_GL_KHR_context_flush_control
  end # self.define_ext_command_GL_KHR_context_flush_control

  def self.get_ext_command_GL_KHR_context_flush_control
    [
    ]
  end # self.get_ext_command_GL_KHR_context_flush_control


  def self.define_ext_command_GL_KHR_debug
    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageControl
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageControl] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageControl] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageControl)
    GL.module_eval(<<-SRC)
      def self.DebugMessageControl(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:glDebugMessageControl].call(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageInsert
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageInsert] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageInsert] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageInsert)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsert(_source_, _type_, _id_, _severity_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:glDebugMessageInsert].call(_source_, _type_, _id_, _severity_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageCallback
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageCallback] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageCallback] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageCallback)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallback(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:glDebugMessageCallback].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDebugMessageLog
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDebugMessageLog] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDebugMessageLog] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetDebugMessageLog)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLog(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
        GL_FUNCTIONS_MAP[:glGetDebugMessageLog].call(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPushDebugGroup
    GL::GL_FUNCTIONS_ARGS_MAP[:glPushDebugGroup] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPushDebugGroup] = Fiddle::TYPE_VOID
    GL.bind_command(:glPushDebugGroup)
    GL.module_eval(<<-SRC)
      def self.PushDebugGroup(_source_, _id_, _length_, _message_)
        GL_FUNCTIONS_MAP[:glPushDebugGroup].call(_source_, _id_, _length_, _message_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPopDebugGroup
    GL::GL_FUNCTIONS_ARGS_MAP[:glPopDebugGroup] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPopDebugGroup] = Fiddle::TYPE_VOID
    GL.bind_command(:glPopDebugGroup)
    GL.module_eval(<<-SRC)
      def self.PopDebugGroup()
        GL_FUNCTIONS_MAP[:glPopDebugGroup].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glObjectLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:glObjectLabel] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glObjectLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:glObjectLabel)
    GL.module_eval(<<-SRC)
      def self.ObjectLabel(_identifier_, _name_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glObjectLabel].call(_identifier_, _name_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectLabel] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectLabel)
    GL.module_eval(<<-SRC)
      def self.GetObjectLabel(_identifier_, _name_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glGetObjectLabel].call(_identifier_, _name_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glObjectPtrLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:glObjectPtrLabel] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glObjectPtrLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:glObjectPtrLabel)
    GL.module_eval(<<-SRC)
      def self.ObjectPtrLabel(_ptr_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glObjectPtrLabel].call(_ptr_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectPtrLabel
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectPtrLabel] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectPtrLabel] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectPtrLabel)
    GL.module_eval(<<-SRC)
      def self.GetObjectPtrLabel(_ptr_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glGetObjectPtrLabel].call(_ptr_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPointerv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPointerv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPointerv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPointerv)
    GL.module_eval(<<-SRC)
      def self.GetPointerv(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPointerv].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageControlKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageControlKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageControlKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageControlKHR)
    GL.module_eval(<<-SRC)
      def self.DebugMessageControlKHR(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
        GL_FUNCTIONS_MAP[:glDebugMessageControlKHR].call(_source_, _type_, _severity_, _count_, _ids_, _enabled_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageInsertKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageInsertKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageInsertKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageInsertKHR)
    GL.module_eval(<<-SRC)
      def self.DebugMessageInsertKHR(_source_, _type_, _id_, _severity_, _length_, _buf_)
        GL_FUNCTIONS_MAP[:glDebugMessageInsertKHR].call(_source_, _type_, _id_, _severity_, _length_, _buf_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDebugMessageCallbackKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glDebugMessageCallbackKHR] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDebugMessageCallbackKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glDebugMessageCallbackKHR)
    GL.module_eval(<<-SRC)
      def self.DebugMessageCallbackKHR(_callback_, _userParam_)
        GL_FUNCTIONS_MAP[:glDebugMessageCallbackKHR].call(_callback_, _userParam_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDebugMessageLogKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDebugMessageLogKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDebugMessageLogKHR] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetDebugMessageLogKHR)
    GL.module_eval(<<-SRC)
      def self.GetDebugMessageLogKHR(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
        GL_FUNCTIONS_MAP[:glGetDebugMessageLogKHR].call(_count_, _bufSize_, _sources_, _types_, _ids_, _severities_, _lengths_, _messageLog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPushDebugGroupKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glPushDebugGroupKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPushDebugGroupKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glPushDebugGroupKHR)
    GL.module_eval(<<-SRC)
      def self.PushDebugGroupKHR(_source_, _id_, _length_, _message_)
        GL_FUNCTIONS_MAP[:glPushDebugGroupKHR].call(_source_, _id_, _length_, _message_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPopDebugGroupKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glPopDebugGroupKHR] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPopDebugGroupKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glPopDebugGroupKHR)
    GL.module_eval(<<-SRC)
      def self.PopDebugGroupKHR()
        GL_FUNCTIONS_MAP[:glPopDebugGroupKHR].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glObjectLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glObjectLabelKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glObjectLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glObjectLabelKHR)
    GL.module_eval(<<-SRC)
      def self.ObjectLabelKHR(_identifier_, _name_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glObjectLabelKHR].call(_identifier_, _name_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectLabelKHR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectLabelKHR)
    GL.module_eval(<<-SRC)
      def self.GetObjectLabelKHR(_identifier_, _name_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glGetObjectLabelKHR].call(_identifier_, _name_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glObjectPtrLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glObjectPtrLabelKHR] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glObjectPtrLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glObjectPtrLabelKHR)
    GL.module_eval(<<-SRC)
      def self.ObjectPtrLabelKHR(_ptr_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glObjectPtrLabelKHR].call(_ptr_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetObjectPtrLabelKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetObjectPtrLabelKHR] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetObjectPtrLabelKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetObjectPtrLabelKHR)
    GL.module_eval(<<-SRC)
      def self.GetObjectPtrLabelKHR(_ptr_, _bufSize_, _length_, _label_)
        GL_FUNCTIONS_MAP[:glGetObjectPtrLabelKHR].call(_ptr_, _bufSize_, _length_, _label_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPointervKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPointervKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPointervKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPointervKHR)
    GL.module_eval(<<-SRC)
      def self.GetPointervKHR(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPointervKHR].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_KHR_debug

  def self.get_ext_command_GL_KHR_debug
    [
      'glDebugMessageControl',
      'glDebugMessageInsert',
      'glDebugMessageCallback',
      'glGetDebugMessageLog',
      'glPushDebugGroup',
      'glPopDebugGroup',
      'glObjectLabel',
      'glGetObjectLabel',
      'glObjectPtrLabel',
      'glGetObjectPtrLabel',
      'glGetPointerv',
      'glDebugMessageControlKHR',
      'glDebugMessageInsertKHR',
      'glDebugMessageCallbackKHR',
      'glGetDebugMessageLogKHR',
      'glPushDebugGroupKHR',
      'glPopDebugGroupKHR',
      'glObjectLabelKHR',
      'glGetObjectLabelKHR',
      'glObjectPtrLabelKHR',
      'glGetObjectPtrLabelKHR',
      'glGetPointervKHR',
    ]
  end # self.get_ext_command_GL_KHR_debug


  def self.define_ext_command_GL_KHR_no_error
  end # self.define_ext_command_GL_KHR_no_error

  def self.get_ext_command_GL_KHR_no_error
    [
    ]
  end # self.get_ext_command_GL_KHR_no_error


  def self.define_ext_command_GL_KHR_robust_buffer_access_behavior
  end # self.define_ext_command_GL_KHR_robust_buffer_access_behavior

  def self.get_ext_command_GL_KHR_robust_buffer_access_behavior
    [
    ]
  end # self.get_ext_command_GL_KHR_robust_buffer_access_behavior


  def self.define_ext_command_GL_KHR_robustness
    GL::GL_FUNCTION_SYMBOLS << :glGetGraphicsResetStatus
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetGraphicsResetStatus] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetGraphicsResetStatus] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetGraphicsResetStatus)
    GL.module_eval(<<-SRC)
      def self.GetGraphicsResetStatus()
        GL_FUNCTIONS_MAP[:glGetGraphicsResetStatus].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReadnPixels
    GL::GL_FUNCTIONS_ARGS_MAP[:glReadnPixels] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReadnPixels] = Fiddle::TYPE_VOID
    GL.bind_command(:glReadnPixels)
    GL.module_eval(<<-SRC)
      def self.ReadnPixels(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
        GL_FUNCTIONS_MAP[:glReadnPixels].call(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformfv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformfv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformfv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformfv)
    GL.module_eval(<<-SRC)
      def self.GetnUniformfv(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformfv].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformiv)
    GL.module_eval(<<-SRC)
      def self.GetnUniformiv(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformiv].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformuiv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformuiv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformuiv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformuiv)
    GL.module_eval(<<-SRC)
      def self.GetnUniformuiv(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformuiv].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetGraphicsResetStatusKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetGraphicsResetStatusKHR] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetGraphicsResetStatusKHR] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetGraphicsResetStatusKHR)
    GL.module_eval(<<-SRC)
      def self.GetGraphicsResetStatusKHR()
        GL_FUNCTIONS_MAP[:glGetGraphicsResetStatusKHR].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReadnPixelsKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glReadnPixelsKHR] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReadnPixelsKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glReadnPixelsKHR)
    GL.module_eval(<<-SRC)
      def self.ReadnPixelsKHR(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
        GL_FUNCTIONS_MAP[:glReadnPixelsKHR].call(_x_, _y_, _width_, _height_, _format_, _type_, _bufSize_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformfvKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformfvKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformfvKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformfvKHR)
    GL.module_eval(<<-SRC)
      def self.GetnUniformfvKHR(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformfvKHR].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformivKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformivKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformivKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformivKHR)
    GL.module_eval(<<-SRC)
      def self.GetnUniformivKHR(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformivKHR].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetnUniformuivKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetnUniformuivKHR] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetnUniformuivKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetnUniformuivKHR)
    GL.module_eval(<<-SRC)
      def self.GetnUniformuivKHR(_program_, _location_, _bufSize_, _params_)
        GL_FUNCTIONS_MAP[:glGetnUniformuivKHR].call(_program_, _location_, _bufSize_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_KHR_robustness

  def self.get_ext_command_GL_KHR_robustness
    [
      'glGetGraphicsResetStatus',
      'glReadnPixels',
      'glGetnUniformfv',
      'glGetnUniformiv',
      'glGetnUniformuiv',
      'glGetGraphicsResetStatusKHR',
      'glReadnPixelsKHR',
      'glGetnUniformfvKHR',
      'glGetnUniformivKHR',
      'glGetnUniformuivKHR',
    ]
  end # self.get_ext_command_GL_KHR_robustness


  def self.define_ext_command_GL_KHR_shader_subgroup
  end # self.define_ext_command_GL_KHR_shader_subgroup

  def self.get_ext_command_GL_KHR_shader_subgroup
    [
    ]
  end # self.get_ext_command_GL_KHR_shader_subgroup


  def self.define_ext_command_GL_KHR_texture_compression_astc_hdr
  end # self.define_ext_command_GL_KHR_texture_compression_astc_hdr

  def self.get_ext_command_GL_KHR_texture_compression_astc_hdr
    [
    ]
  end # self.get_ext_command_GL_KHR_texture_compression_astc_hdr


  def self.define_ext_command_GL_KHR_texture_compression_astc_ldr
  end # self.define_ext_command_GL_KHR_texture_compression_astc_ldr

  def self.get_ext_command_GL_KHR_texture_compression_astc_ldr
    [
    ]
  end # self.get_ext_command_GL_KHR_texture_compression_astc_ldr


  def self.define_ext_command_GL_KHR_texture_compression_astc_sliced_3d
  end # self.define_ext_command_GL_KHR_texture_compression_astc_sliced_3d

  def self.get_ext_command_GL_KHR_texture_compression_astc_sliced_3d
    [
    ]
  end # self.get_ext_command_GL_KHR_texture_compression_astc_sliced_3d


  def self.define_ext_command_GL_KHR_parallel_shader_compile
    GL::GL_FUNCTION_SYMBOLS << :glMaxShaderCompilerThreadsKHR
    GL::GL_FUNCTIONS_ARGS_MAP[:glMaxShaderCompilerThreadsKHR] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMaxShaderCompilerThreadsKHR] = Fiddle::TYPE_VOID
    GL.bind_command(:glMaxShaderCompilerThreadsKHR)
    GL.module_eval(<<-SRC)
      def self.MaxShaderCompilerThreadsKHR(_count_)
        GL_FUNCTIONS_MAP[:glMaxShaderCompilerThreadsKHR].call(_count_)
      end
    SRC
  end # self.define_ext_command_GL_KHR_parallel_shader_compile

  def self.get_ext_command_GL_KHR_parallel_shader_compile
    [
      'glMaxShaderCompilerThreadsKHR',
    ]
  end # self.get_ext_command_GL_KHR_parallel_shader_compile


  def self.define_ext_command_GL_MESAX_texture_stack
  end # self.define_ext_command_GL_MESAX_texture_stack

  def self.get_ext_command_GL_MESAX_texture_stack
    [
    ]
  end # self.get_ext_command_GL_MESAX_texture_stack


  def self.define_ext_command_GL_MESA_framebuffer_flip_x
  end # self.define_ext_command_GL_MESA_framebuffer_flip_x

  def self.get_ext_command_GL_MESA_framebuffer_flip_x
    [
    ]
  end # self.get_ext_command_GL_MESA_framebuffer_flip_x


  def self.define_ext_command_GL_MESA_framebuffer_flip_y
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferParameteriMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferParameteriMESA] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferParameteriMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferParameteriMESA)
    GL.module_eval(<<-SRC)
      def self.FramebufferParameteriMESA(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glFramebufferParameteriMESA].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFramebufferParameterivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFramebufferParameterivMESA] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFramebufferParameterivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFramebufferParameterivMESA)
    GL.module_eval(<<-SRC)
      def self.GetFramebufferParameterivMESA(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFramebufferParameterivMESA].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_MESA_framebuffer_flip_y

  def self.get_ext_command_GL_MESA_framebuffer_flip_y
    [
      'glFramebufferParameteriMESA',
      'glGetFramebufferParameterivMESA',
    ]
  end # self.get_ext_command_GL_MESA_framebuffer_flip_y


  def self.define_ext_command_GL_MESA_framebuffer_swap_xy
  end # self.define_ext_command_GL_MESA_framebuffer_swap_xy

  def self.get_ext_command_GL_MESA_framebuffer_swap_xy
    [
    ]
  end # self.get_ext_command_GL_MESA_framebuffer_swap_xy


  def self.define_ext_command_GL_MESA_pack_invert
  end # self.define_ext_command_GL_MESA_pack_invert

  def self.get_ext_command_GL_MESA_pack_invert
    [
    ]
  end # self.get_ext_command_GL_MESA_pack_invert


  def self.define_ext_command_GL_MESA_program_binary_formats
  end # self.define_ext_command_GL_MESA_program_binary_formats

  def self.get_ext_command_GL_MESA_program_binary_formats
    [
    ]
  end # self.get_ext_command_GL_MESA_program_binary_formats


  def self.define_ext_command_GL_MESA_resize_buffers
    GL::GL_FUNCTION_SYMBOLS << :glResizeBuffersMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glResizeBuffersMESA] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResizeBuffersMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glResizeBuffersMESA)
    GL.module_eval(<<-SRC)
      def self.ResizeBuffersMESA()
        GL_FUNCTIONS_MAP[:glResizeBuffersMESA].call()
      end
    SRC
  end # self.define_ext_command_GL_MESA_resize_buffers

  def self.get_ext_command_GL_MESA_resize_buffers
    [
      'glResizeBuffersMESA',
    ]
  end # self.get_ext_command_GL_MESA_resize_buffers


  def self.define_ext_command_GL_MESA_shader_integer_functions
  end # self.define_ext_command_GL_MESA_shader_integer_functions

  def self.get_ext_command_GL_MESA_shader_integer_functions
    [
    ]
  end # self.get_ext_command_GL_MESA_shader_integer_functions


  def self.define_ext_command_GL_MESA_tile_raster_order
  end # self.define_ext_command_GL_MESA_tile_raster_order

  def self.get_ext_command_GL_MESA_tile_raster_order
    [
    ]
  end # self.get_ext_command_GL_MESA_tile_raster_order


  def self.define_ext_command_GL_MESA_window_pos
    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2dMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2dMESA] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2dMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2dMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2dMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2dvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2dvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2dvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2dvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2dvMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2dvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2fMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2fMESA] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2fMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2fMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2fMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2fvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2fvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2fvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2fvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2fvMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2fvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2iMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2iMESA] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2iMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2iMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2iMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2iMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2ivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2ivMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2ivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2ivMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2ivMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2ivMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2sMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2sMESA] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2sMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2sMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2sMESA(_x_, _y_)
        GL_FUNCTIONS_MAP[:glWindowPos2sMESA].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos2svMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos2svMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos2svMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos2svMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos2svMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos2svMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3dMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3dMESA] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3dMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3dMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3dMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3dvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3dvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3dvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3dvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3dvMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3dvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3fMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3fMESA] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3fMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3fMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3fMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3fvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3fvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3fvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3fvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3fvMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3fvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3iMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3iMESA] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3iMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3iMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3iMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3iMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3ivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3ivMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3ivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3ivMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3ivMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3ivMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3sMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3sMESA] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3sMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3sMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3sMESA(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glWindowPos3sMESA].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos3svMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos3svMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos3svMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos3svMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos3svMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos3svMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4dMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4dMESA] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4dMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4dMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4dMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glWindowPos4dMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4dvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4dvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4dvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4dvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4dvMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos4dvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4fMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4fMESA] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4fMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4fMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4fMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glWindowPos4fMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4fvMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4fvMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4fvMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4fvMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4fvMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos4fvMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4iMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4iMESA] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4iMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4iMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4iMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glWindowPos4iMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4ivMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4ivMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4ivMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4ivMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4ivMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos4ivMESA].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4sMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4sMESA] = [Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4sMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4sMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4sMESA(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glWindowPos4sMESA].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWindowPos4svMESA
    GL::GL_FUNCTIONS_ARGS_MAP[:glWindowPos4svMESA] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWindowPos4svMESA] = Fiddle::TYPE_VOID
    GL.bind_command(:glWindowPos4svMESA)
    GL.module_eval(<<-SRC)
      def self.WindowPos4svMESA(_v_)
        GL_FUNCTIONS_MAP[:glWindowPos4svMESA].call(_v_)
      end
    SRC
  end # self.define_ext_command_GL_MESA_window_pos

  def self.get_ext_command_GL_MESA_window_pos
    [
      'glWindowPos2dMESA',
      'glWindowPos2dvMESA',
      'glWindowPos2fMESA',
      'glWindowPos2fvMESA',
      'glWindowPos2iMESA',
      'glWindowPos2ivMESA',
      'glWindowPos2sMESA',
      'glWindowPos2svMESA',
      'glWindowPos3dMESA',
      'glWindowPos3dvMESA',
      'glWindowPos3fMESA',
      'glWindowPos3fvMESA',
      'glWindowPos3iMESA',
      'glWindowPos3ivMESA',
      'glWindowPos3sMESA',
      'glWindowPos3svMESA',
      'glWindowPos4dMESA',
      'glWindowPos4dvMESA',
      'glWindowPos4fMESA',
      'glWindowPos4fvMESA',
      'glWindowPos4iMESA',
      'glWindowPos4ivMESA',
      'glWindowPos4sMESA',
      'glWindowPos4svMESA',
    ]
  end # self.get_ext_command_GL_MESA_window_pos


  def self.define_ext_command_GL_MESA_ycbcr_texture
  end # self.define_ext_command_GL_MESA_ycbcr_texture

  def self.get_ext_command_GL_MESA_ycbcr_texture
    [
    ]
  end # self.get_ext_command_GL_MESA_ycbcr_texture


  def self.define_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers
  end # self.define_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers

  def self.get_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers
    [
    ]
  end # self.get_ext_command_GL_NVX_blend_equation_advanced_multi_draw_buffers


  def self.define_ext_command_GL_NVX_conditional_render
    GL::GL_FUNCTION_SYMBOLS << :glBeginConditionalRenderNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginConditionalRenderNVX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginConditionalRenderNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginConditionalRenderNVX)
    GL.module_eval(<<-SRC)
      def self.BeginConditionalRenderNVX(_id_)
        GL_FUNCTIONS_MAP[:glBeginConditionalRenderNVX].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndConditionalRenderNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndConditionalRenderNVX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndConditionalRenderNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndConditionalRenderNVX)
    GL.module_eval(<<-SRC)
      def self.EndConditionalRenderNVX()
        GL_FUNCTIONS_MAP[:glEndConditionalRenderNVX].call()
      end
    SRC
  end # self.define_ext_command_GL_NVX_conditional_render

  def self.get_ext_command_GL_NVX_conditional_render
    [
      'glBeginConditionalRenderNVX',
      'glEndConditionalRenderNVX',
    ]
  end # self.get_ext_command_GL_NVX_conditional_render


  def self.define_ext_command_GL_NVX_gpu_memory_info
  end # self.define_ext_command_GL_NVX_gpu_memory_info

  def self.get_ext_command_GL_NVX_gpu_memory_info
    [
    ]
  end # self.get_ext_command_GL_NVX_gpu_memory_info


  def self.define_ext_command_GL_NVX_linked_gpu_multicast
    GL::GL_FUNCTION_SYMBOLS << :glLGPUNamedBufferSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glLGPUNamedBufferSubDataNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLGPUNamedBufferSubDataNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glLGPUNamedBufferSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.LGPUNamedBufferSubDataNVX(_gpuMask_, _buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glLGPUNamedBufferSubDataNVX].call(_gpuMask_, _buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLGPUCopyImageSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glLGPUCopyImageSubDataNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLGPUCopyImageSubDataNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glLGPUCopyImageSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.LGPUCopyImageSubDataNVX(_sourceGpu_, _destinationGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srxY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glLGPUCopyImageSubDataNVX].call(_sourceGpu_, _destinationGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srxY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLGPUInterlockNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glLGPUInterlockNVX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLGPUInterlockNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glLGPUInterlockNVX)
    GL.module_eval(<<-SRC)
      def self.LGPUInterlockNVX()
        GL_FUNCTIONS_MAP[:glLGPUInterlockNVX].call()
      end
    SRC
  end # self.define_ext_command_GL_NVX_linked_gpu_multicast

  def self.get_ext_command_GL_NVX_linked_gpu_multicast
    [
      'glLGPUNamedBufferSubDataNVX',
      'glLGPUCopyImageSubDataNVX',
      'glLGPUInterlockNVX',
    ]
  end # self.get_ext_command_GL_NVX_linked_gpu_multicast


  def self.define_ext_command_GL_NV_alpha_to_coverage_dither_control
    GL::GL_FUNCTION_SYMBOLS << :glAlphaToCoverageDitherControlNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glAlphaToCoverageDitherControlNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAlphaToCoverageDitherControlNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glAlphaToCoverageDitherControlNV)
    GL.module_eval(<<-SRC)
      def self.AlphaToCoverageDitherControlNV(_mode_)
        GL_FUNCTIONS_MAP[:glAlphaToCoverageDitherControlNV].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_NV_alpha_to_coverage_dither_control

  def self.get_ext_command_GL_NV_alpha_to_coverage_dither_control
    [
      'glAlphaToCoverageDitherControlNV',
    ]
  end # self.get_ext_command_GL_NV_alpha_to_coverage_dither_control


  def self.define_ext_command_GL_NV_bindless_multi_draw_indirect
    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawArraysIndirectBindlessNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawArraysIndirectBindlessNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawArraysIndirectBindlessNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawArraysIndirectBindlessNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectBindlessNV(_mode_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:glMultiDrawArraysIndirectBindlessNV].call(_mode_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsIndirectBindlessNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsIndirectBindlessNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsIndirectBindlessNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsIndirectBindlessNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectBindlessNV(_mode_, _type_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsIndirectBindlessNV].call(_mode_, _type_, _indirect_, _drawCount_, _stride_, _vertexBufferCount_)
      end
    SRC
  end # self.define_ext_command_GL_NV_bindless_multi_draw_indirect

  def self.get_ext_command_GL_NV_bindless_multi_draw_indirect
    [
      'glMultiDrawArraysIndirectBindlessNV',
      'glMultiDrawElementsIndirectBindlessNV',
    ]
  end # self.get_ext_command_GL_NV_bindless_multi_draw_indirect


  def self.define_ext_command_GL_NV_bindless_multi_draw_indirect_count
    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawArraysIndirectBindlessCountNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawArraysIndirectBindlessCountNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawArraysIndirectBindlessCountNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawArraysIndirectBindlessCountNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawArraysIndirectBindlessCountNV(_mode_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:glMultiDrawArraysIndirectBindlessCountNV].call(_mode_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawElementsIndirectBindlessCountNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawElementsIndirectBindlessCountNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawElementsIndirectBindlessCountNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawElementsIndirectBindlessCountNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawElementsIndirectBindlessCountNV(_mode_, _type_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
        GL_FUNCTIONS_MAP[:glMultiDrawElementsIndirectBindlessCountNV].call(_mode_, _type_, _indirect_, _drawCount_, _maxDrawCount_, _stride_, _vertexBufferCount_)
      end
    SRC
  end # self.define_ext_command_GL_NV_bindless_multi_draw_indirect_count

  def self.get_ext_command_GL_NV_bindless_multi_draw_indirect_count
    [
      'glMultiDrawArraysIndirectBindlessCountNV',
      'glMultiDrawElementsIndirectBindlessCountNV',
    ]
  end # self.get_ext_command_GL_NV_bindless_multi_draw_indirect_count


  def self.define_ext_command_GL_NV_bindless_texture
    GL::GL_FUNCTION_SYMBOLS << :glGetTextureHandleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureHandleNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureHandleNV] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:glGetTextureHandleNV)
    GL.module_eval(<<-SRC)
      def self.GetTextureHandleNV(_texture_)
        GL_FUNCTIONS_MAP[:glGetTextureHandleNV].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTextureSamplerHandleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTextureSamplerHandleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTextureSamplerHandleNV] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:glGetTextureSamplerHandleNV)
    GL.module_eval(<<-SRC)
      def self.GetTextureSamplerHandleNV(_texture_, _sampler_)
        GL_FUNCTIONS_MAP[:glGetTextureSamplerHandleNV].call(_texture_, _sampler_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeTextureHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeTextureHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeTextureHandleResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeTextureHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:glMakeTextureHandleResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeTextureHandleNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeTextureHandleNonResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeTextureHandleNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeTextureHandleNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeTextureHandleNonResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:glMakeTextureHandleNonResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetImageHandleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetImageHandleNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetImageHandleNV] = -Fiddle::TYPE_LONG_LONG
    GL.bind_command(:glGetImageHandleNV)
    GL.module_eval(<<-SRC)
      def self.GetImageHandleNV(_texture_, _level_, _layered_, _layer_, _format_)
        GL_FUNCTIONS_MAP[:glGetImageHandleNV].call(_texture_, _level_, _layered_, _layer_, _format_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeImageHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeImageHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeImageHandleResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeImageHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleResidentNV(_handle_, _access_)
        GL_FUNCTIONS_MAP[:glMakeImageHandleResidentNV].call(_handle_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeImageHandleNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeImageHandleNonResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeImageHandleNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeImageHandleNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeImageHandleNonResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:glMakeImageHandleNonResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformHandleui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformHandleui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformHandleui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformHandleui64NV)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64NV(_location_, _value_)
        GL_FUNCTIONS_MAP[:glUniformHandleui64NV].call(_location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformHandleui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformHandleui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformHandleui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformHandleui64vNV)
    GL.module_eval(<<-SRC)
      def self.UniformHandleui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniformHandleui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformHandleui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformHandleui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformHandleui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformHandleui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64NV(_program_, _location_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformHandleui64NV].call(_program_, _location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformHandleui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformHandleui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformHandleui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformHandleui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformHandleui64vNV(_program_, _location_, _count_, _values_)
        GL_FUNCTIONS_MAP[:glProgramUniformHandleui64vNV].call(_program_, _location_, _count_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsTextureHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsTextureHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsTextureHandleResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsTextureHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsTextureHandleResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:glIsTextureHandleResidentNV].call(_handle_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsImageHandleResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsImageHandleResidentNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsImageHandleResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsImageHandleResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsImageHandleResidentNV(_handle_)
        GL_FUNCTIONS_MAP[:glIsImageHandleResidentNV].call(_handle_)
      end
    SRC
  end # self.define_ext_command_GL_NV_bindless_texture

  def self.get_ext_command_GL_NV_bindless_texture
    [
      'glGetTextureHandleNV',
      'glGetTextureSamplerHandleNV',
      'glMakeTextureHandleResidentNV',
      'glMakeTextureHandleNonResidentNV',
      'glGetImageHandleNV',
      'glMakeImageHandleResidentNV',
      'glMakeImageHandleNonResidentNV',
      'glUniformHandleui64NV',
      'glUniformHandleui64vNV',
      'glProgramUniformHandleui64NV',
      'glProgramUniformHandleui64vNV',
      'glIsTextureHandleResidentNV',
      'glIsImageHandleResidentNV',
    ]
  end # self.get_ext_command_GL_NV_bindless_texture


  def self.define_ext_command_GL_NV_blend_equation_advanced
    GL::GL_FUNCTION_SYMBOLS << :glBlendParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendParameteriNV)
    GL.module_eval(<<-SRC)
      def self.BlendParameteriNV(_pname_, _value_)
        GL_FUNCTIONS_MAP[:glBlendParameteriNV].call(_pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendBarrierNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendBarrierNV)
    GL.module_eval(<<-SRC)
      def self.BlendBarrierNV()
        GL_FUNCTIONS_MAP[:glBlendBarrierNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_blend_equation_advanced

  def self.get_ext_command_GL_NV_blend_equation_advanced
    [
      'glBlendParameteriNV',
      'glBlendBarrierNV',
    ]
  end # self.get_ext_command_GL_NV_blend_equation_advanced


  def self.define_ext_command_GL_NV_blend_equation_advanced_coherent
  end # self.define_ext_command_GL_NV_blend_equation_advanced_coherent

  def self.get_ext_command_GL_NV_blend_equation_advanced_coherent
    [
    ]
  end # self.get_ext_command_GL_NV_blend_equation_advanced_coherent


  def self.define_ext_command_GL_NV_blend_minmax_factor
  end # self.define_ext_command_GL_NV_blend_minmax_factor

  def self.get_ext_command_GL_NV_blend_minmax_factor
    [
    ]
  end # self.get_ext_command_GL_NV_blend_minmax_factor


  def self.define_ext_command_GL_NV_blend_square
  end # self.define_ext_command_GL_NV_blend_square

  def self.get_ext_command_GL_NV_blend_square
    [
    ]
  end # self.get_ext_command_GL_NV_blend_square


  def self.define_ext_command_GL_NV_clip_space_w_scaling
    GL::GL_FUNCTION_SYMBOLS << :glViewportPositionWScaleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glViewportPositionWScaleNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glViewportPositionWScaleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glViewportPositionWScaleNV)
    GL.module_eval(<<-SRC)
      def self.ViewportPositionWScaleNV(_index_, _xcoeff_, _ycoeff_)
        GL_FUNCTIONS_MAP[:glViewportPositionWScaleNV].call(_index_, _xcoeff_, _ycoeff_)
      end
    SRC
  end # self.define_ext_command_GL_NV_clip_space_w_scaling

  def self.get_ext_command_GL_NV_clip_space_w_scaling
    [
      'glViewportPositionWScaleNV',
    ]
  end # self.get_ext_command_GL_NV_clip_space_w_scaling


  def self.define_ext_command_GL_NV_command_list
    GL::GL_FUNCTION_SYMBOLS << :glCreateStatesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateStatesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateStatesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateStatesNV)
    GL.module_eval(<<-SRC)
      def self.CreateStatesNV(_n_, _states_)
        GL_FUNCTIONS_MAP[:glCreateStatesNV].call(_n_, _states_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteStatesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteStatesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteStatesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteStatesNV)
    GL.module_eval(<<-SRC)
      def self.DeleteStatesNV(_n_, _states_)
        GL_FUNCTIONS_MAP[:glDeleteStatesNV].call(_n_, _states_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsStateNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsStateNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsStateNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsStateNV)
    GL.module_eval(<<-SRC)
      def self.IsStateNV(_state_)
        GL_FUNCTIONS_MAP[:glIsStateNV].call(_state_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStateCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStateCaptureNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStateCaptureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStateCaptureNV)
    GL.module_eval(<<-SRC)
      def self.StateCaptureNV(_state_, _mode_)
        GL_FUNCTIONS_MAP[:glStateCaptureNV].call(_state_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCommandHeaderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCommandHeaderNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCommandHeaderNV] = -Fiddle::TYPE_INT
    GL.bind_command(:glGetCommandHeaderNV)
    GL.module_eval(<<-SRC)
      def self.GetCommandHeaderNV(_tokenID_, _size_)
        GL_FUNCTIONS_MAP[:glGetCommandHeaderNV].call(_tokenID_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetStageIndexNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetStageIndexNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetStageIndexNV] = -Fiddle::TYPE_SHORT
    GL.bind_command(:glGetStageIndexNV)
    GL.module_eval(<<-SRC)
      def self.GetStageIndexNV(_shadertype_)
        GL_FUNCTIONS_MAP[:glGetStageIndexNV].call(_shadertype_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawCommandsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawCommandsNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsNV(_primitiveMode_, _buffer_, _indirects_, _sizes_, _count_)
        GL_FUNCTIONS_MAP[:glDrawCommandsNV].call(_primitiveMode_, _buffer_, _indirects_, _sizes_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawCommandsAddressNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawCommandsAddressNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawCommandsAddressNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawCommandsAddressNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsAddressNV(_primitiveMode_, _indirects_, _sizes_, _count_)
        GL_FUNCTIONS_MAP[:glDrawCommandsAddressNV].call(_primitiveMode_, _indirects_, _sizes_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawCommandsStatesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawCommandsStatesNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawCommandsStatesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawCommandsStatesNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsStatesNV(_buffer_, _indirects_, _sizes_, _states_, _fbos_, _count_)
        GL_FUNCTIONS_MAP[:glDrawCommandsStatesNV].call(_buffer_, _indirects_, _sizes_, _states_, _fbos_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawCommandsStatesAddressNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawCommandsStatesAddressNV] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawCommandsStatesAddressNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawCommandsStatesAddressNV)
    GL.module_eval(<<-SRC)
      def self.DrawCommandsStatesAddressNV(_indirects_, _sizes_, _states_, _fbos_, _count_)
        GL_FUNCTIONS_MAP[:glDrawCommandsStatesAddressNV].call(_indirects_, _sizes_, _states_, _fbos_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCreateCommandListsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateCommandListsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateCommandListsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCreateCommandListsNV)
    GL.module_eval(<<-SRC)
      def self.CreateCommandListsNV(_n_, _lists_)
        GL_FUNCTIONS_MAP[:glCreateCommandListsNV].call(_n_, _lists_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteCommandListsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteCommandListsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteCommandListsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteCommandListsNV)
    GL.module_eval(<<-SRC)
      def self.DeleteCommandListsNV(_n_, _lists_)
        GL_FUNCTIONS_MAP[:glDeleteCommandListsNV].call(_n_, _lists_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsCommandListNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsCommandListNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsCommandListNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsCommandListNV)
    GL.module_eval(<<-SRC)
      def self.IsCommandListNV(_list_)
        GL_FUNCTIONS_MAP[:glIsCommandListNV].call(_list_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glListDrawCommandsStatesClientNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glListDrawCommandsStatesClientNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glListDrawCommandsStatesClientNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glListDrawCommandsStatesClientNV)
    GL.module_eval(<<-SRC)
      def self.ListDrawCommandsStatesClientNV(_list_, _segment_, _indirects_, _sizes_, _states_, _fbos_, _count_)
        GL_FUNCTIONS_MAP[:glListDrawCommandsStatesClientNV].call(_list_, _segment_, _indirects_, _sizes_, _states_, _fbos_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCommandListSegmentsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCommandListSegmentsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCommandListSegmentsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCommandListSegmentsNV)
    GL.module_eval(<<-SRC)
      def self.CommandListSegmentsNV(_list_, _segments_)
        GL_FUNCTIONS_MAP[:glCommandListSegmentsNV].call(_list_, _segments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCompileCommandListNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCompileCommandListNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCompileCommandListNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCompileCommandListNV)
    GL.module_eval(<<-SRC)
      def self.CompileCommandListNV(_list_)
        GL_FUNCTIONS_MAP[:glCompileCommandListNV].call(_list_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCallCommandListNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCallCommandListNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCallCommandListNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCallCommandListNV)
    GL.module_eval(<<-SRC)
      def self.CallCommandListNV(_list_)
        GL_FUNCTIONS_MAP[:glCallCommandListNV].call(_list_)
      end
    SRC
  end # self.define_ext_command_GL_NV_command_list

  def self.get_ext_command_GL_NV_command_list
    [
      'glCreateStatesNV',
      'glDeleteStatesNV',
      'glIsStateNV',
      'glStateCaptureNV',
      'glGetCommandHeaderNV',
      'glGetStageIndexNV',
      'glDrawCommandsNV',
      'glDrawCommandsAddressNV',
      'glDrawCommandsStatesNV',
      'glDrawCommandsStatesAddressNV',
      'glCreateCommandListsNV',
      'glDeleteCommandListsNV',
      'glIsCommandListNV',
      'glListDrawCommandsStatesClientNV',
      'glCommandListSegmentsNV',
      'glCompileCommandListNV',
      'glCallCommandListNV',
    ]
  end # self.get_ext_command_GL_NV_command_list


  def self.define_ext_command_GL_NV_compute_program5
  end # self.define_ext_command_GL_NV_compute_program5

  def self.get_ext_command_GL_NV_compute_program5
    [
    ]
  end # self.get_ext_command_GL_NV_compute_program5


  def self.define_ext_command_GL_NV_compute_shader_derivatives
  end # self.define_ext_command_GL_NV_compute_shader_derivatives

  def self.get_ext_command_GL_NV_compute_shader_derivatives
    [
    ]
  end # self.get_ext_command_GL_NV_compute_shader_derivatives


  def self.define_ext_command_GL_NV_conditional_render
    GL::GL_FUNCTION_SYMBOLS << :glBeginConditionalRenderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginConditionalRenderNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginConditionalRenderNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginConditionalRenderNV)
    GL.module_eval(<<-SRC)
      def self.BeginConditionalRenderNV(_id_, _mode_)
        GL_FUNCTIONS_MAP[:glBeginConditionalRenderNV].call(_id_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndConditionalRenderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndConditionalRenderNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndConditionalRenderNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndConditionalRenderNV)
    GL.module_eval(<<-SRC)
      def self.EndConditionalRenderNV()
        GL_FUNCTIONS_MAP[:glEndConditionalRenderNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_conditional_render

  def self.get_ext_command_GL_NV_conditional_render
    [
      'glBeginConditionalRenderNV',
      'glEndConditionalRenderNV',
    ]
  end # self.get_ext_command_GL_NV_conditional_render


  def self.define_ext_command_GL_NV_conservative_raster
    GL::GL_FUNCTION_SYMBOLS << :glSubpixelPrecisionBiasNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSubpixelPrecisionBiasNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSubpixelPrecisionBiasNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSubpixelPrecisionBiasNV)
    GL.module_eval(<<-SRC)
      def self.SubpixelPrecisionBiasNV(_xbits_, _ybits_)
        GL_FUNCTIONS_MAP[:glSubpixelPrecisionBiasNV].call(_xbits_, _ybits_)
      end
    SRC
  end # self.define_ext_command_GL_NV_conservative_raster

  def self.get_ext_command_GL_NV_conservative_raster
    [
      'glSubpixelPrecisionBiasNV',
    ]
  end # self.get_ext_command_GL_NV_conservative_raster


  def self.define_ext_command_GL_NV_conservative_raster_dilate
    GL::GL_FUNCTION_SYMBOLS << :glConservativeRasterParameterfNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glConservativeRasterParameterfNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConservativeRasterParameterfNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glConservativeRasterParameterfNV)
    GL.module_eval(<<-SRC)
      def self.ConservativeRasterParameterfNV(_pname_, _value_)
        GL_FUNCTIONS_MAP[:glConservativeRasterParameterfNV].call(_pname_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_NV_conservative_raster_dilate

  def self.get_ext_command_GL_NV_conservative_raster_dilate
    [
      'glConservativeRasterParameterfNV',
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_dilate


  def self.define_ext_command_GL_NV_conservative_raster_pre_snap
  end # self.define_ext_command_GL_NV_conservative_raster_pre_snap

  def self.get_ext_command_GL_NV_conservative_raster_pre_snap
    [
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_pre_snap


  def self.define_ext_command_GL_NV_conservative_raster_pre_snap_triangles
    GL::GL_FUNCTION_SYMBOLS << :glConservativeRasterParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glConservativeRasterParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConservativeRasterParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glConservativeRasterParameteriNV)
    GL.module_eval(<<-SRC)
      def self.ConservativeRasterParameteriNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glConservativeRasterParameteriNV].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_NV_conservative_raster_pre_snap_triangles

  def self.get_ext_command_GL_NV_conservative_raster_pre_snap_triangles
    [
      'glConservativeRasterParameteriNV',
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_pre_snap_triangles


  def self.define_ext_command_GL_NV_conservative_raster_underestimation
  end # self.define_ext_command_GL_NV_conservative_raster_underestimation

  def self.get_ext_command_GL_NV_conservative_raster_underestimation
    [
    ]
  end # self.get_ext_command_GL_NV_conservative_raster_underestimation


  def self.define_ext_command_GL_NV_copy_depth_to_color
  end # self.define_ext_command_GL_NV_copy_depth_to_color

  def self.get_ext_command_GL_NV_copy_depth_to_color
    [
    ]
  end # self.get_ext_command_GL_NV_copy_depth_to_color


  def self.define_ext_command_GL_NV_copy_image
    GL::GL_FUNCTION_SYMBOLS << :glCopyImageSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyImageSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyImageSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyImageSubDataNV)
    GL.module_eval(<<-SRC)
      def self.CopyImageSubDataNV(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
        GL_FUNCTIONS_MAP[:glCopyImageSubDataNV].call(_srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _width_, _height_, _depth_)
      end
    SRC
  end # self.define_ext_command_GL_NV_copy_image

  def self.get_ext_command_GL_NV_copy_image
    [
      'glCopyImageSubDataNV',
    ]
  end # self.get_ext_command_GL_NV_copy_image


  def self.define_ext_command_GL_NV_deep_texture3D
  end # self.define_ext_command_GL_NV_deep_texture3D

  def self.get_ext_command_GL_NV_deep_texture3D
    [
    ]
  end # self.get_ext_command_GL_NV_deep_texture3D


  def self.define_ext_command_GL_NV_depth_buffer_float
    GL::GL_FUNCTION_SYMBOLS << :glDepthRangedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangedNV] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangedNV)
    GL.module_eval(<<-SRC)
      def self.DepthRangedNV(_zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:glDepthRangedNV].call(_zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearDepthdNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearDepthdNV] = [Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearDepthdNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearDepthdNV)
    GL.module_eval(<<-SRC)
      def self.ClearDepthdNV(_depth_)
        GL_FUNCTIONS_MAP[:glClearDepthdNV].call(_depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthBoundsdNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthBoundsdNV] = [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthBoundsdNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthBoundsdNV)
    GL.module_eval(<<-SRC)
      def self.DepthBoundsdNV(_zmin_, _zmax_)
        GL_FUNCTIONS_MAP[:glDepthBoundsdNV].call(_zmin_, _zmax_)
      end
    SRC
  end # self.define_ext_command_GL_NV_depth_buffer_float

  def self.get_ext_command_GL_NV_depth_buffer_float
    [
      'glDepthRangedNV',
      'glClearDepthdNV',
      'glDepthBoundsdNV',
    ]
  end # self.get_ext_command_GL_NV_depth_buffer_float


  def self.define_ext_command_GL_NV_depth_clamp
  end # self.define_ext_command_GL_NV_depth_clamp

  def self.get_ext_command_GL_NV_depth_clamp
    [
    ]
  end # self.get_ext_command_GL_NV_depth_clamp


  def self.define_ext_command_GL_NV_draw_texture
    GL::GL_FUNCTION_SYMBOLS << :glDrawTextureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawTextureNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawTextureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawTextureNV)
    GL.module_eval(<<-SRC)
      def self.DrawTextureNV(_texture_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
        GL_FUNCTIONS_MAP[:glDrawTextureNV].call(_texture_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
      end
    SRC
  end # self.define_ext_command_GL_NV_draw_texture

  def self.get_ext_command_GL_NV_draw_texture
    [
      'glDrawTextureNV',
    ]
  end # self.get_ext_command_GL_NV_draw_texture


  def self.define_ext_command_GL_NV_draw_vulkan_image
    GL::GL_FUNCTION_SYMBOLS << :glDrawVkImageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawVkImageNV] = [-Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawVkImageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawVkImageNV)
    GL.module_eval(<<-SRC)
      def self.DrawVkImageNV(_vkImage_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
        GL_FUNCTIONS_MAP[:glDrawVkImageNV].call(_vkImage_, _sampler_, _x0_, _y0_, _x1_, _y1_, _z_, _s0_, _t0_, _s1_, _t1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVkProcAddrNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVkProcAddrNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVkProcAddrNV] = Fiddle::TYPE_VOIDP
    GL.bind_command(:glGetVkProcAddrNV)
    GL.module_eval(<<-SRC)
      def self.GetVkProcAddrNV(_name_)
        GL_FUNCTIONS_MAP[:glGetVkProcAddrNV].call(_name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWaitVkSemaphoreNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glWaitVkSemaphoreNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWaitVkSemaphoreNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glWaitVkSemaphoreNV)
    GL.module_eval(<<-SRC)
      def self.WaitVkSemaphoreNV(_vkSemaphore_)
        GL_FUNCTIONS_MAP[:glWaitVkSemaphoreNV].call(_vkSemaphore_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSignalVkSemaphoreNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSignalVkSemaphoreNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSignalVkSemaphoreNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSignalVkSemaphoreNV)
    GL.module_eval(<<-SRC)
      def self.SignalVkSemaphoreNV(_vkSemaphore_)
        GL_FUNCTIONS_MAP[:glSignalVkSemaphoreNV].call(_vkSemaphore_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSignalVkFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSignalVkFenceNV] = [-Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSignalVkFenceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSignalVkFenceNV)
    GL.module_eval(<<-SRC)
      def self.SignalVkFenceNV(_vkFence_)
        GL_FUNCTIONS_MAP[:glSignalVkFenceNV].call(_vkFence_)
      end
    SRC
  end # self.define_ext_command_GL_NV_draw_vulkan_image

  def self.get_ext_command_GL_NV_draw_vulkan_image
    [
      'glDrawVkImageNV',
      'glGetVkProcAddrNV',
      'glWaitVkSemaphoreNV',
      'glSignalVkSemaphoreNV',
      'glSignalVkFenceNV',
    ]
  end # self.get_ext_command_GL_NV_draw_vulkan_image


  def self.define_ext_command_GL_NV_evaluators
    GL::GL_FUNCTION_SYMBOLS << :glMapControlPointsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapControlPointsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapControlPointsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapControlPointsNV)
    GL.module_eval(<<-SRC)
      def self.MapControlPointsNV(_target_, _index_, _type_, _ustride_, _vstride_, _uorder_, _vorder_, _packed_, _points_)
        GL_FUNCTIONS_MAP[:glMapControlPointsNV].call(_target_, _index_, _type_, _ustride_, _vstride_, _uorder_, _vorder_, _packed_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapParameterivNV)
    GL.module_eval(<<-SRC)
      def self.MapParameterivNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMapParameterivNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.MapParameterfvNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMapParameterfvNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMapControlPointsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMapControlPointsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMapControlPointsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMapControlPointsNV)
    GL.module_eval(<<-SRC)
      def self.GetMapControlPointsNV(_target_, _index_, _type_, _ustride_, _vstride_, _packed_, _points_)
        GL_FUNCTIONS_MAP[:glGetMapControlPointsNV].call(_target_, _index_, _type_, _ustride_, _vstride_, _packed_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMapParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMapParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMapParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMapParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetMapParameterivNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMapParameterivNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMapParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMapParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMapParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMapParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetMapParameterfvNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMapParameterfvNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMapAttribParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMapAttribParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMapAttribParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMapAttribParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetMapAttribParameterivNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMapAttribParameterivNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMapAttribParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMapAttribParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMapAttribParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMapAttribParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetMapAttribParameterfvNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMapAttribParameterfvNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEvalMapsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glEvalMapsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEvalMapsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glEvalMapsNV)
    GL.module_eval(<<-SRC)
      def self.EvalMapsNV(_target_, _mode_)
        GL_FUNCTIONS_MAP[:glEvalMapsNV].call(_target_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_NV_evaluators

  def self.get_ext_command_GL_NV_evaluators
    [
      'glMapControlPointsNV',
      'glMapParameterivNV',
      'glMapParameterfvNV',
      'glGetMapControlPointsNV',
      'glGetMapParameterivNV',
      'glGetMapParameterfvNV',
      'glGetMapAttribParameterivNV',
      'glGetMapAttribParameterfvNV',
      'glEvalMapsNV',
    ]
  end # self.get_ext_command_GL_NV_evaluators


  def self.define_ext_command_GL_NV_explicit_multisample
    GL::GL_FUNCTION_SYMBOLS << :glGetMultisamplefvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMultisamplefvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMultisamplefvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMultisamplefvNV)
    GL.module_eval(<<-SRC)
      def self.GetMultisamplefvNV(_pname_, _index_, _val_)
        GL_FUNCTIONS_MAP[:glGetMultisamplefvNV].call(_pname_, _index_, _val_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSampleMaskIndexedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleMaskIndexedNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleMaskIndexedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleMaskIndexedNV)
    GL.module_eval(<<-SRC)
      def self.SampleMaskIndexedNV(_index_, _mask_)
        GL_FUNCTIONS_MAP[:glSampleMaskIndexedNV].call(_index_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexRenderbufferNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexRenderbufferNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexRenderbufferNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexRenderbufferNV)
    GL.module_eval(<<-SRC)
      def self.TexRenderbufferNV(_target_, _renderbuffer_)
        GL_FUNCTIONS_MAP[:glTexRenderbufferNV].call(_target_, _renderbuffer_)
      end
    SRC
  end # self.define_ext_command_GL_NV_explicit_multisample

  def self.get_ext_command_GL_NV_explicit_multisample
    [
      'glGetMultisamplefvNV',
      'glSampleMaskIndexedNV',
      'glTexRenderbufferNV',
    ]
  end # self.get_ext_command_GL_NV_explicit_multisample


  def self.define_ext_command_GL_NV_fence
    GL::GL_FUNCTION_SYMBOLS << :glDeleteFencesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteFencesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteFencesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteFencesNV)
    GL.module_eval(<<-SRC)
      def self.DeleteFencesNV(_n_, _fences_)
        GL_FUNCTIONS_MAP[:glDeleteFencesNV].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenFencesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenFencesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenFencesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenFencesNV)
    GL.module_eval(<<-SRC)
      def self.GenFencesNV(_n_, _fences_)
        GL_FUNCTIONS_MAP[:glGenFencesNV].call(_n_, _fences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsFenceNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsFenceNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsFenceNV)
    GL.module_eval(<<-SRC)
      def self.IsFenceNV(_fence_)
        GL_FUNCTIONS_MAP[:glIsFenceNV].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTestFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTestFenceNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTestFenceNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glTestFenceNV)
    GL.module_eval(<<-SRC)
      def self.TestFenceNV(_fence_)
        GL_FUNCTIONS_MAP[:glTestFenceNV].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFenceivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFenceivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFenceivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFenceivNV)
    GL.module_eval(<<-SRC)
      def self.GetFenceivNV(_fence_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFenceivNV].call(_fence_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFinishFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFinishFenceNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFinishFenceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFinishFenceNV)
    GL.module_eval(<<-SRC)
      def self.FinishFenceNV(_fence_)
        GL_FUNCTIONS_MAP[:glFinishFenceNV].call(_fence_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSetFenceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSetFenceNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSetFenceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSetFenceNV)
    GL.module_eval(<<-SRC)
      def self.SetFenceNV(_fence_, _condition_)
        GL_FUNCTIONS_MAP[:glSetFenceNV].call(_fence_, _condition_)
      end
    SRC
  end # self.define_ext_command_GL_NV_fence

  def self.get_ext_command_GL_NV_fence
    [
      'glDeleteFencesNV',
      'glGenFencesNV',
      'glIsFenceNV',
      'glTestFenceNV',
      'glGetFenceivNV',
      'glFinishFenceNV',
      'glSetFenceNV',
    ]
  end # self.get_ext_command_GL_NV_fence


  def self.define_ext_command_GL_NV_fill_rectangle
  end # self.define_ext_command_GL_NV_fill_rectangle

  def self.get_ext_command_GL_NV_fill_rectangle
    [
    ]
  end # self.get_ext_command_GL_NV_fill_rectangle


  def self.define_ext_command_GL_NV_float_buffer
  end # self.define_ext_command_GL_NV_float_buffer

  def self.get_ext_command_GL_NV_float_buffer
    [
    ]
  end # self.get_ext_command_GL_NV_float_buffer


  def self.define_ext_command_GL_NV_fog_distance
  end # self.define_ext_command_GL_NV_fog_distance

  def self.get_ext_command_GL_NV_fog_distance
    [
    ]
  end # self.get_ext_command_GL_NV_fog_distance


  def self.define_ext_command_GL_NV_fragment_coverage_to_color
    GL::GL_FUNCTION_SYMBOLS << :glFragmentCoverageColorNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentCoverageColorNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentCoverageColorNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentCoverageColorNV)
    GL.module_eval(<<-SRC)
      def self.FragmentCoverageColorNV(_color_)
        GL_FUNCTIONS_MAP[:glFragmentCoverageColorNV].call(_color_)
      end
    SRC
  end # self.define_ext_command_GL_NV_fragment_coverage_to_color

  def self.get_ext_command_GL_NV_fragment_coverage_to_color
    [
      'glFragmentCoverageColorNV',
    ]
  end # self.get_ext_command_GL_NV_fragment_coverage_to_color


  def self.define_ext_command_GL_NV_fragment_program
    GL::GL_FUNCTION_SYMBOLS << :glProgramNamedParameter4fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramNamedParameter4fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramNamedParameter4fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramNamedParameter4fNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4fNV(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramNamedParameter4fNV].call(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramNamedParameter4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramNamedParameter4fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramNamedParameter4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramNamedParameter4fvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4fvNV(_id_, _len_, _name_, _v_)
        GL_FUNCTIONS_MAP[:glProgramNamedParameter4fvNV].call(_id_, _len_, _name_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramNamedParameter4dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramNamedParameter4dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramNamedParameter4dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramNamedParameter4dNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4dNV(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramNamedParameter4dNV].call(_id_, _len_, _name_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramNamedParameter4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramNamedParameter4dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramNamedParameter4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramNamedParameter4dvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramNamedParameter4dvNV(_id_, _len_, _name_, _v_)
        GL_FUNCTIONS_MAP[:glProgramNamedParameter4dvNV].call(_id_, _len_, _name_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramNamedParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramNamedParameterfvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramNamedParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramNamedParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramNamedParameterfvNV(_id_, _len_, _name_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramNamedParameterfvNV].call(_id_, _len_, _name_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramNamedParameterdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramNamedParameterdvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramNamedParameterdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramNamedParameterdvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramNamedParameterdvNV(_id_, _len_, _name_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramNamedParameterdvNV].call(_id_, _len_, _name_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_fragment_program

  def self.get_ext_command_GL_NV_fragment_program
    [
      'glProgramNamedParameter4fNV',
      'glProgramNamedParameter4fvNV',
      'glProgramNamedParameter4dNV',
      'glProgramNamedParameter4dvNV',
      'glGetProgramNamedParameterfvNV',
      'glGetProgramNamedParameterdvNV',
    ]
  end # self.get_ext_command_GL_NV_fragment_program


  def self.define_ext_command_GL_NV_fragment_program2
  end # self.define_ext_command_GL_NV_fragment_program2

  def self.get_ext_command_GL_NV_fragment_program2
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_program2


  def self.define_ext_command_GL_NV_fragment_program4
  end # self.define_ext_command_GL_NV_fragment_program4

  def self.get_ext_command_GL_NV_fragment_program4
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_program4


  def self.define_ext_command_GL_NV_fragment_program_option
  end # self.define_ext_command_GL_NV_fragment_program_option

  def self.get_ext_command_GL_NV_fragment_program_option
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_program_option


  def self.define_ext_command_GL_NV_fragment_shader_barycentric
  end # self.define_ext_command_GL_NV_fragment_shader_barycentric

  def self.get_ext_command_GL_NV_fragment_shader_barycentric
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_shader_barycentric


  def self.define_ext_command_GL_NV_fragment_shader_interlock
  end # self.define_ext_command_GL_NV_fragment_shader_interlock

  def self.get_ext_command_GL_NV_fragment_shader_interlock
    [
    ]
  end # self.get_ext_command_GL_NV_fragment_shader_interlock


  def self.define_ext_command_GL_NV_framebuffer_mixed_samples
    GL::GL_FUNCTION_SYMBOLS << :glRasterSamplesEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterSamplesEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterSamplesEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterSamplesEXT)
    GL.module_eval(<<-SRC)
      def self.RasterSamplesEXT(_samples_, _fixedsamplelocations_)
        GL_FUNCTIONS_MAP[:glRasterSamplesEXT].call(_samples_, _fixedsamplelocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCoverageModulationTableNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCoverageModulationTableNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCoverageModulationTableNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCoverageModulationTableNV)
    GL.module_eval(<<-SRC)
      def self.CoverageModulationTableNV(_n_, _v_)
        GL_FUNCTIONS_MAP[:glCoverageModulationTableNV].call(_n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCoverageModulationTableNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCoverageModulationTableNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCoverageModulationTableNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCoverageModulationTableNV)
    GL.module_eval(<<-SRC)
      def self.GetCoverageModulationTableNV(_bufSize_, _v_)
        GL_FUNCTIONS_MAP[:glGetCoverageModulationTableNV].call(_bufSize_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCoverageModulationNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCoverageModulationNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCoverageModulationNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCoverageModulationNV)
    GL.module_eval(<<-SRC)
      def self.CoverageModulationNV(_components_)
        GL_FUNCTIONS_MAP[:glCoverageModulationNV].call(_components_)
      end
    SRC
  end # self.define_ext_command_GL_NV_framebuffer_mixed_samples

  def self.get_ext_command_GL_NV_framebuffer_mixed_samples
    [
      'glRasterSamplesEXT',
      'glCoverageModulationTableNV',
      'glGetCoverageModulationTableNV',
      'glCoverageModulationNV',
    ]
  end # self.get_ext_command_GL_NV_framebuffer_mixed_samples


  def self.define_ext_command_GL_NV_framebuffer_multisample_coverage
    GL::GL_FUNCTION_SYMBOLS << :glRenderbufferStorageMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderbufferStorageMultisampleCoverageNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderbufferStorageMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderbufferStorageMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.RenderbufferStorageMultisampleCoverageNV(_target_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glRenderbufferStorageMultisampleCoverageNV].call(_target_, _coverageSamples_, _colorSamples_, _internalformat_, _width_, _height_)
      end
    SRC
  end # self.define_ext_command_GL_NV_framebuffer_multisample_coverage

  def self.get_ext_command_GL_NV_framebuffer_multisample_coverage
    [
      'glRenderbufferStorageMultisampleCoverageNV',
    ]
  end # self.get_ext_command_GL_NV_framebuffer_multisample_coverage


  def self.define_ext_command_GL_NV_geometry_program4
    GL::GL_FUNCTION_SYMBOLS << :glProgramVertexLimitNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramVertexLimitNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramVertexLimitNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramVertexLimitNV)
    GL.module_eval(<<-SRC)
      def self.ProgramVertexLimitNV(_target_, _limit_)
        GL_FUNCTIONS_MAP[:glProgramVertexLimitNV].call(_target_, _limit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureEXT(_target_, _attachment_, _texture_, _level_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureEXT].call(_target_, _attachment_, _texture_, _level_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureLayerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureLayerEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureLayerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureLayerEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureLayerEXT(_target_, _attachment_, _texture_, _level_, _layer_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureLayerEXT].call(_target_, _attachment_, _texture_, _level_, _layer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureFaceEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureFaceEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureFaceEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureFaceEXT)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureFaceEXT(_target_, _attachment_, _texture_, _level_, _face_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureFaceEXT].call(_target_, _attachment_, _texture_, _level_, _face_)
      end
    SRC
  end # self.define_ext_command_GL_NV_geometry_program4

  def self.get_ext_command_GL_NV_geometry_program4
    [
      'glProgramVertexLimitNV',
      'glFramebufferTextureEXT',
      'glFramebufferTextureLayerEXT',
      'glFramebufferTextureFaceEXT',
    ]
  end # self.get_ext_command_GL_NV_geometry_program4


  def self.define_ext_command_GL_NV_geometry_shader4
  end # self.define_ext_command_GL_NV_geometry_shader4

  def self.get_ext_command_GL_NV_geometry_shader4
    [
    ]
  end # self.get_ext_command_GL_NV_geometry_shader4


  def self.define_ext_command_GL_NV_geometry_shader_passthrough
  end # self.define_ext_command_GL_NV_geometry_shader_passthrough

  def self.get_ext_command_GL_NV_geometry_shader_passthrough
    [
    ]
  end # self.get_ext_command_GL_NV_geometry_shader_passthrough


  def self.define_ext_command_GL_NV_gpu_program4
    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameterI4iNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameterI4iNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameterI4iNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameterI4iNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4iNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameterI4iNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameterI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameterI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameterI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameterI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4ivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameterI4ivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParametersI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParametersI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParametersI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParametersI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParametersI4ivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParametersI4ivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameterI4uiNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameterI4uiNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameterI4uiNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameterI4uiNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4uiNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameterI4uiNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParameterI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParameterI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParameterI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParameterI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParameterI4uivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParameterI4uivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramLocalParametersI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramLocalParametersI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramLocalParametersI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramLocalParametersI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramLocalParametersI4uivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramLocalParametersI4uivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameterI4iNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameterI4iNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameterI4iNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameterI4iNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4iNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameterI4iNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameterI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameterI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameterI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameterI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4ivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameterI4ivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParametersI4ivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParametersI4ivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParametersI4ivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParametersI4ivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParametersI4ivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParametersI4ivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameterI4uiNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameterI4uiNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameterI4uiNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameterI4uiNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4uiNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameterI4uiNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParameterI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParameterI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParameterI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParameterI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParameterI4uivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParameterI4uivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramEnvParametersI4uivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramEnvParametersI4uivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramEnvParametersI4uivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramEnvParametersI4uivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramEnvParametersI4uivNV(_target_, _index_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramEnvParametersI4uivNV].call(_target_, _index_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramLocalParameterIivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramLocalParameterIivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramLocalParameterIivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramLocalParameterIivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterIivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramLocalParameterIivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramLocalParameterIuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramLocalParameterIuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramLocalParameterIuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramLocalParameterIuivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramLocalParameterIuivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramLocalParameterIuivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramEnvParameterIivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramEnvParameterIivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramEnvParameterIivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramEnvParameterIivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterIivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramEnvParameterIivNV].call(_target_, _index_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramEnvParameterIuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramEnvParameterIuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramEnvParameterIuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramEnvParameterIuivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramEnvParameterIuivNV(_target_, _index_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramEnvParameterIuivNV].call(_target_, _index_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_program4

  def self.get_ext_command_GL_NV_gpu_program4
    [
      'glProgramLocalParameterI4iNV',
      'glProgramLocalParameterI4ivNV',
      'glProgramLocalParametersI4ivNV',
      'glProgramLocalParameterI4uiNV',
      'glProgramLocalParameterI4uivNV',
      'glProgramLocalParametersI4uivNV',
      'glProgramEnvParameterI4iNV',
      'glProgramEnvParameterI4ivNV',
      'glProgramEnvParametersI4ivNV',
      'glProgramEnvParameterI4uiNV',
      'glProgramEnvParameterI4uivNV',
      'glProgramEnvParametersI4uivNV',
      'glGetProgramLocalParameterIivNV',
      'glGetProgramLocalParameterIuivNV',
      'glGetProgramEnvParameterIivNV',
      'glGetProgramEnvParameterIuivNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_program4


  def self.define_ext_command_GL_NV_gpu_program5
    GL::GL_FUNCTION_SYMBOLS << :glProgramSubroutineParametersuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramSubroutineParametersuivNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramSubroutineParametersuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramSubroutineParametersuivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramSubroutineParametersuivNV(_target_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramSubroutineParametersuivNV].call(_target_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramSubroutineParameteruivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramSubroutineParameteruivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramSubroutineParameteruivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramSubroutineParameteruivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramSubroutineParameteruivNV(_target_, _index_, _param_)
        GL_FUNCTIONS_MAP[:glGetProgramSubroutineParameteruivNV].call(_target_, _index_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_program5

  def self.get_ext_command_GL_NV_gpu_program5
    [
      'glProgramSubroutineParametersuivNV',
      'glGetProgramSubroutineParameteruivNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_program5


  def self.define_ext_command_GL_NV_gpu_program5_mem_extended
  end # self.define_ext_command_GL_NV_gpu_program5_mem_extended

  def self.get_ext_command_GL_NV_gpu_program5_mem_extended
    [
    ]
  end # self.get_ext_command_GL_NV_gpu_program5_mem_extended


  def self.define_ext_command_GL_NV_gpu_shader5
    GL::GL_FUNCTION_SYMBOLS << :glUniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1i64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2i64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3i64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4i64NV] = [Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4i64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4i64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4i64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4i64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64NV(_location_, _x_)
        GL_FUNCTIONS_MAP[:glUniform1ui64NV].call(_location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64NV(_location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glUniform2ui64NV].call(_location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64NV(_location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glUniform3ui64NV].call(_location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64NV(_location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glUniform4ui64NV].call(_location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform1ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform1ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform1ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform2ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform2ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform2ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform3ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform3ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform3ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniform4ui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniform4ui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniform4ui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformi64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformi64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformi64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4i64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4i64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4i64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64NV(_program_, _location_, _x_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui64NV].call(_program_, _location_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64NV(_program_, _location_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui64NV].call(_program_, _location_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64NV(_program_, _location_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui64NV].call(_program_, _location_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64NV(_program_, _location_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui64NV].call(_program_, _location_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform1ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform1ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform1ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform2ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform2ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform2ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform3ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform3ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform3ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniform4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniform4ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniform4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniform4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniform4ui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniform4ui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_shader5

  def self.get_ext_command_GL_NV_gpu_shader5
    [
      'glUniform1i64NV',
      'glUniform2i64NV',
      'glUniform3i64NV',
      'glUniform4i64NV',
      'glUniform1i64vNV',
      'glUniform2i64vNV',
      'glUniform3i64vNV',
      'glUniform4i64vNV',
      'glUniform1ui64NV',
      'glUniform2ui64NV',
      'glUniform3ui64NV',
      'glUniform4ui64NV',
      'glUniform1ui64vNV',
      'glUniform2ui64vNV',
      'glUniform3ui64vNV',
      'glUniform4ui64vNV',
      'glGetUniformi64vNV',
      'glProgramUniform1i64NV',
      'glProgramUniform2i64NV',
      'glProgramUniform3i64NV',
      'glProgramUniform4i64NV',
      'glProgramUniform1i64vNV',
      'glProgramUniform2i64vNV',
      'glProgramUniform3i64vNV',
      'glProgramUniform4i64vNV',
      'glProgramUniform1ui64NV',
      'glProgramUniform2ui64NV',
      'glProgramUniform3ui64NV',
      'glProgramUniform4ui64NV',
      'glProgramUniform1ui64vNV',
      'glProgramUniform2ui64vNV',
      'glProgramUniform3ui64vNV',
      'glProgramUniform4ui64vNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_shader5


  def self.define_ext_command_GL_NV_half_float
    GL::GL_FUNCTION_SYMBOLS << :glVertex2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex2hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex2hNV)
    GL.module_eval(<<-SRC)
      def self.Vertex2hNV(_x_, _y_)
        GL_FUNCTIONS_MAP[:glVertex2hNV].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex2hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex2hvNV)
    GL.module_eval(<<-SRC)
      def self.Vertex2hvNV(_v_)
        GL_FUNCTIONS_MAP[:glVertex2hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex3hNV)
    GL.module_eval(<<-SRC)
      def self.Vertex3hNV(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertex3hNV].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex3hvNV)
    GL.module_eval(<<-SRC)
      def self.Vertex3hvNV(_v_)
        GL_FUNCTIONS_MAP[:glVertex3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex4hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex4hNV)
    GL.module_eval(<<-SRC)
      def self.Vertex4hNV(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertex4hNV].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex4hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex4hvNV)
    GL.module_eval(<<-SRC)
      def self.Vertex4hvNV(_v_)
        GL_FUNCTIONS_MAP[:glVertex4hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormal3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormal3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormal3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormal3hNV)
    GL.module_eval(<<-SRC)
      def self.Normal3hNV(_nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormal3hNV].call(_nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormal3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormal3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormal3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormal3hvNV)
    GL.module_eval(<<-SRC)
      def self.Normal3hvNV(_v_)
        GL_FUNCTIONS_MAP[:glNormal3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor3hNV)
    GL.module_eval(<<-SRC)
      def self.Color3hNV(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glColor3hNV].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor3hvNV)
    GL.module_eval(<<-SRC)
      def self.Color3hvNV(_v_)
        GL_FUNCTIONS_MAP[:glColor3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4hNV)
    GL.module_eval(<<-SRC)
      def self.Color4hNV(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glColor4hNV].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4hvNV)
    GL.module_eval(<<-SRC)
      def self.Color4hvNV(_v_)
        GL_FUNCTIONS_MAP[:glColor4hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord1hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord1hNV] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord1hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord1hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord1hNV(_s_)
        GL_FUNCTIONS_MAP[:glTexCoord1hNV].call(_s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord1hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord1hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord1hvNV(_v_)
        GL_FUNCTIONS_MAP[:glTexCoord1hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord2hNV(_s_, _t_)
        GL_FUNCTIONS_MAP[:glTexCoord2hNV].call(_s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord2hvNV(_v_)
        GL_FUNCTIONS_MAP[:glTexCoord2hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord3hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord3hNV(_s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glTexCoord3hNV].call(_s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord3hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord3hvNV(_v_)
        GL_FUNCTIONS_MAP[:glTexCoord3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4hNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord4hNV(_s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glTexCoord4hNV].call(_s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4hvNV)
    GL.module_eval(<<-SRC)
      def self.TexCoord4hvNV(_v_)
        GL_FUNCTIONS_MAP[:glTexCoord4hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1hNV(_target_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1hNV].call(_target_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2hNV(_target_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2hNV].call(_target_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3hNV(_target_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3hNV].call(_target_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4hNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4hNV(_target_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4hNV].call(_target_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4hvNV)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4hvNV(_target_, _v_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4hvNV].call(_target_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoordhNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordhNV] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordhNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordhNV)
    GL.module_eval(<<-SRC)
      def self.FogCoordhNV(_fog_)
        GL_FUNCTIONS_MAP[:glFogCoordhNV].call(_fog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoordhvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordhvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordhvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordhvNV)
    GL.module_eval(<<-SRC)
      def self.FogCoordhvNV(_fog_)
        GL_FUNCTIONS_MAP[:glFogCoordhvNV].call(_fog_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3hNV] = [-Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3hNV)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3hNV(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3hNV].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColor3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColor3hvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColor3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColor3hvNV)
    GL.module_eval(<<-SRC)
      def self.SecondaryColor3hvNV(_v_)
        GL_FUNCTIONS_MAP[:glSecondaryColor3hvNV].call(_v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexWeighthNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexWeighthNV] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexWeighthNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexWeighthNV)
    GL.module_eval(<<-SRC)
      def self.VertexWeighthNV(_weight_)
        GL_FUNCTIONS_MAP[:glVertexWeighthNV].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexWeighthvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexWeighthvNV] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexWeighthvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexWeighthvNV)
    GL.module_eval(<<-SRC)
      def self.VertexWeighthvNV(_weight_)
        GL_FUNCTIONS_MAP[:glVertexWeighthvNV].call(_weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1hNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1hNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2hNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2hNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3hNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3hNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4hNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4hNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT, -Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4hNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4hNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4hNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4hNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4hvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4hvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs1hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs1hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs1hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs1hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs1hvNV].call(_index_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs2hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs2hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs2hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs2hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs2hvNV].call(_index_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs3hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs3hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs3hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs3hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs3hvNV].call(_index_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs4hvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs4hvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs4hvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs4hvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4hvNV(_index_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs4hvNV].call(_index_, _n_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_NV_half_float

  def self.get_ext_command_GL_NV_half_float
    [
      'glVertex2hNV',
      'glVertex2hvNV',
      'glVertex3hNV',
      'glVertex3hvNV',
      'glVertex4hNV',
      'glVertex4hvNV',
      'glNormal3hNV',
      'glNormal3hvNV',
      'glColor3hNV',
      'glColor3hvNV',
      'glColor4hNV',
      'glColor4hvNV',
      'glTexCoord1hNV',
      'glTexCoord1hvNV',
      'glTexCoord2hNV',
      'glTexCoord2hvNV',
      'glTexCoord3hNV',
      'glTexCoord3hvNV',
      'glTexCoord4hNV',
      'glTexCoord4hvNV',
      'glMultiTexCoord1hNV',
      'glMultiTexCoord1hvNV',
      'glMultiTexCoord2hNV',
      'glMultiTexCoord2hvNV',
      'glMultiTexCoord3hNV',
      'glMultiTexCoord3hvNV',
      'glMultiTexCoord4hNV',
      'glMultiTexCoord4hvNV',
      'glFogCoordhNV',
      'glFogCoordhvNV',
      'glSecondaryColor3hNV',
      'glSecondaryColor3hvNV',
      'glVertexWeighthNV',
      'glVertexWeighthvNV',
      'glVertexAttrib1hNV',
      'glVertexAttrib1hvNV',
      'glVertexAttrib2hNV',
      'glVertexAttrib2hvNV',
      'glVertexAttrib3hNV',
      'glVertexAttrib3hvNV',
      'glVertexAttrib4hNV',
      'glVertexAttrib4hvNV',
      'glVertexAttribs1hvNV',
      'glVertexAttribs2hvNV',
      'glVertexAttribs3hvNV',
      'glVertexAttribs4hvNV',
    ]
  end # self.get_ext_command_GL_NV_half_float


  def self.define_ext_command_GL_NV_internalformat_sample_query
    GL::GL_FUNCTION_SYMBOLS << :glGetInternalformatSampleivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInternalformatSampleivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInternalformatSampleivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetInternalformatSampleivNV)
    GL.module_eval(<<-SRC)
      def self.GetInternalformatSampleivNV(_target_, _internalformat_, _samples_, _pname_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glGetInternalformatSampleivNV].call(_target_, _internalformat_, _samples_, _pname_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_internalformat_sample_query

  def self.get_ext_command_GL_NV_internalformat_sample_query
    [
      'glGetInternalformatSampleivNV',
    ]
  end # self.get_ext_command_GL_NV_internalformat_sample_query


  def self.define_ext_command_GL_NV_light_max_exponent
  end # self.define_ext_command_GL_NV_light_max_exponent

  def self.get_ext_command_GL_NV_light_max_exponent
    [
    ]
  end # self.get_ext_command_GL_NV_light_max_exponent


  def self.define_ext_command_GL_NV_gpu_multicast
    GL::GL_FUNCTION_SYMBOLS << :glRenderGpuMaskNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glRenderGpuMaskNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRenderGpuMaskNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glRenderGpuMaskNV)
    GL.module_eval(<<-SRC)
      def self.RenderGpuMaskNV(_mask_)
        GL_FUNCTIONS_MAP[:glRenderGpuMaskNV].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastBufferSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastBufferSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastBufferSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastBufferSubDataNV)
    GL.module_eval(<<-SRC)
      def self.MulticastBufferSubDataNV(_gpuMask_, _buffer_, _offset_, _size_, _data_)
        GL_FUNCTIONS_MAP[:glMulticastBufferSubDataNV].call(_gpuMask_, _buffer_, _offset_, _size_, _data_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastCopyBufferSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastCopyBufferSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastCopyBufferSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastCopyBufferSubDataNV)
    GL.module_eval(<<-SRC)
      def self.MulticastCopyBufferSubDataNV(_readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
        GL_FUNCTIONS_MAP[:glMulticastCopyBufferSubDataNV].call(_readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastCopyImageSubDataNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastCopyImageSubDataNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastCopyImageSubDataNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastCopyImageSubDataNV)
    GL.module_eval(<<-SRC)
      def self.MulticastCopyImageSubDataNV(_srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
        GL_FUNCTIONS_MAP[:glMulticastCopyImageSubDataNV].call(_srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastBlitFramebufferNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastBlitFramebufferNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastBlitFramebufferNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastBlitFramebufferNV)
    GL.module_eval(<<-SRC)
      def self.MulticastBlitFramebufferNV(_srcGpu_, _dstGpu_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
        GL_FUNCTIONS_MAP[:glMulticastBlitFramebufferNV].call(_srcGpu_, _dstGpu_, _srcX0_, _srcY0_, _srcX1_, _srcY1_, _dstX0_, _dstY0_, _dstX1_, _dstY1_, _mask_, _filter_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastFramebufferSampleLocationsfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastFramebufferSampleLocationsfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastFramebufferSampleLocationsfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastFramebufferSampleLocationsfvNV)
    GL.module_eval(<<-SRC)
      def self.MulticastFramebufferSampleLocationsfvNV(_gpu_, _framebuffer_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glMulticastFramebufferSampleLocationsfvNV].call(_gpu_, _framebuffer_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastBarrierNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastBarrierNV)
    GL.module_eval(<<-SRC)
      def self.MulticastBarrierNV()
        GL_FUNCTIONS_MAP[:glMulticastBarrierNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastWaitSyncNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastWaitSyncNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastWaitSyncNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastWaitSyncNV)
    GL.module_eval(<<-SRC)
      def self.MulticastWaitSyncNV(_signalGpu_, _waitGpuMask_)
        GL_FUNCTIONS_MAP[:glMulticastWaitSyncNV].call(_signalGpu_, _waitGpuMask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastGetQueryObjectivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastGetQueryObjectivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastGetQueryObjectivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastGetQueryObjectivNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjectivNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMulticastGetQueryObjectivNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastGetQueryObjectuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastGetQueryObjectuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastGetQueryObjectuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastGetQueryObjectuivNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjectuivNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMulticastGetQueryObjectuivNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastGetQueryObjecti64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastGetQueryObjecti64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastGetQueryObjecti64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastGetQueryObjecti64vNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjecti64vNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMulticastGetQueryObjecti64vNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastGetQueryObjectui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastGetQueryObjectui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastGetQueryObjectui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastGetQueryObjectui64vNV)
    GL.module_eval(<<-SRC)
      def self.MulticastGetQueryObjectui64vNV(_gpu_, _id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glMulticastGetQueryObjectui64vNV].call(_gpu_, _id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_gpu_multicast

  def self.get_ext_command_GL_NV_gpu_multicast
    [
      'glRenderGpuMaskNV',
      'glMulticastBufferSubDataNV',
      'glMulticastCopyBufferSubDataNV',
      'glMulticastCopyImageSubDataNV',
      'glMulticastBlitFramebufferNV',
      'glMulticastFramebufferSampleLocationsfvNV',
      'glMulticastBarrierNV',
      'glMulticastWaitSyncNV',
      'glMulticastGetQueryObjectivNV',
      'glMulticastGetQueryObjectuivNV',
      'glMulticastGetQueryObjecti64vNV',
      'glMulticastGetQueryObjectui64vNV',
    ]
  end # self.get_ext_command_GL_NV_gpu_multicast


  def self.define_ext_command_GL_NVX_gpu_multicast2
    GL::GL_FUNCTION_SYMBOLS << :glUploadGpuMaskNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glUploadGpuMaskNVX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUploadGpuMaskNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glUploadGpuMaskNVX)
    GL.module_eval(<<-SRC)
      def self.UploadGpuMaskNVX(_mask_)
        GL_FUNCTIONS_MAP[:glUploadGpuMaskNVX].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastViewportArrayvNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastViewportArrayvNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastViewportArrayvNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastViewportArrayvNVX)
    GL.module_eval(<<-SRC)
      def self.MulticastViewportArrayvNVX(_gpu_, _first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glMulticastViewportArrayvNVX].call(_gpu_, _first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastViewportPositionWScaleNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastViewportPositionWScaleNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastViewportPositionWScaleNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastViewportPositionWScaleNVX)
    GL.module_eval(<<-SRC)
      def self.MulticastViewportPositionWScaleNVX(_gpu_, _index_, _xcoeff_, _ycoeff_)
        GL_FUNCTIONS_MAP[:glMulticastViewportPositionWScaleNVX].call(_gpu_, _index_, _xcoeff_, _ycoeff_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMulticastScissorArrayvNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glMulticastScissorArrayvNVX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMulticastScissorArrayvNVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glMulticastScissorArrayvNVX)
    GL.module_eval(<<-SRC)
      def self.MulticastScissorArrayvNVX(_gpu_, _first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glMulticastScissorArrayvNVX].call(_gpu_, _first_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAsyncCopyBufferSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glAsyncCopyBufferSubDataNVX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAsyncCopyBufferSubDataNVX] = -Fiddle::TYPE_INT
    GL.bind_command(:glAsyncCopyBufferSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.AsyncCopyBufferSubDataNVX(_waitSemaphoreCount_, _waitSemaphoreArray_, _fenceValueArray_, _readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
        GL_FUNCTIONS_MAP[:glAsyncCopyBufferSubDataNVX].call(_waitSemaphoreCount_, _waitSemaphoreArray_, _fenceValueArray_, _readGpu_, _writeGpuMask_, _readBuffer_, _writeBuffer_, _readOffset_, _writeOffset_, _size_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAsyncCopyImageSubDataNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glAsyncCopyImageSubDataNVX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAsyncCopyImageSubDataNVX] = -Fiddle::TYPE_INT
    GL.bind_command(:glAsyncCopyImageSubDataNVX)
    GL.module_eval(<<-SRC)
      def self.AsyncCopyImageSubDataNVX(_waitSemaphoreCount_, _waitSemaphoreArray_, _waitValueArray_, _srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
        GL_FUNCTIONS_MAP[:glAsyncCopyImageSubDataNVX].call(_waitSemaphoreCount_, _waitSemaphoreArray_, _waitValueArray_, _srcGpu_, _dstGpuMask_, _srcName_, _srcTarget_, _srcLevel_, _srcX_, _srcY_, _srcZ_, _dstName_, _dstTarget_, _dstLevel_, _dstX_, _dstY_, _dstZ_, _srcWidth_, _srcHeight_, _srcDepth_, _signalSemaphoreCount_, _signalSemaphoreArray_, _signalValueArray_)
      end
    SRC
  end # self.define_ext_command_GL_NVX_gpu_multicast2

  def self.get_ext_command_GL_NVX_gpu_multicast2
    [
      'glUploadGpuMaskNVX',
      'glMulticastViewportArrayvNVX',
      'glMulticastViewportPositionWScaleNVX',
      'glMulticastScissorArrayvNVX',
      'glAsyncCopyBufferSubDataNVX',
      'glAsyncCopyImageSubDataNVX',
    ]
  end # self.get_ext_command_GL_NVX_gpu_multicast2


  def self.define_ext_command_GL_NVX_progress_fence
    GL::GL_FUNCTION_SYMBOLS << :glCreateProgressFenceNVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glCreateProgressFenceNVX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCreateProgressFenceNVX] = -Fiddle::TYPE_INT
    GL.bind_command(:glCreateProgressFenceNVX)
    GL.module_eval(<<-SRC)
      def self.CreateProgressFenceNVX()
        GL_FUNCTIONS_MAP[:glCreateProgressFenceNVX].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSignalSemaphoreui64NVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glSignalSemaphoreui64NVX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSignalSemaphoreui64NVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glSignalSemaphoreui64NVX)
    GL.module_eval(<<-SRC)
      def self.SignalSemaphoreui64NVX(_signalGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
        GL_FUNCTIONS_MAP[:glSignalSemaphoreui64NVX].call(_signalGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWaitSemaphoreui64NVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glWaitSemaphoreui64NVX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWaitSemaphoreui64NVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glWaitSemaphoreui64NVX)
    GL.module_eval(<<-SRC)
      def self.WaitSemaphoreui64NVX(_waitGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
        GL_FUNCTIONS_MAP[:glWaitSemaphoreui64NVX].call(_waitGpu_, _fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClientWaitSemaphoreui64NVX
    GL::GL_FUNCTIONS_ARGS_MAP[:glClientWaitSemaphoreui64NVX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClientWaitSemaphoreui64NVX] = Fiddle::TYPE_VOID
    GL.bind_command(:glClientWaitSemaphoreui64NVX)
    GL.module_eval(<<-SRC)
      def self.ClientWaitSemaphoreui64NVX(_fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
        GL_FUNCTIONS_MAP[:glClientWaitSemaphoreui64NVX].call(_fenceObjectCount_, _semaphoreArray_, _fenceValueArray_)
      end
    SRC
  end # self.define_ext_command_GL_NVX_progress_fence

  def self.get_ext_command_GL_NVX_progress_fence
    [
      'glCreateProgressFenceNVX',
      'glSignalSemaphoreui64NVX',
      'glWaitSemaphoreui64NVX',
      'glClientWaitSemaphoreui64NVX',
    ]
  end # self.get_ext_command_GL_NVX_progress_fence


  def self.define_ext_command_GL_NV_memory_attachment
    GL::GL_FUNCTION_SYMBOLS << :glGetMemoryObjectDetachedResourcesuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMemoryObjectDetachedResourcesuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMemoryObjectDetachedResourcesuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMemoryObjectDetachedResourcesuivNV)
    GL.module_eval(<<-SRC)
      def self.GetMemoryObjectDetachedResourcesuivNV(_memory_, _pname_, _first_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glGetMemoryObjectDetachedResourcesuivNV].call(_memory_, _pname_, _first_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResetMemoryObjectParameterNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glResetMemoryObjectParameterNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResetMemoryObjectParameterNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glResetMemoryObjectParameterNV)
    GL.module_eval(<<-SRC)
      def self.ResetMemoryObjectParameterNV(_memory_, _pname_)
        GL_FUNCTIONS_MAP[:glResetMemoryObjectParameterNV].call(_memory_, _pname_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.TexAttachMemoryNV(_target_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTexAttachMemoryNV].call(_target_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBufferAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.BufferAttachMemoryNV(_target_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glBufferAttachMemoryNV].call(_target_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.TextureAttachMemoryNV(_texture_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glTextureAttachMemoryNV].call(_texture_, _memory_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferAttachMemoryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferAttachMemoryNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferAttachMemoryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferAttachMemoryNV)
    GL.module_eval(<<-SRC)
      def self.NamedBufferAttachMemoryNV(_buffer_, _memory_, _offset_)
        GL_FUNCTIONS_MAP[:glNamedBufferAttachMemoryNV].call(_buffer_, _memory_, _offset_)
      end
    SRC
  end # self.define_ext_command_GL_NV_memory_attachment

  def self.get_ext_command_GL_NV_memory_attachment
    [
      'glGetMemoryObjectDetachedResourcesuivNV',
      'glResetMemoryObjectParameterNV',
      'glTexAttachMemoryNV',
      'glBufferAttachMemoryNV',
      'glTextureAttachMemoryNV',
      'glNamedBufferAttachMemoryNV',
    ]
  end # self.get_ext_command_GL_NV_memory_attachment


  def self.define_ext_command_GL_NV_memory_object_sparse
    GL::GL_FUNCTION_SYMBOLS << :glBufferPageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferPageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferPageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferPageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.BufferPageCommitmentMemNV(_target_, _offset_, _size_, _memory_, _memOffset_, _commit_)
        GL_FUNCTIONS_MAP[:glBufferPageCommitmentMemNV].call(_target_, _offset_, _size_, _memory_, _memOffset_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexPageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexPageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexPageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexPageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.TexPageCommitmentMemNV(_target_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
        GL_FUNCTIONS_MAP[:glTexPageCommitmentMemNV].call(_target_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedBufferPageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedBufferPageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedBufferPageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedBufferPageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.NamedBufferPageCommitmentMemNV(_buffer_, _offset_, _size_, _memory_, _memOffset_, _commit_)
        GL_FUNCTIONS_MAP[:glNamedBufferPageCommitmentMemNV].call(_buffer_, _offset_, _size_, _memory_, _memOffset_, _commit_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexturePageCommitmentMemNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexturePageCommitmentMemNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexturePageCommitmentMemNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexturePageCommitmentMemNV)
    GL.module_eval(<<-SRC)
      def self.TexturePageCommitmentMemNV(_texture_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
        GL_FUNCTIONS_MAP[:glTexturePageCommitmentMemNV].call(_texture_, _layer_, _level_, _xoffset_, _yoffset_, _zoffset_, _width_, _height_, _depth_, _memory_, _offset_, _commit_)
      end
    SRC
  end # self.define_ext_command_GL_NV_memory_object_sparse

  def self.get_ext_command_GL_NV_memory_object_sparse
    [
      'glBufferPageCommitmentMemNV',
      'glTexPageCommitmentMemNV',
      'glNamedBufferPageCommitmentMemNV',
      'glTexturePageCommitmentMemNV',
    ]
  end # self.get_ext_command_GL_NV_memory_object_sparse


  def self.define_ext_command_GL_NV_mesh_shader
    GL::GL_FUNCTION_SYMBOLS << :glDrawMeshTasksNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawMeshTasksNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawMeshTasksNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawMeshTasksNV)
    GL.module_eval(<<-SRC)
      def self.DrawMeshTasksNV(_first_, _count_)
        GL_FUNCTIONS_MAP[:glDrawMeshTasksNV].call(_first_, _count_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawMeshTasksIndirectNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawMeshTasksIndirectNV] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawMeshTasksIndirectNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawMeshTasksIndirectNV)
    GL.module_eval(<<-SRC)
      def self.DrawMeshTasksIndirectNV(_indirect_)
        GL_FUNCTIONS_MAP[:glDrawMeshTasksIndirectNV].call(_indirect_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawMeshTasksIndirectNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawMeshTasksIndirectNV] = [Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawMeshTasksIndirectNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawMeshTasksIndirectNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawMeshTasksIndirectNV(_indirect_, _drawcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawMeshTasksIndirectNV].call(_indirect_, _drawcount_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiDrawMeshTasksIndirectCountNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiDrawMeshTasksIndirectCountNV] = [Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiDrawMeshTasksIndirectCountNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiDrawMeshTasksIndirectCountNV)
    GL.module_eval(<<-SRC)
      def self.MultiDrawMeshTasksIndirectCountNV(_indirect_, _drawcount_, _maxdrawcount_, _stride_)
        GL_FUNCTIONS_MAP[:glMultiDrawMeshTasksIndirectCountNV].call(_indirect_, _drawcount_, _maxdrawcount_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_NV_mesh_shader

  def self.get_ext_command_GL_NV_mesh_shader
    [
      'glDrawMeshTasksNV',
      'glDrawMeshTasksIndirectNV',
      'glMultiDrawMeshTasksIndirectNV',
      'glMultiDrawMeshTasksIndirectCountNV',
    ]
  end # self.get_ext_command_GL_NV_mesh_shader


  def self.define_ext_command_GL_NV_multisample_coverage
  end # self.define_ext_command_GL_NV_multisample_coverage

  def self.get_ext_command_GL_NV_multisample_coverage
    [
    ]
  end # self.get_ext_command_GL_NV_multisample_coverage


  def self.define_ext_command_GL_NV_multisample_filter_hint
  end # self.define_ext_command_GL_NV_multisample_filter_hint

  def self.get_ext_command_GL_NV_multisample_filter_hint
    [
    ]
  end # self.get_ext_command_GL_NV_multisample_filter_hint


  def self.define_ext_command_GL_NV_occlusion_query
    GL::GL_FUNCTION_SYMBOLS << :glGenOcclusionQueriesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenOcclusionQueriesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenOcclusionQueriesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenOcclusionQueriesNV)
    GL.module_eval(<<-SRC)
      def self.GenOcclusionQueriesNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glGenOcclusionQueriesNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteOcclusionQueriesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteOcclusionQueriesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteOcclusionQueriesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteOcclusionQueriesNV)
    GL.module_eval(<<-SRC)
      def self.DeleteOcclusionQueriesNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glDeleteOcclusionQueriesNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsOcclusionQueryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsOcclusionQueryNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsOcclusionQueryNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsOcclusionQueryNV)
    GL.module_eval(<<-SRC)
      def self.IsOcclusionQueryNV(_id_)
        GL_FUNCTIONS_MAP[:glIsOcclusionQueryNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBeginOcclusionQueryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginOcclusionQueryNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginOcclusionQueryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginOcclusionQueryNV)
    GL.module_eval(<<-SRC)
      def self.BeginOcclusionQueryNV(_id_)
        GL_FUNCTIONS_MAP[:glBeginOcclusionQueryNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndOcclusionQueryNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndOcclusionQueryNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndOcclusionQueryNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndOcclusionQueryNV)
    GL.module_eval(<<-SRC)
      def self.EndOcclusionQueryNV()
        GL_FUNCTIONS_MAP[:glEndOcclusionQueryNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetOcclusionQueryivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetOcclusionQueryivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetOcclusionQueryivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetOcclusionQueryivNV)
    GL.module_eval(<<-SRC)
      def self.GetOcclusionQueryivNV(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetOcclusionQueryivNV].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetOcclusionQueryuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetOcclusionQueryuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetOcclusionQueryuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetOcclusionQueryuivNV)
    GL.module_eval(<<-SRC)
      def self.GetOcclusionQueryuivNV(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetOcclusionQueryuivNV].call(_id_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_occlusion_query

  def self.get_ext_command_GL_NV_occlusion_query
    [
      'glGenOcclusionQueriesNV',
      'glDeleteOcclusionQueriesNV',
      'glIsOcclusionQueryNV',
      'glBeginOcclusionQueryNV',
      'glEndOcclusionQueryNV',
      'glGetOcclusionQueryivNV',
      'glGetOcclusionQueryuivNV',
    ]
  end # self.get_ext_command_GL_NV_occlusion_query


  def self.define_ext_command_GL_NV_packed_depth_stencil
  end # self.define_ext_command_GL_NV_packed_depth_stencil

  def self.get_ext_command_GL_NV_packed_depth_stencil
    [
    ]
  end # self.get_ext_command_GL_NV_packed_depth_stencil


  def self.define_ext_command_GL_NV_parameter_buffer_object
    GL::GL_FUNCTION_SYMBOLS << :glProgramBufferParametersfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramBufferParametersfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramBufferParametersfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramBufferParametersfvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramBufferParametersfvNV(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramBufferParametersfvNV].call(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramBufferParametersIivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramBufferParametersIivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramBufferParametersIivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramBufferParametersIivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramBufferParametersIivNV(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramBufferParametersIivNV].call(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramBufferParametersIuivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramBufferParametersIuivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramBufferParametersIuivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramBufferParametersIuivNV)
    GL.module_eval(<<-SRC)
      def self.ProgramBufferParametersIuivNV(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
        GL_FUNCTIONS_MAP[:glProgramBufferParametersIuivNV].call(_target_, _bindingIndex_, _wordIndex_, _count_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_parameter_buffer_object

  def self.get_ext_command_GL_NV_parameter_buffer_object
    [
      'glProgramBufferParametersfvNV',
      'glProgramBufferParametersIivNV',
      'glProgramBufferParametersIuivNV',
    ]
  end # self.get_ext_command_GL_NV_parameter_buffer_object


  def self.define_ext_command_GL_NV_parameter_buffer_object2
  end # self.define_ext_command_GL_NV_parameter_buffer_object2

  def self.get_ext_command_GL_NV_parameter_buffer_object2
    [
    ]
  end # self.get_ext_command_GL_NV_parameter_buffer_object2


  def self.define_ext_command_GL_NV_path_rendering
    GL::GL_FUNCTION_SYMBOLS << :glGenPathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenPathsNV] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenPathsNV] = -Fiddle::TYPE_INT
    GL.bind_command(:glGenPathsNV)
    GL.module_eval(<<-SRC)
      def self.GenPathsNV(_range_)
        GL_FUNCTIONS_MAP[:glGenPathsNV].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeletePathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeletePathsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeletePathsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeletePathsNV)
    GL.module_eval(<<-SRC)
      def self.DeletePathsNV(_path_, _range_)
        GL_FUNCTIONS_MAP[:glDeletePathsNV].call(_path_, _range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsPathNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsPathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsPathNV)
    GL.module_eval(<<-SRC)
      def self.IsPathNV(_path_)
        GL_FUNCTIONS_MAP[:glIsPathNV].call(_path_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathCommandsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathCommandsNV)
    GL.module_eval(<<-SRC)
      def self.PathCommandsNV(_path_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:glPathCommandsNV].call(_path_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathCoordsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathCoordsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathCoordsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathCoordsNV)
    GL.module_eval(<<-SRC)
      def self.PathCoordsNV(_path_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:glPathCoordsNV].call(_path_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathSubCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathSubCommandsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathSubCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathSubCommandsNV)
    GL.module_eval(<<-SRC)
      def self.PathSubCommandsNV(_path_, _commandStart_, _commandsToDelete_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:glPathSubCommandsNV].call(_path_, _commandStart_, _commandsToDelete_, _numCommands_, _commands_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathSubCoordsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathSubCoordsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathSubCoordsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathSubCoordsNV)
    GL.module_eval(<<-SRC)
      def self.PathSubCoordsNV(_path_, _coordStart_, _numCoords_, _coordType_, _coords_)
        GL_FUNCTIONS_MAP[:glPathSubCoordsNV].call(_path_, _coordStart_, _numCoords_, _coordType_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathStringNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathStringNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathStringNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathStringNV)
    GL.module_eval(<<-SRC)
      def self.PathStringNV(_path_, _format_, _length_, _pathString_)
        GL_FUNCTIONS_MAP[:glPathStringNV].call(_path_, _format_, _length_, _pathString_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathGlyphsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathGlyphsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathGlyphsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathGlyphsNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphsNV(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _numGlyphs_, _type_, _charcodes_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:glPathGlyphsNV].call(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _numGlyphs_, _type_, _charcodes_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathGlyphRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathGlyphRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathGlyphRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathGlyphRangeNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphRangeNV(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyph_, _numGlyphs_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:glPathGlyphRangeNV].call(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyph_, _numGlyphs_, _handleMissingGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glWeightPathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glWeightPathsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glWeightPathsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glWeightPathsNV)
    GL.module_eval(<<-SRC)
      def self.WeightPathsNV(_resultPath_, _numPaths_, _paths_, _weights_)
        GL_FUNCTIONS_MAP[:glWeightPathsNV].call(_resultPath_, _numPaths_, _paths_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyPathNV)
    GL.module_eval(<<-SRC)
      def self.CopyPathNV(_resultPath_, _srcPath_)
        GL_FUNCTIONS_MAP[:glCopyPathNV].call(_resultPath_, _srcPath_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInterpolatePathsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glInterpolatePathsNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInterpolatePathsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glInterpolatePathsNV)
    GL.module_eval(<<-SRC)
      def self.InterpolatePathsNV(_resultPath_, _pathA_, _pathB_, _weight_)
        GL_FUNCTIONS_MAP[:glInterpolatePathsNV].call(_resultPath_, _pathA_, _pathB_, _weight_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformPathNV)
    GL.module_eval(<<-SRC)
      def self.TransformPathNV(_resultPath_, _srcPath_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glTransformPathNV].call(_resultPath_, _srcPath_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathParameterivNV)
    GL.module_eval(<<-SRC)
      def self.PathParameterivNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glPathParameterivNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathParameteriNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathParameteriNV)
    GL.module_eval(<<-SRC)
      def self.PathParameteriNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glPathParameteriNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.PathParameterfvNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glPathParameterfvNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathParameterfNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathParameterfNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathParameterfNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathParameterfNV)
    GL.module_eval(<<-SRC)
      def self.PathParameterfNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glPathParameterfNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathDashArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathDashArrayNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathDashArrayNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathDashArrayNV)
    GL.module_eval(<<-SRC)
      def self.PathDashArrayNV(_path_, _dashCount_, _dashArray_)
        GL_FUNCTIONS_MAP[:glPathDashArrayNV].call(_path_, _dashCount_, _dashArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathStencilFuncNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathStencilFuncNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathStencilFuncNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathStencilFuncNV)
    GL.module_eval(<<-SRC)
      def self.PathStencilFuncNV(_func_, _ref_, _mask_)
        GL_FUNCTIONS_MAP[:glPathStencilFuncNV].call(_func_, _ref_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathStencilDepthOffsetNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathStencilDepthOffsetNV] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathStencilDepthOffsetNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathStencilDepthOffsetNV)
    GL.module_eval(<<-SRC)
      def self.PathStencilDepthOffsetNV(_factor_, _units_)
        GL_FUNCTIONS_MAP[:glPathStencilDepthOffsetNV].call(_factor_, _units_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilFillPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilFillPathNV)
    GL.module_eval(<<-SRC)
      def self.StencilFillPathNV(_path_, _fillMode_, _mask_)
        GL_FUNCTIONS_MAP[:glStencilFillPathNV].call(_path_, _fillMode_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilStrokePathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilStrokePathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.StencilStrokePathNV(_path_, _reference_, _mask_)
        GL_FUNCTIONS_MAP[:glStencilStrokePathNV].call(_path_, _reference_, _mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilFillPathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilFillPathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilFillPathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilFillPathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilFillPathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glStencilFillPathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilStrokePathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilStrokePathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilStrokePathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilStrokePathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilStrokePathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glStencilStrokePathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathCoverDepthFuncNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathCoverDepthFuncNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathCoverDepthFuncNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathCoverDepthFuncNV)
    GL.module_eval(<<-SRC)
      def self.PathCoverDepthFuncNV(_func_)
        GL_FUNCTIONS_MAP[:glPathCoverDepthFuncNV].call(_func_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCoverFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCoverFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCoverFillPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCoverFillPathNV)
    GL.module_eval(<<-SRC)
      def self.CoverFillPathNV(_path_, _coverMode_)
        GL_FUNCTIONS_MAP[:glCoverFillPathNV].call(_path_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCoverStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCoverStrokePathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCoverStrokePathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCoverStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.CoverStrokePathNV(_path_, _coverMode_)
        GL_FUNCTIONS_MAP[:glCoverStrokePathNV].call(_path_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCoverFillPathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCoverFillPathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCoverFillPathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCoverFillPathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.CoverFillPathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glCoverFillPathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCoverStrokePathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCoverStrokePathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCoverStrokePathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCoverStrokePathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.CoverStrokePathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glCoverStrokePathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetPathParameterivNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glGetPathParameterivNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetPathParameterfvNV(_path_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glGetPathParameterfvNV].call(_path_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathCommandsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathCommandsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathCommandsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathCommandsNV)
    GL.module_eval(<<-SRC)
      def self.GetPathCommandsNV(_path_, _commands_)
        GL_FUNCTIONS_MAP[:glGetPathCommandsNV].call(_path_, _commands_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathCoordsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathCoordsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathCoordsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathCoordsNV)
    GL.module_eval(<<-SRC)
      def self.GetPathCoordsNV(_path_, _coords_)
        GL_FUNCTIONS_MAP[:glGetPathCoordsNV].call(_path_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathDashArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathDashArrayNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathDashArrayNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathDashArrayNV)
    GL.module_eval(<<-SRC)
      def self.GetPathDashArrayNV(_path_, _dashArray_)
        GL_FUNCTIONS_MAP[:glGetPathDashArrayNV].call(_path_, _dashArray_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathMetricsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathMetricsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathMetricsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathMetricsNV)
    GL.module_eval(<<-SRC)
      def self.GetPathMetricsNV(_metricQueryMask_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _stride_, _metrics_)
        GL_FUNCTIONS_MAP[:glGetPathMetricsNV].call(_metricQueryMask_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _stride_, _metrics_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathMetricRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathMetricRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathMetricRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathMetricRangeNV)
    GL.module_eval(<<-SRC)
      def self.GetPathMetricRangeNV(_metricQueryMask_, _firstPathName_, _numPaths_, _stride_, _metrics_)
        GL_FUNCTIONS_MAP[:glGetPathMetricRangeNV].call(_metricQueryMask_, _firstPathName_, _numPaths_, _stride_, _metrics_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathSpacingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathSpacingNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathSpacingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathSpacingNV)
    GL.module_eval(<<-SRC)
      def self.GetPathSpacingNV(_pathListMode_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _advanceScale_, _kerningScale_, _transformType_, _returnedSpacing_)
        GL_FUNCTIONS_MAP[:glGetPathSpacingNV].call(_pathListMode_, _numPaths_, _pathNameType_, _paths_, _pathBase_, _advanceScale_, _kerningScale_, _transformType_, _returnedSpacing_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsPointInFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsPointInFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsPointInFillPathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsPointInFillPathNV)
    GL.module_eval(<<-SRC)
      def self.IsPointInFillPathNV(_path_, _mask_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glIsPointInFillPathNV].call(_path_, _mask_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsPointInStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsPointInStrokePathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsPointInStrokePathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsPointInStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.IsPointInStrokePathNV(_path_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glIsPointInStrokePathNV].call(_path_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathLengthNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathLengthNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathLengthNV] = Fiddle::TYPE_FLOAT
    GL.bind_command(:glGetPathLengthNV)
    GL.module_eval(<<-SRC)
      def self.GetPathLengthNV(_path_, _startSegment_, _numSegments_)
        GL_FUNCTIONS_MAP[:glGetPathLengthNV].call(_path_, _startSegment_, _numSegments_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointAlongPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointAlongPathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointAlongPathNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glPointAlongPathNV)
    GL.module_eval(<<-SRC)
      def self.PointAlongPathNV(_path_, _startSegment_, _numSegments_, _distance_, _x_, _y_, _tangentX_, _tangentY_)
        GL_FUNCTIONS_MAP[:glPointAlongPathNV].call(_path_, _startSegment_, _numSegments_, _distance_, _x_, _y_, _tangentX_, _tangentY_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoad3x2fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoad3x2fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoad3x2fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoad3x2fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixLoad3x2fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoad3x2fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoad3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoad3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoad3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoad3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixLoad3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoad3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadTranspose3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadTranspose3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadTranspose3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadTranspose3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTranspose3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadTranspose3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMult3x2fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMult3x2fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMult3x2fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMult3x2fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixMult3x2fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMult3x2fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMult3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMult3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMult3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMult3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixMult3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMult3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultTranspose3x3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultTranspose3x3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultTranspose3x3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultTranspose3x3fNV)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTranspose3x3fNV(_matrixMode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultTranspose3x3fNV].call(_matrixMode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilThenCoverFillPathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilThenCoverFillPathNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilThenCoverFillPathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilThenCoverFillPathNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverFillPathNV(_path_, _fillMode_, _mask_, _coverMode_)
        GL_FUNCTIONS_MAP[:glStencilThenCoverFillPathNV].call(_path_, _fillMode_, _mask_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilThenCoverStrokePathNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilThenCoverStrokePathNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilThenCoverStrokePathNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilThenCoverStrokePathNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverStrokePathNV(_path_, _reference_, _mask_, _coverMode_)
        GL_FUNCTIONS_MAP[:glStencilThenCoverStrokePathNV].call(_path_, _reference_, _mask_, _coverMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilThenCoverFillPathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilThenCoverFillPathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilThenCoverFillPathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilThenCoverFillPathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverFillPathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glStencilThenCoverFillPathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _fillMode_, _mask_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStencilThenCoverStrokePathInstancedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glStencilThenCoverStrokePathInstancedNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStencilThenCoverStrokePathInstancedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glStencilThenCoverStrokePathInstancedNV)
    GL.module_eval(<<-SRC)
      def self.StencilThenCoverStrokePathInstancedNV(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _coverMode_, _transformType_, _transformValues_)
        GL_FUNCTIONS_MAP[:glStencilThenCoverStrokePathInstancedNV].call(_numPaths_, _pathNameType_, _paths_, _pathBase_, _reference_, _mask_, _coverMode_, _transformType_, _transformValues_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathGlyphIndexRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathGlyphIndexRangeNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathGlyphIndexRangeNV] = -Fiddle::TYPE_INT
    GL.bind_command(:glPathGlyphIndexRangeNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphIndexRangeNV(_fontTarget_, _fontName_, _fontStyle_, _pathParameterTemplate_, _emScale_, _baseAndCount_)
        GL_FUNCTIONS_MAP[:glPathGlyphIndexRangeNV].call(_fontTarget_, _fontName_, _fontStyle_, _pathParameterTemplate_, _emScale_, _baseAndCount_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathGlyphIndexArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathGlyphIndexArrayNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathGlyphIndexArrayNV] = -Fiddle::TYPE_INT
    GL.bind_command(:glPathGlyphIndexArrayNV)
    GL.module_eval(<<-SRC)
      def self.PathGlyphIndexArrayNV(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:glPathGlyphIndexArrayNV].call(_firstPathName_, _fontTarget_, _fontName_, _fontStyle_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathMemoryGlyphIndexArrayNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathMemoryGlyphIndexArrayNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathMemoryGlyphIndexArrayNV] = -Fiddle::TYPE_INT
    GL.bind_command(:glPathMemoryGlyphIndexArrayNV)
    GL.module_eval(<<-SRC)
      def self.PathMemoryGlyphIndexArrayNV(_firstPathName_, _fontTarget_, _fontSize_, _fontData_, _faceIndex_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
        GL_FUNCTIONS_MAP[:glPathMemoryGlyphIndexArrayNV].call(_firstPathName_, _fontTarget_, _fontSize_, _fontData_, _faceIndex_, _firstGlyphIndex_, _numGlyphs_, _pathParameterTemplate_, _emScale_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramPathFragmentInputGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramPathFragmentInputGenNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramPathFragmentInputGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramPathFragmentInputGenNV)
    GL.module_eval(<<-SRC)
      def self.ProgramPathFragmentInputGenNV(_program_, _location_, _genMode_, _components_, _coeffs_)
        GL_FUNCTIONS_MAP[:glProgramPathFragmentInputGenNV].call(_program_, _location_, _genMode_, _components_, _coeffs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramResourcefvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramResourcefvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramResourcefvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramResourcefvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramResourcefvNV(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramResourcefvNV].call(_program_, _programInterface_, _index_, _propCount_, _props_, _count_, _length_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathColorGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathColorGenNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathColorGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathColorGenNV)
    GL.module_eval(<<-SRC)
      def self.PathColorGenNV(_color_, _genMode_, _colorFormat_, _coeffs_)
        GL_FUNCTIONS_MAP[:glPathColorGenNV].call(_color_, _genMode_, _colorFormat_, _coeffs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathTexGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathTexGenNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathTexGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathTexGenNV)
    GL.module_eval(<<-SRC)
      def self.PathTexGenNV(_texCoordSet_, _genMode_, _components_, _coeffs_)
        GL_FUNCTIONS_MAP[:glPathTexGenNV].call(_texCoordSet_, _genMode_, _components_, _coeffs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPathFogGenNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPathFogGenNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPathFogGenNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPathFogGenNV)
    GL.module_eval(<<-SRC)
      def self.PathFogGenNV(_genMode_)
        GL_FUNCTIONS_MAP[:glPathFogGenNV].call(_genMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathColorGenivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathColorGenivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathColorGenivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathColorGenivNV)
    GL.module_eval(<<-SRC)
      def self.GetPathColorGenivNV(_color_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glGetPathColorGenivNV].call(_color_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathColorGenfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathColorGenfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathColorGenfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathColorGenfvNV)
    GL.module_eval(<<-SRC)
      def self.GetPathColorGenfvNV(_color_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glGetPathColorGenfvNV].call(_color_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathTexGenivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathTexGenivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathTexGenivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathTexGenivNV)
    GL.module_eval(<<-SRC)
      def self.GetPathTexGenivNV(_texCoordSet_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glGetPathTexGenivNV].call(_texCoordSet_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPathTexGenfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPathTexGenfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPathTexGenfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPathTexGenfvNV)
    GL.module_eval(<<-SRC)
      def self.GetPathTexGenfvNV(_texCoordSet_, _pname_, _value_)
        GL_FUNCTIONS_MAP[:glGetPathTexGenfvNV].call(_texCoordSet_, _pname_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixFrustumEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixFrustumEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixFrustumEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixFrustumEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixFrustumEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:glMatrixFrustumEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadIdentityEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadIdentityEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadIdentityEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadIdentityEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadIdentityEXT(_mode_)
        GL_FUNCTIONS_MAP[:glMatrixLoadIdentityEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoadfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoadfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoadfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoadfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoadfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoadfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixLoaddEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixLoaddEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixLoaddEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixLoaddEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixLoaddEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixLoaddEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultTransposefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultTransposefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultTransposefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultTransposefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposefEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultTransposefEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultTransposedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultTransposedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultTransposedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultTransposedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultTransposedEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultTransposedEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultfEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultfEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultfEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultfEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultfEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultfEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixMultdEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixMultdEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixMultdEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixMultdEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixMultdEXT(_mode_, _m_)
        GL_FUNCTIONS_MAP[:glMatrixMultdEXT].call(_mode_, _m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixOrthoEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixOrthoEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixOrthoEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixOrthoEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixOrthoEXT(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
        GL_FUNCTIONS_MAP[:glMatrixOrthoEXT].call(_mode_, _left_, _right_, _bottom_, _top_, _zNear_, _zFar_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixPopEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixPopEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixPopEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixPopEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPopEXT(_mode_)
        GL_FUNCTIONS_MAP[:glMatrixPopEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixPushEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixPushEXT] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixPushEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixPushEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixPushEXT(_mode_)
        GL_FUNCTIONS_MAP[:glMatrixPushEXT].call(_mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixRotatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixRotatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixRotatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixRotatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatefEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixRotatefEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixRotatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixRotatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixRotatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixRotatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixRotatedEXT(_mode_, _angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixRotatedEXT].call(_mode_, _angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixScalefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixScalefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixScalefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixScalefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScalefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixScalefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixScaledEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixScaledEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixScaledEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixScaledEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixScaledEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixScaledEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixTranslatefEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixTranslatefEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixTranslatefEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixTranslatefEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatefEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixTranslatefEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMatrixTranslatedEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glMatrixTranslatedEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMatrixTranslatedEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glMatrixTranslatedEXT)
    GL.module_eval(<<-SRC)
      def self.MatrixTranslatedEXT(_mode_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glMatrixTranslatedEXT].call(_mode_, _x_, _y_, _z_)
      end
    SRC
  end # self.define_ext_command_GL_NV_path_rendering

  def self.get_ext_command_GL_NV_path_rendering
    [
      'glGenPathsNV',
      'glDeletePathsNV',
      'glIsPathNV',
      'glPathCommandsNV',
      'glPathCoordsNV',
      'glPathSubCommandsNV',
      'glPathSubCoordsNV',
      'glPathStringNV',
      'glPathGlyphsNV',
      'glPathGlyphRangeNV',
      'glWeightPathsNV',
      'glCopyPathNV',
      'glInterpolatePathsNV',
      'glTransformPathNV',
      'glPathParameterivNV',
      'glPathParameteriNV',
      'glPathParameterfvNV',
      'glPathParameterfNV',
      'glPathDashArrayNV',
      'glPathStencilFuncNV',
      'glPathStencilDepthOffsetNV',
      'glStencilFillPathNV',
      'glStencilStrokePathNV',
      'glStencilFillPathInstancedNV',
      'glStencilStrokePathInstancedNV',
      'glPathCoverDepthFuncNV',
      'glCoverFillPathNV',
      'glCoverStrokePathNV',
      'glCoverFillPathInstancedNV',
      'glCoverStrokePathInstancedNV',
      'glGetPathParameterivNV',
      'glGetPathParameterfvNV',
      'glGetPathCommandsNV',
      'glGetPathCoordsNV',
      'glGetPathDashArrayNV',
      'glGetPathMetricsNV',
      'glGetPathMetricRangeNV',
      'glGetPathSpacingNV',
      'glIsPointInFillPathNV',
      'glIsPointInStrokePathNV',
      'glGetPathLengthNV',
      'glPointAlongPathNV',
      'glMatrixLoad3x2fNV',
      'glMatrixLoad3x3fNV',
      'glMatrixLoadTranspose3x3fNV',
      'glMatrixMult3x2fNV',
      'glMatrixMult3x3fNV',
      'glMatrixMultTranspose3x3fNV',
      'glStencilThenCoverFillPathNV',
      'glStencilThenCoverStrokePathNV',
      'glStencilThenCoverFillPathInstancedNV',
      'glStencilThenCoverStrokePathInstancedNV',
      'glPathGlyphIndexRangeNV',
      'glPathGlyphIndexArrayNV',
      'glPathMemoryGlyphIndexArrayNV',
      'glProgramPathFragmentInputGenNV',
      'glGetProgramResourcefvNV',
      'glPathColorGenNV',
      'glPathTexGenNV',
      'glPathFogGenNV',
      'glGetPathColorGenivNV',
      'glGetPathColorGenfvNV',
      'glGetPathTexGenivNV',
      'glGetPathTexGenfvNV',
      'glMatrixFrustumEXT',
      'glMatrixLoadIdentityEXT',
      'glMatrixLoadTransposefEXT',
      'glMatrixLoadTransposedEXT',
      'glMatrixLoadfEXT',
      'glMatrixLoaddEXT',
      'glMatrixMultTransposefEXT',
      'glMatrixMultTransposedEXT',
      'glMatrixMultfEXT',
      'glMatrixMultdEXT',
      'glMatrixOrthoEXT',
      'glMatrixPopEXT',
      'glMatrixPushEXT',
      'glMatrixRotatefEXT',
      'glMatrixRotatedEXT',
      'glMatrixScalefEXT',
      'glMatrixScaledEXT',
      'glMatrixTranslatefEXT',
      'glMatrixTranslatedEXT',
    ]
  end # self.get_ext_command_GL_NV_path_rendering


  def self.define_ext_command_GL_NV_path_rendering_shared_edge
  end # self.define_ext_command_GL_NV_path_rendering_shared_edge

  def self.get_ext_command_GL_NV_path_rendering_shared_edge
    [
    ]
  end # self.get_ext_command_GL_NV_path_rendering_shared_edge


  def self.define_ext_command_GL_NV_pixel_data_range
    GL::GL_FUNCTION_SYMBOLS << :glPixelDataRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelDataRangeNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelDataRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelDataRangeNV)
    GL.module_eval(<<-SRC)
      def self.PixelDataRangeNV(_target_, _length_, _pointer_)
        GL_FUNCTIONS_MAP[:glPixelDataRangeNV].call(_target_, _length_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFlushPixelDataRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushPixelDataRangeNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushPixelDataRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushPixelDataRangeNV)
    GL.module_eval(<<-SRC)
      def self.FlushPixelDataRangeNV(_target_)
        GL_FUNCTIONS_MAP[:glFlushPixelDataRangeNV].call(_target_)
      end
    SRC
  end # self.define_ext_command_GL_NV_pixel_data_range

  def self.get_ext_command_GL_NV_pixel_data_range
    [
      'glPixelDataRangeNV',
      'glFlushPixelDataRangeNV',
    ]
  end # self.get_ext_command_GL_NV_pixel_data_range


  def self.define_ext_command_GL_NV_point_sprite
    GL::GL_FUNCTION_SYMBOLS << :glPointParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameteriNV)
    GL.module_eval(<<-SRC)
      def self.PointParameteriNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPointParameteriNV].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterivNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterivNV)
    GL.module_eval(<<-SRC)
      def self.PointParameterivNV(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPointParameterivNV].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_point_sprite

  def self.get_ext_command_GL_NV_point_sprite
    [
      'glPointParameteriNV',
      'glPointParameterivNV',
    ]
  end # self.get_ext_command_GL_NV_point_sprite


  def self.define_ext_command_GL_NV_present_video
    GL::GL_FUNCTION_SYMBOLS << :glPresentFrameKeyedNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPresentFrameKeyedNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPresentFrameKeyedNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPresentFrameKeyedNV)
    GL.module_eval(<<-SRC)
      def self.PresentFrameKeyedNV(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _key0_, _target1_, _fill1_, _key1_)
        GL_FUNCTIONS_MAP[:glPresentFrameKeyedNV].call(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _key0_, _target1_, _fill1_, _key1_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPresentFrameDualFillNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPresentFrameDualFillNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPresentFrameDualFillNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPresentFrameDualFillNV)
    GL.module_eval(<<-SRC)
      def self.PresentFrameDualFillNV(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _target1_, _fill1_, _target2_, _fill2_, _target3_, _fill3_)
        GL_FUNCTIONS_MAP[:glPresentFrameDualFillNV].call(_video_slot_, _minPresentTime_, _beginPresentTimeId_, _presentDurationId_, _type_, _target0_, _fill0_, _target1_, _fill1_, _target2_, _fill2_, _target3_, _fill3_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoivNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoivNV].call(_video_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideouivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideouivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideouivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideouivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideouivNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideouivNV].call(_video_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoi64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoi64vNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoi64vNV].call(_video_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoui64vNV(_video_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoui64vNV].call(_video_slot_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_present_video

  def self.get_ext_command_GL_NV_present_video
    [
      'glPresentFrameKeyedNV',
      'glPresentFrameDualFillNV',
      'glGetVideoivNV',
      'glGetVideouivNV',
      'glGetVideoi64vNV',
      'glGetVideoui64vNV',
    ]
  end # self.get_ext_command_GL_NV_present_video


  def self.define_ext_command_GL_NV_primitive_restart
    GL::GL_FUNCTION_SYMBOLS << :glPrimitiveRestartNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPrimitiveRestartNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPrimitiveRestartNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPrimitiveRestartNV)
    GL.module_eval(<<-SRC)
      def self.PrimitiveRestartNV()
        GL_FUNCTIONS_MAP[:glPrimitiveRestartNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPrimitiveRestartIndexNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPrimitiveRestartIndexNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPrimitiveRestartIndexNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPrimitiveRestartIndexNV)
    GL.module_eval(<<-SRC)
      def self.PrimitiveRestartIndexNV(_index_)
        GL_FUNCTIONS_MAP[:glPrimitiveRestartIndexNV].call(_index_)
      end
    SRC
  end # self.define_ext_command_GL_NV_primitive_restart

  def self.get_ext_command_GL_NV_primitive_restart
    [
      'glPrimitiveRestartNV',
      'glPrimitiveRestartIndexNV',
    ]
  end # self.get_ext_command_GL_NV_primitive_restart


  def self.define_ext_command_GL_NV_primitive_shading_rate
  end # self.define_ext_command_GL_NV_primitive_shading_rate

  def self.get_ext_command_GL_NV_primitive_shading_rate
    [
    ]
  end # self.get_ext_command_GL_NV_primitive_shading_rate


  def self.define_ext_command_GL_NV_query_resource
    GL::GL_FUNCTION_SYMBOLS << :glQueryResourceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glQueryResourceNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glQueryResourceNV] = Fiddle::TYPE_INT
    GL.bind_command(:glQueryResourceNV)
    GL.module_eval(<<-SRC)
      def self.QueryResourceNV(_queryType_, _tagId_, _count_, _buffer_)
        GL_FUNCTIONS_MAP[:glQueryResourceNV].call(_queryType_, _tagId_, _count_, _buffer_)
      end
    SRC
  end # self.define_ext_command_GL_NV_query_resource

  def self.get_ext_command_GL_NV_query_resource
    [
      'glQueryResourceNV',
    ]
  end # self.get_ext_command_GL_NV_query_resource


  def self.define_ext_command_GL_NV_query_resource_tag
    GL::GL_FUNCTION_SYMBOLS << :glGenQueryResourceTagNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenQueryResourceTagNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenQueryResourceTagNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenQueryResourceTagNV)
    GL.module_eval(<<-SRC)
      def self.GenQueryResourceTagNV(_n_, _tagIds_)
        GL_FUNCTIONS_MAP[:glGenQueryResourceTagNV].call(_n_, _tagIds_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteQueryResourceTagNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteQueryResourceTagNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteQueryResourceTagNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteQueryResourceTagNV)
    GL.module_eval(<<-SRC)
      def self.DeleteQueryResourceTagNV(_n_, _tagIds_)
        GL_FUNCTIONS_MAP[:glDeleteQueryResourceTagNV].call(_n_, _tagIds_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glQueryResourceTagNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glQueryResourceTagNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glQueryResourceTagNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glQueryResourceTagNV)
    GL.module_eval(<<-SRC)
      def self.QueryResourceTagNV(_tagId_, _tagString_)
        GL_FUNCTIONS_MAP[:glQueryResourceTagNV].call(_tagId_, _tagString_)
      end
    SRC
  end # self.define_ext_command_GL_NV_query_resource_tag

  def self.get_ext_command_GL_NV_query_resource_tag
    [
      'glGenQueryResourceTagNV',
      'glDeleteQueryResourceTagNV',
      'glQueryResourceTagNV',
    ]
  end # self.get_ext_command_GL_NV_query_resource_tag


  def self.define_ext_command_GL_NV_register_combiners
    GL::GL_FUNCTION_SYMBOLS << :glCombinerParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerParameterfvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameterfvNV(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glCombinerParameterfvNV].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCombinerParameterfNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerParameterfNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerParameterfNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerParameterfNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameterfNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glCombinerParameterfNV].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCombinerParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerParameterivNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerParameterivNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameterivNV(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glCombinerParameterivNV].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCombinerParameteriNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerParameteriNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerParameteriNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerParameteriNV)
    GL.module_eval(<<-SRC)
      def self.CombinerParameteriNV(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glCombinerParameteriNV].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCombinerInputNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerInputNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerInputNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerInputNV)
    GL.module_eval(<<-SRC)
      def self.CombinerInputNV(_stage_, _portion_, _variable_, _input_, _mapping_, _componentUsage_)
        GL_FUNCTIONS_MAP[:glCombinerInputNV].call(_stage_, _portion_, _variable_, _input_, _mapping_, _componentUsage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCombinerOutputNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerOutputNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerOutputNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerOutputNV)
    GL.module_eval(<<-SRC)
      def self.CombinerOutputNV(_stage_, _portion_, _abOutput_, _cdOutput_, _sumOutput_, _scale_, _bias_, _abDotProduct_, _cdDotProduct_, _muxSum_)
        GL_FUNCTIONS_MAP[:glCombinerOutputNV].call(_stage_, _portion_, _abOutput_, _cdOutput_, _sumOutput_, _scale_, _bias_, _abDotProduct_, _cdDotProduct_, _muxSum_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFinalCombinerInputNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFinalCombinerInputNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFinalCombinerInputNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFinalCombinerInputNV)
    GL.module_eval(<<-SRC)
      def self.FinalCombinerInputNV(_variable_, _input_, _mapping_, _componentUsage_)
        GL_FUNCTIONS_MAP[:glFinalCombinerInputNV].call(_variable_, _input_, _mapping_, _componentUsage_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCombinerInputParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCombinerInputParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCombinerInputParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCombinerInputParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerInputParameterfvNV(_stage_, _portion_, _variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetCombinerInputParameterfvNV].call(_stage_, _portion_, _variable_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCombinerInputParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCombinerInputParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCombinerInputParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCombinerInputParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerInputParameterivNV(_stage_, _portion_, _variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetCombinerInputParameterivNV].call(_stage_, _portion_, _variable_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCombinerOutputParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCombinerOutputParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCombinerOutputParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCombinerOutputParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerOutputParameterfvNV(_stage_, _portion_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetCombinerOutputParameterfvNV].call(_stage_, _portion_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCombinerOutputParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCombinerOutputParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCombinerOutputParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCombinerOutputParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerOutputParameterivNV(_stage_, _portion_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetCombinerOutputParameterivNV].call(_stage_, _portion_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFinalCombinerInputParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFinalCombinerInputParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFinalCombinerInputParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFinalCombinerInputParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetFinalCombinerInputParameterfvNV(_variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFinalCombinerInputParameterfvNV].call(_variable_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFinalCombinerInputParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFinalCombinerInputParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFinalCombinerInputParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFinalCombinerInputParameterivNV)
    GL.module_eval(<<-SRC)
      def self.GetFinalCombinerInputParameterivNV(_variable_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFinalCombinerInputParameterivNV].call(_variable_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_register_combiners

  def self.get_ext_command_GL_NV_register_combiners
    [
      'glCombinerParameterfvNV',
      'glCombinerParameterfNV',
      'glCombinerParameterivNV',
      'glCombinerParameteriNV',
      'glCombinerInputNV',
      'glCombinerOutputNV',
      'glFinalCombinerInputNV',
      'glGetCombinerInputParameterfvNV',
      'glGetCombinerInputParameterivNV',
      'glGetCombinerOutputParameterfvNV',
      'glGetCombinerOutputParameterivNV',
      'glGetFinalCombinerInputParameterfvNV',
      'glGetFinalCombinerInputParameterivNV',
    ]
  end # self.get_ext_command_GL_NV_register_combiners


  def self.define_ext_command_GL_NV_register_combiners2
    GL::GL_FUNCTION_SYMBOLS << :glCombinerStageParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glCombinerStageParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCombinerStageParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glCombinerStageParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.CombinerStageParameterfvNV(_stage_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glCombinerStageParameterfvNV].call(_stage_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetCombinerStageParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetCombinerStageParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetCombinerStageParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetCombinerStageParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetCombinerStageParameterfvNV(_stage_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetCombinerStageParameterfvNV].call(_stage_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_register_combiners2

  def self.get_ext_command_GL_NV_register_combiners2
    [
      'glCombinerStageParameterfvNV',
      'glGetCombinerStageParameterfvNV',
    ]
  end # self.get_ext_command_GL_NV_register_combiners2


  def self.define_ext_command_GL_NV_representative_fragment_test
  end # self.define_ext_command_GL_NV_representative_fragment_test

  def self.get_ext_command_GL_NV_representative_fragment_test
    [
    ]
  end # self.get_ext_command_GL_NV_representative_fragment_test


  def self.define_ext_command_GL_NV_robustness_video_memory_purge
  end # self.define_ext_command_GL_NV_robustness_video_memory_purge

  def self.get_ext_command_GL_NV_robustness_video_memory_purge
    [
    ]
  end # self.get_ext_command_GL_NV_robustness_video_memory_purge


  def self.define_ext_command_GL_NV_sample_locations
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferSampleLocationsfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferSampleLocationsfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferSampleLocationsfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferSampleLocationsfvNV)
    GL.module_eval(<<-SRC)
      def self.FramebufferSampleLocationsfvNV(_target_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glFramebufferSampleLocationsfvNV].call(_target_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNamedFramebufferSampleLocationsfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glNamedFramebufferSampleLocationsfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNamedFramebufferSampleLocationsfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glNamedFramebufferSampleLocationsfvNV)
    GL.module_eval(<<-SRC)
      def self.NamedFramebufferSampleLocationsfvNV(_framebuffer_, _start_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glNamedFramebufferSampleLocationsfvNV].call(_framebuffer_, _start_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResolveDepthValuesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glResolveDepthValuesNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResolveDepthValuesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glResolveDepthValuesNV)
    GL.module_eval(<<-SRC)
      def self.ResolveDepthValuesNV()
        GL_FUNCTIONS_MAP[:glResolveDepthValuesNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_sample_locations

  def self.get_ext_command_GL_NV_sample_locations
    [
      'glFramebufferSampleLocationsfvNV',
      'glNamedFramebufferSampleLocationsfvNV',
      'glResolveDepthValuesNV',
    ]
  end # self.get_ext_command_GL_NV_sample_locations


  def self.define_ext_command_GL_NV_sample_mask_override_coverage
  end # self.define_ext_command_GL_NV_sample_mask_override_coverage

  def self.get_ext_command_GL_NV_sample_mask_override_coverage
    [
    ]
  end # self.get_ext_command_GL_NV_sample_mask_override_coverage


  def self.define_ext_command_GL_NV_scissor_exclusive
    GL::GL_FUNCTION_SYMBOLS << :glScissorExclusiveNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glScissorExclusiveNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glScissorExclusiveNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glScissorExclusiveNV)
    GL.module_eval(<<-SRC)
      def self.ScissorExclusiveNV(_x_, _y_, _width_, _height_)
        GL_FUNCTIONS_MAP[:glScissorExclusiveNV].call(_x_, _y_, _width_, _height_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glScissorExclusiveArrayvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glScissorExclusiveArrayvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glScissorExclusiveArrayvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glScissorExclusiveArrayvNV)
    GL.module_eval(<<-SRC)
      def self.ScissorExclusiveArrayvNV(_first_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glScissorExclusiveArrayvNV].call(_first_, _count_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_NV_scissor_exclusive

  def self.get_ext_command_GL_NV_scissor_exclusive
    [
      'glScissorExclusiveNV',
      'glScissorExclusiveArrayvNV',
    ]
  end # self.get_ext_command_GL_NV_scissor_exclusive


  def self.define_ext_command_GL_NV_shader_atomic_counters
  end # self.define_ext_command_GL_NV_shader_atomic_counters

  def self.get_ext_command_GL_NV_shader_atomic_counters
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_counters


  def self.define_ext_command_GL_NV_shader_atomic_float
  end # self.define_ext_command_GL_NV_shader_atomic_float

  def self.get_ext_command_GL_NV_shader_atomic_float
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_float


  def self.define_ext_command_GL_NV_shader_atomic_float64
  end # self.define_ext_command_GL_NV_shader_atomic_float64

  def self.get_ext_command_GL_NV_shader_atomic_float64
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_float64


  def self.define_ext_command_GL_NV_shader_atomic_fp16_vector
  end # self.define_ext_command_GL_NV_shader_atomic_fp16_vector

  def self.get_ext_command_GL_NV_shader_atomic_fp16_vector
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_fp16_vector


  def self.define_ext_command_GL_NV_shader_atomic_int64
  end # self.define_ext_command_GL_NV_shader_atomic_int64

  def self.get_ext_command_GL_NV_shader_atomic_int64
    [
    ]
  end # self.get_ext_command_GL_NV_shader_atomic_int64


  def self.define_ext_command_GL_NV_shader_buffer_load
    GL::GL_FUNCTION_SYMBOLS << :glMakeBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeBufferResidentNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeBufferResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeBufferResidentNV(_target_, _access_)
        GL_FUNCTIONS_MAP[:glMakeBufferResidentNV].call(_target_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeBufferNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeBufferNonResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeBufferNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeBufferNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeBufferNonResidentNV(_target_)
        GL_FUNCTIONS_MAP[:glMakeBufferNonResidentNV].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsBufferResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsBufferResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsBufferResidentNV(_target_)
        GL_FUNCTIONS_MAP[:glIsBufferResidentNV].call(_target_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeNamedBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeNamedBufferResidentNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeNamedBufferResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeNamedBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeNamedBufferResidentNV(_buffer_, _access_)
        GL_FUNCTIONS_MAP[:glMakeNamedBufferResidentNV].call(_buffer_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMakeNamedBufferNonResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glMakeNamedBufferNonResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMakeNamedBufferNonResidentNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glMakeNamedBufferNonResidentNV)
    GL.module_eval(<<-SRC)
      def self.MakeNamedBufferNonResidentNV(_buffer_)
        GL_FUNCTIONS_MAP[:glMakeNamedBufferNonResidentNV].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsNamedBufferResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsNamedBufferResidentNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsNamedBufferResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsNamedBufferResidentNV)
    GL.module_eval(<<-SRC)
      def self.IsNamedBufferResidentNV(_buffer_)
        GL_FUNCTIONS_MAP[:glIsNamedBufferResidentNV].call(_buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetBufferParameterui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetBufferParameterui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetBufferParameterui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetBufferParameterui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetBufferParameterui64vNV(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetBufferParameterui64vNV].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetNamedBufferParameterui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetNamedBufferParameterui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetNamedBufferParameterui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetNamedBufferParameterui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetNamedBufferParameterui64vNV(_buffer_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetNamedBufferParameterui64vNV].call(_buffer_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetIntegerui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetIntegerui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetIntegerui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetIntegerui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetIntegerui64vNV(_value_, _result_)
        GL_FUNCTIONS_MAP[:glGetIntegerui64vNV].call(_value_, _result_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformui64NV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformui64NV)
    GL.module_eval(<<-SRC)
      def self.Uniformui64NV(_location_, _value_)
        GL_FUNCTIONS_MAP[:glUniformui64NV].call(_location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glUniformui64vNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.Uniformui64vNV(_location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glUniformui64vNV].call(_location_, _count_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetUniformui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetUniformui64vNV(_program_, _location_, _params_)
        GL_FUNCTIONS_MAP[:glGetUniformui64vNV].call(_program_, _location_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformui64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformui64NV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformui64NV(_program_, _location_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformui64NV].call(_program_, _location_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramUniformui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramUniformui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramUniformui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramUniformui64vNV)
    GL.module_eval(<<-SRC)
      def self.ProgramUniformui64vNV(_program_, _location_, _count_, _value_)
        GL_FUNCTIONS_MAP[:glProgramUniformui64vNV].call(_program_, _location_, _count_, _value_)
      end
    SRC
  end # self.define_ext_command_GL_NV_shader_buffer_load

  def self.get_ext_command_GL_NV_shader_buffer_load
    [
      'glMakeBufferResidentNV',
      'glMakeBufferNonResidentNV',
      'glIsBufferResidentNV',
      'glMakeNamedBufferResidentNV',
      'glMakeNamedBufferNonResidentNV',
      'glIsNamedBufferResidentNV',
      'glGetBufferParameterui64vNV',
      'glGetNamedBufferParameterui64vNV',
      'glGetIntegerui64vNV',
      'glUniformui64NV',
      'glUniformui64vNV',
      'glGetUniformui64vNV',
      'glProgramUniformui64NV',
      'glProgramUniformui64vNV',
    ]
  end # self.get_ext_command_GL_NV_shader_buffer_load


  def self.define_ext_command_GL_NV_shader_buffer_store
  end # self.define_ext_command_GL_NV_shader_buffer_store

  def self.get_ext_command_GL_NV_shader_buffer_store
    [
    ]
  end # self.get_ext_command_GL_NV_shader_buffer_store


  def self.define_ext_command_GL_NV_shader_storage_buffer_object
  end # self.define_ext_command_GL_NV_shader_storage_buffer_object

  def self.get_ext_command_GL_NV_shader_storage_buffer_object
    [
    ]
  end # self.get_ext_command_GL_NV_shader_storage_buffer_object


  def self.define_ext_command_GL_NV_shader_subgroup_partitioned
  end # self.define_ext_command_GL_NV_shader_subgroup_partitioned

  def self.get_ext_command_GL_NV_shader_subgroup_partitioned
    [
    ]
  end # self.get_ext_command_GL_NV_shader_subgroup_partitioned


  def self.define_ext_command_GL_NV_shader_texture_footprint
  end # self.define_ext_command_GL_NV_shader_texture_footprint

  def self.get_ext_command_GL_NV_shader_texture_footprint
    [
    ]
  end # self.get_ext_command_GL_NV_shader_texture_footprint


  def self.define_ext_command_GL_NV_shader_thread_group
  end # self.define_ext_command_GL_NV_shader_thread_group

  def self.get_ext_command_GL_NV_shader_thread_group
    [
    ]
  end # self.get_ext_command_GL_NV_shader_thread_group


  def self.define_ext_command_GL_NV_shader_thread_shuffle
  end # self.define_ext_command_GL_NV_shader_thread_shuffle

  def self.get_ext_command_GL_NV_shader_thread_shuffle
    [
    ]
  end # self.get_ext_command_GL_NV_shader_thread_shuffle


  def self.define_ext_command_GL_NV_shading_rate_image
    GL::GL_FUNCTION_SYMBOLS << :glBindShadingRateImageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindShadingRateImageNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindShadingRateImageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindShadingRateImageNV)
    GL.module_eval(<<-SRC)
      def self.BindShadingRateImageNV(_texture_)
        GL_FUNCTIONS_MAP[:glBindShadingRateImageNV].call(_texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetShadingRateImagePaletteNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetShadingRateImagePaletteNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetShadingRateImagePaletteNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetShadingRateImagePaletteNV)
    GL.module_eval(<<-SRC)
      def self.GetShadingRateImagePaletteNV(_viewport_, _entry_, _rate_)
        GL_FUNCTIONS_MAP[:glGetShadingRateImagePaletteNV].call(_viewport_, _entry_, _rate_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetShadingRateSampleLocationivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetShadingRateSampleLocationivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetShadingRateSampleLocationivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetShadingRateSampleLocationivNV)
    GL.module_eval(<<-SRC)
      def self.GetShadingRateSampleLocationivNV(_rate_, _samples_, _index_, _location_)
        GL_FUNCTIONS_MAP[:glGetShadingRateSampleLocationivNV].call(_rate_, _samples_, _index_, _location_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShadingRateImageBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glShadingRateImageBarrierNV] = [-Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShadingRateImageBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glShadingRateImageBarrierNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateImageBarrierNV(_synchronize_)
        GL_FUNCTIONS_MAP[:glShadingRateImageBarrierNV].call(_synchronize_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShadingRateImagePaletteNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glShadingRateImagePaletteNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShadingRateImagePaletteNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glShadingRateImagePaletteNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateImagePaletteNV(_viewport_, _first_, _count_, _rates_)
        GL_FUNCTIONS_MAP[:glShadingRateImagePaletteNV].call(_viewport_, _first_, _count_, _rates_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShadingRateSampleOrderNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glShadingRateSampleOrderNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShadingRateSampleOrderNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glShadingRateSampleOrderNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateSampleOrderNV(_order_)
        GL_FUNCTIONS_MAP[:glShadingRateSampleOrderNV].call(_order_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glShadingRateSampleOrderCustomNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glShadingRateSampleOrderCustomNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glShadingRateSampleOrderCustomNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glShadingRateSampleOrderCustomNV)
    GL.module_eval(<<-SRC)
      def self.ShadingRateSampleOrderCustomNV(_rate_, _samples_, _locations_)
        GL_FUNCTIONS_MAP[:glShadingRateSampleOrderCustomNV].call(_rate_, _samples_, _locations_)
      end
    SRC
  end # self.define_ext_command_GL_NV_shading_rate_image

  def self.get_ext_command_GL_NV_shading_rate_image
    [
      'glBindShadingRateImageNV',
      'glGetShadingRateImagePaletteNV',
      'glGetShadingRateSampleLocationivNV',
      'glShadingRateImageBarrierNV',
      'glShadingRateImagePaletteNV',
      'glShadingRateSampleOrderNV',
      'glShadingRateSampleOrderCustomNV',
    ]
  end # self.get_ext_command_GL_NV_shading_rate_image


  def self.define_ext_command_GL_NV_stereo_view_rendering
  end # self.define_ext_command_GL_NV_stereo_view_rendering

  def self.get_ext_command_GL_NV_stereo_view_rendering
    [
    ]
  end # self.get_ext_command_GL_NV_stereo_view_rendering


  def self.define_ext_command_GL_NV_tessellation_program5
  end # self.define_ext_command_GL_NV_tessellation_program5

  def self.get_ext_command_GL_NV_tessellation_program5
    [
    ]
  end # self.get_ext_command_GL_NV_tessellation_program5


  def self.define_ext_command_GL_NV_texgen_emboss
  end # self.define_ext_command_GL_NV_texgen_emboss

  def self.get_ext_command_GL_NV_texgen_emboss
    [
    ]
  end # self.get_ext_command_GL_NV_texgen_emboss


  def self.define_ext_command_GL_NV_texgen_reflection
  end # self.define_ext_command_GL_NV_texgen_reflection

  def self.get_ext_command_GL_NV_texgen_reflection
    [
    ]
  end # self.get_ext_command_GL_NV_texgen_reflection


  def self.define_ext_command_GL_NV_texture_barrier
    GL::GL_FUNCTION_SYMBOLS << :glTextureBarrierNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureBarrierNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureBarrierNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureBarrierNV)
    GL.module_eval(<<-SRC)
      def self.TextureBarrierNV()
        GL_FUNCTIONS_MAP[:glTextureBarrierNV].call()
      end
    SRC
  end # self.define_ext_command_GL_NV_texture_barrier

  def self.get_ext_command_GL_NV_texture_barrier
    [
      'glTextureBarrierNV',
    ]
  end # self.get_ext_command_GL_NV_texture_barrier


  def self.define_ext_command_GL_NV_texture_compression_vtc
  end # self.define_ext_command_GL_NV_texture_compression_vtc

  def self.get_ext_command_GL_NV_texture_compression_vtc
    [
    ]
  end # self.get_ext_command_GL_NV_texture_compression_vtc


  def self.define_ext_command_GL_NV_texture_env_combine4
  end # self.define_ext_command_GL_NV_texture_env_combine4

  def self.get_ext_command_GL_NV_texture_env_combine4
    [
    ]
  end # self.get_ext_command_GL_NV_texture_env_combine4


  def self.define_ext_command_GL_NV_texture_expand_normal
  end # self.define_ext_command_GL_NV_texture_expand_normal

  def self.get_ext_command_GL_NV_texture_expand_normal
    [
    ]
  end # self.get_ext_command_GL_NV_texture_expand_normal


  def self.define_ext_command_GL_NV_texture_multisample
    GL::GL_FUNCTION_SYMBOLS << :glTexImage2DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexImage2DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexImage2DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexImage2DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TexImage2DMultisampleCoverageNV(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:glTexImage2DMultisampleCoverageNV].call(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexImage3DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexImage3DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexImage3DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexImage3DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TexImage3DMultisampleCoverageNV(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:glTexImage3DMultisampleCoverageNV].call(_target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage2DMultisampleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage2DMultisampleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage2DMultisampleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage2DMultisampleNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage2DMultisampleNV(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:glTextureImage2DMultisampleNV].call(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage3DMultisampleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage3DMultisampleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage3DMultisampleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage3DMultisampleNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage3DMultisampleNV(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:glTextureImage3DMultisampleNV].call(_texture_, _target_, _samples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage2DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage2DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage2DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage2DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage2DMultisampleCoverageNV(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:glTextureImage2DMultisampleCoverageNV].call(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _fixedSampleLocations_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTextureImage3DMultisampleCoverageNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureImage3DMultisampleCoverageNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureImage3DMultisampleCoverageNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureImage3DMultisampleCoverageNV)
    GL.module_eval(<<-SRC)
      def self.TextureImage3DMultisampleCoverageNV(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
        GL_FUNCTIONS_MAP[:glTextureImage3DMultisampleCoverageNV].call(_texture_, _target_, _coverageSamples_, _colorSamples_, _internalFormat_, _width_, _height_, _depth_, _fixedSampleLocations_)
      end
    SRC
  end # self.define_ext_command_GL_NV_texture_multisample

  def self.get_ext_command_GL_NV_texture_multisample
    [
      'glTexImage2DMultisampleCoverageNV',
      'glTexImage3DMultisampleCoverageNV',
      'glTextureImage2DMultisampleNV',
      'glTextureImage3DMultisampleNV',
      'glTextureImage2DMultisampleCoverageNV',
      'glTextureImage3DMultisampleCoverageNV',
    ]
  end # self.get_ext_command_GL_NV_texture_multisample


  def self.define_ext_command_GL_NV_texture_rectangle
  end # self.define_ext_command_GL_NV_texture_rectangle

  def self.get_ext_command_GL_NV_texture_rectangle
    [
    ]
  end # self.get_ext_command_GL_NV_texture_rectangle


  def self.define_ext_command_GL_NV_texture_rectangle_compressed
  end # self.define_ext_command_GL_NV_texture_rectangle_compressed

  def self.get_ext_command_GL_NV_texture_rectangle_compressed
    [
    ]
  end # self.get_ext_command_GL_NV_texture_rectangle_compressed


  def self.define_ext_command_GL_NV_texture_shader
  end # self.define_ext_command_GL_NV_texture_shader

  def self.get_ext_command_GL_NV_texture_shader
    [
    ]
  end # self.get_ext_command_GL_NV_texture_shader


  def self.define_ext_command_GL_NV_texture_shader2
  end # self.define_ext_command_GL_NV_texture_shader2

  def self.get_ext_command_GL_NV_texture_shader2
    [
    ]
  end # self.get_ext_command_GL_NV_texture_shader2


  def self.define_ext_command_GL_NV_texture_shader3
  end # self.define_ext_command_GL_NV_texture_shader3

  def self.get_ext_command_GL_NV_texture_shader3
    [
    ]
  end # self.get_ext_command_GL_NV_texture_shader3


  def self.define_ext_command_GL_NV_transform_feedback
    GL::GL_FUNCTION_SYMBOLS << :glBeginTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginTransformFeedbackNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.BeginTransformFeedbackNV(_primitiveMode_)
        GL_FUNCTIONS_MAP[:glBeginTransformFeedbackNV].call(_primitiveMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndTransformFeedbackNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.EndTransformFeedbackNV()
        GL_FUNCTIONS_MAP[:glEndTransformFeedbackNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformFeedbackAttribsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformFeedbackAttribsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformFeedbackAttribsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformFeedbackAttribsNV)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackAttribsNV(_count_, _attribs_, _bufferMode_)
        GL_FUNCTIONS_MAP[:glTransformFeedbackAttribsNV].call(_count_, _attribs_, _bufferMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferRangeNV)
    GL.module_eval(<<-SRC)
      def self.BindBufferRangeNV(_target_, _index_, _buffer_, _offset_, _size_)
        GL_FUNCTIONS_MAP[:glBindBufferRangeNV].call(_target_, _index_, _buffer_, _offset_, _size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferOffsetNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferOffsetNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferOffsetNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferOffsetNV)
    GL.module_eval(<<-SRC)
      def self.BindBufferOffsetNV(_target_, _index_, _buffer_, _offset_)
        GL_FUNCTIONS_MAP[:glBindBufferOffsetNV].call(_target_, _index_, _buffer_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindBufferBaseNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindBufferBaseNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindBufferBaseNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindBufferBaseNV)
    GL.module_eval(<<-SRC)
      def self.BindBufferBaseNV(_target_, _index_, _buffer_)
        GL_FUNCTIONS_MAP[:glBindBufferBaseNV].call(_target_, _index_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformFeedbackVaryingsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformFeedbackVaryingsNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformFeedbackVaryingsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformFeedbackVaryingsNV)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackVaryingsNV(_program_, _count_, _locations_, _bufferMode_)
        GL_FUNCTIONS_MAP[:glTransformFeedbackVaryingsNV].call(_program_, _count_, _locations_, _bufferMode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glActiveVaryingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glActiveVaryingNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glActiveVaryingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glActiveVaryingNV)
    GL.module_eval(<<-SRC)
      def self.ActiveVaryingNV(_program_, _name_)
        GL_FUNCTIONS_MAP[:glActiveVaryingNV].call(_program_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVaryingLocationNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVaryingLocationNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVaryingLocationNV] = Fiddle::TYPE_INT
    GL.bind_command(:glGetVaryingLocationNV)
    GL.module_eval(<<-SRC)
      def self.GetVaryingLocationNV(_program_, _name_)
        GL_FUNCTIONS_MAP[:glGetVaryingLocationNV].call(_program_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetActiveVaryingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetActiveVaryingNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetActiveVaryingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetActiveVaryingNV)
    GL.module_eval(<<-SRC)
      def self.GetActiveVaryingNV(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
        GL_FUNCTIONS_MAP[:glGetActiveVaryingNV].call(_program_, _index_, _bufSize_, _length_, _size_, _type_, _name_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTransformFeedbackVaryingNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTransformFeedbackVaryingNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTransformFeedbackVaryingNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTransformFeedbackVaryingNV)
    GL.module_eval(<<-SRC)
      def self.GetTransformFeedbackVaryingNV(_program_, _index_, _location_)
        GL_FUNCTIONS_MAP[:glGetTransformFeedbackVaryingNV].call(_program_, _index_, _location_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTransformFeedbackStreamAttribsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTransformFeedbackStreamAttribsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTransformFeedbackStreamAttribsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTransformFeedbackStreamAttribsNV)
    GL.module_eval(<<-SRC)
      def self.TransformFeedbackStreamAttribsNV(_count_, _attribs_, _nbuffers_, _bufstreams_, _bufferMode_)
        GL_FUNCTIONS_MAP[:glTransformFeedbackStreamAttribsNV].call(_count_, _attribs_, _nbuffers_, _bufstreams_, _bufferMode_)
      end
    SRC
  end # self.define_ext_command_GL_NV_transform_feedback

  def self.get_ext_command_GL_NV_transform_feedback
    [
      'glBeginTransformFeedbackNV',
      'glEndTransformFeedbackNV',
      'glTransformFeedbackAttribsNV',
      'glBindBufferRangeNV',
      'glBindBufferOffsetNV',
      'glBindBufferBaseNV',
      'glTransformFeedbackVaryingsNV',
      'glActiveVaryingNV',
      'glGetVaryingLocationNV',
      'glGetActiveVaryingNV',
      'glGetTransformFeedbackVaryingNV',
      'glTransformFeedbackStreamAttribsNV',
    ]
  end # self.get_ext_command_GL_NV_transform_feedback


  def self.define_ext_command_GL_NV_transform_feedback2
    GL::GL_FUNCTION_SYMBOLS << :glBindTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindTransformFeedbackNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.BindTransformFeedbackNV(_target_, _id_)
        GL_FUNCTIONS_MAP[:glBindTransformFeedbackNV].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteTransformFeedbacksNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteTransformFeedbacksNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteTransformFeedbacksNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteTransformFeedbacksNV)
    GL.module_eval(<<-SRC)
      def self.DeleteTransformFeedbacksNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glDeleteTransformFeedbacksNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenTransformFeedbacksNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenTransformFeedbacksNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenTransformFeedbacksNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenTransformFeedbacksNV)
    GL.module_eval(<<-SRC)
      def self.GenTransformFeedbacksNV(_n_, _ids_)
        GL_FUNCTIONS_MAP[:glGenTransformFeedbacksNV].call(_n_, _ids_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsTransformFeedbackNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsTransformFeedbackNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.IsTransformFeedbackNV(_id_)
        GL_FUNCTIONS_MAP[:glIsTransformFeedbackNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPauseTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glPauseTransformFeedbackNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPauseTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glPauseTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.PauseTransformFeedbackNV()
        GL_FUNCTIONS_MAP[:glPauseTransformFeedbackNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glResumeTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glResumeTransformFeedbackNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glResumeTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glResumeTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.ResumeTransformFeedbackNV()
        GL_FUNCTIONS_MAP[:glResumeTransformFeedbackNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDrawTransformFeedbackNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawTransformFeedbackNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawTransformFeedbackNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawTransformFeedbackNV)
    GL.module_eval(<<-SRC)
      def self.DrawTransformFeedbackNV(_mode_, _id_)
        GL_FUNCTIONS_MAP[:glDrawTransformFeedbackNV].call(_mode_, _id_)
      end
    SRC
  end # self.define_ext_command_GL_NV_transform_feedback2

  def self.get_ext_command_GL_NV_transform_feedback2
    [
      'glBindTransformFeedbackNV',
      'glDeleteTransformFeedbacksNV',
      'glGenTransformFeedbacksNV',
      'glIsTransformFeedbackNV',
      'glPauseTransformFeedbackNV',
      'glResumeTransformFeedbackNV',
      'glDrawTransformFeedbackNV',
    ]
  end # self.get_ext_command_GL_NV_transform_feedback2


  def self.define_ext_command_GL_NV_uniform_buffer_unified_memory
  end # self.define_ext_command_GL_NV_uniform_buffer_unified_memory

  def self.get_ext_command_GL_NV_uniform_buffer_unified_memory
    [
    ]
  end # self.get_ext_command_GL_NV_uniform_buffer_unified_memory


  def self.define_ext_command_GL_NV_vdpau_interop
    GL::GL_FUNCTION_SYMBOLS << :glVDPAUInitNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUInitNV] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUInitNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUInitNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUInitNV(_vdpDevice_, _getProcAddress_)
        GL_FUNCTIONS_MAP[:glVDPAUInitNV].call(_vdpDevice_, _getProcAddress_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUFiniNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUFiniNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUFiniNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUFiniNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUFiniNV()
        GL_FUNCTIONS_MAP[:glVDPAUFiniNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAURegisterVideoSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAURegisterVideoSurfaceNV] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAURegisterVideoSurfaceNV] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:glVDPAURegisterVideoSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAURegisterVideoSurfaceNV(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
        GL_FUNCTIONS_MAP[:glVDPAURegisterVideoSurfaceNV].call(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAURegisterOutputSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAURegisterOutputSurfaceNV] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAURegisterOutputSurfaceNV] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:glVDPAURegisterOutputSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAURegisterOutputSurfaceNV(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
        GL_FUNCTIONS_MAP[:glVDPAURegisterOutputSurfaceNV].call(_vdpSurface_, _target_, _numTextureNames_, _textureNames_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUIsSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUIsSurfaceNV] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUIsSurfaceNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glVDPAUIsSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUIsSurfaceNV(_surface_)
        GL_FUNCTIONS_MAP[:glVDPAUIsSurfaceNV].call(_surface_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUUnregisterSurfaceNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUUnregisterSurfaceNV] = [Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUUnregisterSurfaceNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUUnregisterSurfaceNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUUnregisterSurfaceNV(_surface_)
        GL_FUNCTIONS_MAP[:glVDPAUUnregisterSurfaceNV].call(_surface_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUGetSurfaceivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUGetSurfaceivNV] = [Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUGetSurfaceivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUGetSurfaceivNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUGetSurfaceivNV(_surface_, _pname_, _count_, _length_, _values_)
        GL_FUNCTIONS_MAP[:glVDPAUGetSurfaceivNV].call(_surface_, _pname_, _count_, _length_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUSurfaceAccessNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUSurfaceAccessNV] = [Fiddle::TYPE_PTRDIFF_T, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUSurfaceAccessNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUSurfaceAccessNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUSurfaceAccessNV(_surface_, _access_)
        GL_FUNCTIONS_MAP[:glVDPAUSurfaceAccessNV].call(_surface_, _access_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUMapSurfacesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUMapSurfacesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUMapSurfacesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUMapSurfacesNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUMapSurfacesNV(_numSurfaces_, _surfaces_)
        GL_FUNCTIONS_MAP[:glVDPAUMapSurfacesNV].call(_numSurfaces_, _surfaces_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVDPAUUnmapSurfacesNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAUUnmapSurfacesNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAUUnmapSurfacesNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVDPAUUnmapSurfacesNV)
    GL.module_eval(<<-SRC)
      def self.VDPAUUnmapSurfacesNV(_numSurface_, _surfaces_)
        GL_FUNCTIONS_MAP[:glVDPAUUnmapSurfacesNV].call(_numSurface_, _surfaces_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vdpau_interop

  def self.get_ext_command_GL_NV_vdpau_interop
    [
      'glVDPAUInitNV',
      'glVDPAUFiniNV',
      'glVDPAURegisterVideoSurfaceNV',
      'glVDPAURegisterOutputSurfaceNV',
      'glVDPAUIsSurfaceNV',
      'glVDPAUUnregisterSurfaceNV',
      'glVDPAUGetSurfaceivNV',
      'glVDPAUSurfaceAccessNV',
      'glVDPAUMapSurfacesNV',
      'glVDPAUUnmapSurfacesNV',
    ]
  end # self.get_ext_command_GL_NV_vdpau_interop


  def self.define_ext_command_GL_NV_vdpau_interop2
    GL::GL_FUNCTION_SYMBOLS << :glVDPAURegisterVideoSurfaceWithPictureStructureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVDPAURegisterVideoSurfaceWithPictureStructureNV] = [Fiddle::TYPE_VOIDP, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVDPAURegisterVideoSurfaceWithPictureStructureNV] = Fiddle::TYPE_PTRDIFF_T
    GL.bind_command(:glVDPAURegisterVideoSurfaceWithPictureStructureNV)
    GL.module_eval(<<-SRC)
      def self.VDPAURegisterVideoSurfaceWithPictureStructureNV(_vdpSurface_, _target_, _numTextureNames_, _textureNames_, _isFrameStructure_)
        GL_FUNCTIONS_MAP[:glVDPAURegisterVideoSurfaceWithPictureStructureNV].call(_vdpSurface_, _target_, _numTextureNames_, _textureNames_, _isFrameStructure_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vdpau_interop2

  def self.get_ext_command_GL_NV_vdpau_interop2
    [
      'glVDPAURegisterVideoSurfaceWithPictureStructureNV',
    ]
  end # self.get_ext_command_GL_NV_vdpau_interop2


  def self.define_ext_command_GL_NV_vertex_array_range
    GL::GL_FUNCTION_SYMBOLS << :glFlushVertexArrayRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushVertexArrayRangeNV] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushVertexArrayRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushVertexArrayRangeNV)
    GL.module_eval(<<-SRC)
      def self.FlushVertexArrayRangeNV()
        GL_FUNCTIONS_MAP[:glFlushVertexArrayRangeNV].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexArrayRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexArrayRangeNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexArrayRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexArrayRangeNV)
    GL.module_eval(<<-SRC)
      def self.VertexArrayRangeNV(_length_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexArrayRangeNV].call(_length_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_array_range

  def self.get_ext_command_GL_NV_vertex_array_range
    [
      'glFlushVertexArrayRangeNV',
      'glVertexArrayRangeNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_array_range


  def self.define_ext_command_GL_NV_vertex_array_range2
  end # self.define_ext_command_GL_NV_vertex_array_range2

  def self.get_ext_command_GL_NV_vertex_array_range2
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_array_range2


  def self.define_ext_command_GL_NV_vertex_attrib_integer_64bit
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1i64NV(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1i64NV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2i64NV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2i64NV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3i64NV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3i64NV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4i64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4i64NV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4i64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4i64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4i64NV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4i64NV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4i64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4i64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4i64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4i64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4i64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4i64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64NV(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1ui64NV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2ui64NV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2ui64NV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3ui64NV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3ui64NV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4ui64NV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4ui64NV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG, -Fiddle::TYPE_LONG_LONG]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4ui64NV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4ui64NV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4ui64NV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4ui64NV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL1ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL1ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL1ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL1ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL1ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL1ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL2ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL2ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL2ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL2ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL2ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL2ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL3ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL3ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL3ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL3ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL3ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL3ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribL4ui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribL4ui64vNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribL4ui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribL4ui64vNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribL4ui64vNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribL4ui64vNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribLi64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribLi64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribLi64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribLi64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLi64vNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribLi64vNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribLui64vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribLui64vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribLui64vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribLui64vNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribLui64vNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribLui64vNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribLFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribLFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribLFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribLFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribLFormatNV(_index_, _size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:glVertexAttribLFormatNV].call(_index_, _size_, _type_, _stride_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_attrib_integer_64bit

  def self.get_ext_command_GL_NV_vertex_attrib_integer_64bit
    [
      'glVertexAttribL1i64NV',
      'glVertexAttribL2i64NV',
      'glVertexAttribL3i64NV',
      'glVertexAttribL4i64NV',
      'glVertexAttribL1i64vNV',
      'glVertexAttribL2i64vNV',
      'glVertexAttribL3i64vNV',
      'glVertexAttribL4i64vNV',
      'glVertexAttribL1ui64NV',
      'glVertexAttribL2ui64NV',
      'glVertexAttribL3ui64NV',
      'glVertexAttribL4ui64NV',
      'glVertexAttribL1ui64vNV',
      'glVertexAttribL2ui64vNV',
      'glVertexAttribL3ui64vNV',
      'glVertexAttribL4ui64vNV',
      'glGetVertexAttribLi64vNV',
      'glGetVertexAttribLui64vNV',
      'glVertexAttribLFormatNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_attrib_integer_64bit


  def self.define_ext_command_GL_NV_vertex_buffer_unified_memory
    GL::GL_FUNCTION_SYMBOLS << :glBufferAddressRangeNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBufferAddressRangeNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_LONG_LONG, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBufferAddressRangeNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBufferAddressRangeNV)
    GL.module_eval(<<-SRC)
      def self.BufferAddressRangeNV(_pname_, _index_, _address_, _length_)
        GL_FUNCTIONS_MAP[:glBufferAddressRangeNV].call(_pname_, _index_, _address_, _length_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:glVertexFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormalFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormalFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormalFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormalFormatNV)
    GL.module_eval(<<-SRC)
      def self.NormalFormatNV(_type_, _stride_)
        GL_FUNCTIONS_MAP[:glNormalFormatNV].call(_type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorFormatNV)
    GL.module_eval(<<-SRC)
      def self.ColorFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:glColorFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIndexFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexFormatNV)
    GL.module_eval(<<-SRC)
      def self.IndexFormatNV(_type_, _stride_)
        GL_FUNCTIONS_MAP[:glIndexFormatNV].call(_type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoordFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoordFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoordFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoordFormatNV)
    GL.module_eval(<<-SRC)
      def self.TexCoordFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:glTexCoordFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEdgeFlagFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glEdgeFlagFormatNV] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEdgeFlagFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glEdgeFlagFormatNV)
    GL.module_eval(<<-SRC)
      def self.EdgeFlagFormatNV(_stride_)
        GL_FUNCTIONS_MAP[:glEdgeFlagFormatNV].call(_stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSecondaryColorFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glSecondaryColorFormatNV] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSecondaryColorFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glSecondaryColorFormatNV)
    GL.module_eval(<<-SRC)
      def self.SecondaryColorFormatNV(_size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:glSecondaryColorFormatNV].call(_size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogCoordFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogCoordFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogCoordFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogCoordFormatNV)
    GL.module_eval(<<-SRC)
      def self.FogCoordFormatNV(_type_, _stride_)
        GL_FUNCTIONS_MAP[:glFogCoordFormatNV].call(_type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribFormatNV(_index_, _size_, _type_, _normalized_, _stride_)
        GL_FUNCTIONS_MAP[:glVertexAttribFormatNV].call(_index_, _size_, _type_, _normalized_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribIFormatNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribIFormatNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribIFormatNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribIFormatNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIFormatNV(_index_, _size_, _type_, _stride_)
        GL_FUNCTIONS_MAP[:glVertexAttribIFormatNV].call(_index_, _size_, _type_, _stride_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetIntegerui64i_vNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetIntegerui64i_vNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetIntegerui64i_vNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetIntegerui64i_vNV)
    GL.module_eval(<<-SRC)
      def self.GetIntegerui64i_vNV(_value_, _index_, _result_)
        GL_FUNCTIONS_MAP[:glGetIntegerui64i_vNV].call(_value_, _index_, _result_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_buffer_unified_memory

  def self.get_ext_command_GL_NV_vertex_buffer_unified_memory
    [
      'glBufferAddressRangeNV',
      'glVertexFormatNV',
      'glNormalFormatNV',
      'glColorFormatNV',
      'glIndexFormatNV',
      'glTexCoordFormatNV',
      'glEdgeFlagFormatNV',
      'glSecondaryColorFormatNV',
      'glFogCoordFormatNV',
      'glVertexAttribFormatNV',
      'glVertexAttribIFormatNV',
      'glGetIntegerui64i_vNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_buffer_unified_memory


  def self.define_ext_command_GL_NV_vertex_program
    GL::GL_FUNCTION_SYMBOLS << :glAreProgramsResidentNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glAreProgramsResidentNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAreProgramsResidentNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glAreProgramsResidentNV)
    GL.module_eval(<<-SRC)
      def self.AreProgramsResidentNV(_n_, _programs_, _residences_)
        GL_FUNCTIONS_MAP[:glAreProgramsResidentNV].call(_n_, _programs_, _residences_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindProgramNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindProgramNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindProgramNV)
    GL.module_eval(<<-SRC)
      def self.BindProgramNV(_target_, _id_)
        GL_FUNCTIONS_MAP[:glBindProgramNV].call(_target_, _id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteProgramsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteProgramsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteProgramsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteProgramsNV)
    GL.module_eval(<<-SRC)
      def self.DeleteProgramsNV(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glDeleteProgramsNV].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glExecuteProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glExecuteProgramNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glExecuteProgramNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glExecuteProgramNV)
    GL.module_eval(<<-SRC)
      def self.ExecuteProgramNV(_target_, _id_, _params_)
        GL_FUNCTIONS_MAP[:glExecuteProgramNV].call(_target_, _id_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenProgramsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenProgramsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenProgramsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGenProgramsNV)
    GL.module_eval(<<-SRC)
      def self.GenProgramsNV(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glGenProgramsNV].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramParameterdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramParameterdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramParameterdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramParameterdvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramParameterdvNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramParameterdvNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramParameterfvNV(_target_, _index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramParameterfvNV].call(_target_, _index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramivNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramivNV(_id_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetProgramivNV].call(_id_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetProgramStringNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetProgramStringNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetProgramStringNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetProgramStringNV)
    GL.module_eval(<<-SRC)
      def self.GetProgramStringNV(_id_, _pname_, _program_)
        GL_FUNCTIONS_MAP[:glGetProgramStringNV].call(_id_, _pname_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTrackMatrixivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTrackMatrixivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTrackMatrixivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTrackMatrixivNV)
    GL.module_eval(<<-SRC)
      def self.GetTrackMatrixivNV(_target_, _address_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTrackMatrixivNV].call(_target_, _address_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribdvNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribdvNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribdvNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribfvNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribfvNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribfvNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribivNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribivNV(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribivNV].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribPointervNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribPointervNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribPointervNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribPointervNV)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribPointervNV(_index_, _pname_, _pointer_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribPointervNV].call(_index_, _pname_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsProgramNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsProgramNV] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsProgramNV)
    GL.module_eval(<<-SRC)
      def self.IsProgramNV(_id_)
        GL_FUNCTIONS_MAP[:glIsProgramNV].call(_id_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLoadProgramNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glLoadProgramNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLoadProgramNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glLoadProgramNV)
    GL.module_eval(<<-SRC)
      def self.LoadProgramNV(_target_, _id_, _len_, _program_)
        GL_FUNCTIONS_MAP[:glLoadProgramNV].call(_target_, _id_, _len_, _program_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameter4dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameter4dNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameter4dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameter4dNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4dNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramParameter4dNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameter4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameter4dvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameter4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameter4dvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4dvNV(_target_, _index_, _v_)
        GL_FUNCTIONS_MAP[:glProgramParameter4dvNV].call(_target_, _index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameter4fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameter4fNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameter4fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameter4fNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4fNV(_target_, _index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glProgramParameter4fNV].call(_target_, _index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameter4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameter4fvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameter4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameter4fvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameter4fvNV(_target_, _index_, _v_)
        GL_FUNCTIONS_MAP[:glProgramParameter4fvNV].call(_target_, _index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameters4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameters4dvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameters4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameters4dvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameters4dvNV(_target_, _index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glProgramParameters4dvNV].call(_target_, _index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glProgramParameters4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glProgramParameters4fvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glProgramParameters4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glProgramParameters4fvNV)
    GL.module_eval(<<-SRC)
      def self.ProgramParameters4fvNV(_target_, _index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glProgramParameters4fvNV].call(_target_, _index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRequestResidentProgramsNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glRequestResidentProgramsNV] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRequestResidentProgramsNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glRequestResidentProgramsNV)
    GL.module_eval(<<-SRC)
      def self.RequestResidentProgramsNV(_n_, _programs_)
        GL_FUNCTIONS_MAP[:glRequestResidentProgramsNV].call(_n_, _programs_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTrackMatrixNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glTrackMatrixNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTrackMatrixNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glTrackMatrixNV)
    GL.module_eval(<<-SRC)
      def self.TrackMatrixNV(_target_, _address_, _matrix_, _transform_)
        GL_FUNCTIONS_MAP[:glTrackMatrixNV].call(_target_, _address_, _matrix_, _transform_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribPointerNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribPointerNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribPointerNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribPointerNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribPointerNV(_index_, _fsize_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribPointerNV].call(_index_, _fsize_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1dNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1fNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1sNV(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1sNV].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib1svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib1svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib1svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib1svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib1svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib1svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2dNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2fNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2sNV(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2sNV].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib2svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib2svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib2svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib2svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib2svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib2svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3dNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3fNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3sNV(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3sNV].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib3svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib3svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib3svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib3svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib3svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib3svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4dNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4dNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4dNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4dNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4dNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4dvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4dvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4fNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4fNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4fNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4fNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4fNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4fvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4fvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4sNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4sNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT, Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4sNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4sNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4sNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4sNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4svNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4svNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4ubNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4ubNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4ubNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4ubNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubNV(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4ubNV].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttrib4ubvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttrib4ubvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttrib4ubvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttrib4ubvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttrib4ubvNV(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttrib4ubvNV].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs1dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs1dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs1dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs1dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs1dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs1fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs1fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs1fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs1fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs1fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs1svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs1svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs1svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs1svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs1svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs1svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs2dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs2dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs2dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs2dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs2dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs2fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs2fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs2fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs2fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs2fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs2svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs2svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs2svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs2svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs2svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs2svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs3dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs3dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs3dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs3dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs3dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs3fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs3fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs3fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs3fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs3fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs3svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs3svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs3svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs3svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs3svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs3svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs4dvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs4dvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs4dvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs4dvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4dvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs4dvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs4fvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs4fvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs4fvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs4fvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4fvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs4fvNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs4svNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs4svNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs4svNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs4svNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4svNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs4svNV].call(_index_, _count_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribs4ubvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribs4ubvNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribs4ubvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribs4ubvNV)
    GL.module_eval(<<-SRC)
      def self.VertexAttribs4ubvNV(_index_, _count_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribs4ubvNV].call(_index_, _count_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_program

  def self.get_ext_command_GL_NV_vertex_program
    [
      'glAreProgramsResidentNV',
      'glBindProgramNV',
      'glDeleteProgramsNV',
      'glExecuteProgramNV',
      'glGenProgramsNV',
      'glGetProgramParameterdvNV',
      'glGetProgramParameterfvNV',
      'glGetProgramivNV',
      'glGetProgramStringNV',
      'glGetTrackMatrixivNV',
      'glGetVertexAttribdvNV',
      'glGetVertexAttribfvNV',
      'glGetVertexAttribivNV',
      'glGetVertexAttribPointervNV',
      'glIsProgramNV',
      'glLoadProgramNV',
      'glProgramParameter4dNV',
      'glProgramParameter4dvNV',
      'glProgramParameter4fNV',
      'glProgramParameter4fvNV',
      'glProgramParameters4dvNV',
      'glProgramParameters4fvNV',
      'glRequestResidentProgramsNV',
      'glTrackMatrixNV',
      'glVertexAttribPointerNV',
      'glVertexAttrib1dNV',
      'glVertexAttrib1dvNV',
      'glVertexAttrib1fNV',
      'glVertexAttrib1fvNV',
      'glVertexAttrib1sNV',
      'glVertexAttrib1svNV',
      'glVertexAttrib2dNV',
      'glVertexAttrib2dvNV',
      'glVertexAttrib2fNV',
      'glVertexAttrib2fvNV',
      'glVertexAttrib2sNV',
      'glVertexAttrib2svNV',
      'glVertexAttrib3dNV',
      'glVertexAttrib3dvNV',
      'glVertexAttrib3fNV',
      'glVertexAttrib3fvNV',
      'glVertexAttrib3sNV',
      'glVertexAttrib3svNV',
      'glVertexAttrib4dNV',
      'glVertexAttrib4dvNV',
      'glVertexAttrib4fNV',
      'glVertexAttrib4fvNV',
      'glVertexAttrib4sNV',
      'glVertexAttrib4svNV',
      'glVertexAttrib4ubNV',
      'glVertexAttrib4ubvNV',
      'glVertexAttribs1dvNV',
      'glVertexAttribs1fvNV',
      'glVertexAttribs1svNV',
      'glVertexAttribs2dvNV',
      'glVertexAttribs2fvNV',
      'glVertexAttribs2svNV',
      'glVertexAttribs3dvNV',
      'glVertexAttribs3fvNV',
      'glVertexAttribs3svNV',
      'glVertexAttribs4dvNV',
      'glVertexAttribs4fvNV',
      'glVertexAttribs4svNV',
      'glVertexAttribs4ubvNV',
    ]
  end # self.get_ext_command_GL_NV_vertex_program


  def self.define_ext_command_GL_NV_vertex_program1_1
  end # self.define_ext_command_GL_NV_vertex_program1_1

  def self.get_ext_command_GL_NV_vertex_program1_1
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program1_1


  def self.define_ext_command_GL_NV_vertex_program2
  end # self.define_ext_command_GL_NV_vertex_program2

  def self.get_ext_command_GL_NV_vertex_program2
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program2


  def self.define_ext_command_GL_NV_vertex_program2_option
  end # self.define_ext_command_GL_NV_vertex_program2_option

  def self.get_ext_command_GL_NV_vertex_program2_option
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program2_option


  def self.define_ext_command_GL_NV_vertex_program3
  end # self.define_ext_command_GL_NV_vertex_program3

  def self.get_ext_command_GL_NV_vertex_program3
    [
    ]
  end # self.get_ext_command_GL_NV_vertex_program3


  def self.define_ext_command_GL_NV_vertex_program4
    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1iEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1iEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2iEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2iEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3iEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3iEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4iEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4iEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4iEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4iEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4iEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4iEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uiEXT(_index_, _x_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1uiEXT].call(_index_, _x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uiEXT(_index_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2uiEXT].call(_index_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uiEXT(_index_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3uiEXT].call(_index_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4uiEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4uiEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4uiEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4uiEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uiEXT(_index_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4uiEXT].call(_index_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4ivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4ivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4ivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4ivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4ivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI1uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI1uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI1uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI1uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI1uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI1uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI2uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI2uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI2uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI2uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI2uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI2uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI3uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI3uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI3uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI3uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI3uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI3uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4uivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4uivEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4uivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4uivEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4uivEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4uivEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4bvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4bvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4bvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4bvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4bvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4bvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4svEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4svEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4svEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4svEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4svEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4svEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4ubvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4ubvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4ubvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4ubvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4ubvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4ubvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribI4usvEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribI4usvEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribI4usvEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribI4usvEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribI4usvEXT(_index_, _v_)
        GL_FUNCTIONS_MAP[:glVertexAttribI4usvEXT].call(_index_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertexAttribIPointerEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertexAttribIPointerEXT] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertexAttribIPointerEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertexAttribIPointerEXT)
    GL.module_eval(<<-SRC)
      def self.VertexAttribIPointerEXT(_index_, _size_, _type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glVertexAttribIPointerEXT].call(_index_, _size_, _type_, _stride_, _pointer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribIivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribIivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribIivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribIivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribIivEXT].call(_index_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVertexAttribIuivEXT
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVertexAttribIuivEXT] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVertexAttribIuivEXT] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVertexAttribIuivEXT)
    GL.module_eval(<<-SRC)
      def self.GetVertexAttribIuivEXT(_index_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVertexAttribIuivEXT].call(_index_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_vertex_program4

  def self.get_ext_command_GL_NV_vertex_program4
    [
      'glVertexAttribI1iEXT',
      'glVertexAttribI2iEXT',
      'glVertexAttribI3iEXT',
      'glVertexAttribI4iEXT',
      'glVertexAttribI1uiEXT',
      'glVertexAttribI2uiEXT',
      'glVertexAttribI3uiEXT',
      'glVertexAttribI4uiEXT',
      'glVertexAttribI1ivEXT',
      'glVertexAttribI2ivEXT',
      'glVertexAttribI3ivEXT',
      'glVertexAttribI4ivEXT',
      'glVertexAttribI1uivEXT',
      'glVertexAttribI2uivEXT',
      'glVertexAttribI3uivEXT',
      'glVertexAttribI4uivEXT',
      'glVertexAttribI4bvEXT',
      'glVertexAttribI4svEXT',
      'glVertexAttribI4ubvEXT',
      'glVertexAttribI4usvEXT',
      'glVertexAttribIPointerEXT',
      'glGetVertexAttribIivEXT',
      'glGetVertexAttribIuivEXT',
    ]
  end # self.get_ext_command_GL_NV_vertex_program4


  def self.define_ext_command_GL_NV_video_capture
    GL::GL_FUNCTION_SYMBOLS << :glBeginVideoCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBeginVideoCaptureNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBeginVideoCaptureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBeginVideoCaptureNV)
    GL.module_eval(<<-SRC)
      def self.BeginVideoCaptureNV(_video_capture_slot_)
        GL_FUNCTIONS_MAP[:glBeginVideoCaptureNV].call(_video_capture_slot_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindVideoCaptureStreamBufferNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVideoCaptureStreamBufferNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_PTRDIFF_T]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVideoCaptureStreamBufferNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVideoCaptureStreamBufferNV)
    GL.module_eval(<<-SRC)
      def self.BindVideoCaptureStreamBufferNV(_video_capture_slot_, _stream_, _frame_region_, _offset_)
        GL_FUNCTIONS_MAP[:glBindVideoCaptureStreamBufferNV].call(_video_capture_slot_, _stream_, _frame_region_, _offset_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBindVideoCaptureStreamTextureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glBindVideoCaptureStreamTextureNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBindVideoCaptureStreamTextureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glBindVideoCaptureStreamTextureNV)
    GL.module_eval(<<-SRC)
      def self.BindVideoCaptureStreamTextureNV(_video_capture_slot_, _stream_, _frame_region_, _target_, _texture_)
        GL_FUNCTIONS_MAP[:glBindVideoCaptureStreamTextureNV].call(_video_capture_slot_, _stream_, _frame_region_, _target_, _texture_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEndVideoCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glEndVideoCaptureNV] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEndVideoCaptureNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glEndVideoCaptureNV)
    GL.module_eval(<<-SRC)
      def self.EndVideoCaptureNV(_video_capture_slot_)
        GL_FUNCTIONS_MAP[:glEndVideoCaptureNV].call(_video_capture_slot_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoCaptureivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoCaptureivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoCaptureivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoCaptureivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureivNV(_video_capture_slot_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoCaptureivNV].call(_video_capture_slot_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoCaptureStreamivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoCaptureStreamivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoCaptureStreamivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoCaptureStreamivNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureStreamivNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoCaptureStreamivNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoCaptureStreamfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoCaptureStreamfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoCaptureStreamfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoCaptureStreamfvNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureStreamfvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoCaptureStreamfvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetVideoCaptureStreamdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetVideoCaptureStreamdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetVideoCaptureStreamdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetVideoCaptureStreamdvNV)
    GL.module_eval(<<-SRC)
      def self.GetVideoCaptureStreamdvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetVideoCaptureStreamdvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVideoCaptureNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVideoCaptureNV] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVideoCaptureNV] = -Fiddle::TYPE_INT
    GL.bind_command(:glVideoCaptureNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureNV(_video_capture_slot_, _sequence_num_, _capture_time_)
        GL_FUNCTIONS_MAP[:glVideoCaptureNV].call(_video_capture_slot_, _sequence_num_, _capture_time_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVideoCaptureStreamParameterivNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVideoCaptureStreamParameterivNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVideoCaptureStreamParameterivNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVideoCaptureStreamParameterivNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureStreamParameterivNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glVideoCaptureStreamParameterivNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVideoCaptureStreamParameterfvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVideoCaptureStreamParameterfvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVideoCaptureStreamParameterfvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVideoCaptureStreamParameterfvNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureStreamParameterfvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glVideoCaptureStreamParameterfvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVideoCaptureStreamParameterdvNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glVideoCaptureStreamParameterdvNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVideoCaptureStreamParameterdvNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glVideoCaptureStreamParameterdvNV)
    GL.module_eval(<<-SRC)
      def self.VideoCaptureStreamParameterdvNV(_video_capture_slot_, _stream_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glVideoCaptureStreamParameterdvNV].call(_video_capture_slot_, _stream_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_NV_video_capture

  def self.get_ext_command_GL_NV_video_capture
    [
      'glBeginVideoCaptureNV',
      'glBindVideoCaptureStreamBufferNV',
      'glBindVideoCaptureStreamTextureNV',
      'glEndVideoCaptureNV',
      'glGetVideoCaptureivNV',
      'glGetVideoCaptureStreamivNV',
      'glGetVideoCaptureStreamfvNV',
      'glGetVideoCaptureStreamdvNV',
      'glVideoCaptureNV',
      'glVideoCaptureStreamParameterivNV',
      'glVideoCaptureStreamParameterfvNV',
      'glVideoCaptureStreamParameterdvNV',
    ]
  end # self.get_ext_command_GL_NV_video_capture


  def self.define_ext_command_GL_NV_viewport_array2
  end # self.define_ext_command_GL_NV_viewport_array2

  def self.get_ext_command_GL_NV_viewport_array2
    [
    ]
  end # self.get_ext_command_GL_NV_viewport_array2


  def self.define_ext_command_GL_NV_viewport_swizzle
    GL::GL_FUNCTION_SYMBOLS << :glViewportSwizzleNV
    GL::GL_FUNCTIONS_ARGS_MAP[:glViewportSwizzleNV] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glViewportSwizzleNV] = Fiddle::TYPE_VOID
    GL.bind_command(:glViewportSwizzleNV)
    GL.module_eval(<<-SRC)
      def self.ViewportSwizzleNV(_index_, _swizzlex_, _swizzley_, _swizzlez_, _swizzlew_)
        GL_FUNCTIONS_MAP[:glViewportSwizzleNV].call(_index_, _swizzlex_, _swizzley_, _swizzlez_, _swizzlew_)
      end
    SRC
  end # self.define_ext_command_GL_NV_viewport_swizzle

  def self.get_ext_command_GL_NV_viewport_swizzle
    [
      'glViewportSwizzleNV',
    ]
  end # self.get_ext_command_GL_NV_viewport_swizzle


  def self.define_ext_command_GL_OES_byte_coordinates
    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1bOES(_texture_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1bOES].call(_texture_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2bOES(_texture_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2bOES].call(_texture_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3bOES(_texture_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3bOES].call(_texture_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4bOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4bOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4bOES(_texture_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4bOES].call(_texture_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4bvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4bvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4bvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4bvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord1bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord1bOES] = [Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord1bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord1bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1bOES(_s_)
        GL_FUNCTIONS_MAP[:glTexCoord1bOES].call(_s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord1bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord1bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord1bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord1bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord1bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2bOES(_s_, _t_)
        GL_FUNCTIONS_MAP[:glTexCoord2bOES].call(_s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord2bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord3bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord3bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord3bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord3bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3bOES(_s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glTexCoord3bOES].call(_s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord3bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord3bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord3bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord3bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord3bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4bOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4bOES(_s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glTexCoord4bOES].call(_s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4bvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord4bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex2bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex2bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex2bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex2bOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2bOES(_x_, _y_)
        GL_FUNCTIONS_MAP[:glVertex2bOES].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex2bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex2bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex2bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex2bvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glVertex2bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex3bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex3bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex3bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex3bOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3bOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertex3bOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex3bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex3bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex3bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex3bvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glVertex3bvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex4bOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex4bOES] = [Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR, Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex4bOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex4bOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4bOES(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glVertex4bOES].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex4bvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex4bvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex4bvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex4bvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4bvOES(_coords_)
        GL_FUNCTIONS_MAP[:glVertex4bvOES].call(_coords_)
      end
    SRC
  end # self.define_ext_command_GL_OES_byte_coordinates

  def self.get_ext_command_GL_OES_byte_coordinates
    [
      'glMultiTexCoord1bOES',
      'glMultiTexCoord1bvOES',
      'glMultiTexCoord2bOES',
      'glMultiTexCoord2bvOES',
      'glMultiTexCoord3bOES',
      'glMultiTexCoord3bvOES',
      'glMultiTexCoord4bOES',
      'glMultiTexCoord4bvOES',
      'glTexCoord1bOES',
      'glTexCoord1bvOES',
      'glTexCoord2bOES',
      'glTexCoord2bvOES',
      'glTexCoord3bOES',
      'glTexCoord3bvOES',
      'glTexCoord4bOES',
      'glTexCoord4bvOES',
      'glVertex2bOES',
      'glVertex2bvOES',
      'glVertex3bOES',
      'glVertex3bvOES',
      'glVertex4bOES',
      'glVertex4bvOES',
    ]
  end # self.get_ext_command_GL_OES_byte_coordinates


  def self.define_ext_command_GL_OES_compressed_paletted_texture
  end # self.define_ext_command_GL_OES_compressed_paletted_texture

  def self.get_ext_command_GL_OES_compressed_paletted_texture
    [
    ]
  end # self.get_ext_command_GL_OES_compressed_paletted_texture


  def self.define_ext_command_GL_OES_fixed_point
    GL::GL_FUNCTION_SYMBOLS << :glAlphaFuncxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glAlphaFuncxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAlphaFuncxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glAlphaFuncxOES)
    GL.module_eval(<<-SRC)
      def self.AlphaFuncxOES(_func_, _ref_)
        GL_FUNCTIONS_MAP[:glAlphaFuncxOES].call(_func_, _ref_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearColorxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearColorxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearColorxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearColorxOES)
    GL.module_eval(<<-SRC)
      def self.ClearColorxOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glClearColorxOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearDepthxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearDepthxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearDepthxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearDepthxOES)
    GL.module_eval(<<-SRC)
      def self.ClearDepthxOES(_depth_)
        GL_FUNCTIONS_MAP[:glClearDepthxOES].call(_depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClipPlanexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glClipPlanexOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClipPlanexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glClipPlanexOES)
    GL.module_eval(<<-SRC)
      def self.ClipPlanexOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:glClipPlanexOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4xOES)
    GL.module_eval(<<-SRC)
      def self.Color4xOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glColor4xOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangexOES)
    GL.module_eval(<<-SRC)
      def self.DepthRangexOES(_n_, _f_)
        GL_FUNCTIONS_MAP[:glDepthRangexOES].call(_n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogxOES)
    GL.module_eval(<<-SRC)
      def self.FogxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glFogxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFogxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogxvOES)
    GL.module_eval(<<-SRC)
      def self.FogxvOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glFogxvOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFrustumxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glFrustumxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFrustumxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glFrustumxOES)
    GL.module_eval(<<-SRC)
      def self.FrustumxOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:glFrustumxOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetClipPlanexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetClipPlanexOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetClipPlanexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetClipPlanexOES)
    GL.module_eval(<<-SRC)
      def self.GetClipPlanexOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:glGetClipPlanexOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFixedvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFixedvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFixedvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFixedvOES)
    GL.module_eval(<<-SRC)
      def self.GetFixedvOES(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFixedvOES].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexEnvxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexEnvxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexEnvxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexEnvxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexEnvxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexEnvxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLightModelxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLightModelxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLightModelxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLightModelxOES)
    GL.module_eval(<<-SRC)
      def self.LightModelxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glLightModelxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLightModelxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLightModelxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLightModelxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLightModelxvOES)
    GL.module_eval(<<-SRC)
      def self.LightModelxvOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glLightModelxvOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLightxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLightxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLightxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLightxOES)
    GL.module_eval(<<-SRC)
      def self.LightxOES(_light_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glLightxOES].call(_light_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLightxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLightxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLightxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLightxvOES)
    GL.module_eval(<<-SRC)
      def self.LightxvOES(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glLightxvOES].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLineWidthxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLineWidthxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLineWidthxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLineWidthxOES)
    GL.module_eval(<<-SRC)
      def self.LineWidthxOES(_width_)
        GL_FUNCTIONS_MAP[:glLineWidthxOES].call(_width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLoadMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLoadMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLoadMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLoadMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.LoadMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:glLoadMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMaterialxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMaterialxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMaterialxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMaterialxOES)
    GL.module_eval(<<-SRC)
      def self.MaterialxOES(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMaterialxOES].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMaterialxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMaterialxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMaterialxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMaterialxvOES)
    GL.module_eval(<<-SRC)
      def self.MaterialxvOES(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glMaterialxvOES].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.MultMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:glMultMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4xOES(_texture_, _s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4xOES].call(_texture_, _s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormal3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormal3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormal3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormal3xOES)
    GL.module_eval(<<-SRC)
      def self.Normal3xOES(_nx_, _ny_, _nz_)
        GL_FUNCTIONS_MAP[:glNormal3xOES].call(_nx_, _ny_, _nz_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glOrthoxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glOrthoxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glOrthoxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glOrthoxOES)
    GL.module_eval(<<-SRC)
      def self.OrthoxOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:glOrthoxOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.PointParameterxvOES(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPointParameterxvOES].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointSizexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointSizexOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointSizexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointSizexOES)
    GL.module_eval(<<-SRC)
      def self.PointSizexOES(_size_)
        GL_FUNCTIONS_MAP[:glPointSizexOES].call(_size_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPolygonOffsetxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPolygonOffsetxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPolygonOffsetxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPolygonOffsetxOES)
    GL.module_eval(<<-SRC)
      def self.PolygonOffsetxOES(_factor_, _units_)
        GL_FUNCTIONS_MAP[:glPolygonOffsetxOES].call(_factor_, _units_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRotatexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRotatexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRotatexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRotatexOES)
    GL.module_eval(<<-SRC)
      def self.RotatexOES(_angle_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glRotatexOES].call(_angle_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glScalexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glScalexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glScalexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glScalexOES)
    GL.module_eval(<<-SRC)
      def self.ScalexOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glScalexOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexEnvxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexEnvxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexEnvxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexEnvxOES)
    GL.module_eval(<<-SRC)
      def self.TexEnvxOES(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTexEnvxOES].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexEnvxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexEnvxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexEnvxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexEnvxvOES)
    GL.module_eval(<<-SRC)
      def self.TexEnvxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTexEnvxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexParameterxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexParameterxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexParameterxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexParameterxOES)
    GL.module_eval(<<-SRC)
      def self.TexParameterxOES(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTexParameterxOES].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.TexParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTexParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTranslatexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTranslatexOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTranslatexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTranslatexOES)
    GL.module_eval(<<-SRC)
      def self.TranslatexOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glTranslatexOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetLightxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetLightxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetLightxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetLightxvOES)
    GL.module_eval(<<-SRC)
      def self.GetLightxvOES(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetLightxvOES].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMaterialxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMaterialxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMaterialxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMaterialxvOES)
    GL.module_eval(<<-SRC)
      def self.GetMaterialxvOES(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetMaterialxvOES].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointParameterxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterxOES)
    GL.module_eval(<<-SRC)
      def self.PointParameterxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPointParameterxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSampleCoveragexOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleCoveragexOES] = [Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleCoveragexOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleCoveragexOES)
    GL.module_eval(<<-SRC)
      def self.SampleCoveragexOES(_value_, _invert_)
        GL_FUNCTIONS_MAP[:glSampleCoveragexOES].call(_value_, _invert_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glAccumxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glAccumxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAccumxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glAccumxOES)
    GL.module_eval(<<-SRC)
      def self.AccumxOES(_op_, _value_)
        GL_FUNCTIONS_MAP[:glAccumxOES].call(_op_, _value_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBitmapxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glBitmapxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBitmapxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glBitmapxOES)
    GL.module_eval(<<-SRC)
      def self.BitmapxOES(_width_, _height_, _xorig_, _yorig_, _xmove_, _ymove_, _bitmap_)
        GL_FUNCTIONS_MAP[:glBitmapxOES].call(_width_, _height_, _xorig_, _yorig_, _xmove_, _ymove_, _bitmap_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glBlendColorxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glBlendColorxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glBlendColorxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glBlendColorxOES)
    GL.module_eval(<<-SRC)
      def self.BlendColorxOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glBlendColorxOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClearAccumxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearAccumxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearAccumxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearAccumxOES)
    GL.module_eval(<<-SRC)
      def self.ClearAccumxOES(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glClearAccumxOES].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor3xOES)
    GL.module_eval(<<-SRC)
      def self.Color3xOES(_red_, _green_, _blue_)
        GL_FUNCTIONS_MAP[:glColor3xOES].call(_red_, _green_, _blue_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor3xvOES)
    GL.module_eval(<<-SRC)
      def self.Color3xvOES(_components_)
        GL_FUNCTIONS_MAP[:glColor3xvOES].call(_components_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4xvOES)
    GL.module_eval(<<-SRC)
      def self.Color4xvOES(_components_)
        GL_FUNCTIONS_MAP[:glColor4xvOES].call(_components_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterxOES)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterxOES(_target_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterxOES].call(_target_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glConvolutionParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glConvolutionParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glConvolutionParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glConvolutionParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.ConvolutionParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glConvolutionParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEvalCoord1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glEvalCoord1xOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEvalCoord1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glEvalCoord1xOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord1xOES(_u_)
        GL_FUNCTIONS_MAP[:glEvalCoord1xOES].call(_u_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEvalCoord1xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glEvalCoord1xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEvalCoord1xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glEvalCoord1xvOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord1xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glEvalCoord1xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEvalCoord2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glEvalCoord2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEvalCoord2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glEvalCoord2xOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord2xOES(_u_, _v_)
        GL_FUNCTIONS_MAP[:glEvalCoord2xOES].call(_u_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glEvalCoord2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glEvalCoord2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glEvalCoord2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glEvalCoord2xvOES)
    GL.module_eval(<<-SRC)
      def self.EvalCoord2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glEvalCoord2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFeedbackBufferxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glFeedbackBufferxOES] = [Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFeedbackBufferxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glFeedbackBufferxOES)
    GL.module_eval(<<-SRC)
      def self.FeedbackBufferxOES(_n_, _type_, _buffer_)
        GL_FUNCTIONS_MAP[:glFeedbackBufferxOES].call(_n_, _type_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetConvolutionParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetConvolutionParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetConvolutionParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetConvolutionParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetConvolutionParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetConvolutionParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetHistogramParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetHistogramParameterxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetHistogramParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetHistogramParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetHistogramParameterxvOES(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetHistogramParameterxvOES].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetLightxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetLightxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetLightxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetLightxOES)
    GL.module_eval(<<-SRC)
      def self.GetLightxOES(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetLightxOES].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMapxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMapxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMapxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMapxvOES)
    GL.module_eval(<<-SRC)
      def self.GetMapxvOES(_target_, _query_, _v_)
        GL_FUNCTIONS_MAP[:glGetMapxvOES].call(_target_, _query_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetMaterialxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetMaterialxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetMaterialxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetMaterialxOES)
    GL.module_eval(<<-SRC)
      def self.GetMaterialxOES(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glGetMaterialxOES].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPixelMapxv
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPixelMapxv] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPixelMapxv] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPixelMapxv)
    GL.module_eval(<<-SRC)
      def self.GetPixelMapxv(_map_, _size_, _values_)
        GL_FUNCTIONS_MAP[:glGetPixelMapxv].call(_map_, _size_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexGenxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexGenxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexGenxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexGenxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexGenxvOES(_coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexGenxvOES].call(_coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetTexLevelParameterxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexLevelParameterxvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexLevelParameterxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexLevelParameterxvOES)
    GL.module_eval(<<-SRC)
      def self.GetTexLevelParameterxvOES(_target_, _level_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetTexLevelParameterxvOES].call(_target_, _level_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIndexxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexxOES)
    GL.module_eval(<<-SRC)
      def self.IndexxOES(_component_)
        GL_FUNCTIONS_MAP[:glIndexxOES].call(_component_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIndexxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glIndexxvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIndexxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glIndexxvOES)
    GL.module_eval(<<-SRC)
      def self.IndexxvOES(_component_)
        GL_FUNCTIONS_MAP[:glIndexxvOES].call(_component_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLoadTransposeMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glLoadTransposeMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLoadTransposeMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glLoadTransposeMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.LoadTransposeMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:glLoadTransposeMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMap1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMap1xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMap1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMap1xOES)
    GL.module_eval(<<-SRC)
      def self.Map1xOES(_target_, _u1_, _u2_, _stride_, _order_, _points_)
        GL_FUNCTIONS_MAP[:glMap1xOES].call(_target_, _u1_, _u2_, _stride_, _order_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMap2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMap2xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMap2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMap2xOES)
    GL.module_eval(<<-SRC)
      def self.Map2xOES(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
        GL_FUNCTIONS_MAP[:glMap2xOES].call(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapGrid1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapGrid1xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapGrid1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapGrid1xOES)
    GL.module_eval(<<-SRC)
      def self.MapGrid1xOES(_n_, _u1_, _u2_)
        GL_FUNCTIONS_MAP[:glMapGrid1xOES].call(_n_, _u1_, _u2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMapGrid2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMapGrid2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMapGrid2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMapGrid2xOES)
    GL.module_eval(<<-SRC)
      def self.MapGrid2xOES(_n_, _u1_, _u2_, _v1_, _v2_)
        GL_FUNCTIONS_MAP[:glMapGrid2xOES].call(_n_, _u1_, _u2_, _v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultTransposeMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultTransposeMatrixxOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultTransposeMatrixxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultTransposeMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.MultTransposeMatrixxOES(_m_)
        GL_FUNCTIONS_MAP[:glMultTransposeMatrixxOES].call(_m_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1xOES(_texture_, _s_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1xOES].call(_texture_, _s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord1xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord1xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord1xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord1xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord1xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord1xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2xOES(_texture_, _s_, _t_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2xOES].call(_texture_, _s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord2xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord2xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord2xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord2xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3xOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3xOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3xOES(_texture_, _s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3xOES].call(_texture_, _s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord3xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord3xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord3xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord3xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glMultiTexCoord4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glMultiTexCoord4xvOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glMultiTexCoord4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glMultiTexCoord4xvOES)
    GL.module_eval(<<-SRC)
      def self.MultiTexCoord4xvOES(_texture_, _coords_)
        GL_FUNCTIONS_MAP[:glMultiTexCoord4xvOES].call(_texture_, _coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormal3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormal3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormal3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormal3xvOES)
    GL.module_eval(<<-SRC)
      def self.Normal3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glNormal3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPassThroughxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPassThroughxOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPassThroughxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPassThroughxOES)
    GL.module_eval(<<-SRC)
      def self.PassThroughxOES(_token_)
        GL_FUNCTIONS_MAP[:glPassThroughxOES].call(_token_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelMapx
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelMapx] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelMapx] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelMapx)
    GL.module_eval(<<-SRC)
      def self.PixelMapx(_map_, _size_, _values_)
        GL_FUNCTIONS_MAP[:glPixelMapx].call(_map_, _size_, _values_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelStorex
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelStorex] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelStorex] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelStorex)
    GL.module_eval(<<-SRC)
      def self.PixelStorex(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPixelStorex].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTransferxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTransferxOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTransferxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTransferxOES)
    GL.module_eval(<<-SRC)
      def self.PixelTransferxOES(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPixelTransferxOES].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelZoomxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelZoomxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelZoomxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelZoomxOES)
    GL.module_eval(<<-SRC)
      def self.PixelZoomxOES(_xfactor_, _yfactor_)
        GL_FUNCTIONS_MAP[:glPixelZoomxOES].call(_xfactor_, _yfactor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPrioritizeTexturesxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glPrioritizeTexturesxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPrioritizeTexturesxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glPrioritizeTexturesxOES)
    GL.module_eval(<<-SRC)
      def self.PrioritizeTexturesxOES(_n_, _textures_, _priorities_)
        GL_FUNCTIONS_MAP[:glPrioritizeTexturesxOES].call(_n_, _textures_, _priorities_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRasterPos2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterPos2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterPos2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterPos2xOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos2xOES(_x_, _y_)
        GL_FUNCTIONS_MAP[:glRasterPos2xOES].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRasterPos2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterPos2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterPos2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterPos2xvOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glRasterPos2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRasterPos3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterPos3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterPos3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterPos3xOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos3xOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glRasterPos3xOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRasterPos3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterPos3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterPos3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterPos3xvOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glRasterPos3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRasterPos4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterPos4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterPos4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterPos4xOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos4xOES(_x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glRasterPos4xOES].call(_x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRasterPos4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRasterPos4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRasterPos4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRasterPos4xvOES)
    GL.module_eval(<<-SRC)
      def self.RasterPos4xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glRasterPos4xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRectxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRectxOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRectxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRectxOES)
    GL.module_eval(<<-SRC)
      def self.RectxOES(_x1_, _y1_, _x2_, _y2_)
        GL_FUNCTIONS_MAP[:glRectxOES].call(_x1_, _y1_, _x2_, _y2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glRectxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glRectxvOES] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glRectxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glRectxvOES)
    GL.module_eval(<<-SRC)
      def self.RectxvOES(_v1_, _v2_)
        GL_FUNCTIONS_MAP[:glRectxvOES].call(_v1_, _v2_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord1xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord1xOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord1xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord1xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1xOES(_s_)
        GL_FUNCTIONS_MAP[:glTexCoord1xOES].call(_s_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord1xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord1xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord1xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord1xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord1xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord1xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2xOES(_s_, _t_)
        GL_FUNCTIONS_MAP[:glTexCoord2xOES].call(_s_, _t_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord3xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3xOES(_s_, _t_, _r_)
        GL_FUNCTIONS_MAP[:glTexCoord3xOES].call(_s_, _t_, _r_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord3xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4xOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4xOES(_s_, _t_, _r_, _q_)
        GL_FUNCTIONS_MAP[:glTexCoord4xOES].call(_s_, _t_, _r_, _q_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4xvOES)
    GL.module_eval(<<-SRC)
      def self.TexCoord4xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glTexCoord4xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexGenxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexGenxOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexGenxOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexGenxOES)
    GL.module_eval(<<-SRC)
      def self.TexGenxOES(_coord_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glTexGenxOES].call(_coord_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexGenxvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexGenxvOES] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexGenxvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexGenxvOES)
    GL.module_eval(<<-SRC)
      def self.TexGenxvOES(_coord_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glTexGenxvOES].call(_coord_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex2xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex2xOES] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex2xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex2xOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2xOES(_x_)
        GL_FUNCTIONS_MAP[:glVertex2xOES].call(_x_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex2xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex2xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex2xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex2xvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex2xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glVertex2xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex3xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex3xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex3xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex3xOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3xOES(_x_, _y_)
        GL_FUNCTIONS_MAP[:glVertex3xOES].call(_x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex3xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex3xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex3xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex3xvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex3xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glVertex3xvOES].call(_coords_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex4xOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex4xOES] = [Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex4xOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex4xOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4xOES(_x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glVertex4xOES].call(_x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glVertex4xvOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glVertex4xvOES] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glVertex4xvOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glVertex4xvOES)
    GL.module_eval(<<-SRC)
      def self.Vertex4xvOES(_coords_)
        GL_FUNCTIONS_MAP[:glVertex4xvOES].call(_coords_)
      end
    SRC
  end # self.define_ext_command_GL_OES_fixed_point

  def self.get_ext_command_GL_OES_fixed_point
    [
      'glAlphaFuncxOES',
      'glClearColorxOES',
      'glClearDepthxOES',
      'glClipPlanexOES',
      'glColor4xOES',
      'glDepthRangexOES',
      'glFogxOES',
      'glFogxvOES',
      'glFrustumxOES',
      'glGetClipPlanexOES',
      'glGetFixedvOES',
      'glGetTexEnvxvOES',
      'glGetTexParameterxvOES',
      'glLightModelxOES',
      'glLightModelxvOES',
      'glLightxOES',
      'glLightxvOES',
      'glLineWidthxOES',
      'glLoadMatrixxOES',
      'glMaterialxOES',
      'glMaterialxvOES',
      'glMultMatrixxOES',
      'glMultiTexCoord4xOES',
      'glNormal3xOES',
      'glOrthoxOES',
      'glPointParameterxvOES',
      'glPointSizexOES',
      'glPolygonOffsetxOES',
      'glRotatexOES',
      'glScalexOES',
      'glTexEnvxOES',
      'glTexEnvxvOES',
      'glTexParameterxOES',
      'glTexParameterxvOES',
      'glTranslatexOES',
      'glGetLightxvOES',
      'glGetMaterialxvOES',
      'glPointParameterxOES',
      'glSampleCoveragexOES',
      'glAccumxOES',
      'glBitmapxOES',
      'glBlendColorxOES',
      'glClearAccumxOES',
      'glColor3xOES',
      'glColor3xvOES',
      'glColor4xvOES',
      'glConvolutionParameterxOES',
      'glConvolutionParameterxvOES',
      'glEvalCoord1xOES',
      'glEvalCoord1xvOES',
      'glEvalCoord2xOES',
      'glEvalCoord2xvOES',
      'glFeedbackBufferxOES',
      'glGetConvolutionParameterxvOES',
      'glGetHistogramParameterxvOES',
      'glGetLightxOES',
      'glGetMapxvOES',
      'glGetMaterialxOES',
      'glGetPixelMapxv',
      'glGetTexGenxvOES',
      'glGetTexLevelParameterxvOES',
      'glIndexxOES',
      'glIndexxvOES',
      'glLoadTransposeMatrixxOES',
      'glMap1xOES',
      'glMap2xOES',
      'glMapGrid1xOES',
      'glMapGrid2xOES',
      'glMultTransposeMatrixxOES',
      'glMultiTexCoord1xOES',
      'glMultiTexCoord1xvOES',
      'glMultiTexCoord2xOES',
      'glMultiTexCoord2xvOES',
      'glMultiTexCoord3xOES',
      'glMultiTexCoord3xvOES',
      'glMultiTexCoord4xvOES',
      'glNormal3xvOES',
      'glPassThroughxOES',
      'glPixelMapx',
      'glPixelStorex',
      'glPixelTransferxOES',
      'glPixelZoomxOES',
      'glPrioritizeTexturesxOES',
      'glRasterPos2xOES',
      'glRasterPos2xvOES',
      'glRasterPos3xOES',
      'glRasterPos3xvOES',
      'glRasterPos4xOES',
      'glRasterPos4xvOES',
      'glRectxOES',
      'glRectxvOES',
      'glTexCoord1xOES',
      'glTexCoord1xvOES',
      'glTexCoord2xOES',
      'glTexCoord2xvOES',
      'glTexCoord3xOES',
      'glTexCoord3xvOES',
      'glTexCoord4xOES',
      'glTexCoord4xvOES',
      'glTexGenxOES',
      'glTexGenxvOES',
      'glVertex2xOES',
      'glVertex2xvOES',
      'glVertex3xOES',
      'glVertex3xvOES',
      'glVertex4xOES',
      'glVertex4xvOES',
    ]
  end # self.get_ext_command_GL_OES_fixed_point


  def self.define_ext_command_GL_OES_query_matrix
    GL::GL_FUNCTION_SYMBOLS << :glQueryMatrixxOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glQueryMatrixxOES] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glQueryMatrixxOES] = -Fiddle::TYPE_INT
    GL.bind_command(:glQueryMatrixxOES)
    GL.module_eval(<<-SRC)
      def self.QueryMatrixxOES(_mantissa_, _exponent_)
        GL_FUNCTIONS_MAP[:glQueryMatrixxOES].call(_mantissa_, _exponent_)
      end
    SRC
  end # self.define_ext_command_GL_OES_query_matrix

  def self.get_ext_command_GL_OES_query_matrix
    [
      'glQueryMatrixxOES',
    ]
  end # self.get_ext_command_GL_OES_query_matrix


  def self.define_ext_command_GL_OES_read_format
  end # self.define_ext_command_GL_OES_read_format

  def self.get_ext_command_GL_OES_read_format
    [
    ]
  end # self.get_ext_command_GL_OES_read_format


  def self.define_ext_command_GL_OES_single_precision
    GL::GL_FUNCTION_SYMBOLS << :glClearDepthfOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glClearDepthfOES] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClearDepthfOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glClearDepthfOES)
    GL.module_eval(<<-SRC)
      def self.ClearDepthfOES(_depth_)
        GL_FUNCTIONS_MAP[:glClearDepthfOES].call(_depth_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glClipPlanefOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glClipPlanefOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glClipPlanefOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glClipPlanefOES)
    GL.module_eval(<<-SRC)
      def self.ClipPlanefOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:glClipPlanefOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDepthRangefOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glDepthRangefOES] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDepthRangefOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glDepthRangefOES)
    GL.module_eval(<<-SRC)
      def self.DepthRangefOES(_n_, _f_)
        GL_FUNCTIONS_MAP[:glDepthRangefOES].call(_n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFrustumfOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glFrustumfOES] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFrustumfOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glFrustumfOES)
    GL.module_eval(<<-SRC)
      def self.FrustumfOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:glFrustumfOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetClipPlanefOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetClipPlanefOES] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetClipPlanefOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetClipPlanefOES)
    GL.module_eval(<<-SRC)
      def self.GetClipPlanefOES(_plane_, _equation_)
        GL_FUNCTIONS_MAP[:glGetClipPlanefOES].call(_plane_, _equation_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glOrthofOES
    GL::GL_FUNCTIONS_ARGS_MAP[:glOrthofOES] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glOrthofOES] = Fiddle::TYPE_VOID
    GL.bind_command(:glOrthofOES)
    GL.module_eval(<<-SRC)
      def self.OrthofOES(_l_, _r_, _b_, _t_, _n_, _f_)
        GL_FUNCTIONS_MAP[:glOrthofOES].call(_l_, _r_, _b_, _t_, _n_, _f_)
      end
    SRC
  end # self.define_ext_command_GL_OES_single_precision

  def self.get_ext_command_GL_OES_single_precision
    [
      'glClearDepthfOES',
      'glClipPlanefOES',
      'glDepthRangefOES',
      'glFrustumfOES',
      'glGetClipPlanefOES',
      'glOrthofOES',
    ]
  end # self.get_ext_command_GL_OES_single_precision


  def self.define_ext_command_GL_OML_interlace
  end # self.define_ext_command_GL_OML_interlace

  def self.get_ext_command_GL_OML_interlace
    [
    ]
  end # self.get_ext_command_GL_OML_interlace


  def self.define_ext_command_GL_OML_resample
  end # self.define_ext_command_GL_OML_resample

  def self.get_ext_command_GL_OML_resample
    [
    ]
  end # self.get_ext_command_GL_OML_resample


  def self.define_ext_command_GL_OML_subsample
  end # self.define_ext_command_GL_OML_subsample

  def self.get_ext_command_GL_OML_subsample
    [
    ]
  end # self.get_ext_command_GL_OML_subsample


  def self.define_ext_command_GL_OVR_multiview
    GL::GL_FUNCTION_SYMBOLS << :glFramebufferTextureMultiviewOVR
    GL::GL_FUNCTIONS_ARGS_MAP[:glFramebufferTextureMultiviewOVR] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFramebufferTextureMultiviewOVR] = Fiddle::TYPE_VOID
    GL.bind_command(:glFramebufferTextureMultiviewOVR)
    GL.module_eval(<<-SRC)
      def self.FramebufferTextureMultiviewOVR(_target_, _attachment_, _texture_, _level_, _baseViewIndex_, _numViews_)
        GL_FUNCTIONS_MAP[:glFramebufferTextureMultiviewOVR].call(_target_, _attachment_, _texture_, _level_, _baseViewIndex_, _numViews_)
      end
    SRC
  end # self.define_ext_command_GL_OVR_multiview

  def self.get_ext_command_GL_OVR_multiview
    [
      'glFramebufferTextureMultiviewOVR',
    ]
  end # self.get_ext_command_GL_OVR_multiview


  def self.define_ext_command_GL_OVR_multiview2
  end # self.define_ext_command_GL_OVR_multiview2

  def self.get_ext_command_GL_OVR_multiview2
    [
    ]
  end # self.get_ext_command_GL_OVR_multiview2


  def self.define_ext_command_GL_PGI_misc_hints
    GL::GL_FUNCTION_SYMBOLS << :glHintPGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glHintPGI] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glHintPGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glHintPGI)
    GL.module_eval(<<-SRC)
      def self.HintPGI(_target_, _mode_)
        GL_FUNCTIONS_MAP[:glHintPGI].call(_target_, _mode_)
      end
    SRC
  end # self.define_ext_command_GL_PGI_misc_hints

  def self.get_ext_command_GL_PGI_misc_hints
    [
      'glHintPGI',
    ]
  end # self.get_ext_command_GL_PGI_misc_hints


  def self.define_ext_command_GL_PGI_vertex_hints
  end # self.define_ext_command_GL_PGI_vertex_hints

  def self.get_ext_command_GL_PGI_vertex_hints
    [
    ]
  end # self.get_ext_command_GL_PGI_vertex_hints


  def self.define_ext_command_GL_REND_screen_coordinates
  end # self.define_ext_command_GL_REND_screen_coordinates

  def self.get_ext_command_GL_REND_screen_coordinates
    [
    ]
  end # self.get_ext_command_GL_REND_screen_coordinates


  def self.define_ext_command_GL_S3_s3tc
  end # self.define_ext_command_GL_S3_s3tc

  def self.get_ext_command_GL_S3_s3tc
    [
    ]
  end # self.get_ext_command_GL_S3_s3tc


  def self.define_ext_command_GL_SGIS_detail_texture
    GL::GL_FUNCTION_SYMBOLS << :glDetailTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glDetailTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDetailTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glDetailTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.DetailTexFuncSGIS(_target_, _n_, _points_)
        GL_FUNCTIONS_MAP[:glDetailTexFuncSGIS].call(_target_, _n_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetDetailTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetDetailTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetDetailTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetDetailTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetDetailTexFuncSGIS(_target_, _points_)
        GL_FUNCTIONS_MAP[:glGetDetailTexFuncSGIS].call(_target_, _points_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_detail_texture

  def self.get_ext_command_GL_SGIS_detail_texture
    [
      'glDetailTexFuncSGIS',
      'glGetDetailTexFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_detail_texture


  def self.define_ext_command_GL_SGIS_fog_function
    GL::GL_FUNCTION_SYMBOLS << :glFogFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glFogFuncSGIS] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFogFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glFogFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.FogFuncSGIS(_n_, _points_)
        GL_FUNCTIONS_MAP[:glFogFuncSGIS].call(_n_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFogFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFogFuncSGIS] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFogFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFogFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetFogFuncSGIS(_points_)
        GL_FUNCTIONS_MAP[:glGetFogFuncSGIS].call(_points_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_fog_function

  def self.get_ext_command_GL_SGIS_fog_function
    [
      'glFogFuncSGIS',
      'glGetFogFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_fog_function


  def self.define_ext_command_GL_SGIS_generate_mipmap
  end # self.define_ext_command_GL_SGIS_generate_mipmap

  def self.get_ext_command_GL_SGIS_generate_mipmap
    [
    ]
  end # self.get_ext_command_GL_SGIS_generate_mipmap


  def self.define_ext_command_GL_SGIS_multisample
    GL::GL_FUNCTION_SYMBOLS << :glSampleMaskSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glSampleMaskSGIS] = [Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSampleMaskSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glSampleMaskSGIS)
    GL.module_eval(<<-SRC)
      def self.SampleMaskSGIS(_value_, _invert_)
        GL_FUNCTIONS_MAP[:glSampleMaskSGIS].call(_value_, _invert_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSamplePatternSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glSamplePatternSGIS] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSamplePatternSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glSamplePatternSGIS)
    GL.module_eval(<<-SRC)
      def self.SamplePatternSGIS(_pattern_)
        GL_FUNCTIONS_MAP[:glSamplePatternSGIS].call(_pattern_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_multisample

  def self.get_ext_command_GL_SGIS_multisample
    [
      'glSampleMaskSGIS',
      'glSamplePatternSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_multisample


  def self.define_ext_command_GL_SGIS_pixel_texture
    GL::GL_FUNCTION_SYMBOLS << :glPixelTexGenParameteriSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTexGenParameteriSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTexGenParameteriSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTexGenParameteriSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameteriSGIS(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPixelTexGenParameteriSGIS].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTexGenParameterivSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTexGenParameterivSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTexGenParameterivSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTexGenParameterivSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameterivSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPixelTexGenParameterivSGIS].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTexGenParameterfSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTexGenParameterfSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTexGenParameterfSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTexGenParameterfSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameterfSGIS(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPixelTexGenParameterfSGIS].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPixelTexGenParameterfvSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTexGenParameterfvSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTexGenParameterfvSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTexGenParameterfvSGIS)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenParameterfvSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPixelTexGenParameterfvSGIS].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPixelTexGenParameterivSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPixelTexGenParameterivSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPixelTexGenParameterivSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPixelTexGenParameterivSGIS)
    GL.module_eval(<<-SRC)
      def self.GetPixelTexGenParameterivSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPixelTexGenParameterivSGIS].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetPixelTexGenParameterfvSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetPixelTexGenParameterfvSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetPixelTexGenParameterfvSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetPixelTexGenParameterfvSGIS)
    GL.module_eval(<<-SRC)
      def self.GetPixelTexGenParameterfvSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetPixelTexGenParameterfvSGIS].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_pixel_texture

  def self.get_ext_command_GL_SGIS_pixel_texture
    [
      'glPixelTexGenParameteriSGIS',
      'glPixelTexGenParameterivSGIS',
      'glPixelTexGenParameterfSGIS',
      'glPixelTexGenParameterfvSGIS',
      'glGetPixelTexGenParameterivSGIS',
      'glGetPixelTexGenParameterfvSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_pixel_texture


  def self.define_ext_command_GL_SGIS_point_line_texgen
  end # self.define_ext_command_GL_SGIS_point_line_texgen

  def self.get_ext_command_GL_SGIS_point_line_texgen
    [
    ]
  end # self.get_ext_command_GL_SGIS_point_line_texgen


  def self.define_ext_command_GL_SGIS_point_parameters
    GL::GL_FUNCTION_SYMBOLS << :glPointParameterfSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterfSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterfSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterfSGIS)
    GL.module_eval(<<-SRC)
      def self.PointParameterfSGIS(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glPointParameterfSGIS].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPointParameterfvSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glPointParameterfvSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPointParameterfvSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glPointParameterfvSGIS)
    GL.module_eval(<<-SRC)
      def self.PointParameterfvSGIS(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glPointParameterfvSGIS].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_point_parameters

  def self.get_ext_command_GL_SGIS_point_parameters
    [
      'glPointParameterfSGIS',
      'glPointParameterfvSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_point_parameters


  def self.define_ext_command_GL_SGIS_sharpen_texture
    GL::GL_FUNCTION_SYMBOLS << :glSharpenTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glSharpenTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSharpenTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glSharpenTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.SharpenTexFuncSGIS(_target_, _n_, _points_)
        GL_FUNCTIONS_MAP[:glSharpenTexFuncSGIS].call(_target_, _n_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetSharpenTexFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetSharpenTexFuncSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetSharpenTexFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetSharpenTexFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetSharpenTexFuncSGIS(_target_, _points_)
        GL_FUNCTIONS_MAP[:glGetSharpenTexFuncSGIS].call(_target_, _points_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_sharpen_texture

  def self.get_ext_command_GL_SGIS_sharpen_texture
    [
      'glSharpenTexFuncSGIS',
      'glGetSharpenTexFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_sharpen_texture


  def self.define_ext_command_GL_SGIS_texture4D
    GL::GL_FUNCTION_SYMBOLS << :glTexImage4DSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexImage4DSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexImage4DSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexImage4DSGIS)
    GL.module_eval(<<-SRC)
      def self.TexImage4DSGIS(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _size4d_, _border_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTexImage4DSGIS].call(_target_, _level_, _internalformat_, _width_, _height_, _depth_, _size4d_, _border_, _format_, _type_, _pixels_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexSubImage4DSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexSubImage4DSGIS] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexSubImage4DSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexSubImage4DSGIS)
    GL.module_eval(<<-SRC)
      def self.TexSubImage4DSGIS(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _woffset_, _width_, _height_, _depth_, _size4d_, _format_, _type_, _pixels_)
        GL_FUNCTIONS_MAP[:glTexSubImage4DSGIS].call(_target_, _level_, _xoffset_, _yoffset_, _zoffset_, _woffset_, _width_, _height_, _depth_, _size4d_, _format_, _type_, _pixels_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_texture4D

  def self.get_ext_command_GL_SGIS_texture4D
    [
      'glTexImage4DSGIS',
      'glTexSubImage4DSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_texture4D


  def self.define_ext_command_GL_SGIS_texture_border_clamp
  end # self.define_ext_command_GL_SGIS_texture_border_clamp

  def self.get_ext_command_GL_SGIS_texture_border_clamp
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_border_clamp


  def self.define_ext_command_GL_SGIS_texture_color_mask
    GL::GL_FUNCTION_SYMBOLS << :glTextureColorMaskSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glTextureColorMaskSGIS] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTextureColorMaskSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glTextureColorMaskSGIS)
    GL.module_eval(<<-SRC)
      def self.TextureColorMaskSGIS(_red_, _green_, _blue_, _alpha_)
        GL_FUNCTIONS_MAP[:glTextureColorMaskSGIS].call(_red_, _green_, _blue_, _alpha_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_texture_color_mask

  def self.get_ext_command_GL_SGIS_texture_color_mask
    [
      'glTextureColorMaskSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_texture_color_mask


  def self.define_ext_command_GL_SGIS_texture_edge_clamp
  end # self.define_ext_command_GL_SGIS_texture_edge_clamp

  def self.get_ext_command_GL_SGIS_texture_edge_clamp
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_edge_clamp


  def self.define_ext_command_GL_SGIS_texture_filter4
    GL::GL_FUNCTION_SYMBOLS << :glGetTexFilterFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetTexFilterFuncSGIS] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetTexFilterFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetTexFilterFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.GetTexFilterFuncSGIS(_target_, _filter_, _weights_)
        GL_FUNCTIONS_MAP[:glGetTexFilterFuncSGIS].call(_target_, _filter_, _weights_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexFilterFuncSGIS
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexFilterFuncSGIS] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexFilterFuncSGIS] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexFilterFuncSGIS)
    GL.module_eval(<<-SRC)
      def self.TexFilterFuncSGIS(_target_, _filter_, _n_, _weights_)
        GL_FUNCTIONS_MAP[:glTexFilterFuncSGIS].call(_target_, _filter_, _n_, _weights_)
      end
    SRC
  end # self.define_ext_command_GL_SGIS_texture_filter4

  def self.get_ext_command_GL_SGIS_texture_filter4
    [
      'glGetTexFilterFuncSGIS',
      'glTexFilterFuncSGIS',
    ]
  end # self.get_ext_command_GL_SGIS_texture_filter4


  def self.define_ext_command_GL_SGIS_texture_lod
  end # self.define_ext_command_GL_SGIS_texture_lod

  def self.get_ext_command_GL_SGIS_texture_lod
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_lod


  def self.define_ext_command_GL_SGIS_texture_select
  end # self.define_ext_command_GL_SGIS_texture_select

  def self.get_ext_command_GL_SGIS_texture_select
    [
    ]
  end # self.get_ext_command_GL_SGIS_texture_select


  def self.define_ext_command_GL_SGIX_async
    GL::GL_FUNCTION_SYMBOLS << :glAsyncMarkerSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glAsyncMarkerSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glAsyncMarkerSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glAsyncMarkerSGIX)
    GL.module_eval(<<-SRC)
      def self.AsyncMarkerSGIX(_marker_)
        GL_FUNCTIONS_MAP[:glAsyncMarkerSGIX].call(_marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFinishAsyncSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFinishAsyncSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFinishAsyncSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:glFinishAsyncSGIX)
    GL.module_eval(<<-SRC)
      def self.FinishAsyncSGIX(_markerp_)
        GL_FUNCTIONS_MAP[:glFinishAsyncSGIX].call(_markerp_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPollAsyncSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glPollAsyncSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPollAsyncSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:glPollAsyncSGIX)
    GL.module_eval(<<-SRC)
      def self.PollAsyncSGIX(_markerp_)
        GL_FUNCTIONS_MAP[:glPollAsyncSGIX].call(_markerp_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGenAsyncMarkersSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGenAsyncMarkersSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGenAsyncMarkersSGIX] = -Fiddle::TYPE_INT
    GL.bind_command(:glGenAsyncMarkersSGIX)
    GL.module_eval(<<-SRC)
      def self.GenAsyncMarkersSGIX(_range_)
        GL_FUNCTIONS_MAP[:glGenAsyncMarkersSGIX].call(_range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeleteAsyncMarkersSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeleteAsyncMarkersSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeleteAsyncMarkersSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeleteAsyncMarkersSGIX)
    GL.module_eval(<<-SRC)
      def self.DeleteAsyncMarkersSGIX(_marker_, _range_)
        GL_FUNCTIONS_MAP[:glDeleteAsyncMarkersSGIX].call(_marker_, _range_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glIsAsyncMarkerSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glIsAsyncMarkerSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIsAsyncMarkerSGIX] = -Fiddle::TYPE_CHAR
    GL.bind_command(:glIsAsyncMarkerSGIX)
    GL.module_eval(<<-SRC)
      def self.IsAsyncMarkerSGIX(_marker_)
        GL_FUNCTIONS_MAP[:glIsAsyncMarkerSGIX].call(_marker_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_async

  def self.get_ext_command_GL_SGIX_async
    [
      'glAsyncMarkerSGIX',
      'glFinishAsyncSGIX',
      'glPollAsyncSGIX',
      'glGenAsyncMarkersSGIX',
      'glDeleteAsyncMarkersSGIX',
      'glIsAsyncMarkerSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_async


  def self.define_ext_command_GL_SGIX_async_histogram
  end # self.define_ext_command_GL_SGIX_async_histogram

  def self.get_ext_command_GL_SGIX_async_histogram
    [
    ]
  end # self.get_ext_command_GL_SGIX_async_histogram


  def self.define_ext_command_GL_SGIX_async_pixel
  end # self.define_ext_command_GL_SGIX_async_pixel

  def self.get_ext_command_GL_SGIX_async_pixel
    [
    ]
  end # self.get_ext_command_GL_SGIX_async_pixel


  def self.define_ext_command_GL_SGIX_blend_alpha_minmax
  end # self.define_ext_command_GL_SGIX_blend_alpha_minmax

  def self.get_ext_command_GL_SGIX_blend_alpha_minmax
    [
    ]
  end # self.get_ext_command_GL_SGIX_blend_alpha_minmax


  def self.define_ext_command_GL_SGIX_calligraphic_fragment
  end # self.define_ext_command_GL_SGIX_calligraphic_fragment

  def self.get_ext_command_GL_SGIX_calligraphic_fragment
    [
    ]
  end # self.get_ext_command_GL_SGIX_calligraphic_fragment


  def self.define_ext_command_GL_SGIX_clipmap
  end # self.define_ext_command_GL_SGIX_clipmap

  def self.get_ext_command_GL_SGIX_clipmap
    [
    ]
  end # self.get_ext_command_GL_SGIX_clipmap


  def self.define_ext_command_GL_SGIX_convolution_accuracy
  end # self.define_ext_command_GL_SGIX_convolution_accuracy

  def self.get_ext_command_GL_SGIX_convolution_accuracy
    [
    ]
  end # self.get_ext_command_GL_SGIX_convolution_accuracy


  def self.define_ext_command_GL_SGIX_depth_pass_instrument
  end # self.define_ext_command_GL_SGIX_depth_pass_instrument

  def self.get_ext_command_GL_SGIX_depth_pass_instrument
    [
    ]
  end # self.get_ext_command_GL_SGIX_depth_pass_instrument


  def self.define_ext_command_GL_SGIX_depth_texture
  end # self.define_ext_command_GL_SGIX_depth_texture

  def self.get_ext_command_GL_SGIX_depth_texture
    [
    ]
  end # self.get_ext_command_GL_SGIX_depth_texture


  def self.define_ext_command_GL_SGIX_flush_raster
    GL::GL_FUNCTION_SYMBOLS << :glFlushRasterSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFlushRasterSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFlushRasterSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFlushRasterSGIX)
    GL.module_eval(<<-SRC)
      def self.FlushRasterSGIX()
        GL_FUNCTIONS_MAP[:glFlushRasterSGIX].call()
      end
    SRC
  end # self.define_ext_command_GL_SGIX_flush_raster

  def self.get_ext_command_GL_SGIX_flush_raster
    [
      'glFlushRasterSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_flush_raster


  def self.define_ext_command_GL_SGIX_fog_offset
  end # self.define_ext_command_GL_SGIX_fog_offset

  def self.get_ext_command_GL_SGIX_fog_offset
    [
    ]
  end # self.get_ext_command_GL_SGIX_fog_offset


  def self.define_ext_command_GL_SGIX_fragment_lighting
    GL::GL_FUNCTION_SYMBOLS << :glFragmentColorMaterialSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentColorMaterialSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentColorMaterialSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentColorMaterialSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentColorMaterialSGIX(_face_, _mode_)
        GL_FUNCTIONS_MAP[:glFragmentColorMaterialSGIX].call(_face_, _mode_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightfSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightfSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightfSGIX(_light_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glFragmentLightfSGIX].call(_light_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightfvSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightfvSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glFragmentLightfvSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightiSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightiSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightiSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightiSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightiSGIX(_light_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glFragmentLightiSGIX].call(_light_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightivSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightivSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glFragmentLightivSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightModelfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightModelfSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightModelfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightModelfSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModelfSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glFragmentLightModelfSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightModelfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightModelfvSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightModelfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightModelfvSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModelfvSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glFragmentLightModelfvSGIX].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightModeliSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightModeliSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightModeliSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightModeliSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModeliSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glFragmentLightModeliSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentLightModelivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentLightModelivSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentLightModelivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentLightModelivSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentLightModelivSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glFragmentLightModelivSGIX].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentMaterialfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentMaterialfSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentMaterialfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentMaterialfSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialfSGIX(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glFragmentMaterialfSGIX].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentMaterialfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentMaterialfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentMaterialfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentMaterialfvSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialfvSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glFragmentMaterialfvSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentMaterialiSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentMaterialiSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentMaterialiSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentMaterialiSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialiSGIX(_face_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glFragmentMaterialiSGIX].call(_face_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glFragmentMaterialivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFragmentMaterialivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFragmentMaterialivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFragmentMaterialivSGIX)
    GL.module_eval(<<-SRC)
      def self.FragmentMaterialivSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glFragmentMaterialivSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFragmentLightfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFragmentLightfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFragmentLightfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFragmentLightfvSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentLightfvSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFragmentLightfvSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFragmentLightivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFragmentLightivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFragmentLightivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFragmentLightivSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentLightivSGIX(_light_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFragmentLightivSGIX].call(_light_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFragmentMaterialfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFragmentMaterialfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFragmentMaterialfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFragmentMaterialfvSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentMaterialfvSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFragmentMaterialfvSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetFragmentMaterialivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetFragmentMaterialivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetFragmentMaterialivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetFragmentMaterialivSGIX)
    GL.module_eval(<<-SRC)
      def self.GetFragmentMaterialivSGIX(_face_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetFragmentMaterialivSGIX].call(_face_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLightEnviSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glLightEnviSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLightEnviSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glLightEnviSGIX)
    GL.module_eval(<<-SRC)
      def self.LightEnviSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glLightEnviSGIX].call(_pname_, _param_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_fragment_lighting

  def self.get_ext_command_GL_SGIX_fragment_lighting
    [
      'glFragmentColorMaterialSGIX',
      'glFragmentLightfSGIX',
      'glFragmentLightfvSGIX',
      'glFragmentLightiSGIX',
      'glFragmentLightivSGIX',
      'glFragmentLightModelfSGIX',
      'glFragmentLightModelfvSGIX',
      'glFragmentLightModeliSGIX',
      'glFragmentLightModelivSGIX',
      'glFragmentMaterialfSGIX',
      'glFragmentMaterialfvSGIX',
      'glFragmentMaterialiSGIX',
      'glFragmentMaterialivSGIX',
      'glGetFragmentLightfvSGIX',
      'glGetFragmentLightivSGIX',
      'glGetFragmentMaterialfvSGIX',
      'glGetFragmentMaterialivSGIX',
      'glLightEnviSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_fragment_lighting


  def self.define_ext_command_GL_SGIX_framezoom
    GL::GL_FUNCTION_SYMBOLS << :glFrameZoomSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFrameZoomSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFrameZoomSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFrameZoomSGIX)
    GL.module_eval(<<-SRC)
      def self.FrameZoomSGIX(_factor_)
        GL_FUNCTIONS_MAP[:glFrameZoomSGIX].call(_factor_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_framezoom

  def self.get_ext_command_GL_SGIX_framezoom
    [
      'glFrameZoomSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_framezoom


  def self.define_ext_command_GL_SGIX_igloo_interface
    GL::GL_FUNCTION_SYMBOLS << :glIglooInterfaceSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glIglooInterfaceSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glIglooInterfaceSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glIglooInterfaceSGIX)
    GL.module_eval(<<-SRC)
      def self.IglooInterfaceSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glIglooInterfaceSGIX].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_igloo_interface

  def self.get_ext_command_GL_SGIX_igloo_interface
    [
      'glIglooInterfaceSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_igloo_interface


  def self.define_ext_command_GL_SGIX_instruments
    GL::GL_FUNCTION_SYMBOLS << :glGetInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetInstrumentsSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetInstrumentsSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:glGetInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.GetInstrumentsSGIX()
        GL_FUNCTIONS_MAP[:glGetInstrumentsSGIX].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glInstrumentsBufferSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glInstrumentsBufferSGIX] = [Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glInstrumentsBufferSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glInstrumentsBufferSGIX)
    GL.module_eval(<<-SRC)
      def self.InstrumentsBufferSGIX(_size_, _buffer_)
        GL_FUNCTIONS_MAP[:glInstrumentsBufferSGIX].call(_size_, _buffer_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glPollInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glPollInstrumentsSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPollInstrumentsSGIX] = Fiddle::TYPE_INT
    GL.bind_command(:glPollInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.PollInstrumentsSGIX(_marker_p_)
        GL_FUNCTIONS_MAP[:glPollInstrumentsSGIX].call(_marker_p_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReadInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glReadInstrumentsSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReadInstrumentsSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glReadInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.ReadInstrumentsSGIX(_marker_)
        GL_FUNCTIONS_MAP[:glReadInstrumentsSGIX].call(_marker_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStartInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glStartInstrumentsSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStartInstrumentsSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glStartInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.StartInstrumentsSGIX()
        GL_FUNCTIONS_MAP[:glStartInstrumentsSGIX].call()
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glStopInstrumentsSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glStopInstrumentsSGIX] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glStopInstrumentsSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glStopInstrumentsSGIX)
    GL.module_eval(<<-SRC)
      def self.StopInstrumentsSGIX(_marker_)
        GL_FUNCTIONS_MAP[:glStopInstrumentsSGIX].call(_marker_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_instruments

  def self.get_ext_command_GL_SGIX_instruments
    [
      'glGetInstrumentsSGIX',
      'glInstrumentsBufferSGIX',
      'glPollInstrumentsSGIX',
      'glReadInstrumentsSGIX',
      'glStartInstrumentsSGIX',
      'glStopInstrumentsSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_instruments


  def self.define_ext_command_GL_SGIX_interlace
  end # self.define_ext_command_GL_SGIX_interlace

  def self.get_ext_command_GL_SGIX_interlace
    [
    ]
  end # self.get_ext_command_GL_SGIX_interlace


  def self.define_ext_command_GL_SGIX_ir_instrument1
  end # self.define_ext_command_GL_SGIX_ir_instrument1

  def self.get_ext_command_GL_SGIX_ir_instrument1
    [
    ]
  end # self.get_ext_command_GL_SGIX_ir_instrument1


  def self.define_ext_command_GL_SGIX_list_priority
    GL::GL_FUNCTION_SYMBOLS << :glGetListParameterfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetListParameterfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetListParameterfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetListParameterfvSGIX)
    GL.module_eval(<<-SRC)
      def self.GetListParameterfvSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetListParameterfvSGIX].call(_list_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetListParameterivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetListParameterivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetListParameterivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetListParameterivSGIX)
    GL.module_eval(<<-SRC)
      def self.GetListParameterivSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetListParameterivSGIX].call(_list_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glListParameterfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glListParameterfSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glListParameterfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glListParameterfSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameterfSGIX(_list_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glListParameterfSGIX].call(_list_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glListParameterfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glListParameterfvSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glListParameterfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glListParameterfvSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameterfvSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glListParameterfvSGIX].call(_list_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glListParameteriSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glListParameteriSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glListParameteriSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glListParameteriSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameteriSGIX(_list_, _pname_, _param_)
        GL_FUNCTIONS_MAP[:glListParameteriSGIX].call(_list_, _pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glListParameterivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glListParameterivSGIX] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glListParameterivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glListParameterivSGIX)
    GL.module_eval(<<-SRC)
      def self.ListParameterivSGIX(_list_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glListParameterivSGIX].call(_list_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_list_priority

  def self.get_ext_command_GL_SGIX_list_priority
    [
      'glGetListParameterfvSGIX',
      'glGetListParameterivSGIX',
      'glListParameterfSGIX',
      'glListParameterfvSGIX',
      'glListParameteriSGIX',
      'glListParameterivSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_list_priority


  def self.define_ext_command_GL_SGIX_pixel_texture
    GL::GL_FUNCTION_SYMBOLS << :glPixelTexGenSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glPixelTexGenSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glPixelTexGenSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glPixelTexGenSGIX)
    GL.module_eval(<<-SRC)
      def self.PixelTexGenSGIX(_mode_)
        GL_FUNCTIONS_MAP[:glPixelTexGenSGIX].call(_mode_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_pixel_texture

  def self.get_ext_command_GL_SGIX_pixel_texture
    [
      'glPixelTexGenSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_pixel_texture


  def self.define_ext_command_GL_SGIX_pixel_tiles
  end # self.define_ext_command_GL_SGIX_pixel_tiles

  def self.get_ext_command_GL_SGIX_pixel_tiles
    [
    ]
  end # self.get_ext_command_GL_SGIX_pixel_tiles


  def self.define_ext_command_GL_SGIX_polynomial_ffd
    GL::GL_FUNCTION_SYMBOLS << :glDeformationMap3dSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeformationMap3dSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeformationMap3dSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeformationMap3dSGIX)
    GL.module_eval(<<-SRC)
      def self.DeformationMap3dSGIX(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
        GL_FUNCTIONS_MAP[:glDeformationMap3dSGIX].call(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeformationMap3fSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeformationMap3fSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeformationMap3fSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeformationMap3fSGIX)
    GL.module_eval(<<-SRC)
      def self.DeformationMap3fSGIX(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
        GL_FUNCTIONS_MAP[:glDeformationMap3fSGIX].call(_target_, _u1_, _u2_, _ustride_, _uorder_, _v1_, _v2_, _vstride_, _vorder_, _w1_, _w2_, _wstride_, _worder_, _points_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glDeformSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glDeformSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDeformSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glDeformSGIX)
    GL.module_eval(<<-SRC)
      def self.DeformSGIX(_mask_)
        GL_FUNCTIONS_MAP[:glDeformSGIX].call(_mask_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glLoadIdentityDeformationMapSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glLoadIdentityDeformationMapSGIX] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glLoadIdentityDeformationMapSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glLoadIdentityDeformationMapSGIX)
    GL.module_eval(<<-SRC)
      def self.LoadIdentityDeformationMapSGIX(_mask_)
        GL_FUNCTIONS_MAP[:glLoadIdentityDeformationMapSGIX].call(_mask_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_polynomial_ffd

  def self.get_ext_command_GL_SGIX_polynomial_ffd
    [
      'glDeformationMap3dSGIX',
      'glDeformationMap3fSGIX',
      'glDeformSGIX',
      'glLoadIdentityDeformationMapSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_polynomial_ffd


  def self.define_ext_command_GL_SGIX_reference_plane
    GL::GL_FUNCTION_SYMBOLS << :glReferencePlaneSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glReferencePlaneSGIX] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReferencePlaneSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glReferencePlaneSGIX)
    GL.module_eval(<<-SRC)
      def self.ReferencePlaneSGIX(_equation_)
        GL_FUNCTIONS_MAP[:glReferencePlaneSGIX].call(_equation_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_reference_plane

  def self.get_ext_command_GL_SGIX_reference_plane
    [
      'glReferencePlaneSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_reference_plane


  def self.define_ext_command_GL_SGIX_resample
  end # self.define_ext_command_GL_SGIX_resample

  def self.get_ext_command_GL_SGIX_resample
    [
    ]
  end # self.get_ext_command_GL_SGIX_resample


  def self.define_ext_command_GL_SGIX_scalebias_hint
  end # self.define_ext_command_GL_SGIX_scalebias_hint

  def self.get_ext_command_GL_SGIX_scalebias_hint
    [
    ]
  end # self.get_ext_command_GL_SGIX_scalebias_hint


  def self.define_ext_command_GL_SGIX_shadow
  end # self.define_ext_command_GL_SGIX_shadow

  def self.get_ext_command_GL_SGIX_shadow
    [
    ]
  end # self.get_ext_command_GL_SGIX_shadow


  def self.define_ext_command_GL_SGIX_shadow_ambient
  end # self.define_ext_command_GL_SGIX_shadow_ambient

  def self.get_ext_command_GL_SGIX_shadow_ambient
    [
    ]
  end # self.get_ext_command_GL_SGIX_shadow_ambient


  def self.define_ext_command_GL_SGIX_sprite
    GL::GL_FUNCTION_SYMBOLS << :glSpriteParameterfSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glSpriteParameterfSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSpriteParameterfSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glSpriteParameterfSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameterfSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glSpriteParameterfSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSpriteParameterfvSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glSpriteParameterfvSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSpriteParameterfvSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glSpriteParameterfvSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameterfvSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glSpriteParameterfvSGIX].call(_pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSpriteParameteriSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glSpriteParameteriSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSpriteParameteriSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glSpriteParameteriSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameteriSGIX(_pname_, _param_)
        GL_FUNCTIONS_MAP[:glSpriteParameteriSGIX].call(_pname_, _param_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glSpriteParameterivSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glSpriteParameterivSGIX] = [-Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glSpriteParameterivSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glSpriteParameterivSGIX)
    GL.module_eval(<<-SRC)
      def self.SpriteParameterivSGIX(_pname_, _params_)
        GL_FUNCTIONS_MAP[:glSpriteParameterivSGIX].call(_pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGIX_sprite

  def self.get_ext_command_GL_SGIX_sprite
    [
      'glSpriteParameterfSGIX',
      'glSpriteParameterfvSGIX',
      'glSpriteParameteriSGIX',
      'glSpriteParameterivSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_sprite


  def self.define_ext_command_GL_SGIX_subsample
  end # self.define_ext_command_GL_SGIX_subsample

  def self.get_ext_command_GL_SGIX_subsample
    [
    ]
  end # self.get_ext_command_GL_SGIX_subsample


  def self.define_ext_command_GL_SGIX_tag_sample_buffer
    GL::GL_FUNCTION_SYMBOLS << :glTagSampleBufferSGIX
    GL::GL_FUNCTIONS_ARGS_MAP[:glTagSampleBufferSGIX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTagSampleBufferSGIX] = Fiddle::TYPE_VOID
    GL.bind_command(:glTagSampleBufferSGIX)
    GL.module_eval(<<-SRC)
      def self.TagSampleBufferSGIX()
        GL_FUNCTIONS_MAP[:glTagSampleBufferSGIX].call()
      end
    SRC
  end # self.define_ext_command_GL_SGIX_tag_sample_buffer

  def self.get_ext_command_GL_SGIX_tag_sample_buffer
    [
      'glTagSampleBufferSGIX',
    ]
  end # self.get_ext_command_GL_SGIX_tag_sample_buffer


  def self.define_ext_command_GL_SGIX_texture_add_env
  end # self.define_ext_command_GL_SGIX_texture_add_env

  def self.get_ext_command_GL_SGIX_texture_add_env
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_add_env


  def self.define_ext_command_GL_SGIX_texture_coordinate_clamp
  end # self.define_ext_command_GL_SGIX_texture_coordinate_clamp

  def self.get_ext_command_GL_SGIX_texture_coordinate_clamp
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_coordinate_clamp


  def self.define_ext_command_GL_SGIX_texture_lod_bias
  end # self.define_ext_command_GL_SGIX_texture_lod_bias

  def self.get_ext_command_GL_SGIX_texture_lod_bias
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_lod_bias


  def self.define_ext_command_GL_SGIX_texture_multi_buffer
  end # self.define_ext_command_GL_SGIX_texture_multi_buffer

  def self.get_ext_command_GL_SGIX_texture_multi_buffer
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_multi_buffer


  def self.define_ext_command_GL_SGIX_texture_scale_bias
  end # self.define_ext_command_GL_SGIX_texture_scale_bias

  def self.get_ext_command_GL_SGIX_texture_scale_bias
    [
    ]
  end # self.get_ext_command_GL_SGIX_texture_scale_bias


  def self.define_ext_command_GL_SGIX_vertex_preclip
  end # self.define_ext_command_GL_SGIX_vertex_preclip

  def self.get_ext_command_GL_SGIX_vertex_preclip
    [
    ]
  end # self.get_ext_command_GL_SGIX_vertex_preclip


  def self.define_ext_command_GL_SGIX_ycrcb
  end # self.define_ext_command_GL_SGIX_ycrcb

  def self.get_ext_command_GL_SGIX_ycrcb
    [
    ]
  end # self.get_ext_command_GL_SGIX_ycrcb


  def self.define_ext_command_GL_SGIX_ycrcb_subsample
  end # self.define_ext_command_GL_SGIX_ycrcb_subsample

  def self.get_ext_command_GL_SGIX_ycrcb_subsample
    [
    ]
  end # self.get_ext_command_GL_SGIX_ycrcb_subsample


  def self.define_ext_command_GL_SGIX_ycrcba
  end # self.define_ext_command_GL_SGIX_ycrcba

  def self.get_ext_command_GL_SGIX_ycrcba
    [
    ]
  end # self.get_ext_command_GL_SGIX_ycrcba


  def self.define_ext_command_GL_SGI_color_matrix
  end # self.define_ext_command_GL_SGI_color_matrix

  def self.get_ext_command_GL_SGI_color_matrix
    [
    ]
  end # self.get_ext_command_GL_SGI_color_matrix


  def self.define_ext_command_GL_SGI_color_table
    GL::GL_FUNCTION_SYMBOLS << :glColorTableSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTableSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTableSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTableSGI)
    GL.module_eval(<<-SRC)
      def self.ColorTableSGI(_target_, _internalformat_, _width_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:glColorTableSGI].call(_target_, _internalformat_, _width_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorTableParameterfvSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTableParameterfvSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTableParameterfvSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTableParameterfvSGI)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameterfvSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glColorTableParameterfvSGI].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColorTableParameterivSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glColorTableParameterivSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColorTableParameterivSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glColorTableParameterivSGI)
    GL.module_eval(<<-SRC)
      def self.ColorTableParameterivSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glColorTableParameterivSGI].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glCopyColorTableSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glCopyColorTableSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glCopyColorTableSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glCopyColorTableSGI)
    GL.module_eval(<<-SRC)
      def self.CopyColorTableSGI(_target_, _internalformat_, _x_, _y_, _width_)
        GL_FUNCTIONS_MAP[:glCopyColorTableSGI].call(_target_, _internalformat_, _x_, _y_, _width_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableSGI)
    GL.module_eval(<<-SRC)
      def self.GetColorTableSGI(_target_, _format_, _type_, _table_)
        GL_FUNCTIONS_MAP[:glGetColorTableSGI].call(_target_, _format_, _type_, _table_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableParameterfvSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableParameterfvSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableParameterfvSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableParameterfvSGI)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterfvSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetColorTableParameterfvSGI].call(_target_, _pname_, _params_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGetColorTableParameterivSGI
    GL::GL_FUNCTIONS_ARGS_MAP[:glGetColorTableParameterivSGI] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGetColorTableParameterivSGI] = Fiddle::TYPE_VOID
    GL.bind_command(:glGetColorTableParameterivSGI)
    GL.module_eval(<<-SRC)
      def self.GetColorTableParameterivSGI(_target_, _pname_, _params_)
        GL_FUNCTIONS_MAP[:glGetColorTableParameterivSGI].call(_target_, _pname_, _params_)
      end
    SRC
  end # self.define_ext_command_GL_SGI_color_table

  def self.get_ext_command_GL_SGI_color_table
    [
      'glColorTableSGI',
      'glColorTableParameterfvSGI',
      'glColorTableParameterivSGI',
      'glCopyColorTableSGI',
      'glGetColorTableSGI',
      'glGetColorTableParameterfvSGI',
      'glGetColorTableParameterivSGI',
    ]
  end # self.get_ext_command_GL_SGI_color_table


  def self.define_ext_command_GL_SGI_texture_color_table
  end # self.define_ext_command_GL_SGI_texture_color_table

  def self.get_ext_command_GL_SGI_texture_color_table
    [
    ]
  end # self.get_ext_command_GL_SGI_texture_color_table


  def self.define_ext_command_GL_SUNX_constant_data
    GL::GL_FUNCTION_SYMBOLS << :glFinishTextureSUNX
    GL::GL_FUNCTIONS_ARGS_MAP[:glFinishTextureSUNX] = []
    GL::GL_FUNCTIONS_RETVAL_MAP[:glFinishTextureSUNX] = Fiddle::TYPE_VOID
    GL.bind_command(:glFinishTextureSUNX)
    GL.module_eval(<<-SRC)
      def self.FinishTextureSUNX()
        GL_FUNCTIONS_MAP[:glFinishTextureSUNX].call()
      end
    SRC
  end # self.define_ext_command_GL_SUNX_constant_data

  def self.get_ext_command_GL_SUNX_constant_data
    [
      'glFinishTextureSUNX',
    ]
  end # self.get_ext_command_GL_SUNX_constant_data


  def self.define_ext_command_GL_SUN_convolution_border_modes
  end # self.define_ext_command_GL_SUN_convolution_border_modes

  def self.get_ext_command_GL_SUN_convolution_border_modes
    [
    ]
  end # self.get_ext_command_GL_SUN_convolution_border_modes


  def self.define_ext_command_GL_SUN_global_alpha
    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactorbSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactorbSUN] = [Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactorbSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactorbSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorbSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactorbSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactorsSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactorsSUN] = [Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactorsSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactorsSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorsSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactorsSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactoriSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactoriSUN] = [Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactoriSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactoriSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactoriSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactoriSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactorfSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactorfSUN] = [Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactorfSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactorfSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorfSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactorfSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactordSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactordSUN] = [Fiddle::TYPE_DOUBLE]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactordSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactordSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactordSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactordSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactorubSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactorubSUN] = [-Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactorubSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactorubSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorubSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactorubSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactorusSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactorusSUN] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactorusSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactorusSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactorusSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactorusSUN].call(_factor_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glGlobalAlphaFactoruiSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glGlobalAlphaFactoruiSUN] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glGlobalAlphaFactoruiSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glGlobalAlphaFactoruiSUN)
    GL.module_eval(<<-SRC)
      def self.GlobalAlphaFactoruiSUN(_factor_)
        GL_FUNCTIONS_MAP[:glGlobalAlphaFactoruiSUN].call(_factor_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_global_alpha

  def self.get_ext_command_GL_SUN_global_alpha
    [
      'glGlobalAlphaFactorbSUN',
      'glGlobalAlphaFactorsSUN',
      'glGlobalAlphaFactoriSUN',
      'glGlobalAlphaFactorfSUN',
      'glGlobalAlphaFactordSUN',
      'glGlobalAlphaFactorubSUN',
      'glGlobalAlphaFactorusSUN',
      'glGlobalAlphaFactoruiSUN',
    ]
  end # self.get_ext_command_GL_SUN_global_alpha


  def self.define_ext_command_GL_SUN_mesh_array
    GL::GL_FUNCTION_SYMBOLS << :glDrawMeshArraysSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glDrawMeshArraysSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glDrawMeshArraysSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glDrawMeshArraysSUN)
    GL.module_eval(<<-SRC)
      def self.DrawMeshArraysSUN(_mode_, _first_, _count_, _width_)
        GL_FUNCTIONS_MAP[:glDrawMeshArraysSUN].call(_mode_, _first_, _count_, _width_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_mesh_array

  def self.get_ext_command_GL_SUN_mesh_array
    [
      'glDrawMeshArraysSUN',
    ]
  end # self.get_ext_command_GL_SUN_mesh_array


  def self.define_ext_command_GL_SUN_slice_accum
  end # self.define_ext_command_GL_SUN_slice_accum

  def self.get_ext_command_GL_SUN_slice_accum
    [
    ]
  end # self.get_ext_command_GL_SUN_slice_accum


  def self.define_ext_command_GL_SUN_triangle_list
    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiSUN] = [-Fiddle::TYPE_INT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiSUN(_code_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeusSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeusSUN] = [-Fiddle::TYPE_SHORT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeusSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeusSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeusSUN(_code_)
        GL_FUNCTIONS_MAP[:glReplacementCodeusSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeubSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeubSUN] = [-Fiddle::TYPE_CHAR]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeubSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeubSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeubSUN(_code_)
        GL_FUNCTIONS_MAP[:glReplacementCodeubSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuivSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuivSUN] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuivSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuivSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuivSUN(_code_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuivSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeusvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeusvSUN] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeusvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeusvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeusvSUN(_code_)
        GL_FUNCTIONS_MAP[:glReplacementCodeusvSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeubvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeubvSUN] = [Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeubvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeubvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeubvSUN(_code_)
        GL_FUNCTIONS_MAP[:glReplacementCodeubvSUN].call(_code_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodePointerSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodePointerSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodePointerSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodePointerSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodePointerSUN(_type_, _stride_, _pointer_)
        GL_FUNCTIONS_MAP[:glReplacementCodePointerSUN].call(_type_, _stride_, _pointer_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_triangle_list

  def self.get_ext_command_GL_SUN_triangle_list
    [
      'glReplacementCodeuiSUN',
      'glReplacementCodeusSUN',
      'glReplacementCodeubSUN',
      'glReplacementCodeuivSUN',
      'glReplacementCodeusvSUN',
      'glReplacementCodeubvSUN',
      'glReplacementCodePointerSUN',
    ]
  end # self.get_ext_command_GL_SUN_triangle_list


  def self.define_ext_command_GL_SUN_vertex
    GL::GL_FUNCTION_SYMBOLS << :glColor4ubVertex2fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4ubVertex2fSUN] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4ubVertex2fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4ubVertex2fSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex2fSUN(_r_, _g_, _b_, _a_, _x_, _y_)
        GL_FUNCTIONS_MAP[:glColor4ubVertex2fSUN].call(_r_, _g_, _b_, _a_, _x_, _y_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4ubVertex2fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4ubVertex2fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4ubVertex2fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4ubVertex2fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex2fvSUN(_c_, _v_)
        GL_FUNCTIONS_MAP[:glColor4ubVertex2fvSUN].call(_c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4ubVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4ubVertex3fSUN] = [-Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4ubVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4ubVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex3fSUN(_r_, _g_, _b_, _a_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glColor4ubVertex3fSUN].call(_r_, _g_, _b_, _a_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4ubVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4ubVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4ubVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4ubVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color4ubVertex3fvSUN(_c_, _v_)
        GL_FUNCTIONS_MAP[:glColor4ubVertex3fvSUN].call(_c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Color3fVertex3fSUN(_r_, _g_, _b_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glColor3fVertex3fSUN].call(_r_, _g_, _b_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color3fVertex3fvSUN(_c_, _v_)
        GL_FUNCTIONS_MAP[:glColor3fVertex3fvSUN].call(_c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Normal3fVertex3fSUN(_nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glNormal3fVertex3fSUN].call(_nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Normal3fVertex3fvSUN(_n_, _v_)
        GL_FUNCTIONS_MAP[:glNormal3fVertex3fvSUN].call(_n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4fNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.Color4fNormal3fVertex3fSUN(_r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glColor4fNormal3fVertex3fSUN].call(_r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.Color4fNormal3fVertex3fvSUN(_c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glColor4fNormal3fVertex3fvSUN].call(_c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fVertex3fSUN(_s_, _t_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glTexCoord2fVertex3fSUN].call(_s_, _t_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fVertex3fvSUN(_tc_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord2fVertex3fvSUN].call(_tc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4fVertex4fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4fVertex4fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4fVertex4fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4fVertex4fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fVertex4fSUN(_s_, _t_, _p_, _q_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glTexCoord4fVertex4fSUN].call(_s_, _t_, _p_, _q_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4fVertex4fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4fVertex4fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4fVertex4fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4fVertex4fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fVertex4fvSUN(_tc_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord4fVertex4fvSUN].call(_tc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fColor4ubVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fColor4ubVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fColor4ubVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fColor4ubVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4ubVertex3fSUN(_s_, _t_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glTexCoord2fColor4ubVertex3fSUN].call(_s_, _t_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fColor4ubVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fColor4ubVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fColor4ubVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fColor4ubVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4ubVertex3fvSUN(_tc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord2fColor4ubVertex3fvSUN].call(_tc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fColor3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fColor3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fColor3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fColor3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor3fVertex3fSUN(_s_, _t_, _r_, _g_, _b_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glTexCoord2fColor3fVertex3fSUN].call(_s_, _t_, _r_, _g_, _b_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fColor3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fColor3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fColor3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fColor3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor3fVertex3fvSUN(_tc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord2fColor3fVertex3fvSUN].call(_tc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fNormal3fVertex3fSUN(_s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glTexCoord2fNormal3fVertex3fSUN].call(_s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fNormal3fVertex3fvSUN(_tc_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord2fNormal3fVertex3fvSUN].call(_tc_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fColor4fNormal3fVertex3fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4fNormal3fVertex3fSUN(_s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glTexCoord2fColor4fNormal3fVertex3fSUN].call(_s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord2fColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord2fColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord2fColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord2fColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord2fColor4fNormal3fVertex3fvSUN(_tc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord2fColor4fNormal3fVertex3fvSUN].call(_tc_, _c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4fColor4fNormal3fVertex4fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4fColor4fNormal3fVertex4fSUN] = [Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4fColor4fNormal3fVertex4fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4fColor4fNormal3fVertex4fSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fColor4fNormal3fVertex4fSUN(_s_, _t_, _p_, _q_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_, _w_)
        GL_FUNCTIONS_MAP[:glTexCoord4fColor4fNormal3fVertex4fSUN].call(_s_, _t_, _p_, _q_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_, _w_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glTexCoord4fColor4fNormal3fVertex4fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glTexCoord4fColor4fNormal3fVertex4fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glTexCoord4fColor4fNormal3fVertex4fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glTexCoord4fColor4fNormal3fVertex4fvSUN)
    GL.module_eval(<<-SRC)
      def self.TexCoord4fColor4fNormal3fVertex4fvSUN(_tc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glTexCoord4fColor4fNormal3fVertex4fvSUN].call(_tc_, _c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiVertex3fSUN(_rc_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiVertex3fSUN].call(_rc_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiVertex3fvSUN(_rc_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiVertex3fvSUN].call(_rc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiColor4ubVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiColor4ubVertex3fSUN] = [-Fiddle::TYPE_INT, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, -Fiddle::TYPE_CHAR, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiColor4ubVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiColor4ubVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4ubVertex3fSUN(_rc_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiColor4ubVertex3fSUN].call(_rc_, _r_, _g_, _b_, _a_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiColor4ubVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiColor4ubVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiColor4ubVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiColor4ubVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4ubVertex3fvSUN(_rc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiColor4ubVertex3fvSUN].call(_rc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiColor3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiColor3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiColor3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiColor3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor3fVertex3fSUN(_rc_, _r_, _g_, _b_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiColor3fVertex3fSUN].call(_rc_, _r_, _g_, _b_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiColor3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiColor3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiColor3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiColor3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor3fVertex3fvSUN(_rc_, _c_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiColor3fVertex3fvSUN].call(_rc_, _c_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiNormal3fVertex3fSUN(_rc_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiNormal3fVertex3fSUN].call(_rc_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiNormal3fVertex3fvSUN(_rc_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiNormal3fVertex3fvSUN].call(_rc_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiColor4fNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4fNormal3fVertex3fSUN(_rc_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiColor4fNormal3fVertex3fSUN].call(_rc_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiColor4fNormal3fVertex3fvSUN(_rc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiColor4fNormal3fVertex3fvSUN].call(_rc_, _c_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiTexCoord2fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiTexCoord2fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiTexCoord2fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiTexCoord2fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fVertex3fSUN(_rc_, _s_, _t_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiTexCoord2fVertex3fSUN].call(_rc_, _s_, _t_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiTexCoord2fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiTexCoord2fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiTexCoord2fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiTexCoord2fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fVertex3fvSUN(_rc_, _tc_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiTexCoord2fVertex3fvSUN].call(_rc_, _tc_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(_rc_, _s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN].call(_rc_, _s_, _t_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(_rc_, _tc_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN].call(_rc_, _tc_, _n_, _v_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN] = [-Fiddle::TYPE_INT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT, Fiddle::TYPE_FLOAT]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(_rc_, _s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN].call(_rc_, _s_, _t_, _r_, _g_, _b_, _a_, _nx_, _ny_, _nz_, _x_, _y_, _z_)
      end
    SRC

    GL::GL_FUNCTION_SYMBOLS << :glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
    GL::GL_FUNCTIONS_ARGS_MAP[:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN] = [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]
    GL::GL_FUNCTIONS_RETVAL_MAP[:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN] = Fiddle::TYPE_VOID
    GL.bind_command(:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
    GL.module_eval(<<-SRC)
      def self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(_rc_, _tc_, _c_, _n_, _v_)
        GL_FUNCTIONS_MAP[:glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN].call(_rc_, _tc_, _c_, _n_, _v_)
      end
    SRC
  end # self.define_ext_command_GL_SUN_vertex

  def self.get_ext_command_GL_SUN_vertex
    [
      'glColor4ubVertex2fSUN',
      'glColor4ubVertex2fvSUN',
      'glColor4ubVertex3fSUN',
      'glColor4ubVertex3fvSUN',
      'glColor3fVertex3fSUN',
      'glColor3fVertex3fvSUN',
      'glNormal3fVertex3fSUN',
      'glNormal3fVertex3fvSUN',
      'glColor4fNormal3fVertex3fSUN',
      'glColor4fNormal3fVertex3fvSUN',
      'glTexCoord2fVertex3fSUN',
      'glTexCoord2fVertex3fvSUN',
      'glTexCoord4fVertex4fSUN',
      'glTexCoord4fVertex4fvSUN',
      'glTexCoord2fColor4ubVertex3fSUN',
      'glTexCoord2fColor4ubVertex3fvSUN',
      'glTexCoord2fColor3fVertex3fSUN',
      'glTexCoord2fColor3fVertex3fvSUN',
      'glTexCoord2fNormal3fVertex3fSUN',
      'glTexCoord2fNormal3fVertex3fvSUN',
      'glTexCoord2fColor4fNormal3fVertex3fSUN',
      'glTexCoord2fColor4fNormal3fVertex3fvSUN',
      'glTexCoord4fColor4fNormal3fVertex4fSUN',
      'glTexCoord4fColor4fNormal3fVertex4fvSUN',
      'glReplacementCodeuiVertex3fSUN',
      'glReplacementCodeuiVertex3fvSUN',
      'glReplacementCodeuiColor4ubVertex3fSUN',
      'glReplacementCodeuiColor4ubVertex3fvSUN',
      'glReplacementCodeuiColor3fVertex3fSUN',
      'glReplacementCodeuiColor3fVertex3fvSUN',
      'glReplacementCodeuiNormal3fVertex3fSUN',
      'glReplacementCodeuiNormal3fVertex3fvSUN',
      'glReplacementCodeuiColor4fNormal3fVertex3fSUN',
      'glReplacementCodeuiColor4fNormal3fVertex3fvSUN',
      'glReplacementCodeuiTexCoord2fVertex3fSUN',
      'glReplacementCodeuiTexCoord2fVertex3fvSUN',
      'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN',
      'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN',
      'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN',
      'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN',
    ]
  end # self.get_ext_command_GL_SUN_vertex


  def self.define_ext_command_GL_WIN_phong_shading
  end # self.define_ext_command_GL_WIN_phong_shading

  def self.get_ext_command_GL_WIN_phong_shading
    [
    ]
  end # self.get_ext_command_GL_WIN_phong_shading


  def self.define_ext_command_GL_WIN_specular_fog
  end # self.define_ext_command_GL_WIN_specular_fog

  def self.get_ext_command_GL_WIN_specular_fog
    [
    ]
  end # self.get_ext_command_GL_WIN_specular_fog


  def self.define_ext_command_GL_EXT_texture_shadow_lod
  end # self.define_ext_command_GL_EXT_texture_shadow_lod

  def self.get_ext_command_GL_EXT_texture_shadow_lod
    [
    ]
  end # self.get_ext_command_GL_EXT_texture_shadow_lod


end
